<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="8242"><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (1 samples, 0.01%)</title><rect x="0.0000%" y="1029" width="0.0121%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="0.0121%" y="1029" width="0.0121%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2621%" y="1039.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="0.0243%" y="1029" width="0.0243%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2743%" y="1039.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="0.0485%" y="1029" width="0.0121%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.2985%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="0.0607%" y="1029" width="0.0243%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="2"/><text x="0.3107%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="0.0607%" y="1013" width="0.0243%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="0.3107%" y="1023.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (2 samples, 0.02%)</title><rect x="0.0607%" y="997" width="0.0243%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="0.3107%" y="1007.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (2 samples, 0.02%)</title><rect x="0.0607%" y="981" width="0.0243%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="2"/><text x="0.3107%" y="991.50"></text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (2 samples, 0.02%)</title><rect x="0.0607%" y="965" width="0.0243%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="2"/><text x="0.3107%" y="975.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (2 samples, 0.02%)</title><rect x="0.0607%" y="949" width="0.0243%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="2"/><text x="0.3107%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="0.0607%" y="933" width="0.0243%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="2"/><text x="0.3107%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="0.0607%" y="917" width="0.0243%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="2"/><text x="0.3107%" y="927.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.0607%" y="901" width="0.0243%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="2"/><text x="0.3107%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="0.0607%" y="885" width="0.0243%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="2"/><text x="0.3107%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="0.0607%" y="869" width="0.0243%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="0.3107%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.01%)</title><rect x="0.0849%" y="1029" width="0.0121%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="0.3349%" y="1039.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (4 samples, 0.05%)</title><rect x="0.0971%" y="1029" width="0.0485%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="4"/><text x="0.3471%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.01%)</title><rect x="0.1577%" y="1013" width="0.0121%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="1"/><text x="0.4077%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.1577%" y="997" width="0.0121%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="1"/><text x="0.4077%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.1577%" y="981" width="0.0121%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="1"/><text x="0.4077%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.1577%" y="965" width="0.0121%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="1"/><text x="0.4077%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="0.1577%" y="949" width="0.0121%" height="15" fill="rgb(235,183,28)" fg:x="13" fg:w="1"/><text x="0.4077%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="0.1577%" y="933" width="0.0121%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="1"/><text x="0.4077%" y="943.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (3 samples, 0.04%)</title><rect x="0.1456%" y="1029" width="0.0364%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="3"/><text x="0.3956%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (1 samples, 0.01%)</title><rect x="0.1699%" y="1013" width="0.0121%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="1"/><text x="0.4199%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (1 samples, 0.01%)</title><rect x="0.1699%" y="997" width="0.0121%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="1"/><text x="0.4199%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="0.1699%" y="981" width="0.0121%" height="15" fill="rgb(225,111,53)" fg:x="14" fg:w="1"/><text x="0.4199%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (1 samples, 0.01%)</title><rect x="0.1699%" y="965" width="0.0121%" height="15" fill="rgb(238,160,17)" fg:x="14" fg:w="1"/><text x="0.4199%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.1699%" y="949" width="0.0121%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="1"/><text x="0.4199%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="0.1699%" y="933" width="0.0121%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="1"/><text x="0.4199%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.01%)</title><rect x="0.1699%" y="917" width="0.0121%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="1"/><text x="0.4199%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.01%)</title><rect x="0.1699%" y="901" width="0.0121%" height="15" fill="rgb(229,88,8)" fg:x="14" fg:w="1"/><text x="0.4199%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.01%)</title><rect x="0.1699%" y="885" width="0.0121%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="1"/><text x="0.4199%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="0.1820%" y="1029" width="0.0121%" height="15" fill="rgb(254,191,54)" fg:x="15" fg:w="1"/><text x="0.4320%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="0.1820%" y="1013" width="0.0121%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="1"/><text x="0.4320%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.1820%" y="997" width="0.0121%" height="15" fill="rgb(233,36,39)" fg:x="15" fg:w="1"/><text x="0.4320%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.1820%" y="981" width="0.0121%" height="15" fill="rgb(226,3,54)" fg:x="15" fg:w="1"/><text x="0.4320%" y="991.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="0.1820%" y="965" width="0.0121%" height="15" fill="rgb(245,192,40)" fg:x="15" fg:w="1"/><text x="0.4320%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="0.1820%" y="949" width="0.0121%" height="15" fill="rgb(238,167,29)" fg:x="15" fg:w="1"/><text x="0.4320%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="0.1820%" y="933" width="0.0121%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="0.4320%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (1 samples, 0.01%)</title><rect x="0.1941%" y="1029" width="0.0121%" height="15" fill="rgb(231,60,39)" fg:x="16" fg:w="1"/><text x="0.4441%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="0.1941%" y="1013" width="0.0121%" height="15" fill="rgb(208,69,12)" fg:x="16" fg:w="1"/><text x="0.4441%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="0.1941%" y="997" width="0.0121%" height="15" fill="rgb(235,93,37)" fg:x="16" fg:w="1"/><text x="0.4441%" y="1007.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="0.1941%" y="981" width="0.0121%" height="15" fill="rgb(213,116,39)" fg:x="16" fg:w="1"/><text x="0.4441%" y="991.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.2184%" y="981" width="0.0121%" height="15" fill="rgb(222,207,29)" fg:x="18" fg:w="1"/><text x="0.4684%" y="991.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.2184%" y="965" width="0.0121%" height="15" fill="rgb(206,96,30)" fg:x="18" fg:w="1"/><text x="0.4684%" y="975.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="0.2184%" y="949" width="0.0121%" height="15" fill="rgb(218,138,4)" fg:x="18" fg:w="1"/><text x="0.4684%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="0.2184%" y="933" width="0.0121%" height="15" fill="rgb(250,191,14)" fg:x="18" fg:w="1"/><text x="0.4684%" y="943.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="0.2184%" y="917" width="0.0121%" height="15" fill="rgb(239,60,40)" fg:x="18" fg:w="1"/><text x="0.4684%" y="927.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="0.2184%" y="901" width="0.0121%" height="15" fill="rgb(206,27,48)" fg:x="18" fg:w="1"/><text x="0.4684%" y="911.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (3 samples, 0.04%)</title><rect x="0.2063%" y="1029" width="0.0364%" height="15" fill="rgb(225,35,8)" fg:x="17" fg:w="3"/><text x="0.4563%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="0.2063%" y="1013" width="0.0364%" height="15" fill="rgb(250,213,24)" fg:x="17" fg:w="3"/><text x="0.4563%" y="1023.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="0.2063%" y="997" width="0.0364%" height="15" fill="rgb(247,123,22)" fg:x="17" fg:w="3"/><text x="0.4563%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="0.2305%" y="981" width="0.0121%" height="15" fill="rgb(231,138,38)" fg:x="19" fg:w="1"/><text x="0.4805%" y="991.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="0.2305%" y="965" width="0.0121%" height="15" fill="rgb(231,145,46)" fg:x="19" fg:w="1"/><text x="0.4805%" y="975.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.2548%" y="997" width="0.0121%" height="15" fill="rgb(251,118,11)" fg:x="21" fg:w="1"/><text x="0.5048%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.2548%" y="981" width="0.0121%" height="15" fill="rgb(217,147,25)" fg:x="21" fg:w="1"/><text x="0.5048%" y="991.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="0.2548%" y="965" width="0.0121%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="0.5048%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="0.2548%" y="949" width="0.0121%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="1"/><text x="0.5048%" y="959.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="0.2548%" y="933" width="0.0121%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="1"/><text x="0.5048%" y="943.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="0.2548%" y="917" width="0.0121%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="0.5048%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.05%)</title><rect x="0.2427%" y="1029" width="0.0485%" height="15" fill="rgb(221,10,30)" fg:x="20" fg:w="4"/><text x="0.4927%" y="1039.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="0.2427%" y="1013" width="0.0485%" height="15" fill="rgb(210,229,1)" fg:x="20" fg:w="4"/><text x="0.4927%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 0.02%)</title><rect x="0.2669%" y="997" width="0.0243%" height="15" fill="rgb(222,148,37)" fg:x="22" fg:w="2"/><text x="0.5169%" y="1007.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 0.02%)</title><rect x="0.2669%" y="981" width="0.0243%" height="15" fill="rgb(234,67,33)" fg:x="22" fg:w="2"/><text x="0.5169%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.02%)</title><rect x="0.2912%" y="1029" width="0.0243%" height="15" fill="rgb(247,98,35)" fg:x="24" fg:w="2"/><text x="0.5412%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.01%)</title><rect x="0.3033%" y="1013" width="0.0121%" height="15" fill="rgb(247,138,52)" fg:x="25" fg:w="1"/><text x="0.5533%" y="1023.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="0.3033%" y="997" width="0.0121%" height="15" fill="rgb(213,79,30)" fg:x="25" fg:w="1"/><text x="0.5533%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="0.3033%" y="981" width="0.0121%" height="15" fill="rgb(246,177,23)" fg:x="25" fg:w="1"/><text x="0.5533%" y="991.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (2 samples, 0.02%)</title><rect x="0.3155%" y="1029" width="0.0243%" height="15" fill="rgb(230,62,27)" fg:x="26" fg:w="2"/><text x="0.5655%" y="1039.50"></text></g><g><title>revm::context::Context&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="0.3276%" y="1013" width="0.0121%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="1"/><text x="0.5776%" y="1023.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_account (1 samples, 0.01%)</title><rect x="0.3519%" y="1013" width="0.0121%" height="15" fill="rgb(244,35,45)" fg:x="29" fg:w="1"/><text x="0.6019%" y="1023.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (3 samples, 0.04%)</title><rect x="0.3397%" y="1029" width="0.0364%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="3"/><text x="0.5897%" y="1039.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (1 samples, 0.01%)</title><rect x="0.3640%" y="1013" width="0.0121%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="1"/><text x="0.6140%" y="1023.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="0.3761%" y="1029" width="0.0243%" height="15" fill="rgb(233,84,52)" fg:x="31" fg:w="2"/><text x="0.6261%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="0.3761%" y="1013" width="0.0243%" height="15" fill="rgb(207,117,47)" fg:x="31" fg:w="2"/><text x="0.6261%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="0.3761%" y="997" width="0.0243%" height="15" fill="rgb(249,43,39)" fg:x="31" fg:w="2"/><text x="0.6261%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="0.3761%" y="981" width="0.0243%" height="15" fill="rgb(209,38,44)" fg:x="31" fg:w="2"/><text x="0.6261%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="0.3761%" y="965" width="0.0243%" height="15" fill="rgb(236,212,23)" fg:x="31" fg:w="2"/><text x="0.6261%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="0.3761%" y="949" width="0.0243%" height="15" fill="rgb(242,79,21)" fg:x="31" fg:w="2"/><text x="0.6261%" y="959.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="0.3761%" y="933" width="0.0243%" height="15" fill="rgb(211,96,35)" fg:x="31" fg:w="2"/><text x="0.6261%" y="943.50"></text></g><g><title>[[heap]] (36 samples, 0.44%)</title><rect x="0.0000%" y="1045" width="0.4368%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="36"/><text x="0.2500%" y="1055.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (3 samples, 0.04%)</title><rect x="0.4004%" y="1029" width="0.0364%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="3"/><text x="0.6504%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="0.4125%" y="1013" width="0.0243%" height="15" fill="rgb(208,190,38)" fg:x="34" fg:w="2"/><text x="0.6625%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="0.4125%" y="997" width="0.0243%" height="15" fill="rgb(235,213,38)" fg:x="34" fg:w="2"/><text x="0.6625%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="0.4125%" y="981" width="0.0243%" height="15" fill="rgb(237,122,38)" fg:x="34" fg:w="2"/><text x="0.6625%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="0.4125%" y="965" width="0.0243%" height="15" fill="rgb(244,218,35)" fg:x="34" fg:w="2"/><text x="0.6625%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="0.4125%" y="949" width="0.0243%" height="15" fill="rgb(240,68,47)" fg:x="34" fg:w="2"/><text x="0.6625%" y="959.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="0.4125%" y="933" width="0.0243%" height="15" fill="rgb(210,16,53)" fg:x="34" fg:w="2"/><text x="0.6625%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.4368%" y="1029" width="0.0121%" height="15" fill="rgb(235,124,12)" fg:x="36" fg:w="1"/><text x="0.6868%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.4368%" y="1013" width="0.0121%" height="15" fill="rgb(224,169,11)" fg:x="36" fg:w="1"/><text x="0.6868%" y="1023.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.4368%" y="997" width="0.0121%" height="15" fill="rgb(250,166,2)" fg:x="36" fg:w="1"/><text x="0.6868%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="0.4368%" y="981" width="0.0121%" height="15" fill="rgb(242,216,29)" fg:x="36" fg:w="1"/><text x="0.6868%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(alloy_primitives::bits::address::Address,revm_primitives::precompile::Precompile)&gt;&gt; (1 samples, 0.01%)</title><rect x="0.4368%" y="965" width="0.0121%" height="15" fill="rgb(230,116,27)" fg:x="36" fg:w="1"/><text x="0.6868%" y="975.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="0.4489%" y="1029" width="0.0121%" height="15" fill="rgb(228,99,48)" fg:x="37" fg:w="1"/><text x="0.6989%" y="1039.50"></text></g><g><title>__GI___libc_free (6 samples, 0.07%)</title><rect x="0.4611%" y="1029" width="0.0728%" height="15" fill="rgb(253,11,6)" fg:x="38" fg:w="6"/><text x="0.7111%" y="1039.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="0.5339%" y="1029" width="0.0364%" height="15" fill="rgb(247,143,39)" fg:x="44" fg:w="3"/><text x="0.7839%" y="1039.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="0.5702%" y="1029" width="0.0121%" height="15" fill="rgb(236,97,10)" fg:x="47" fg:w="1"/><text x="0.8202%" y="1039.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="0.5824%" y="1029" width="0.0485%" height="15" fill="rgb(233,208,19)" fg:x="48" fg:w="4"/><text x="0.8324%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.6309%" y="1013" width="0.0121%" height="15" fill="rgb(216,164,2)" fg:x="52" fg:w="1"/><text x="0.8809%" y="1023.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="0.6309%" y="1029" width="0.0243%" height="15" fill="rgb(220,129,5)" fg:x="52" fg:w="2"/><text x="0.8809%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.6430%" y="1013" width="0.0121%" height="15" fill="rgb(242,17,10)" fg:x="53" fg:w="1"/><text x="0.8930%" y="1023.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (1 samples, 0.01%)</title><rect x="0.6552%" y="1029" width="0.0121%" height="15" fill="rgb(242,107,0)" fg:x="54" fg:w="1"/><text x="0.9052%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.05%)</title><rect x="0.6673%" y="933" width="0.0485%" height="15" fill="rgb(251,28,31)" fg:x="55" fg:w="4"/><text x="0.9173%" y="943.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.05%)</title><rect x="0.6673%" y="917" width="0.0485%" height="15" fill="rgb(233,223,10)" fg:x="55" fg:w="4"/><text x="0.9173%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="0.6673%" y="997" width="0.0971%" height="15" fill="rgb(215,21,27)" fg:x="55" fg:w="8"/><text x="0.9173%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="0.6673%" y="981" width="0.0971%" height="15" fill="rgb(232,23,21)" fg:x="55" fg:w="8"/><text x="0.9173%" y="991.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.10%)</title><rect x="0.6673%" y="965" width="0.0971%" height="15" fill="rgb(244,5,23)" fg:x="55" fg:w="8"/><text x="0.9173%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.10%)</title><rect x="0.6673%" y="949" width="0.0971%" height="15" fill="rgb(226,81,46)" fg:x="55" fg:w="8"/><text x="0.9173%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.05%)</title><rect x="0.7158%" y="933" width="0.0485%" height="15" fill="rgb(247,70,30)" fg:x="59" fg:w="4"/><text x="0.9658%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.11%)</title><rect x="0.6673%" y="1029" width="0.1092%" height="15" fill="rgb(212,68,19)" fg:x="55" fg:w="9"/><text x="0.9173%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.11%)</title><rect x="0.6673%" y="1013" width="0.1092%" height="15" fill="rgb(240,187,13)" fg:x="55" fg:w="9"/><text x="0.9173%" y="1023.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="0.7644%" y="997" width="0.0121%" height="15" fill="rgb(223,113,26)" fg:x="63" fg:w="1"/><text x="1.0144%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.02%)</title><rect x="0.7765%" y="1029" width="0.0243%" height="15" fill="rgb(206,192,2)" fg:x="64" fg:w="2"/><text x="1.0265%" y="1039.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (1 samples, 0.01%)</title><rect x="0.7886%" y="1013" width="0.0121%" height="15" fill="rgb(241,108,4)" fg:x="65" fg:w="1"/><text x="1.0386%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.8008%" y="1029" width="0.0121%" height="15" fill="rgb(247,173,49)" fg:x="66" fg:w="1"/><text x="1.0508%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.8129%" y="1029" width="0.0121%" height="15" fill="rgb(224,114,35)" fg:x="67" fg:w="1"/><text x="1.0629%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::execution::call_return&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.8250%" y="1029" width="0.0121%" height="15" fill="rgb(245,159,27)" fg:x="68" fg:w="1"/><text x="1.0750%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::pre_execution::load_precompiles&lt;revm_primitives::specification::MergeSpec,revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.8372%" y="1029" width="0.0121%" height="15" fill="rgb(245,172,44)" fg:x="69" fg:w="1"/><text x="1.0872%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::validation::validate_env&lt;revm_primitives::specification::MergeSpec,revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.8493%" y="1029" width="0.0121%" height="15" fill="rgb(236,23,11)" fg:x="70" fg:w="1"/><text x="1.0993%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (1 samples, 0.01%)</title><rect x="0.8614%" y="1029" width="0.0121%" height="15" fill="rgb(205,117,38)" fg:x="71" fg:w="1"/><text x="1.1114%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.04%)</title><rect x="0.8736%" y="1029" width="0.0364%" height="15" fill="rgb(237,72,25)" fg:x="72" fg:w="3"/><text x="1.1236%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="0.9100%" y="1029" width="0.0121%" height="15" fill="rgb(244,70,9)" fg:x="75" fg:w="1"/><text x="1.1600%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.01%)</title><rect x="0.9100%" y="1013" width="0.0121%" height="15" fill="rgb(217,125,39)" fg:x="75" fg:w="1"/><text x="1.1600%" y="1023.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_ref_db (2 samples, 0.02%)</title><rect x="0.9221%" y="1029" width="0.0243%" height="15" fill="rgb(235,36,10)" fg:x="76" fg:w="2"/><text x="1.1721%" y="1039.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (1 samples, 0.01%)</title><rect x="0.9342%" y="1013" width="0.0121%" height="15" fill="rgb(251,123,47)" fg:x="77" fg:w="1"/><text x="1.1842%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.9342%" y="997" width="0.0121%" height="15" fill="rgb(221,13,13)" fg:x="77" fg:w="1"/><text x="1.1842%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="0.9342%" y="981" width="0.0121%" height="15" fill="rgb(238,131,9)" fg:x="77" fg:w="1"/><text x="1.1842%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="0.9342%" y="965" width="0.0121%" height="15" fill="rgb(211,50,8)" fg:x="77" fg:w="1"/><text x="1.1842%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="0.9342%" y="949" width="0.0121%" height="15" fill="rgb(245,182,24)" fg:x="77" fg:w="1"/><text x="1.1842%" y="959.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (1 samples, 0.01%)</title><rect x="0.9464%" y="1029" width="0.0121%" height="15" fill="rgb(242,14,37)" fg:x="78" fg:w="1"/><text x="1.1964%" y="1039.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="0.9464%" y="1013" width="0.0121%" height="15" fill="rgb(246,228,12)" fg:x="78" fg:w="1"/><text x="1.1964%" y="1023.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (1 samples, 0.01%)</title><rect x="0.9585%" y="1013" width="0.0121%" height="15" fill="rgb(213,55,15)" fg:x="79" fg:w="1"/><text x="1.2085%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.01%)</title><rect x="0.9585%" y="997" width="0.0121%" height="15" fill="rgb(209,9,3)" fg:x="79" fg:w="1"/><text x="1.2085%" y="1007.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.9585%" y="981" width="0.0121%" height="15" fill="rgb(230,59,30)" fg:x="79" fg:w="1"/><text x="1.2085%" y="991.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="0.9585%" y="965" width="0.0121%" height="15" fill="rgb(209,121,21)" fg:x="79" fg:w="1"/><text x="1.2085%" y="975.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="0.9585%" y="949" width="0.0121%" height="15" fill="rgb(220,109,13)" fg:x="79" fg:w="1"/><text x="1.2085%" y="959.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="0.9585%" y="933" width="0.0121%" height="15" fill="rgb(232,18,1)" fg:x="79" fg:w="1"/><text x="1.2085%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.01%)</title><rect x="0.9585%" y="917" width="0.0121%" height="15" fill="rgb(215,41,42)" fg:x="79" fg:w="1"/><text x="1.2085%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="0.9585%" y="901" width="0.0121%" height="15" fill="rgb(224,123,36)" fg:x="79" fg:w="1"/><text x="1.2085%" y="911.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (2 samples, 0.02%)</title><rect x="0.9585%" y="1029" width="0.0243%" height="15" fill="rgb(240,125,3)" fg:x="79" fg:w="2"/><text x="1.2085%" y="1039.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::deduct_caller (1 samples, 0.01%)</title><rect x="0.9706%" y="1013" width="0.0121%" height="15" fill="rgb(205,98,50)" fg:x="80" fg:w="1"/><text x="1.2206%" y="1023.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (4 samples, 0.05%)</title><rect x="0.9828%" y="1029" width="0.0485%" height="15" fill="rgb(205,185,37)" fg:x="81" fg:w="4"/><text x="1.2328%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="1.0070%" y="1013" width="0.0243%" height="15" fill="rgb(238,207,15)" fg:x="83" fg:w="2"/><text x="1.2570%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="1.0070%" y="997" width="0.0243%" height="15" fill="rgb(213,199,42)" fg:x="83" fg:w="2"/><text x="1.2570%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="1.0070%" y="981" width="0.0243%" height="15" fill="rgb(235,201,11)" fg:x="83" fg:w="2"/><text x="1.2570%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="1.0070%" y="965" width="0.0243%" height="15" fill="rgb(207,46,11)" fg:x="83" fg:w="2"/><text x="1.2570%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="1.0070%" y="949" width="0.0243%" height="15" fill="rgb(241,35,35)" fg:x="83" fg:w="2"/><text x="1.2570%" y="959.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="1.0070%" y="933" width="0.0243%" height="15" fill="rgb(243,32,47)" fg:x="83" fg:w="2"/><text x="1.2570%" y="943.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="1.0313%" y="1029" width="0.0121%" height="15" fill="rgb(247,202,23)" fg:x="85" fg:w="1"/><text x="1.2813%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="1.0313%" y="1013" width="0.0121%" height="15" fill="rgb(219,102,11)" fg:x="85" fg:w="1"/><text x="1.2813%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="1.0313%" y="997" width="0.0121%" height="15" fill="rgb(243,110,44)" fg:x="85" fg:w="1"/><text x="1.2813%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="1.0313%" y="981" width="0.0121%" height="15" fill="rgb(222,74,54)" fg:x="85" fg:w="1"/><text x="1.2813%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="1.0313%" y="965" width="0.0121%" height="15" fill="rgb(216,99,12)" fg:x="85" fg:w="1"/><text x="1.2813%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="1.0313%" y="949" width="0.0121%" height="15" fill="rgb(226,22,26)" fg:x="85" fg:w="1"/><text x="1.2813%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="1.0313%" y="933" width="0.0121%" height="15" fill="rgb(217,163,10)" fg:x="85" fg:w="1"/><text x="1.2813%" y="943.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (1 samples, 0.01%)</title><rect x="1.0434%" y="1029" width="0.0121%" height="15" fill="rgb(213,25,53)" fg:x="86" fg:w="1"/><text x="1.2934%" y="1039.50"></text></g><g><title>revm::frame::FrameResult::output (1 samples, 0.01%)</title><rect x="1.0434%" y="1013" width="0.0121%" height="15" fill="rgb(252,105,26)" fg:x="86" fg:w="1"/><text x="1.2934%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.0434%" y="997" width="0.0121%" height="15" fill="rgb(220,39,43)" fg:x="86" fg:w="1"/><text x="1.2934%" y="1007.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.0434%" y="981" width="0.0121%" height="15" fill="rgb(229,68,48)" fg:x="86" fg:w="1"/><text x="1.2934%" y="991.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (1 samples, 0.01%)</title><rect x="1.0556%" y="1029" width="0.0121%" height="15" fill="rgb(252,8,32)" fg:x="87" fg:w="1"/><text x="1.3056%" y="1039.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (1 samples, 0.01%)</title><rect x="1.0677%" y="1029" width="0.0121%" height="15" fill="rgb(223,20,43)" fg:x="88" fg:w="1"/><text x="1.3177%" y="1039.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (1 samples, 0.01%)</title><rect x="1.0677%" y="1013" width="0.0121%" height="15" fill="rgb(229,81,49)" fg:x="88" fg:w="1"/><text x="1.3177%" y="1023.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (1 samples, 0.01%)</title><rect x="1.0798%" y="1029" width="0.0121%" height="15" fill="rgb(236,28,36)" fg:x="89" fg:w="1"/><text x="1.3298%" y="1039.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.01%)</title><rect x="1.0798%" y="1013" width="0.0121%" height="15" fill="rgb(249,185,26)" fg:x="89" fg:w="1"/><text x="1.3298%" y="1023.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="1.0798%" y="997" width="0.0121%" height="15" fill="rgb(249,174,33)" fg:x="89" fg:w="1"/><text x="1.3298%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.01%)</title><rect x="1.0798%" y="981" width="0.0121%" height="15" fill="rgb(233,201,37)" fg:x="89" fg:w="1"/><text x="1.3298%" y="991.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="1.0798%" y="965" width="0.0121%" height="15" fill="rgb(221,78,26)" fg:x="89" fg:w="1"/><text x="1.3298%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="1.0798%" y="949" width="0.0121%" height="15" fill="rgb(250,127,30)" fg:x="89" fg:w="1"/><text x="1.3298%" y="959.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="1.0798%" y="933" width="0.0121%" height="15" fill="rgb(230,49,44)" fg:x="89" fg:w="1"/><text x="1.3298%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (1 samples, 0.01%)</title><rect x="1.0920%" y="1029" width="0.0121%" height="15" fill="rgb(229,67,23)" fg:x="90" fg:w="1"/><text x="1.3420%" y="1039.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.01%)</title><rect x="1.0920%" y="1013" width="0.0121%" height="15" fill="rgb(249,83,47)" fg:x="90" fg:w="1"/><text x="1.3420%" y="1023.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="1.0920%" y="997" width="0.0121%" height="15" fill="rgb(215,43,3)" fg:x="90" fg:w="1"/><text x="1.3420%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.01%)</title><rect x="1.0920%" y="981" width="0.0121%" height="15" fill="rgb(238,154,13)" fg:x="90" fg:w="1"/><text x="1.3420%" y="991.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="1.0920%" y="965" width="0.0121%" height="15" fill="rgb(219,56,2)" fg:x="90" fg:w="1"/><text x="1.3420%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="1.0920%" y="949" width="0.0121%" height="15" fill="rgb(233,0,4)" fg:x="90" fg:w="1"/><text x="1.3420%" y="959.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="1.0920%" y="933" width="0.0121%" height="15" fill="rgb(235,30,7)" fg:x="90" fg:w="1"/><text x="1.3420%" y="943.50"></text></g><g><title>[[stack]] (56 samples, 0.68%)</title><rect x="0.4368%" y="1045" width="0.6794%" height="15" fill="rgb(250,79,13)" fg:x="36" fg:w="56"/><text x="0.6868%" y="1055.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (1 samples, 0.01%)</title><rect x="1.1041%" y="1029" width="0.0121%" height="15" fill="rgb(211,146,34)" fg:x="91" fg:w="1"/><text x="1.3541%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.1162%" y="1029" width="0.0121%" height="15" fill="rgb(228,22,38)" fg:x="92" fg:w="1"/><text x="1.3662%" y="1039.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="1.1405%" y="1013" width="0.0121%" height="15" fill="rgb(235,168,5)" fg:x="94" fg:w="1"/><text x="1.3905%" y="1023.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1405%" y="997" width="0.0121%" height="15" fill="rgb(221,155,16)" fg:x="94" fg:w="1"/><text x="1.3905%" y="1007.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1405%" y="981" width="0.0121%" height="15" fill="rgb(215,215,53)" fg:x="94" fg:w="1"/><text x="1.3905%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.04%)</title><rect x="1.1284%" y="1029" width="0.0364%" height="15" fill="rgb(223,4,10)" fg:x="93" fg:w="3"/><text x="1.3784%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="1.1526%" y="1013" width="0.0121%" height="15" fill="rgb(234,103,6)" fg:x="95" fg:w="1"/><text x="1.4026%" y="1023.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="1.1526%" y="997" width="0.0121%" height="15" fill="rgb(227,97,0)" fg:x="95" fg:w="1"/><text x="1.4026%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="1.1526%" y="981" width="0.0121%" height="15" fill="rgb(234,150,53)" fg:x="95" fg:w="1"/><text x="1.4026%" y="991.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1526%" y="965" width="0.0121%" height="15" fill="rgb(228,201,54)" fg:x="95" fg:w="1"/><text x="1.4026%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1526%" y="949" width="0.0121%" height="15" fill="rgb(222,22,37)" fg:x="95" fg:w="1"/><text x="1.4026%" y="959.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1526%" y="933" width="0.0121%" height="15" fill="rgb(237,53,32)" fg:x="95" fg:w="1"/><text x="1.4026%" y="943.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.01%)</title><rect x="1.1648%" y="1013" width="0.0121%" height="15" fill="rgb(233,25,53)" fg:x="96" fg:w="1"/><text x="1.4148%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.01%)</title><rect x="1.1648%" y="997" width="0.0121%" height="15" fill="rgb(210,40,34)" fg:x="96" fg:w="1"/><text x="1.4148%" y="1007.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (2 samples, 0.02%)</title><rect x="1.1648%" y="1029" width="0.0243%" height="15" fill="rgb(241,220,44)" fg:x="96" fg:w="2"/><text x="1.4148%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.01%)</title><rect x="1.1769%" y="1013" width="0.0121%" height="15" fill="rgb(235,28,35)" fg:x="97" fg:w="1"/><text x="1.4269%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.01%)</title><rect x="1.1769%" y="997" width="0.0121%" height="15" fill="rgb(210,56,17)" fg:x="97" fg:w="1"/><text x="1.4269%" y="1007.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="1.1769%" y="981" width="0.0121%" height="15" fill="rgb(224,130,29)" fg:x="97" fg:w="1"/><text x="1.4269%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="1.1769%" y="965" width="0.0121%" height="15" fill="rgb(235,212,8)" fg:x="97" fg:w="1"/><text x="1.4269%" y="975.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="1.1769%" y="949" width="0.0121%" height="15" fill="rgb(223,33,50)" fg:x="97" fg:w="1"/><text x="1.4269%" y="959.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.2133%" y="949" width="0.0121%" height="15" fill="rgb(219,149,13)" fg:x="100" fg:w="1"/><text x="1.4633%" y="959.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.2133%" y="933" width="0.0121%" height="15" fill="rgb(250,156,29)" fg:x="100" fg:w="1"/><text x="1.4633%" y="943.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.2133%" y="917" width="0.0121%" height="15" fill="rgb(216,193,19)" fg:x="100" fg:w="1"/><text x="1.4633%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.2133%" y="901" width="0.0121%" height="15" fill="rgb(216,135,14)" fg:x="100" fg:w="1"/><text x="1.4633%" y="911.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.2133%" y="885" width="0.0121%" height="15" fill="rgb(241,47,5)" fg:x="100" fg:w="1"/><text x="1.4633%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="1.1890%" y="1029" width="0.0485%" height="15" fill="rgb(233,42,35)" fg:x="98" fg:w="4"/><text x="1.4390%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (2 samples, 0.02%)</title><rect x="1.2133%" y="1013" width="0.0243%" height="15" fill="rgb(231,13,6)" fg:x="100" fg:w="2"/><text x="1.4633%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2 samples, 0.02%)</title><rect x="1.2133%" y="997" width="0.0243%" height="15" fill="rgb(207,181,40)" fg:x="100" fg:w="2"/><text x="1.4633%" y="1007.50"></text></g><g><title>core::clone::Clone::clone (2 samples, 0.02%)</title><rect x="1.2133%" y="981" width="0.0243%" height="15" fill="rgb(254,173,49)" fg:x="100" fg:w="2"/><text x="1.4633%" y="991.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.2133%" y="965" width="0.0243%" height="15" fill="rgb(221,1,38)" fg:x="100" fg:w="2"/><text x="1.4633%" y="975.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.2254%" y="949" width="0.0121%" height="15" fill="rgb(206,124,46)" fg:x="101" fg:w="1"/><text x="1.4754%" y="959.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1.2254%" y="933" width="0.0121%" height="15" fill="rgb(249,21,11)" fg:x="101" fg:w="1"/><text x="1.4754%" y="943.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (1 samples, 0.01%)</title><rect x="1.2376%" y="1029" width="0.0121%" height="15" fill="rgb(222,201,40)" fg:x="102" fg:w="1"/><text x="1.4876%" y="1039.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="1.2497%" y="1029" width="0.0121%" height="15" fill="rgb(235,61,29)" fg:x="103" fg:w="1"/><text x="1.4997%" y="1039.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="1.2618%" y="1029" width="0.0364%" height="15" fill="rgb(219,207,3)" fg:x="104" fg:w="3"/><text x="1.5118%" y="1039.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="1.2982%" y="1029" width="0.0243%" height="15" fill="rgb(222,56,46)" fg:x="107" fg:w="2"/><text x="1.5482%" y="1039.50"></text></g><g><title>_int_free (6 samples, 0.07%)</title><rect x="1.3225%" y="1029" width="0.0728%" height="15" fill="rgb(239,76,54)" fg:x="109" fg:w="6"/><text x="1.5725%" y="1039.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="1.3953%" y="1029" width="0.0243%" height="15" fill="rgb(231,124,27)" fg:x="115" fg:w="2"/><text x="1.6453%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="1.4196%" y="1029" width="0.0243%" height="15" fill="rgb(249,195,6)" fg:x="117" fg:w="2"/><text x="1.6696%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (2 samples, 0.02%)</title><rect x="1.4196%" y="1013" width="0.0243%" height="15" fill="rgb(237,174,47)" fg:x="117" fg:w="2"/><text x="1.6696%" y="1023.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::validate_read_set (1 samples, 0.01%)</title><rect x="1.4438%" y="1029" width="0.0121%" height="15" fill="rgb(206,201,31)" fg:x="119" fg:w="1"/><text x="1.6938%" y="1039.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (3 samples, 0.04%)</title><rect x="1.4560%" y="1029" width="0.0364%" height="15" fill="rgb(231,57,52)" fg:x="120" fg:w="3"/><text x="1.7060%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="1.5166%" y="933" width="0.0364%" height="15" fill="rgb(248,177,22)" fg:x="125" fg:w="3"/><text x="1.7666%" y="943.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="1.5166%" y="917" width="0.0364%" height="15" fill="rgb(215,211,37)" fg:x="125" fg:w="3"/><text x="1.7666%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.10%)</title><rect x="1.4924%" y="1029" width="0.0971%" height="15" fill="rgb(241,128,51)" fg:x="123" fg:w="8"/><text x="1.7424%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.07%)</title><rect x="1.5166%" y="1013" width="0.0728%" height="15" fill="rgb(227,165,31)" fg:x="125" fg:w="6"/><text x="1.7666%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="1.5166%" y="997" width="0.0728%" height="15" fill="rgb(228,167,24)" fg:x="125" fg:w="6"/><text x="1.7666%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="1.5166%" y="981" width="0.0728%" height="15" fill="rgb(228,143,12)" fg:x="125" fg:w="6"/><text x="1.7666%" y="991.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.07%)</title><rect x="1.5166%" y="965" width="0.0728%" height="15" fill="rgb(249,149,8)" fg:x="125" fg:w="6"/><text x="1.7666%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.07%)</title><rect x="1.5166%" y="949" width="0.0728%" height="15" fill="rgb(243,35,44)" fg:x="125" fg:w="6"/><text x="1.7666%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="1.5530%" y="933" width="0.0364%" height="15" fill="rgb(246,89,9)" fg:x="128" fg:w="3"/><text x="1.8030%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.02%)</title><rect x="1.5894%" y="1029" width="0.0243%" height="15" fill="rgb(233,213,13)" fg:x="131" fg:w="2"/><text x="1.8394%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.6137%" y="1029" width="0.0121%" height="15" fill="rgb(233,141,41)" fg:x="133" fg:w="1"/><text x="1.8637%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="1.6137%" y="1013" width="0.0121%" height="15" fill="rgb(239,167,4)" fg:x="133" fg:w="1"/><text x="1.8637%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.6137%" y="997" width="0.0121%" height="15" fill="rgb(209,217,16)" fg:x="133" fg:w="1"/><text x="1.8637%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::validation::validate_env&lt;revm_primitives::specification::MergeSpec,revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="1.6258%" y="1029" width="0.0364%" height="15" fill="rgb(219,88,35)" fg:x="134" fg:w="3"/><text x="1.8758%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (1 samples, 0.01%)</title><rect x="1.6622%" y="1029" width="0.0121%" height="15" fill="rgb(220,193,23)" fg:x="137" fg:w="1"/><text x="1.9122%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.6622%" y="1013" width="0.0121%" height="15" fill="rgb(230,90,52)" fg:x="137" fg:w="1"/><text x="1.9122%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.6622%" y="997" width="0.0121%" height="15" fill="rgb(252,106,19)" fg:x="137" fg:w="1"/><text x="1.9122%" y="1007.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.6622%" y="981" width="0.0121%" height="15" fill="rgb(206,74,20)" fg:x="137" fg:w="1"/><text x="1.9122%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (3 samples, 0.04%)</title><rect x="1.6744%" y="1029" width="0.0364%" height="15" fill="rgb(230,138,44)" fg:x="138" fg:w="3"/><text x="1.9244%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (1 samples, 0.01%)</title><rect x="1.6986%" y="1013" width="0.0121%" height="15" fill="rgb(235,182,43)" fg:x="140" fg:w="1"/><text x="1.9486%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="1.6986%" y="997" width="0.0121%" height="15" fill="rgb(242,16,51)" fg:x="140" fg:w="1"/><text x="1.9486%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (1 samples, 0.01%)</title><rect x="1.6986%" y="981" width="0.0121%" height="15" fill="rgb(248,9,4)" fg:x="140" fg:w="1"/><text x="1.9486%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.6986%" y="965" width="0.0121%" height="15" fill="rgb(210,31,22)" fg:x="140" fg:w="1"/><text x="1.9486%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="1.6986%" y="949" width="0.0121%" height="15" fill="rgb(239,54,39)" fg:x="140" fg:w="1"/><text x="1.9486%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.01%)</title><rect x="1.6986%" y="933" width="0.0121%" height="15" fill="rgb(230,99,41)" fg:x="140" fg:w="1"/><text x="1.9486%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.01%)</title><rect x="1.6986%" y="917" width="0.0121%" height="15" fill="rgb(253,106,12)" fg:x="140" fg:w="1"/><text x="1.9486%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.01%)</title><rect x="1.6986%" y="901" width="0.0121%" height="15" fill="rgb(213,46,41)" fg:x="140" fg:w="1"/><text x="1.9486%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.04%)</title><rect x="1.7107%" y="1029" width="0.0364%" height="15" fill="rgb(215,133,35)" fg:x="141" fg:w="3"/><text x="1.9607%" y="1039.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="1.7350%" y="1013" width="0.0121%" height="15" fill="rgb(213,28,5)" fg:x="143" fg:w="1"/><text x="1.9850%" y="1023.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1 samples, 0.01%)</title><rect x="1.7471%" y="1029" width="0.0121%" height="15" fill="rgb(215,77,49)" fg:x="144" fg:w="1"/><text x="1.9971%" y="1039.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (1 samples, 0.01%)</title><rect x="1.7471%" y="1013" width="0.0121%" height="15" fill="rgb(248,100,22)" fg:x="144" fg:w="1"/><text x="1.9971%" y="1023.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (1 samples, 0.01%)</title><rect x="1.7471%" y="997" width="0.0121%" height="15" fill="rgb(208,67,9)" fg:x="144" fg:w="1"/><text x="1.9971%" y="1007.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="1.7471%" y="981" width="0.0121%" height="15" fill="rgb(219,133,21)" fg:x="144" fg:w="1"/><text x="1.9971%" y="991.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.01%)</title><rect x="1.7471%" y="965" width="0.0121%" height="15" fill="rgb(246,46,29)" fg:x="144" fg:w="1"/><text x="1.9971%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="1.7471%" y="949" width="0.0121%" height="15" fill="rgb(246,185,52)" fg:x="144" fg:w="1"/><text x="1.9971%" y="959.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.01%)</title><rect x="1.7471%" y="933" width="0.0121%" height="15" fill="rgb(252,136,11)" fg:x="144" fg:w="1"/><text x="1.9971%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="1.7593%" y="1029" width="0.0121%" height="15" fill="rgb(219,138,53)" fg:x="145" fg:w="1"/><text x="2.0093%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.01%)</title><rect x="1.7593%" y="1013" width="0.0121%" height="15" fill="rgb(211,51,23)" fg:x="145" fg:w="1"/><text x="2.0093%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.01%)</title><rect x="1.7593%" y="997" width="0.0121%" height="15" fill="rgb(247,221,28)" fg:x="145" fg:w="1"/><text x="2.0093%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.01%)</title><rect x="1.7593%" y="981" width="0.0121%" height="15" fill="rgb(251,222,45)" fg:x="145" fg:w="1"/><text x="2.0093%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.01%)</title><rect x="1.7593%" y="965" width="0.0121%" height="15" fill="rgb(217,162,53)" fg:x="145" fg:w="1"/><text x="2.0093%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.01%)</title><rect x="1.7593%" y="949" width="0.0121%" height="15" fill="rgb(229,93,14)" fg:x="145" fg:w="1"/><text x="2.0093%" y="959.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.01%)</title><rect x="1.7593%" y="933" width="0.0121%" height="15" fill="rgb(209,67,49)" fg:x="145" fg:w="1"/><text x="2.0093%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="1.7593%" y="917" width="0.0121%" height="15" fill="rgb(213,87,29)" fg:x="145" fg:w="1"/><text x="2.0093%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="1.7593%" y="901" width="0.0121%" height="15" fill="rgb(205,151,52)" fg:x="145" fg:w="1"/><text x="2.0093%" y="911.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="1.7593%" y="885" width="0.0121%" height="15" fill="rgb(253,215,39)" fg:x="145" fg:w="1"/><text x="2.0093%" y="895.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="1.7714%" y="1029" width="0.0243%" height="15" fill="rgb(221,220,41)" fg:x="146" fg:w="2"/><text x="2.0214%" y="1039.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (2 samples, 0.02%)</title><rect x="1.7957%" y="1029" width="0.0243%" height="15" fill="rgb(218,133,21)" fg:x="148" fg:w="2"/><text x="2.0457%" y="1039.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (1 samples, 0.01%)</title><rect x="1.8078%" y="1013" width="0.0121%" height="15" fill="rgb(221,193,43)" fg:x="149" fg:w="1"/><text x="2.0578%" y="1023.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (1 samples, 0.01%)</title><rect x="1.8199%" y="1029" width="0.0121%" height="15" fill="rgb(240,128,52)" fg:x="150" fg:w="1"/><text x="2.0699%" y="1039.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (1 samples, 0.01%)</title><rect x="1.8199%" y="1013" width="0.0121%" height="15" fill="rgb(253,114,12)" fg:x="150" fg:w="1"/><text x="2.0699%" y="1023.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (1 samples, 0.01%)</title><rect x="1.8321%" y="1029" width="0.0121%" height="15" fill="rgb(215,223,47)" fg:x="151" fg:w="1"/><text x="2.0821%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::InterpreterResult&gt; (1 samples, 0.01%)</title><rect x="1.8321%" y="1013" width="0.0121%" height="15" fill="rgb(248,225,23)" fg:x="151" fg:w="1"/><text x="2.0821%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.8321%" y="997" width="0.0121%" height="15" fill="rgb(250,108,0)" fg:x="151" fg:w="1"/><text x="2.0821%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="1.8321%" y="981" width="0.0121%" height="15" fill="rgb(228,208,7)" fg:x="151" fg:w="1"/><text x="2.0821%" y="991.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.8321%" y="965" width="0.0121%" height="15" fill="rgb(244,45,10)" fg:x="151" fg:w="1"/><text x="2.0821%" y="975.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (1 samples, 0.01%)</title><rect x="1.8442%" y="1029" width="0.0121%" height="15" fill="rgb(207,125,25)" fg:x="152" fg:w="1"/><text x="2.0942%" y="1039.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (1 samples, 0.01%)</title><rect x="1.8563%" y="1029" width="0.0121%" height="15" fill="rgb(210,195,18)" fg:x="153" fg:w="1"/><text x="2.1063%" y="1039.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (1 samples, 0.01%)</title><rect x="1.8685%" y="1029" width="0.0121%" height="15" fill="rgb(249,80,12)" fg:x="154" fg:w="1"/><text x="2.1185%" y="1039.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (1 samples, 0.01%)</title><rect x="1.8806%" y="1013" width="0.0121%" height="15" fill="rgb(221,65,9)" fg:x="155" fg:w="1"/><text x="2.1306%" y="1023.50"></text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (1 samples, 0.01%)</title><rect x="1.8806%" y="997" width="0.0121%" height="15" fill="rgb(235,49,36)" fg:x="155" fg:w="1"/><text x="2.1306%" y="1007.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (2 samples, 0.02%)</title><rect x="1.8806%" y="1029" width="0.0243%" height="15" fill="rgb(225,32,20)" fg:x="155" fg:w="2"/><text x="2.1306%" y="1039.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.01%)</title><rect x="1.8927%" y="1013" width="0.0121%" height="15" fill="rgb(215,141,46)" fg:x="156" fg:w="1"/><text x="2.1427%" y="1023.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="1.8927%" y="997" width="0.0121%" height="15" fill="rgb(250,160,47)" fg:x="156" fg:w="1"/><text x="2.1427%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.01%)</title><rect x="1.8927%" y="981" width="0.0121%" height="15" fill="rgb(216,222,40)" fg:x="156" fg:w="1"/><text x="2.1427%" y="991.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="1.8927%" y="965" width="0.0121%" height="15" fill="rgb(234,217,39)" fg:x="156" fg:w="1"/><text x="2.1427%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="1.8927%" y="949" width="0.0121%" height="15" fill="rgb(207,178,40)" fg:x="156" fg:w="1"/><text x="2.1427%" y="959.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="1.8927%" y="933" width="0.0121%" height="15" fill="rgb(221,136,13)" fg:x="156" fg:w="1"/><text x="2.1427%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="1.8927%" y="917" width="0.0121%" height="15" fill="rgb(249,199,10)" fg:x="156" fg:w="1"/><text x="2.1427%" y="927.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="1.8927%" y="901" width="0.0121%" height="15" fill="rgb(249,222,13)" fg:x="156" fg:w="1"/><text x="2.1427%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (1 samples, 0.01%)</title><rect x="1.9049%" y="1029" width="0.0121%" height="15" fill="rgb(244,185,38)" fg:x="157" fg:w="1"/><text x="2.1549%" y="1039.50"></text></g><g><title>[anon] (67 samples, 0.81%)</title><rect x="1.1162%" y="1045" width="0.8129%" height="15" fill="rgb(236,202,9)" fg:x="92" fg:w="67"/><text x="1.3662%" y="1055.50"></text></g><g><title>revm_interpreter::inner_models::CallInputs::new_boxed (1 samples, 0.01%)</title><rect x="1.9170%" y="1029" width="0.0121%" height="15" fill="rgb(250,229,37)" fg:x="158" fg:w="1"/><text x="2.1670%" y="1039.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="1.9291%" y="1029" width="0.0121%" height="15" fill="rgb(206,174,23)" fg:x="159" fg:w="1"/><text x="2.1791%" y="1039.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="1.9413%" y="1029" width="0.0121%" height="15" fill="rgb(211,33,43)" fg:x="160" fg:w="1"/><text x="2.1913%" y="1039.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1.9534%" y="1029" width="0.0121%" height="15" fill="rgb(245,58,50)" fg:x="161" fg:w="1"/><text x="2.2034%" y="1039.50"></text></g><g><title>[block-stm-revm] (4 samples, 0.05%)</title><rect x="1.9291%" y="1045" width="0.0485%" height="15" fill="rgb(244,68,36)" fg:x="159" fg:w="4"/><text x="2.1791%" y="1055.50"></text></g><g><title>bytes::bytes::static_drop (1 samples, 0.01%)</title><rect x="1.9655%" y="1029" width="0.0121%" height="15" fill="rgb(232,229,15)" fg:x="162" fg:w="1"/><text x="2.2155%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="1.9777%" y="1029" width="0.0485%" height="15" fill="rgb(254,30,23)" fg:x="163" fg:w="4"/><text x="2.2277%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.0262%" y="1029" width="0.0243%" height="15" fill="rgb(235,160,14)" fg:x="167" fg:w="2"/><text x="2.2762%" y="1039.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (2 samples, 0.02%)</title><rect x="2.0505%" y="805" width="0.0243%" height="15" fill="rgb(212,155,44)" fg:x="169" fg:w="2"/><text x="2.3005%" y="815.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="2.0505%" y="789" width="0.0243%" height="15" fill="rgb(226,2,50)" fg:x="169" fg:w="2"/><text x="2.3005%" y="799.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (2 samples, 0.02%)</title><rect x="2.0505%" y="773" width="0.0243%" height="15" fill="rgb(234,177,6)" fg:x="169" fg:w="2"/><text x="2.3005%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="2.0505%" y="757" width="0.0243%" height="15" fill="rgb(217,24,9)" fg:x="169" fg:w="2"/><text x="2.3005%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="2.0505%" y="741" width="0.0243%" height="15" fill="rgb(220,13,46)" fg:x="169" fg:w="2"/><text x="2.3005%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="2.0505%" y="725" width="0.0243%" height="15" fill="rgb(239,221,27)" fg:x="169" fg:w="2"/><text x="2.3005%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="2.0505%" y="709" width="0.0243%" height="15" fill="rgb(222,198,25)" fg:x="169" fg:w="2"/><text x="2.3005%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="2.0505%" y="693" width="0.0243%" height="15" fill="rgb(211,99,13)" fg:x="169" fg:w="2"/><text x="2.3005%" y="703.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="2.0505%" y="677" width="0.0243%" height="15" fill="rgb(232,111,31)" fg:x="169" fg:w="2"/><text x="2.3005%" y="687.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="2.0505%" y="661" width="0.0243%" height="15" fill="rgb(245,82,37)" fg:x="169" fg:w="2"/><text x="2.3005%" y="671.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="2.0505%" y="645" width="0.0243%" height="15" fill="rgb(227,149,46)" fg:x="169" fg:w="2"/><text x="2.3005%" y="655.50"></text></g><g><title>do_brk_flags (1 samples, 0.01%)</title><rect x="2.0747%" y="421" width="0.0121%" height="15" fill="rgb(218,36,50)" fg:x="171" fg:w="1"/><text x="2.3247%" y="431.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="2.0747%" y="405" width="0.0121%" height="15" fill="rgb(226,80,48)" fg:x="171" fg:w="1"/><text x="2.3247%" y="415.50"></text></g><g><title>strlen (1 samples, 0.01%)</title><rect x="2.0747%" y="389" width="0.0121%" height="15" fill="rgb(238,224,15)" fg:x="171" fg:w="1"/><text x="2.3247%" y="399.50"></text></g><g><title>down_write_killable (1 samples, 0.01%)</title><rect x="2.0869%" y="421" width="0.0121%" height="15" fill="rgb(241,136,10)" fg:x="172" fg:w="1"/><text x="2.3369%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.06%)</title><rect x="2.0505%" y="1029" width="0.0607%" height="15" fill="rgb(208,32,45)" fg:x="169" fg:w="5"/><text x="2.3005%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.06%)</title><rect x="2.0505%" y="1013" width="0.0607%" height="15" fill="rgb(207,135,9)" fg:x="169" fg:w="5"/><text x="2.3005%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.06%)</title><rect x="2.0505%" y="997" width="0.0607%" height="15" fill="rgb(206,86,44)" fg:x="169" fg:w="5"/><text x="2.3005%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5 samples, 0.06%)</title><rect x="2.0505%" y="981" width="0.0607%" height="15" fill="rgb(245,177,15)" fg:x="169" fg:w="5"/><text x="2.3005%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.06%)</title><rect x="2.0505%" y="965" width="0.0607%" height="15" fill="rgb(206,64,50)" fg:x="169" fg:w="5"/><text x="2.3005%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.06%)</title><rect x="2.0505%" y="949" width="0.0607%" height="15" fill="rgb(234,36,40)" fg:x="169" fg:w="5"/><text x="2.3005%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.06%)</title><rect x="2.0505%" y="933" width="0.0607%" height="15" fill="rgb(213,64,8)" fg:x="169" fg:w="5"/><text x="2.3005%" y="943.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (5 samples, 0.06%)</title><rect x="2.0505%" y="917" width="0.0607%" height="15" fill="rgb(210,75,36)" fg:x="169" fg:w="5"/><text x="2.3005%" y="927.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (5 samples, 0.06%)</title><rect x="2.0505%" y="901" width="0.0607%" height="15" fill="rgb(229,88,21)" fg:x="169" fg:w="5"/><text x="2.3005%" y="911.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (5 samples, 0.06%)</title><rect x="2.0505%" y="885" width="0.0607%" height="15" fill="rgb(252,204,47)" fg:x="169" fg:w="5"/><text x="2.3005%" y="895.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (5 samples, 0.06%)</title><rect x="2.0505%" y="869" width="0.0607%" height="15" fill="rgb(208,77,27)" fg:x="169" fg:w="5"/><text x="2.3005%" y="879.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.06%)</title><rect x="2.0505%" y="853" width="0.0607%" height="15" fill="rgb(221,76,26)" fg:x="169" fg:w="5"/><text x="2.3005%" y="863.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (5 samples, 0.06%)</title><rect x="2.0505%" y="837" width="0.0607%" height="15" fill="rgb(225,139,18)" fg:x="169" fg:w="5"/><text x="2.3005%" y="847.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.06%)</title><rect x="2.0505%" y="821" width="0.0607%" height="15" fill="rgb(230,137,11)" fg:x="169" fg:w="5"/><text x="2.3005%" y="831.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.04%)</title><rect x="2.0747%" y="805" width="0.0364%" height="15" fill="rgb(212,28,1)" fg:x="171" fg:w="3"/><text x="2.3247%" y="815.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.04%)</title><rect x="2.0747%" y="789" width="0.0364%" height="15" fill="rgb(248,164,17)" fg:x="171" fg:w="3"/><text x="2.3247%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3 samples, 0.04%)</title><rect x="2.0747%" y="773" width="0.0364%" height="15" fill="rgb(222,171,42)" fg:x="171" fg:w="3"/><text x="2.3247%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.04%)</title><rect x="2.0747%" y="757" width="0.0364%" height="15" fill="rgb(243,84,45)" fg:x="171" fg:w="3"/><text x="2.3247%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.04%)</title><rect x="2.0747%" y="741" width="0.0364%" height="15" fill="rgb(252,49,23)" fg:x="171" fg:w="3"/><text x="2.3247%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.04%)</title><rect x="2.0747%" y="725" width="0.0364%" height="15" fill="rgb(215,19,7)" fg:x="171" fg:w="3"/><text x="2.3247%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.04%)</title><rect x="2.0747%" y="709" width="0.0364%" height="15" fill="rgb(238,81,41)" fg:x="171" fg:w="3"/><text x="2.3247%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.04%)</title><rect x="2.0747%" y="693" width="0.0364%" height="15" fill="rgb(210,199,37)" fg:x="171" fg:w="3"/><text x="2.3247%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.04%)</title><rect x="2.0747%" y="677" width="0.0364%" height="15" fill="rgb(244,192,49)" fg:x="171" fg:w="3"/><text x="2.3247%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.04%)</title><rect x="2.0747%" y="661" width="0.0364%" height="15" fill="rgb(226,211,11)" fg:x="171" fg:w="3"/><text x="2.3247%" y="671.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.04%)</title><rect x="2.0747%" y="645" width="0.0364%" height="15" fill="rgb(236,162,54)" fg:x="171" fg:w="3"/><text x="2.3247%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.04%)</title><rect x="2.0747%" y="629" width="0.0364%" height="15" fill="rgb(220,229,9)" fg:x="171" fg:w="3"/><text x="2.3247%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.04%)</title><rect x="2.0747%" y="613" width="0.0364%" height="15" fill="rgb(250,87,22)" fg:x="171" fg:w="3"/><text x="2.3247%" y="623.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.04%)</title><rect x="2.0747%" y="597" width="0.0364%" height="15" fill="rgb(239,43,17)" fg:x="171" fg:w="3"/><text x="2.3247%" y="607.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="2.0747%" y="581" width="0.0364%" height="15" fill="rgb(231,177,25)" fg:x="171" fg:w="3"/><text x="2.3247%" y="591.50"></text></g><g><title>_int_malloc (3 samples, 0.04%)</title><rect x="2.0747%" y="565" width="0.0364%" height="15" fill="rgb(219,179,1)" fg:x="171" fg:w="3"/><text x="2.3247%" y="575.50"></text></g><g><title>sysmalloc (3 samples, 0.04%)</title><rect x="2.0747%" y="549" width="0.0364%" height="15" fill="rgb(238,219,53)" fg:x="171" fg:w="3"/><text x="2.3247%" y="559.50"></text></g><g><title>__glibc_morecore (3 samples, 0.04%)</title><rect x="2.0747%" y="533" width="0.0364%" height="15" fill="rgb(232,167,36)" fg:x="171" fg:w="3"/><text x="2.3247%" y="543.50"></text></g><g><title>__GI___sbrk (3 samples, 0.04%)</title><rect x="2.0747%" y="517" width="0.0364%" height="15" fill="rgb(244,19,51)" fg:x="171" fg:w="3"/><text x="2.3247%" y="527.50"></text></g><g><title>__brk (3 samples, 0.04%)</title><rect x="2.0747%" y="501" width="0.0364%" height="15" fill="rgb(224,6,22)" fg:x="171" fg:w="3"/><text x="2.3247%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="2.0747%" y="485" width="0.0364%" height="15" fill="rgb(224,145,5)" fg:x="171" fg:w="3"/><text x="2.3247%" y="495.50"></text></g><g><title>do_syscall_64 (3 samples, 0.04%)</title><rect x="2.0747%" y="469" width="0.0364%" height="15" fill="rgb(234,130,49)" fg:x="171" fg:w="3"/><text x="2.3247%" y="479.50"></text></g><g><title>__x64_sys_brk (3 samples, 0.04%)</title><rect x="2.0747%" y="453" width="0.0364%" height="15" fill="rgb(254,6,2)" fg:x="171" fg:w="3"/><text x="2.3247%" y="463.50"></text></g><g><title>__do_sys_brk (3 samples, 0.04%)</title><rect x="2.0747%" y="437" width="0.0364%" height="15" fill="rgb(208,96,46)" fg:x="171" fg:w="3"/><text x="2.3247%" y="447.50"></text></g><g><title>userfaultfd_unmap_complete (1 samples, 0.01%)</title><rect x="2.0990%" y="421" width="0.0121%" height="15" fill="rgb(239,3,39)" fg:x="173" fg:w="1"/><text x="2.3490%" y="431.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (1 samples, 0.01%)</title><rect x="2.1111%" y="1029" width="0.0121%" height="15" fill="rgb(233,210,1)" fg:x="174" fg:w="1"/><text x="2.3611%" y="1039.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="2.1233%" y="949" width="0.0121%" height="15" fill="rgb(244,137,37)" fg:x="175" fg:w="1"/><text x="2.3733%" y="959.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="2.1233%" y="933" width="0.0121%" height="15" fill="rgb(240,136,2)" fg:x="175" fg:w="1"/><text x="2.3733%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (22 samples, 0.27%)</title><rect x="2.1354%" y="949" width="0.2669%" height="15" fill="rgb(239,18,37)" fg:x="176" fg:w="22"/><text x="2.3854%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="2.4023%" y="949" width="0.0243%" height="15" fill="rgb(218,185,22)" fg:x="198" fg:w="2"/><text x="2.6523%" y="959.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="2.4023%" y="933" width="0.0243%" height="15" fill="rgb(225,218,4)" fg:x="198" fg:w="2"/><text x="2.6523%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="2.4023%" y="917" width="0.0243%" height="15" fill="rgb(230,182,32)" fg:x="198" fg:w="2"/><text x="2.6523%" y="927.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.4023%" y="901" width="0.0243%" height="15" fill="rgb(242,56,43)" fg:x="198" fg:w="2"/><text x="2.6523%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="2.4023%" y="885" width="0.0243%" height="15" fill="rgb(233,99,24)" fg:x="198" fg:w="2"/><text x="2.6523%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="2.4023%" y="869" width="0.0243%" height="15" fill="rgb(234,209,42)" fg:x="198" fg:w="2"/><text x="2.6523%" y="879.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="2.4266%" y="933" width="0.0485%" height="15" fill="rgb(227,7,12)" fg:x="200" fg:w="4"/><text x="2.6766%" y="943.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="2.4266%" y="917" width="0.0485%" height="15" fill="rgb(245,203,43)" fg:x="200" fg:w="4"/><text x="2.6766%" y="927.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="2.4751%" y="933" width="0.0243%" height="15" fill="rgb(238,205,33)" fg:x="204" fg:w="2"/><text x="2.7251%" y="943.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="2.4751%" y="917" width="0.0243%" height="15" fill="rgb(231,56,7)" fg:x="204" fg:w="2"/><text x="2.7251%" y="927.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="2.4994%" y="933" width="0.0243%" height="15" fill="rgb(244,186,29)" fg:x="206" fg:w="2"/><text x="2.7494%" y="943.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="2.5358%" y="869" width="0.0121%" height="15" fill="rgb(234,111,31)" fg:x="209" fg:w="1"/><text x="2.7858%" y="879.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="2.5358%" y="853" width="0.0121%" height="15" fill="rgb(241,149,10)" fg:x="209" fg:w="1"/><text x="2.7858%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.06%)</title><rect x="2.5237%" y="933" width="0.0607%" height="15" fill="rgb(249,206,44)" fg:x="208" fg:w="5"/><text x="2.7737%" y="943.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="2.5358%" y="917" width="0.0485%" height="15" fill="rgb(251,153,30)" fg:x="209" fg:w="4"/><text x="2.7858%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="2.5358%" y="901" width="0.0485%" height="15" fill="rgb(239,152,38)" fg:x="209" fg:w="4"/><text x="2.7858%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="2.5358%" y="885" width="0.0485%" height="15" fill="rgb(249,139,47)" fg:x="209" fg:w="4"/><text x="2.7858%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="2.5479%" y="869" width="0.0364%" height="15" fill="rgb(244,64,35)" fg:x="210" fg:w="3"/><text x="2.7979%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="2.5479%" y="853" width="0.0364%" height="15" fill="rgb(216,46,15)" fg:x="210" fg:w="3"/><text x="2.7979%" y="863.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="2.5965%" y="885" width="0.0607%" height="15" fill="rgb(250,74,19)" fg:x="214" fg:w="5"/><text x="2.8465%" y="895.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="2.6086%" y="869" width="0.0485%" height="15" fill="rgb(249,42,33)" fg:x="215" fg:w="4"/><text x="2.8586%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="2.6571%" y="885" width="0.0243%" height="15" fill="rgb(242,149,17)" fg:x="219" fg:w="2"/><text x="2.9071%" y="895.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="2.6571%" y="869" width="0.0243%" height="15" fill="rgb(244,29,21)" fg:x="219" fg:w="2"/><text x="2.9071%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="2.6571%" y="853" width="0.0243%" height="15" fill="rgb(220,130,37)" fg:x="219" fg:w="2"/><text x="2.9071%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.6571%" y="837" width="0.0243%" height="15" fill="rgb(211,67,2)" fg:x="219" fg:w="2"/><text x="2.9071%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="2.6571%" y="821" width="0.0243%" height="15" fill="rgb(235,68,52)" fg:x="219" fg:w="2"/><text x="2.9071%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="2.6571%" y="805" width="0.0243%" height="15" fill="rgb(246,142,3)" fg:x="219" fg:w="2"/><text x="2.9071%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (14 samples, 0.17%)</title><rect x="2.5843%" y="917" width="0.1699%" height="15" fill="rgb(241,25,7)" fg:x="213" fg:w="14"/><text x="2.8343%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.17%)</title><rect x="2.5843%" y="901" width="0.1699%" height="15" fill="rgb(242,119,39)" fg:x="213" fg:w="14"/><text x="2.8343%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.07%)</title><rect x="2.6814%" y="885" width="0.0728%" height="15" fill="rgb(241,98,45)" fg:x="221" fg:w="6"/><text x="2.9314%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.07%)</title><rect x="2.6814%" y="869" width="0.0728%" height="15" fill="rgb(254,28,30)" fg:x="221" fg:w="6"/><text x="2.9314%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="2.7542%" y="917" width="0.0121%" height="15" fill="rgb(241,142,54)" fg:x="227" fg:w="1"/><text x="3.0042%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.7542%" y="901" width="0.0121%" height="15" fill="rgb(222,85,15)" fg:x="227" fg:w="1"/><text x="3.0042%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="2.7542%" y="885" width="0.0121%" height="15" fill="rgb(210,85,47)" fg:x="227" fg:w="1"/><text x="3.0042%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="2.7542%" y="869" width="0.0121%" height="15" fill="rgb(224,206,25)" fg:x="227" fg:w="1"/><text x="3.0042%" y="879.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="2.7663%" y="885" width="0.0243%" height="15" fill="rgb(243,201,19)" fg:x="228" fg:w="2"/><text x="3.0163%" y="895.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="2.7663%" y="869" width="0.0243%" height="15" fill="rgb(236,59,4)" fg:x="228" fg:w="2"/><text x="3.0163%" y="879.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="2.7906%" y="885" width="0.0121%" height="15" fill="rgb(254,179,45)" fg:x="230" fg:w="1"/><text x="3.0406%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="2.7906%" y="869" width="0.0121%" height="15" fill="rgb(226,14,10)" fg:x="230" fg:w="1"/><text x="3.0406%" y="879.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="2.8027%" y="821" width="0.0121%" height="15" fill="rgb(244,27,41)" fg:x="231" fg:w="1"/><text x="3.0527%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="2.8027%" y="805" width="0.0121%" height="15" fill="rgb(235,35,32)" fg:x="231" fg:w="1"/><text x="3.0527%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="2.8027%" y="789" width="0.0121%" height="15" fill="rgb(218,68,31)" fg:x="231" fg:w="1"/><text x="3.0527%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (21 samples, 0.25%)</title><rect x="2.5843%" y="933" width="0.2548%" height="15" fill="rgb(207,120,37)" fg:x="213" fg:w="21"/><text x="2.8343%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="2.7663%" y="917" width="0.0728%" height="15" fill="rgb(227,98,0)" fg:x="228" fg:w="6"/><text x="3.0163%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="2.7663%" y="901" width="0.0728%" height="15" fill="rgb(207,7,3)" fg:x="228" fg:w="6"/><text x="3.0163%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="2.8027%" y="885" width="0.0364%" height="15" fill="rgb(206,98,19)" fg:x="231" fg:w="3"/><text x="3.0527%" y="895.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="2.8027%" y="869" width="0.0364%" height="15" fill="rgb(217,5,26)" fg:x="231" fg:w="3"/><text x="3.0527%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="2.8027%" y="853" width="0.0364%" height="15" fill="rgb(235,190,38)" fg:x="231" fg:w="3"/><text x="3.0527%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="2.8027%" y="837" width="0.0364%" height="15" fill="rgb(247,86,24)" fg:x="231" fg:w="3"/><text x="3.0527%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="2.8149%" y="821" width="0.0243%" height="15" fill="rgb(205,101,16)" fg:x="232" fg:w="2"/><text x="3.0649%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="2.8149%" y="805" width="0.0243%" height="15" fill="rgb(246,168,33)" fg:x="232" fg:w="2"/><text x="3.0649%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="2.8391%" y="885" width="0.0243%" height="15" fill="rgb(231,114,1)" fg:x="234" fg:w="2"/><text x="3.0891%" y="895.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="2.8391%" y="869" width="0.0243%" height="15" fill="rgb(207,184,53)" fg:x="234" fg:w="2"/><text x="3.0891%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="2.8391%" y="853" width="0.0243%" height="15" fill="rgb(224,95,51)" fg:x="234" fg:w="2"/><text x="3.0891%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.8391%" y="837" width="0.0243%" height="15" fill="rgb(212,188,45)" fg:x="234" fg:w="2"/><text x="3.0891%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="2.8391%" y="821" width="0.0243%" height="15" fill="rgb(223,154,38)" fg:x="234" fg:w="2"/><text x="3.0891%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="2.8391%" y="805" width="0.0243%" height="15" fill="rgb(251,22,52)" fg:x="234" fg:w="2"/><text x="3.0891%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="2.8391%" y="917" width="0.0728%" height="15" fill="rgb(229,209,22)" fg:x="234" fg:w="6"/><text x="3.0891%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="2.8391%" y="901" width="0.0728%" height="15" fill="rgb(234,138,34)" fg:x="234" fg:w="6"/><text x="3.0891%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="2.8634%" y="885" width="0.0485%" height="15" fill="rgb(212,95,11)" fg:x="236" fg:w="4"/><text x="3.1134%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="2.8634%" y="869" width="0.0485%" height="15" fill="rgb(240,179,47)" fg:x="236" fg:w="4"/><text x="3.1134%" y="879.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="2.9119%" y="885" width="0.0485%" height="15" fill="rgb(240,163,11)" fg:x="240" fg:w="4"/><text x="3.1619%" y="895.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="2.9119%" y="869" width="0.0485%" height="15" fill="rgb(236,37,12)" fg:x="240" fg:w="4"/><text x="3.1619%" y="879.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="2.9362%" y="853" width="0.0243%" height="15" fill="rgb(232,164,16)" fg:x="242" fg:w="2"/><text x="3.1862%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (11 samples, 0.13%)</title><rect x="2.8391%" y="933" width="0.1335%" height="15" fill="rgb(244,205,15)" fg:x="234" fg:w="11"/><text x="3.0891%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="2.9119%" y="917" width="0.0607%" height="15" fill="rgb(223,117,47)" fg:x="240" fg:w="5"/><text x="3.1619%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="2.9119%" y="901" width="0.0607%" height="15" fill="rgb(244,107,35)" fg:x="240" fg:w="5"/><text x="3.1619%" y="911.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="2.9604%" y="885" width="0.0121%" height="15" fill="rgb(205,140,8)" fg:x="244" fg:w="1"/><text x="3.2104%" y="895.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="2.9726%" y="885" width="0.0243%" height="15" fill="rgb(228,84,46)" fg:x="245" fg:w="2"/><text x="3.2226%" y="895.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="2.9726%" y="869" width="0.0243%" height="15" fill="rgb(254,188,9)" fg:x="245" fg:w="2"/><text x="3.2226%" y="879.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="2.9968%" y="885" width="0.0121%" height="15" fill="rgb(206,112,54)" fg:x="247" fg:w="1"/><text x="3.2468%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="2.9968%" y="869" width="0.0121%" height="15" fill="rgb(216,84,49)" fg:x="247" fg:w="1"/><text x="3.2468%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="3.0090%" y="885" width="0.0243%" height="15" fill="rgb(214,194,35)" fg:x="248" fg:w="2"/><text x="3.2590%" y="895.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="3.0090%" y="869" width="0.0243%" height="15" fill="rgb(249,28,3)" fg:x="248" fg:w="2"/><text x="3.2590%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="3.0090%" y="853" width="0.0243%" height="15" fill="rgb(222,56,52)" fg:x="248" fg:w="2"/><text x="3.2590%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.0090%" y="837" width="0.0243%" height="15" fill="rgb(245,217,50)" fg:x="248" fg:w="2"/><text x="3.2590%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.0211%" y="821" width="0.0121%" height="15" fill="rgb(213,201,24)" fg:x="249" fg:w="1"/><text x="3.2711%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.0211%" y="805" width="0.0121%" height="15" fill="rgb(248,116,28)" fg:x="249" fg:w="1"/><text x="3.2711%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="2.9726%" y="917" width="0.0728%" height="15" fill="rgb(219,72,43)" fg:x="245" fg:w="6"/><text x="3.2226%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="2.9726%" y="901" width="0.0728%" height="15" fill="rgb(209,138,14)" fg:x="245" fg:w="6"/><text x="3.2226%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.0332%" y="885" width="0.0121%" height="15" fill="rgb(222,18,33)" fg:x="250" fg:w="1"/><text x="3.2832%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.0332%" y="869" width="0.0121%" height="15" fill="rgb(213,199,7)" fg:x="250" fg:w="1"/><text x="3.2832%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="3.0454%" y="917" width="0.0243%" height="15" fill="rgb(250,110,10)" fg:x="251" fg:w="2"/><text x="3.2954%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.0454%" y="901" width="0.0243%" height="15" fill="rgb(248,123,6)" fg:x="251" fg:w="2"/><text x="3.2954%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="3.0454%" y="885" width="0.0243%" height="15" fill="rgb(206,91,31)" fg:x="251" fg:w="2"/><text x="3.2954%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="3.0454%" y="869" width="0.0243%" height="15" fill="rgb(211,154,13)" fg:x="251" fg:w="2"/><text x="3.2954%" y="879.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.0696%" y="885" width="0.0121%" height="15" fill="rgb(225,148,7)" fg:x="253" fg:w="1"/><text x="3.3196%" y="895.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="3.0696%" y="869" width="0.0121%" height="15" fill="rgb(220,160,43)" fg:x="253" fg:w="1"/><text x="3.3196%" y="879.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="3.0939%" y="821" width="0.0121%" height="15" fill="rgb(213,52,39)" fg:x="255" fg:w="1"/><text x="3.3439%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="3.0939%" y="805" width="0.0121%" height="15" fill="rgb(243,137,7)" fg:x="255" fg:w="1"/><text x="3.3439%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="3.0939%" y="789" width="0.0121%" height="15" fill="rgb(230,79,13)" fg:x="255" fg:w="1"/><text x="3.3439%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="3.0818%" y="885" width="0.0485%" height="15" fill="rgb(247,105,23)" fg:x="254" fg:w="4"/><text x="3.3318%" y="895.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="3.0939%" y="869" width="0.0364%" height="15" fill="rgb(223,179,41)" fg:x="255" fg:w="3"/><text x="3.3439%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="3.0939%" y="853" width="0.0364%" height="15" fill="rgb(218,9,34)" fg:x="255" fg:w="3"/><text x="3.3439%" y="863.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="3.0939%" y="837" width="0.0364%" height="15" fill="rgb(222,106,8)" fg:x="255" fg:w="3"/><text x="3.3439%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="3.1060%" y="821" width="0.0243%" height="15" fill="rgb(211,220,0)" fg:x="256" fg:w="2"/><text x="3.3560%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="3.1060%" y="805" width="0.0243%" height="15" fill="rgb(229,52,16)" fg:x="256" fg:w="2"/><text x="3.3560%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (61 samples, 0.74%)</title><rect x="2.4266%" y="949" width="0.7401%" height="15" fill="rgb(212,155,18)" fg:x="200" fg:w="61"/><text x="2.6766%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (16 samples, 0.19%)</title><rect x="2.9726%" y="933" width="0.1941%" height="15" fill="rgb(242,21,14)" fg:x="245" fg:w="16"/><text x="3.2226%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="3.0696%" y="917" width="0.0971%" height="15" fill="rgb(222,19,48)" fg:x="253" fg:w="8"/><text x="3.3196%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="3.0696%" y="901" width="0.0971%" height="15" fill="rgb(232,45,27)" fg:x="253" fg:w="8"/><text x="3.3196%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="3.1303%" y="885" width="0.0364%" height="15" fill="rgb(249,103,42)" fg:x="258" fg:w="3"/><text x="3.3803%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="3.1303%" y="869" width="0.0364%" height="15" fill="rgb(246,81,33)" fg:x="258" fg:w="3"/><text x="3.3803%" y="879.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="3.1667%" y="901" width="0.0243%" height="15" fill="rgb(252,33,42)" fg:x="261" fg:w="2"/><text x="3.4167%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="3.1667%" y="885" width="0.0243%" height="15" fill="rgb(209,212,41)" fg:x="261" fg:w="2"/><text x="3.4167%" y="895.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (2 samples, 0.02%)</title><rect x="3.1910%" y="837" width="0.0243%" height="15" fill="rgb(207,154,6)" fg:x="263" fg:w="2"/><text x="3.4410%" y="847.50"></text></g><g><title>core::mem::size_of_val_raw (2 samples, 0.02%)</title><rect x="3.1910%" y="821" width="0.0243%" height="15" fill="rgb(223,64,47)" fg:x="263" fg:w="2"/><text x="3.4410%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="3.1910%" y="901" width="0.0364%" height="15" fill="rgb(211,161,38)" fg:x="263" fg:w="3"/><text x="3.4410%" y="911.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="3.1910%" y="885" width="0.0364%" height="15" fill="rgb(219,138,40)" fg:x="263" fg:w="3"/><text x="3.4410%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="3.1910%" y="869" width="0.0364%" height="15" fill="rgb(241,228,46)" fg:x="263" fg:w="3"/><text x="3.4410%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="3.1910%" y="853" width="0.0364%" height="15" fill="rgb(223,209,38)" fg:x="263" fg:w="3"/><text x="3.4410%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.2152%" y="837" width="0.0121%" height="15" fill="rgb(236,164,45)" fg:x="265" fg:w="1"/><text x="3.4652%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.2152%" y="821" width="0.0121%" height="15" fill="rgb(231,15,5)" fg:x="265" fg:w="1"/><text x="3.4652%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="3.1667%" y="933" width="0.1213%" height="15" fill="rgb(252,35,15)" fg:x="261" fg:w="10"/><text x="3.4167%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="3.1667%" y="917" width="0.1213%" height="15" fill="rgb(248,181,18)" fg:x="261" fg:w="10"/><text x="3.4167%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="3.2274%" y="901" width="0.0607%" height="15" fill="rgb(233,39,42)" fg:x="266" fg:w="5"/><text x="3.4774%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="3.2274%" y="885" width="0.0607%" height="15" fill="rgb(238,110,33)" fg:x="266" fg:w="5"/><text x="3.4774%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="3.2880%" y="933" width="0.0121%" height="15" fill="rgb(233,195,10)" fg:x="271" fg:w="1"/><text x="3.5380%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.2880%" y="917" width="0.0121%" height="15" fill="rgb(254,105,3)" fg:x="271" fg:w="1"/><text x="3.5380%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.2880%" y="901" width="0.0121%" height="15" fill="rgb(221,225,9)" fg:x="271" fg:w="1"/><text x="3.5380%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.2880%" y="885" width="0.0121%" height="15" fill="rgb(224,227,45)" fg:x="271" fg:w="1"/><text x="3.5380%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.3002%" y="901" width="0.0121%" height="15" fill="rgb(229,198,43)" fg:x="272" fg:w="1"/><text x="3.5502%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="3.3002%" y="885" width="0.0121%" height="15" fill="rgb(206,209,35)" fg:x="272" fg:w="1"/><text x="3.5502%" y="895.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="3.3123%" y="837" width="0.0121%" height="15" fill="rgb(245,195,53)" fg:x="273" fg:w="1"/><text x="3.5623%" y="847.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="3.3123%" y="821" width="0.0121%" height="15" fill="rgb(240,92,26)" fg:x="273" fg:w="1"/><text x="3.5623%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="3.3123%" y="901" width="0.0243%" height="15" fill="rgb(207,40,23)" fg:x="273" fg:w="2"/><text x="3.5623%" y="911.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="3.3123%" y="885" width="0.0243%" height="15" fill="rgb(223,111,35)" fg:x="273" fg:w="2"/><text x="3.5623%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="3.3123%" y="869" width="0.0243%" height="15" fill="rgb(229,147,28)" fg:x="273" fg:w="2"/><text x="3.5623%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.3123%" y="853" width="0.0243%" height="15" fill="rgb(211,29,28)" fg:x="273" fg:w="2"/><text x="3.5623%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.3244%" y="837" width="0.0121%" height="15" fill="rgb(228,72,33)" fg:x="274" fg:w="1"/><text x="3.5744%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.3244%" y="821" width="0.0121%" height="15" fill="rgb(205,214,31)" fg:x="274" fg:w="1"/><text x="3.5744%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="3.3002%" y="933" width="0.0728%" height="15" fill="rgb(224,111,15)" fg:x="272" fg:w="6"/><text x="3.5502%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="3.3002%" y="917" width="0.0728%" height="15" fill="rgb(253,21,26)" fg:x="272" fg:w="6"/><text x="3.5502%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="3.3366%" y="901" width="0.0364%" height="15" fill="rgb(245,139,43)" fg:x="275" fg:w="3"/><text x="3.5866%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="3.3366%" y="885" width="0.0364%" height="15" fill="rgb(252,170,7)" fg:x="275" fg:w="3"/><text x="3.5866%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.3730%" y="901" width="0.0121%" height="15" fill="rgb(231,118,14)" fg:x="278" fg:w="1"/><text x="3.6230%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="3.3730%" y="885" width="0.0121%" height="15" fill="rgb(238,83,0)" fg:x="278" fg:w="1"/><text x="3.6230%" y="895.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="3.3851%" y="901" width="0.0121%" height="15" fill="rgb(221,39,39)" fg:x="279" fg:w="1"/><text x="3.6351%" y="911.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="3.3851%" y="885" width="0.0121%" height="15" fill="rgb(222,119,46)" fg:x="279" fg:w="1"/><text x="3.6351%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="3.3972%" y="901" width="0.0364%" height="15" fill="rgb(222,165,49)" fg:x="280" fg:w="3"/><text x="3.6472%" y="911.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="3.3972%" y="885" width="0.0364%" height="15" fill="rgb(219,113,52)" fg:x="280" fg:w="3"/><text x="3.6472%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="3.3972%" y="869" width="0.0364%" height="15" fill="rgb(214,7,15)" fg:x="280" fg:w="3"/><text x="3.6472%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="3.3972%" y="853" width="0.0364%" height="15" fill="rgb(235,32,4)" fg:x="280" fg:w="3"/><text x="3.6472%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="3.3972%" y="837" width="0.0364%" height="15" fill="rgb(238,90,54)" fg:x="280" fg:w="3"/><text x="3.6472%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="3.3972%" y="821" width="0.0364%" height="15" fill="rgb(213,208,19)" fg:x="280" fg:w="3"/><text x="3.6472%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="3.3730%" y="933" width="0.0728%" height="15" fill="rgb(233,156,4)" fg:x="278" fg:w="6"/><text x="3.6230%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="3.3730%" y="917" width="0.0728%" height="15" fill="rgb(207,194,5)" fg:x="278" fg:w="6"/><text x="3.6230%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.4336%" y="901" width="0.0121%" height="15" fill="rgb(206,111,30)" fg:x="283" fg:w="1"/><text x="3.6836%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.4336%" y="885" width="0.0121%" height="15" fill="rgb(243,70,54)" fg:x="283" fg:w="1"/><text x="3.6836%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.4458%" y="901" width="0.0121%" height="15" fill="rgb(242,28,8)" fg:x="284" fg:w="1"/><text x="3.6958%" y="911.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="3.4458%" y="885" width="0.0121%" height="15" fill="rgb(219,106,18)" fg:x="284" fg:w="1"/><text x="3.6958%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="3.4458%" y="933" width="0.0243%" height="15" fill="rgb(244,222,10)" fg:x="284" fg:w="2"/><text x="3.6958%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.4458%" y="917" width="0.0243%" height="15" fill="rgb(236,179,52)" fg:x="284" fg:w="2"/><text x="3.6958%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="3.4579%" y="901" width="0.0121%" height="15" fill="rgb(213,23,39)" fg:x="285" fg:w="1"/><text x="3.7079%" y="911.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="3.4579%" y="885" width="0.0121%" height="15" fill="rgb(238,48,10)" fg:x="285" fg:w="1"/><text x="3.7079%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="3.4579%" y="869" width="0.0121%" height="15" fill="rgb(251,196,23)" fg:x="285" fg:w="1"/><text x="3.7079%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.4579%" y="853" width="0.0121%" height="15" fill="rgb(250,152,24)" fg:x="285" fg:w="1"/><text x="3.7079%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.4579%" y="837" width="0.0121%" height="15" fill="rgb(209,150,17)" fg:x="285" fg:w="1"/><text x="3.7079%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.4579%" y="821" width="0.0121%" height="15" fill="rgb(234,202,34)" fg:x="285" fg:w="1"/><text x="3.7079%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="3.4700%" y="901" width="0.0364%" height="15" fill="rgb(253,148,53)" fg:x="286" fg:w="3"/><text x="3.7200%" y="911.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="3.4822%" y="885" width="0.0243%" height="15" fill="rgb(218,129,16)" fg:x="287" fg:w="2"/><text x="3.7322%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="3.4822%" y="869" width="0.0243%" height="15" fill="rgb(216,85,19)" fg:x="287" fg:w="2"/><text x="3.7322%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.4822%" y="853" width="0.0243%" height="15" fill="rgb(235,228,7)" fg:x="287" fg:w="2"/><text x="3.7322%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="3.4822%" y="837" width="0.0243%" height="15" fill="rgb(245,175,0)" fg:x="287" fg:w="2"/><text x="3.7322%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="3.4822%" y="821" width="0.0243%" height="15" fill="rgb(208,168,36)" fg:x="287" fg:w="2"/><text x="3.7322%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="3.4700%" y="933" width="0.0485%" height="15" fill="rgb(246,171,24)" fg:x="286" fg:w="4"/><text x="3.7200%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="3.4700%" y="917" width="0.0485%" height="15" fill="rgb(215,142,24)" fg:x="286" fg:w="4"/><text x="3.7200%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.5064%" y="901" width="0.0121%" height="15" fill="rgb(250,187,7)" fg:x="289" fg:w="1"/><text x="3.7564%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.5064%" y="885" width="0.0121%" height="15" fill="rgb(228,66,33)" fg:x="289" fg:w="1"/><text x="3.7564%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="3.5186%" y="901" width="0.0121%" height="15" fill="rgb(234,215,21)" fg:x="290" fg:w="1"/><text x="3.7686%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (31 samples, 0.38%)</title><rect x="3.1667%" y="949" width="0.3761%" height="15" fill="rgb(222,191,20)" fg:x="261" fg:w="31"/><text x="3.4167%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="3.5186%" y="933" width="0.0243%" height="15" fill="rgb(245,79,54)" fg:x="290" fg:w="2"/><text x="3.7686%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.5186%" y="917" width="0.0243%" height="15" fill="rgb(240,10,37)" fg:x="290" fg:w="2"/><text x="3.7686%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="3.5307%" y="901" width="0.0121%" height="15" fill="rgb(214,192,32)" fg:x="291" fg:w="1"/><text x="3.7807%" y="911.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="3.5307%" y="885" width="0.0121%" height="15" fill="rgb(209,36,54)" fg:x="291" fg:w="1"/><text x="3.7807%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="3.5307%" y="869" width="0.0121%" height="15" fill="rgb(220,10,11)" fg:x="291" fg:w="1"/><text x="3.7807%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.5307%" y="853" width="0.0121%" height="15" fill="rgb(221,106,17)" fg:x="291" fg:w="1"/><text x="3.7807%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="3.5307%" y="837" width="0.0121%" height="15" fill="rgb(251,142,44)" fg:x="291" fg:w="1"/><text x="3.7807%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="3.5307%" y="821" width="0.0121%" height="15" fill="rgb(238,13,15)" fg:x="291" fg:w="1"/><text x="3.7807%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (13 samples, 0.16%)</title><rect x="3.5428%" y="901" width="0.1577%" height="15" fill="rgb(208,107,27)" fg:x="292" fg:w="13"/><text x="3.7928%" y="911.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.06%)</title><rect x="3.7006%" y="885" width="0.0607%" height="15" fill="rgb(205,136,37)" fg:x="305" fg:w="5"/><text x="3.9506%" y="895.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.08%)</title><rect x="3.7855%" y="773" width="0.0849%" height="15" fill="rgb(250,205,27)" fg:x="312" fg:w="7"/><text x="4.0355%" y="783.50"></text></g><g><title>_int_malloc (3 samples, 0.04%)</title><rect x="3.8340%" y="757" width="0.0364%" height="15" fill="rgb(210,80,43)" fg:x="316" fg:w="3"/><text x="4.0840%" y="767.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (10 samples, 0.12%)</title><rect x="3.7612%" y="885" width="0.1213%" height="15" fill="rgb(247,160,36)" fg:x="310" fg:w="10"/><text x="4.0112%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="3.7734%" y="869" width="0.1092%" height="15" fill="rgb(234,13,49)" fg:x="311" fg:w="9"/><text x="4.0234%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="3.7734%" y="853" width="0.1092%" height="15" fill="rgb(234,122,0)" fg:x="311" fg:w="9"/><text x="4.0234%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.10%)</title><rect x="3.7855%" y="837" width="0.0971%" height="15" fill="rgb(207,146,38)" fg:x="312" fg:w="8"/><text x="4.0355%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.10%)</title><rect x="3.7855%" y="821" width="0.0971%" height="15" fill="rgb(207,177,25)" fg:x="312" fg:w="8"/><text x="4.0355%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.10%)</title><rect x="3.7855%" y="805" width="0.0971%" height="15" fill="rgb(211,178,42)" fg:x="312" fg:w="8"/><text x="4.0355%" y="815.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.10%)</title><rect x="3.7855%" y="789" width="0.0971%" height="15" fill="rgb(230,69,54)" fg:x="312" fg:w="8"/><text x="4.0355%" y="799.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="3.8704%" y="773" width="0.0121%" height="15" fill="rgb(214,135,41)" fg:x="319" fg:w="1"/><text x="4.1204%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="3.8704%" y="757" width="0.0121%" height="15" fill="rgb(237,67,25)" fg:x="319" fg:w="1"/><text x="4.1204%" y="767.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="3.9311%" y="757" width="0.0121%" height="15" fill="rgb(222,189,50)" fg:x="324" fg:w="1"/><text x="4.1811%" y="767.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (6 samples, 0.07%)</title><rect x="3.8826%" y="885" width="0.0728%" height="15" fill="rgb(245,148,34)" fg:x="320" fg:w="6"/><text x="4.1326%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6 samples, 0.07%)</title><rect x="3.8826%" y="869" width="0.0728%" height="15" fill="rgb(222,29,6)" fg:x="320" fg:w="6"/><text x="4.1326%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.07%)</title><rect x="3.8826%" y="853" width="0.0728%" height="15" fill="rgb(221,189,43)" fg:x="320" fg:w="6"/><text x="4.1326%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.07%)</title><rect x="3.8826%" y="837" width="0.0728%" height="15" fill="rgb(207,36,27)" fg:x="320" fg:w="6"/><text x="4.1326%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.07%)</title><rect x="3.8826%" y="821" width="0.0728%" height="15" fill="rgb(217,90,24)" fg:x="320" fg:w="6"/><text x="4.1326%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.07%)</title><rect x="3.8826%" y="805" width="0.0728%" height="15" fill="rgb(224,66,35)" fg:x="320" fg:w="6"/><text x="4.1326%" y="815.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.07%)</title><rect x="3.8826%" y="789" width="0.0728%" height="15" fill="rgb(221,13,50)" fg:x="320" fg:w="6"/><text x="4.1326%" y="799.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.07%)</title><rect x="3.8826%" y="773" width="0.0728%" height="15" fill="rgb(236,68,49)" fg:x="320" fg:w="6"/><text x="4.1326%" y="783.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="3.9432%" y="757" width="0.0121%" height="15" fill="rgb(229,146,28)" fg:x="325" fg:w="1"/><text x="4.1932%" y="767.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="3.9432%" y="741" width="0.0121%" height="15" fill="rgb(225,31,38)" fg:x="325" fg:w="1"/><text x="4.1932%" y="751.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (7 samples, 0.08%)</title><rect x="3.9554%" y="885" width="0.0849%" height="15" fill="rgb(250,208,3)" fg:x="326" fg:w="7"/><text x="4.2054%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (7 samples, 0.08%)</title><rect x="3.9554%" y="869" width="0.0849%" height="15" fill="rgb(246,54,23)" fg:x="326" fg:w="7"/><text x="4.2054%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.08%)</title><rect x="3.9554%" y="853" width="0.0849%" height="15" fill="rgb(243,76,11)" fg:x="326" fg:w="7"/><text x="4.2054%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.08%)</title><rect x="3.9554%" y="837" width="0.0849%" height="15" fill="rgb(245,21,50)" fg:x="326" fg:w="7"/><text x="4.2054%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.08%)</title><rect x="3.9554%" y="821" width="0.0849%" height="15" fill="rgb(228,9,43)" fg:x="326" fg:w="7"/><text x="4.2054%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.08%)</title><rect x="3.9554%" y="805" width="0.0849%" height="15" fill="rgb(208,100,47)" fg:x="326" fg:w="7"/><text x="4.2054%" y="815.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.08%)</title><rect x="3.9554%" y="789" width="0.0849%" height="15" fill="rgb(232,26,8)" fg:x="326" fg:w="7"/><text x="4.2054%" y="799.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.08%)</title><rect x="3.9554%" y="773" width="0.0849%" height="15" fill="rgb(216,166,38)" fg:x="326" fg:w="7"/><text x="4.2054%" y="783.50"></text></g><g><title>_int_malloc (6 samples, 0.07%)</title><rect x="3.9675%" y="757" width="0.0728%" height="15" fill="rgb(251,202,51)" fg:x="327" fg:w="6"/><text x="4.2175%" y="767.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="4.0281%" y="741" width="0.0121%" height="15" fill="rgb(254,216,34)" fg:x="332" fg:w="1"/><text x="4.2781%" y="751.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="4.0524%" y="773" width="0.0121%" height="15" fill="rgb(251,32,27)" fg:x="334" fg:w="1"/><text x="4.3024%" y="783.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (44 samples, 0.53%)</title><rect x="3.5428%" y="949" width="0.5339%" height="15" fill="rgb(208,127,28)" fg:x="292" fg:w="44"/><text x="3.7928%" y="959.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (44 samples, 0.53%)</title><rect x="3.5428%" y="933" width="0.5339%" height="15" fill="rgb(224,137,22)" fg:x="292" fg:w="44"/><text x="3.7928%" y="943.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (44 samples, 0.53%)</title><rect x="3.5428%" y="917" width="0.5339%" height="15" fill="rgb(254,70,32)" fg:x="292" fg:w="44"/><text x="3.7928%" y="927.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (31 samples, 0.38%)</title><rect x="3.7006%" y="901" width="0.3761%" height="15" fill="rgb(229,75,37)" fg:x="305" fg:w="31"/><text x="3.9506%" y="911.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (3 samples, 0.04%)</title><rect x="4.0403%" y="885" width="0.0364%" height="15" fill="rgb(252,64,23)" fg:x="333" fg:w="3"/><text x="4.2903%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="4.0524%" y="869" width="0.0243%" height="15" fill="rgb(232,162,48)" fg:x="334" fg:w="2"/><text x="4.3024%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="4.0524%" y="853" width="0.0243%" height="15" fill="rgb(246,160,12)" fg:x="334" fg:w="2"/><text x="4.3024%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="4.0524%" y="837" width="0.0243%" height="15" fill="rgb(247,166,0)" fg:x="334" fg:w="2"/><text x="4.3024%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="4.0524%" y="821" width="0.0243%" height="15" fill="rgb(249,219,21)" fg:x="334" fg:w="2"/><text x="4.3024%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="4.0524%" y="805" width="0.0243%" height="15" fill="rgb(205,209,3)" fg:x="334" fg:w="2"/><text x="4.3024%" y="815.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="4.0524%" y="789" width="0.0243%" height="15" fill="rgb(243,44,1)" fg:x="334" fg:w="2"/><text x="4.3024%" y="799.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="4.0645%" y="773" width="0.0121%" height="15" fill="rgb(206,159,16)" fg:x="335" fg:w="1"/><text x="4.3145%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="4.0645%" y="757" width="0.0121%" height="15" fill="rgb(244,77,30)" fg:x="335" fg:w="1"/><text x="4.3145%" y="767.50"></text></g><g><title>revm::context::Context&lt;EXT,DB&gt;::new (5 samples, 0.06%)</title><rect x="4.0767%" y="949" width="0.0607%" height="15" fill="rgb(218,69,12)" fg:x="336" fg:w="5"/><text x="4.3267%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.06%)</title><rect x="4.0767%" y="933" width="0.0607%" height="15" fill="rgb(212,87,7)" fg:x="336" fg:w="5"/><text x="4.3267%" y="943.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="4.1373%" y="933" width="0.0121%" height="15" fill="rgb(245,114,25)" fg:x="341" fg:w="1"/><text x="4.3873%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="4.1373%" y="917" width="0.0121%" height="15" fill="rgb(210,61,42)" fg:x="341" fg:w="1"/><text x="4.3873%" y="927.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="4.1373%" y="901" width="0.0121%" height="15" fill="rgb(211,52,33)" fg:x="341" fg:w="1"/><text x="4.3873%" y="911.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="4.1373%" y="885" width="0.0121%" height="15" fill="rgb(234,58,33)" fg:x="341" fg:w="1"/><text x="4.3873%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="4.1373%" y="869" width="0.0121%" height="15" fill="rgb(220,115,36)" fg:x="341" fg:w="1"/><text x="4.3873%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="4.1373%" y="853" width="0.0121%" height="15" fill="rgb(243,153,54)" fg:x="341" fg:w="1"/><text x="4.3873%" y="863.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="4.1373%" y="837" width="0.0121%" height="15" fill="rgb(251,47,18)" fg:x="341" fg:w="1"/><text x="4.3873%" y="847.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="4.1373%" y="821" width="0.0121%" height="15" fill="rgb(242,102,42)" fg:x="341" fg:w="1"/><text x="4.3873%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="4.1495%" y="933" width="0.0364%" height="15" fill="rgb(234,31,38)" fg:x="342" fg:w="3"/><text x="4.3995%" y="943.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_ref_db (173 samples, 2.10%)</title><rect x="2.1233%" y="965" width="2.0990%" height="15" fill="rgb(221,117,51)" fg:x="175" fg:w="173"/><text x="2.3733%" y="975.50">r..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (7 samples, 0.08%)</title><rect x="4.1373%" y="949" width="0.0849%" height="15" fill="rgb(212,20,18)" fg:x="341" fg:w="7"/><text x="4.3873%" y="959.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::with_db (3 samples, 0.04%)</title><rect x="4.1859%" y="933" width="0.0364%" height="15" fill="rgb(245,133,36)" fg:x="345" fg:w="3"/><text x="4.4359%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="4.1859%" y="917" width="0.0364%" height="15" fill="rgb(212,6,19)" fg:x="345" fg:w="3"/><text x="4.4359%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="4.2223%" y="885" width="0.0364%" height="15" fill="rgb(218,1,36)" fg:x="348" fg:w="3"/><text x="4.4723%" y="895.50"></text></g><g><title>&lt;revm_primitives::env::Env as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="4.2587%" y="853" width="0.0121%" height="15" fill="rgb(246,84,54)" fg:x="351" fg:w="1"/><text x="4.5087%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.10%)</title><rect x="4.2829%" y="837" width="0.0971%" height="15" fill="rgb(242,110,6)" fg:x="353" fg:w="8"/><text x="4.5329%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (11 samples, 0.13%)</title><rect x="4.2587%" y="869" width="0.1335%" height="15" fill="rgb(214,47,5)" fg:x="351" fg:w="11"/><text x="4.5087%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.12%)</title><rect x="4.2708%" y="853" width="0.1213%" height="15" fill="rgb(218,159,25)" fg:x="352" fg:w="10"/><text x="4.5208%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="4.3800%" y="837" width="0.0121%" height="15" fill="rgb(215,211,28)" fg:x="361" fg:w="1"/><text x="4.6300%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="4.3800%" y="821" width="0.0121%" height="15" fill="rgb(238,59,32)" fg:x="361" fg:w="1"/><text x="4.6300%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="4.3800%" y="805" width="0.0121%" height="15" fill="rgb(226,82,3)" fg:x="361" fg:w="1"/><text x="4.6300%" y="815.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="4.3800%" y="789" width="0.0121%" height="15" fill="rgb(240,164,32)" fg:x="361" fg:w="1"/><text x="4.6300%" y="799.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="4.3800%" y="773" width="0.0121%" height="15" fill="rgb(232,46,7)" fg:x="361" fg:w="1"/><text x="4.6300%" y="783.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (17 samples, 0.21%)</title><rect x="4.2223%" y="933" width="0.2063%" height="15" fill="rgb(229,129,53)" fg:x="348" fg:w="17"/><text x="4.4723%" y="943.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (17 samples, 0.21%)</title><rect x="4.2223%" y="917" width="0.2063%" height="15" fill="rgb(234,188,29)" fg:x="348" fg:w="17"/><text x="4.4723%" y="927.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (17 samples, 0.21%)</title><rect x="4.2223%" y="901" width="0.2063%" height="15" fill="rgb(246,141,4)" fg:x="348" fg:w="17"/><text x="4.4723%" y="911.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (14 samples, 0.17%)</title><rect x="4.2587%" y="885" width="0.1699%" height="15" fill="rgb(229,23,39)" fg:x="351" fg:w="14"/><text x="4.5087%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="4.3921%" y="869" width="0.0364%" height="15" fill="rgb(206,12,3)" fg:x="362" fg:w="3"/><text x="4.6421%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.12%)</title><rect x="4.4285%" y="933" width="0.1213%" height="15" fill="rgb(252,226,20)" fg:x="365" fg:w="10"/><text x="4.6785%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.10%)</title><rect x="4.5499%" y="885" width="0.0971%" height="15" fill="rgb(216,123,35)" fg:x="375" fg:w="8"/><text x="4.7999%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.05%)</title><rect x="4.6469%" y="869" width="0.0485%" height="15" fill="rgb(212,68,40)" fg:x="383" fg:w="4"/><text x="4.8969%" y="879.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="4.7683%" y="741" width="0.0121%" height="15" fill="rgb(254,125,32)" fg:x="393" fg:w="1"/><text x="5.0183%" y="751.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.07%)</title><rect x="4.7197%" y="757" width="0.0728%" height="15" fill="rgb(253,97,22)" fg:x="389" fg:w="6"/><text x="4.9697%" y="767.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="4.7804%" y="741" width="0.0121%" height="15" fill="rgb(241,101,14)" fg:x="394" fg:w="1"/><text x="5.0304%" y="751.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="4.7804%" y="725" width="0.0121%" height="15" fill="rgb(238,103,29)" fg:x="394" fg:w="1"/><text x="5.0304%" y="735.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (10 samples, 0.12%)</title><rect x="4.6955%" y="869" width="0.1213%" height="15" fill="rgb(233,195,47)" fg:x="387" fg:w="10"/><text x="4.9455%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="4.7076%" y="853" width="0.1092%" height="15" fill="rgb(246,218,30)" fg:x="388" fg:w="9"/><text x="4.9576%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="4.7076%" y="837" width="0.1092%" height="15" fill="rgb(219,145,47)" fg:x="388" fg:w="9"/><text x="4.9576%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.10%)</title><rect x="4.7197%" y="821" width="0.0971%" height="15" fill="rgb(243,12,26)" fg:x="389" fg:w="8"/><text x="4.9697%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.10%)</title><rect x="4.7197%" y="805" width="0.0971%" height="15" fill="rgb(214,87,16)" fg:x="389" fg:w="8"/><text x="4.9697%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.10%)</title><rect x="4.7197%" y="789" width="0.0971%" height="15" fill="rgb(208,99,42)" fg:x="389" fg:w="8"/><text x="4.9697%" y="799.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.10%)</title><rect x="4.7197%" y="773" width="0.0971%" height="15" fill="rgb(253,99,2)" fg:x="389" fg:w="8"/><text x="4.9697%" y="783.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="4.7925%" y="757" width="0.0243%" height="15" fill="rgb(220,168,23)" fg:x="395" fg:w="2"/><text x="5.0425%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="4.7925%" y="741" width="0.0243%" height="15" fill="rgb(242,38,24)" fg:x="395" fg:w="2"/><text x="5.0425%" y="751.50"></text></g><g><title>_int_malloc (9 samples, 0.11%)</title><rect x="4.8532%" y="741" width="0.1092%" height="15" fill="rgb(225,182,9)" fg:x="400" fg:w="9"/><text x="5.1032%" y="751.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="4.9381%" y="725" width="0.0243%" height="15" fill="rgb(243,178,37)" fg:x="407" fg:w="2"/><text x="5.1881%" y="735.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.17%)</title><rect x="4.8168%" y="757" width="0.1699%" height="15" fill="rgb(232,139,19)" fg:x="397" fg:w="14"/><text x="5.0668%" y="767.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="4.9624%" y="741" width="0.0243%" height="15" fill="rgb(225,201,24)" fg:x="409" fg:w="2"/><text x="5.2124%" y="751.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="4.9624%" y="725" width="0.0243%" height="15" fill="rgb(221,47,46)" fg:x="409" fg:w="2"/><text x="5.2124%" y="735.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="4.9867%" y="757" width="0.0243%" height="15" fill="rgb(249,23,13)" fg:x="411" fg:w="2"/><text x="5.2367%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="4.9867%" y="741" width="0.0243%" height="15" fill="rgb(219,9,5)" fg:x="411" fg:w="2"/><text x="5.2367%" y="751.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (18 samples, 0.22%)</title><rect x="4.8168%" y="869" width="0.2184%" height="15" fill="rgb(254,171,16)" fg:x="397" fg:w="18"/><text x="5.0668%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (18 samples, 0.22%)</title><rect x="4.8168%" y="853" width="0.2184%" height="15" fill="rgb(230,171,20)" fg:x="397" fg:w="18"/><text x="5.0668%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.22%)</title><rect x="4.8168%" y="837" width="0.2184%" height="15" fill="rgb(210,71,41)" fg:x="397" fg:w="18"/><text x="5.0668%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.22%)</title><rect x="4.8168%" y="821" width="0.2184%" height="15" fill="rgb(206,173,20)" fg:x="397" fg:w="18"/><text x="5.0668%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.22%)</title><rect x="4.8168%" y="805" width="0.2184%" height="15" fill="rgb(233,88,34)" fg:x="397" fg:w="18"/><text x="5.0668%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.22%)</title><rect x="4.8168%" y="789" width="0.2184%" height="15" fill="rgb(223,209,46)" fg:x="397" fg:w="18"/><text x="5.0668%" y="799.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.22%)</title><rect x="4.8168%" y="773" width="0.2184%" height="15" fill="rgb(250,43,18)" fg:x="397" fg:w="18"/><text x="5.0668%" y="783.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="5.0109%" y="757" width="0.0243%" height="15" fill="rgb(208,13,10)" fg:x="413" fg:w="2"/><text x="5.2609%" y="767.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="5.0352%" y="869" width="0.0121%" height="15" fill="rgb(212,200,36)" fg:x="415" fg:w="1"/><text x="5.2852%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="5.0352%" y="853" width="0.0121%" height="15" fill="rgb(225,90,30)" fg:x="415" fg:w="1"/><text x="5.2852%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="5.0352%" y="837" width="0.0121%" height="15" fill="rgb(236,182,39)" fg:x="415" fg:w="1"/><text x="5.2852%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="5.0352%" y="821" width="0.0121%" height="15" fill="rgb(212,144,35)" fg:x="415" fg:w="1"/><text x="5.2852%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="5.0352%" y="805" width="0.0121%" height="15" fill="rgb(228,63,44)" fg:x="415" fg:w="1"/><text x="5.2852%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="5.0352%" y="789" width="0.0121%" height="15" fill="rgb(228,109,6)" fg:x="415" fg:w="1"/><text x="5.2852%" y="799.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="5.0352%" y="773" width="0.0121%" height="15" fill="rgb(238,117,24)" fg:x="415" fg:w="1"/><text x="5.2852%" y="783.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="5.0352%" y="757" width="0.0121%" height="15" fill="rgb(242,26,26)" fg:x="415" fg:w="1"/><text x="5.2852%" y="767.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="5.0595%" y="757" width="0.0485%" height="15" fill="rgb(221,92,48)" fg:x="417" fg:w="4"/><text x="5.3095%" y="767.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="5.0837%" y="741" width="0.0243%" height="15" fill="rgb(209,209,32)" fg:x="419" fg:w="2"/><text x="5.3337%" y="751.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="5.0837%" y="725" width="0.0243%" height="15" fill="rgb(221,70,22)" fg:x="419" fg:w="2"/><text x="5.3337%" y="735.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (75 samples, 0.91%)</title><rect x="4.2223%" y="965" width="0.9100%" height="15" fill="rgb(248,145,5)" fg:x="348" fg:w="75"/><text x="4.4723%" y="975.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (75 samples, 0.91%)</title><rect x="4.2223%" y="949" width="0.9100%" height="15" fill="rgb(226,116,26)" fg:x="348" fg:w="75"/><text x="4.4723%" y="959.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (48 samples, 0.58%)</title><rect x="4.5499%" y="933" width="0.5824%" height="15" fill="rgb(244,5,17)" fg:x="375" fg:w="48"/><text x="4.7999%" y="943.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (48 samples, 0.58%)</title><rect x="4.5499%" y="917" width="0.5824%" height="15" fill="rgb(252,159,33)" fg:x="375" fg:w="48"/><text x="4.7999%" y="927.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (48 samples, 0.58%)</title><rect x="4.5499%" y="901" width="0.5824%" height="15" fill="rgb(206,71,0)" fg:x="375" fg:w="48"/><text x="4.7999%" y="911.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (40 samples, 0.49%)</title><rect x="4.6469%" y="885" width="0.4853%" height="15" fill="rgb(233,118,54)" fg:x="383" fg:w="40"/><text x="4.8969%" y="895.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (7 samples, 0.08%)</title><rect x="5.0473%" y="869" width="0.0849%" height="15" fill="rgb(234,83,48)" fg:x="416" fg:w="7"/><text x="5.2973%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (7 samples, 0.08%)</title><rect x="5.0473%" y="853" width="0.0849%" height="15" fill="rgb(228,3,54)" fg:x="416" fg:w="7"/><text x="5.2973%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.08%)</title><rect x="5.0473%" y="837" width="0.0849%" height="15" fill="rgb(226,155,13)" fg:x="416" fg:w="7"/><text x="5.2973%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.08%)</title><rect x="5.0473%" y="821" width="0.0849%" height="15" fill="rgb(241,28,37)" fg:x="416" fg:w="7"/><text x="5.2973%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.08%)</title><rect x="5.0473%" y="805" width="0.0849%" height="15" fill="rgb(233,93,10)" fg:x="416" fg:w="7"/><text x="5.2973%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.08%)</title><rect x="5.0473%" y="789" width="0.0849%" height="15" fill="rgb(225,113,19)" fg:x="416" fg:w="7"/><text x="5.2973%" y="799.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.08%)</title><rect x="5.0473%" y="773" width="0.0849%" height="15" fill="rgb(241,2,18)" fg:x="416" fg:w="7"/><text x="5.2973%" y="783.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="5.1080%" y="757" width="0.0243%" height="15" fill="rgb(228,207,21)" fg:x="421" fg:w="2"/><text x="5.3580%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="5.1080%" y="741" width="0.0243%" height="15" fill="rgb(213,211,35)" fg:x="421" fg:w="2"/><text x="5.3580%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="5.1444%" y="933" width="0.0121%" height="15" fill="rgb(209,83,10)" fg:x="424" fg:w="1"/><text x="5.3944%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="5.1686%" y="917" width="0.0121%" height="15" fill="rgb(209,164,1)" fg:x="426" fg:w="1"/><text x="5.4186%" y="927.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="5.1686%" y="901" width="0.0121%" height="15" fill="rgb(213,184,43)" fg:x="426" fg:w="1"/><text x="5.4186%" y="911.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="5.1565%" y="933" width="0.0364%" height="15" fill="rgb(231,61,34)" fg:x="425" fg:w="3"/><text x="5.4065%" y="943.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="5.1808%" y="917" width="0.0121%" height="15" fill="rgb(235,75,3)" fg:x="427" fg:w="1"/><text x="5.4308%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="5.3142%" y="517" width="0.0243%" height="15" fill="rgb(220,106,47)" fg:x="438" fg:w="2"/><text x="5.5642%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="5.3142%" y="501" width="0.0243%" height="15" fill="rgb(210,196,33)" fg:x="438" fg:w="2"/><text x="5.5642%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="5.3506%" y="501" width="0.0121%" height="15" fill="rgb(229,154,42)" fg:x="441" fg:w="1"/><text x="5.6006%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.15%)</title><rect x="5.2536%" y="565" width="0.1456%" height="15" fill="rgb(228,114,26)" fg:x="433" fg:w="12"/><text x="5.5036%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.15%)</title><rect x="5.2536%" y="549" width="0.1456%" height="15" fill="rgb(208,144,1)" fg:x="433" fg:w="12"/><text x="5.5036%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.15%)</title><rect x="5.2536%" y="533" width="0.1456%" height="15" fill="rgb(239,112,37)" fg:x="433" fg:w="12"/><text x="5.5036%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.06%)</title><rect x="5.3385%" y="517" width="0.0607%" height="15" fill="rgb(210,96,50)" fg:x="440" fg:w="5"/><text x="5.5885%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="5.3628%" y="501" width="0.0364%" height="15" fill="rgb(222,178,2)" fg:x="442" fg:w="3"/><text x="5.6128%" y="511.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="5.3992%" y="565" width="0.0243%" height="15" fill="rgb(226,74,18)" fg:x="445" fg:w="2"/><text x="5.6492%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="5.4841%" y="405" width="0.0243%" height="15" fill="rgb(225,67,54)" fg:x="452" fg:w="2"/><text x="5.7341%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.15%)</title><rect x="5.4356%" y="453" width="0.1456%" height="15" fill="rgb(251,92,32)" fg:x="448" fg:w="12"/><text x="5.6856%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12 samples, 0.15%)</title><rect x="5.4356%" y="437" width="0.1456%" height="15" fill="rgb(228,149,22)" fg:x="448" fg:w="12"/><text x="5.6856%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.15%)</title><rect x="5.4356%" y="421" width="0.1456%" height="15" fill="rgb(243,54,13)" fg:x="448" fg:w="12"/><text x="5.6856%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.07%)</title><rect x="5.5084%" y="405" width="0.0728%" height="15" fill="rgb(243,180,28)" fg:x="454" fg:w="6"/><text x="5.7584%" y="415.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (15 samples, 0.18%)</title><rect x="5.4234%" y="485" width="0.1820%" height="15" fill="rgb(208,167,24)" fg:x="447" fg:w="15"/><text x="5.6734%" y="495.50"></text></g><g><title>core::hash::Hasher::write_usize (15 samples, 0.18%)</title><rect x="5.4234%" y="469" width="0.1820%" height="15" fill="rgb(245,73,45)" fg:x="447" fg:w="15"/><text x="5.6734%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.02%)</title><rect x="5.5812%" y="453" width="0.0243%" height="15" fill="rgb(237,203,48)" fg:x="460" fg:w="2"/><text x="5.8312%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.04%)</title><rect x="5.6782%" y="405" width="0.0364%" height="15" fill="rgb(211,197,16)" fg:x="468" fg:w="3"/><text x="5.9282%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.08%)</title><rect x="5.6540%" y="421" width="0.0849%" height="15" fill="rgb(243,99,51)" fg:x="466" fg:w="7"/><text x="5.9040%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="5.7146%" y="405" width="0.0243%" height="15" fill="rgb(215,123,29)" fg:x="471" fg:w="2"/><text x="5.9646%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (51 samples, 0.62%)</title><rect x="5.2293%" y="597" width="0.6188%" height="15" fill="rgb(239,186,37)" fg:x="431" fg:w="51"/><text x="5.4793%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (51 samples, 0.62%)</title><rect x="5.2293%" y="581" width="0.6188%" height="15" fill="rgb(252,136,39)" fg:x="431" fg:w="51"/><text x="5.4793%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (35 samples, 0.42%)</title><rect x="5.4234%" y="565" width="0.4247%" height="15" fill="rgb(223,213,32)" fg:x="447" fg:w="35"/><text x="5.6734%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (35 samples, 0.42%)</title><rect x="5.4234%" y="549" width="0.4247%" height="15" fill="rgb(233,115,5)" fg:x="447" fg:w="35"/><text x="5.6734%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (35 samples, 0.42%)</title><rect x="5.4234%" y="533" width="0.4247%" height="15" fill="rgb(207,226,44)" fg:x="447" fg:w="35"/><text x="5.6734%" y="543.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (35 samples, 0.42%)</title><rect x="5.4234%" y="517" width="0.4247%" height="15" fill="rgb(208,126,0)" fg:x="447" fg:w="35"/><text x="5.6734%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (35 samples, 0.42%)</title><rect x="5.4234%" y="501" width="0.4247%" height="15" fill="rgb(244,66,21)" fg:x="447" fg:w="35"/><text x="5.6734%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (20 samples, 0.24%)</title><rect x="5.6054%" y="485" width="0.2427%" height="15" fill="rgb(222,97,12)" fg:x="462" fg:w="20"/><text x="5.8554%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.24%)</title><rect x="5.6054%" y="469" width="0.2427%" height="15" fill="rgb(219,213,19)" fg:x="462" fg:w="20"/><text x="5.8554%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.24%)</title><rect x="5.6054%" y="453" width="0.2427%" height="15" fill="rgb(252,169,30)" fg:x="462" fg:w="20"/><text x="5.8554%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.24%)</title><rect x="5.6054%" y="437" width="0.2427%" height="15" fill="rgb(206,32,51)" fg:x="462" fg:w="20"/><text x="5.8554%" y="447.50"></text></g><g><title>core::hash::sip::u8to64_le (9 samples, 0.11%)</title><rect x="5.7389%" y="421" width="0.1092%" height="15" fill="rgb(250,172,42)" fg:x="473" fg:w="9"/><text x="5.9889%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.01%)</title><rect x="5.8602%" y="565" width="0.0121%" height="15" fill="rgb(209,34,43)" fg:x="483" fg:w="1"/><text x="6.1102%" y="575.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.01%)</title><rect x="5.8602%" y="549" width="0.0121%" height="15" fill="rgb(223,11,35)" fg:x="483" fg:w="1"/><text x="6.1102%" y="559.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.01%)</title><rect x="5.8602%" y="533" width="0.0121%" height="15" fill="rgb(251,219,26)" fg:x="483" fg:w="1"/><text x="6.1102%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="5.8602%" y="517" width="0.0121%" height="15" fill="rgb(231,119,3)" fg:x="483" fg:w="1"/><text x="6.1102%" y="527.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="5.8602%" y="501" width="0.0121%" height="15" fill="rgb(216,97,11)" fg:x="483" fg:w="1"/><text x="6.1102%" y="511.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="5.8602%" y="485" width="0.0121%" height="15" fill="rgb(223,59,9)" fg:x="483" fg:w="1"/><text x="6.1102%" y="495.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="5.8602%" y="469" width="0.0121%" height="15" fill="rgb(233,93,31)" fg:x="483" fg:w="1"/><text x="6.1102%" y="479.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="5.8602%" y="453" width="0.0121%" height="15" fill="rgb(239,81,33)" fg:x="483" fg:w="1"/><text x="6.1102%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="5.8724%" y="549" width="0.0121%" height="15" fill="rgb(213,120,34)" fg:x="484" fg:w="1"/><text x="6.1224%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.04%)</title><rect x="5.8724%" y="565" width="0.0364%" height="15" fill="rgb(243,49,53)" fg:x="484" fg:w="3"/><text x="6.1224%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.02%)</title><rect x="5.8845%" y="549" width="0.0243%" height="15" fill="rgb(247,216,33)" fg:x="485" fg:w="2"/><text x="6.1345%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="5.8845%" y="533" width="0.0243%" height="15" fill="rgb(226,26,14)" fg:x="485" fg:w="2"/><text x="6.1345%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.07%)</title><rect x="5.8481%" y="597" width="0.0728%" height="15" fill="rgb(215,49,53)" fg:x="482" fg:w="6"/><text x="6.0981%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.06%)</title><rect x="5.8602%" y="581" width="0.0607%" height="15" fill="rgb(245,162,40)" fg:x="483" fg:w="5"/><text x="6.1102%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="5.9088%" y="565" width="0.0121%" height="15" fill="rgb(229,68,17)" fg:x="487" fg:w="1"/><text x="6.1588%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="5.9088%" y="549" width="0.0121%" height="15" fill="rgb(213,182,10)" fg:x="487" fg:w="1"/><text x="6.1588%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="5.9209%" y="581" width="0.0121%" height="15" fill="rgb(245,125,30)" fg:x="488" fg:w="1"/><text x="6.1709%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="5.9209%" y="565" width="0.0121%" height="15" fill="rgb(232,202,2)" fg:x="488" fg:w="1"/><text x="6.1709%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="5.9209%" y="549" width="0.0121%" height="15" fill="rgb(237,140,51)" fg:x="488" fg:w="1"/><text x="6.1709%" y="559.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (63 samples, 0.76%)</title><rect x="5.2050%" y="709" width="0.7644%" height="15" fill="rgb(236,157,25)" fg:x="429" fg:w="63"/><text x="5.4550%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (63 samples, 0.76%)</title><rect x="5.2050%" y="693" width="0.7644%" height="15" fill="rgb(219,209,0)" fg:x="429" fg:w="63"/><text x="5.4550%" y="703.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (63 samples, 0.76%)</title><rect x="5.2050%" y="677" width="0.7644%" height="15" fill="rgb(240,116,54)" fg:x="429" fg:w="63"/><text x="5.4550%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (63 samples, 0.76%)</title><rect x="5.2050%" y="661" width="0.7644%" height="15" fill="rgb(216,10,36)" fg:x="429" fg:w="63"/><text x="5.4550%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (62 samples, 0.75%)</title><rect x="5.2172%" y="645" width="0.7522%" height="15" fill="rgb(222,72,44)" fg:x="430" fg:w="62"/><text x="5.4672%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (62 samples, 0.75%)</title><rect x="5.2172%" y="629" width="0.7522%" height="15" fill="rgb(232,159,9)" fg:x="430" fg:w="62"/><text x="5.4672%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (62 samples, 0.75%)</title><rect x="5.2172%" y="613" width="0.7522%" height="15" fill="rgb(210,39,32)" fg:x="430" fg:w="62"/><text x="5.4672%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (4 samples, 0.05%)</title><rect x="5.9209%" y="597" width="0.0485%" height="15" fill="rgb(216,194,45)" fg:x="488" fg:w="4"/><text x="6.1709%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 0.04%)</title><rect x="5.9330%" y="581" width="0.0364%" height="15" fill="rgb(218,18,35)" fg:x="489" fg:w="3"/><text x="6.1830%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.01%)</title><rect x="5.9573%" y="565" width="0.0121%" height="15" fill="rgb(207,83,51)" fg:x="491" fg:w="1"/><text x="6.2073%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.01%)</title><rect x="5.9573%" y="549" width="0.0121%" height="15" fill="rgb(225,63,43)" fg:x="491" fg:w="1"/><text x="6.2073%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (65 samples, 0.79%)</title><rect x="5.2050%" y="837" width="0.7886%" height="15" fill="rgb(207,57,36)" fg:x="429" fg:w="65"/><text x="5.4550%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.79%)</title><rect x="5.2050%" y="821" width="0.7886%" height="15" fill="rgb(216,99,33)" fg:x="429" fg:w="65"/><text x="5.4550%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.79%)</title><rect x="5.2050%" y="805" width="0.7886%" height="15" fill="rgb(225,42,16)" fg:x="429" fg:w="65"/><text x="5.4550%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.79%)</title><rect x="5.2050%" y="789" width="0.7886%" height="15" fill="rgb(220,201,45)" fg:x="429" fg:w="65"/><text x="5.4550%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.79%)</title><rect x="5.2050%" y="773" width="0.7886%" height="15" fill="rgb(225,33,4)" fg:x="429" fg:w="65"/><text x="5.4550%" y="783.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.79%)</title><rect x="5.2050%" y="757" width="0.7886%" height="15" fill="rgb(224,33,50)" fg:x="429" fg:w="65"/><text x="5.4550%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.79%)</title><rect x="5.2050%" y="741" width="0.7886%" height="15" fill="rgb(246,198,51)" fg:x="429" fg:w="65"/><text x="5.4550%" y="751.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (65 samples, 0.79%)</title><rect x="5.2050%" y="725" width="0.7886%" height="15" fill="rgb(205,22,4)" fg:x="429" fg:w="65"/><text x="5.4550%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="5.9694%" y="709" width="0.0243%" height="15" fill="rgb(206,3,8)" fg:x="492" fg:w="2"/><text x="6.2194%" y="719.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="5.9816%" y="693" width="0.0121%" height="15" fill="rgb(251,23,15)" fg:x="493" fg:w="1"/><text x="6.2316%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.01%)</title><rect x="5.9937%" y="725" width="0.0121%" height="15" fill="rgb(252,88,28)" fg:x="494" fg:w="1"/><text x="6.2437%" y="735.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.01%)</title><rect x="5.9937%" y="709" width="0.0121%" height="15" fill="rgb(212,127,14)" fg:x="494" fg:w="1"/><text x="6.2437%" y="719.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.01%)</title><rect x="5.9937%" y="693" width="0.0121%" height="15" fill="rgb(247,145,37)" fg:x="494" fg:w="1"/><text x="6.2437%" y="703.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (67 samples, 0.81%)</title><rect x="5.2050%" y="885" width="0.8129%" height="15" fill="rgb(209,117,53)" fg:x="429" fg:w="67"/><text x="5.4550%" y="895.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (67 samples, 0.81%)</title><rect x="5.2050%" y="869" width="0.8129%" height="15" fill="rgb(212,90,42)" fg:x="429" fg:w="67"/><text x="5.4550%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (67 samples, 0.81%)</title><rect x="5.2050%" y="853" width="0.8129%" height="15" fill="rgb(218,164,37)" fg:x="429" fg:w="67"/><text x="5.4550%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2 samples, 0.02%)</title><rect x="5.9937%" y="837" width="0.0243%" height="15" fill="rgb(246,65,34)" fg:x="494" fg:w="2"/><text x="6.2437%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="5.9937%" y="821" width="0.0243%" height="15" fill="rgb(231,100,33)" fg:x="494" fg:w="2"/><text x="6.2437%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="5.9937%" y="805" width="0.0243%" height="15" fill="rgb(228,126,14)" fg:x="494" fg:w="2"/><text x="6.2437%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.02%)</title><rect x="5.9937%" y="789" width="0.0243%" height="15" fill="rgb(215,173,21)" fg:x="494" fg:w="2"/><text x="6.2437%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.02%)</title><rect x="5.9937%" y="773" width="0.0243%" height="15" fill="rgb(210,6,40)" fg:x="494" fg:w="2"/><text x="6.2437%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (2 samples, 0.02%)</title><rect x="5.9937%" y="757" width="0.0243%" height="15" fill="rgb(212,48,18)" fg:x="494" fg:w="2"/><text x="6.2437%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (2 samples, 0.02%)</title><rect x="5.9937%" y="741" width="0.0243%" height="15" fill="rgb(230,214,11)" fg:x="494" fg:w="2"/><text x="6.2437%" y="751.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.01%)</title><rect x="6.0058%" y="725" width="0.0121%" height="15" fill="rgb(254,105,39)" fg:x="495" fg:w="1"/><text x="6.2558%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (1 samples, 0.01%)</title><rect x="6.0058%" y="709" width="0.0121%" height="15" fill="rgb(245,158,5)" fg:x="495" fg:w="1"/><text x="6.2558%" y="719.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (69 samples, 0.84%)</title><rect x="5.1929%" y="933" width="0.8372%" height="15" fill="rgb(249,208,11)" fg:x="428" fg:w="69"/><text x="5.4429%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (68 samples, 0.83%)</title><rect x="5.2050%" y="917" width="0.8250%" height="15" fill="rgb(210,39,28)" fg:x="429" fg:w="68"/><text x="5.4550%" y="927.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (68 samples, 0.83%)</title><rect x="5.2050%" y="901" width="0.8250%" height="15" fill="rgb(211,56,53)" fg:x="429" fg:w="68"/><text x="5.4550%" y="911.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::with_hasher (1 samples, 0.01%)</title><rect x="6.0180%" y="885" width="0.0121%" height="15" fill="rgb(226,201,30)" fg:x="496" fg:w="1"/><text x="6.2680%" y="895.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.0908%" y="869" width="0.0121%" height="15" fill="rgb(239,101,34)" fg:x="502" fg:w="1"/><text x="6.3408%" y="879.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.0908%" y="853" width="0.0121%" height="15" fill="rgb(226,209,5)" fg:x="502" fg:w="1"/><text x="6.3408%" y="863.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallContext as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.1029%" y="869" width="0.0121%" height="15" fill="rgb(250,105,47)" fg:x="503" fg:w="1"/><text x="6.3529%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.1029%" y="853" width="0.0121%" height="15" fill="rgb(230,72,3)" fg:x="503" fg:w="1"/><text x="6.3529%" y="863.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallInputs as core::clone::Clone&gt;::clone (8 samples, 0.10%)</title><rect x="6.0301%" y="885" width="0.0971%" height="15" fill="rgb(232,218,39)" fg:x="497" fg:w="8"/><text x="6.2801%" y="895.50"></text></g><g><title>&lt;revm_interpreter::inner_models::Transfer as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.1150%" y="869" width="0.0121%" height="15" fill="rgb(248,166,6)" fg:x="504" fg:w="1"/><text x="6.3650%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.1150%" y="853" width="0.0121%" height="15" fill="rgb(247,89,20)" fg:x="504" fg:w="1"/><text x="6.3650%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.13%)</title><rect x="6.0301%" y="917" width="0.1335%" height="15" fill="rgb(248,130,54)" fg:x="497" fg:w="11"/><text x="6.2801%" y="927.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (11 samples, 0.13%)</title><rect x="6.0301%" y="901" width="0.1335%" height="15" fill="rgb(234,196,4)" fg:x="497" fg:w="11"/><text x="6.2801%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.04%)</title><rect x="6.1272%" y="885" width="0.0364%" height="15" fill="rgb(250,143,31)" fg:x="505" fg:w="3"/><text x="6.3772%" y="895.50"></text></g><g><title>core::ptr::write (3 samples, 0.04%)</title><rect x="6.1272%" y="869" width="0.0364%" height="15" fill="rgb(211,110,34)" fg:x="505" fg:w="3"/><text x="6.3772%" y="879.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="6.1636%" y="821" width="0.0121%" height="15" fill="rgb(215,124,48)" fg:x="508" fg:w="1"/><text x="6.4136%" y="831.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="6.1636%" y="805" width="0.0121%" height="15" fill="rgb(216,46,13)" fg:x="508" fg:w="1"/><text x="6.4136%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (2 samples, 0.02%)</title><rect x="6.1636%" y="885" width="0.0243%" height="15" fill="rgb(205,184,25)" fg:x="508" fg:w="2"/><text x="6.4136%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="6.1636%" y="869" width="0.0243%" height="15" fill="rgb(228,1,10)" fg:x="508" fg:w="2"/><text x="6.4136%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="6.1636%" y="853" width="0.0243%" height="15" fill="rgb(213,116,27)" fg:x="508" fg:w="2"/><text x="6.4136%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="6.1636%" y="837" width="0.0243%" height="15" fill="rgb(241,95,50)" fg:x="508" fg:w="2"/><text x="6.4136%" y="847.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="6.1757%" y="821" width="0.0121%" height="15" fill="rgb(238,48,32)" fg:x="509" fg:w="1"/><text x="6.4257%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="6.1757%" y="805" width="0.0121%" height="15" fill="rgb(235,113,49)" fg:x="509" fg:w="1"/><text x="6.4257%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.2000%" y="837" width="0.0121%" height="15" fill="rgb(205,127,43)" fg:x="511" fg:w="1"/><text x="6.4500%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="6.2000%" y="821" width="0.0121%" height="15" fill="rgb(250,162,2)" fg:x="511" fg:w="1"/><text x="6.4500%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.07%)</title><rect x="6.2000%" y="869" width="0.0728%" height="15" fill="rgb(220,13,41)" fg:x="511" fg:w="6"/><text x="6.4500%" y="879.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (6 samples, 0.07%)</title><rect x="6.2000%" y="853" width="0.0728%" height="15" fill="rgb(249,221,25)" fg:x="511" fg:w="6"/><text x="6.4500%" y="863.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="6.2121%" y="837" width="0.0607%" height="15" fill="rgb(215,208,19)" fg:x="512" fg:w="5"/><text x="6.4621%" y="847.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="6.2121%" y="821" width="0.0607%" height="15" fill="rgb(236,175,2)" fg:x="512" fg:w="5"/><text x="6.4621%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="6.2121%" y="805" width="0.0607%" height="15" fill="rgb(241,52,2)" fg:x="512" fg:w="5"/><text x="6.4621%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (5 samples, 0.06%)</title><rect x="6.2121%" y="789" width="0.0607%" height="15" fill="rgb(248,140,14)" fg:x="512" fg:w="5"/><text x="6.4621%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (5 samples, 0.06%)</title><rect x="6.2121%" y="773" width="0.0607%" height="15" fill="rgb(253,22,42)" fg:x="512" fg:w="5"/><text x="6.4621%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.01%)</title><rect x="6.2727%" y="853" width="0.0121%" height="15" fill="rgb(234,61,47)" fg:x="517" fg:w="1"/><text x="6.5227%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="6.2727%" y="837" width="0.0121%" height="15" fill="rgb(208,226,15)" fg:x="517" fg:w="1"/><text x="6.5227%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="6.2727%" y="821" width="0.0121%" height="15" fill="rgb(217,221,4)" fg:x="517" fg:w="1"/><text x="6.5227%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (2 samples, 0.02%)</title><rect x="6.2727%" y="869" width="0.0243%" height="15" fill="rgb(212,174,34)" fg:x="517" fg:w="2"/><text x="6.5227%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (1 samples, 0.01%)</title><rect x="6.2849%" y="853" width="0.0121%" height="15" fill="rgb(253,83,4)" fg:x="518" fg:w="1"/><text x="6.5349%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (1 samples, 0.01%)</title><rect x="6.2849%" y="837" width="0.0121%" height="15" fill="rgb(250,195,49)" fg:x="518" fg:w="1"/><text x="6.5349%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="6.2849%" y="821" width="0.0121%" height="15" fill="rgb(241,192,25)" fg:x="518" fg:w="1"/><text x="6.5349%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="6.2849%" y="805" width="0.0121%" height="15" fill="rgb(208,124,10)" fg:x="518" fg:w="1"/><text x="6.5349%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="6.2849%" y="789" width="0.0121%" height="15" fill="rgb(222,33,0)" fg:x="518" fg:w="1"/><text x="6.5349%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="6.2849%" y="773" width="0.0121%" height="15" fill="rgb(234,209,28)" fg:x="518" fg:w="1"/><text x="6.5349%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="6.2970%" y="757" width="0.0243%" height="15" fill="rgb(224,11,23)" fg:x="519" fg:w="2"/><text x="6.5470%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="6.2970%" y="741" width="0.0243%" height="15" fill="rgb(232,99,1)" fg:x="519" fg:w="2"/><text x="6.5470%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="6.2970%" y="725" width="0.0243%" height="15" fill="rgb(237,95,45)" fg:x="519" fg:w="2"/><text x="6.5470%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="6.3091%" y="709" width="0.0121%" height="15" fill="rgb(208,109,11)" fg:x="520" fg:w="1"/><text x="6.5591%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="6.3091%" y="693" width="0.0121%" height="15" fill="rgb(216,190,48)" fg:x="520" fg:w="1"/><text x="6.5591%" y="703.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="6.3213%" y="677" width="0.0243%" height="15" fill="rgb(251,171,36)" fg:x="521" fg:w="2"/><text x="6.5713%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="6.3213%" y="661" width="0.0243%" height="15" fill="rgb(230,62,22)" fg:x="521" fg:w="2"/><text x="6.5713%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3213%" y="645" width="0.0243%" height="15" fill="rgb(225,114,35)" fg:x="521" fg:w="2"/><text x="6.5713%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3213%" y="629" width="0.0243%" height="15" fill="rgb(215,118,42)" fg:x="521" fg:w="2"/><text x="6.5713%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3213%" y="613" width="0.0243%" height="15" fill="rgb(243,119,21)" fg:x="521" fg:w="2"/><text x="6.5713%" y="623.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="6.3213%" y="597" width="0.0243%" height="15" fill="rgb(252,177,53)" fg:x="521" fg:w="2"/><text x="6.5713%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="6.3455%" y="613" width="0.0121%" height="15" fill="rgb(237,209,29)" fg:x="523" fg:w="1"/><text x="6.5955%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="6.3455%" y="597" width="0.0121%" height="15" fill="rgb(212,65,23)" fg:x="523" fg:w="1"/><text x="6.5955%" y="607.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::call_precompile (6 samples, 0.07%)</title><rect x="6.2970%" y="869" width="0.0728%" height="15" fill="rgb(230,222,46)" fg:x="519" fg:w="6"/><text x="6.5470%" y="879.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::call (6 samples, 0.07%)</title><rect x="6.2970%" y="853" width="0.0728%" height="15" fill="rgb(215,135,32)" fg:x="519" fg:w="6"/><text x="6.5470%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (6 samples, 0.07%)</title><rect x="6.2970%" y="837" width="0.0728%" height="15" fill="rgb(246,101,22)" fg:x="519" fg:w="6"/><text x="6.5470%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 0.07%)</title><rect x="6.2970%" y="821" width="0.0728%" height="15" fill="rgb(206,107,13)" fg:x="519" fg:w="6"/><text x="6.5470%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6 samples, 0.07%)</title><rect x="6.2970%" y="805" width="0.0728%" height="15" fill="rgb(250,100,44)" fg:x="519" fg:w="6"/><text x="6.5470%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="6.2970%" y="789" width="0.0728%" height="15" fill="rgb(231,147,38)" fg:x="519" fg:w="6"/><text x="6.5470%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="6.2970%" y="773" width="0.0728%" height="15" fill="rgb(229,8,40)" fg:x="519" fg:w="6"/><text x="6.5470%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="6.3213%" y="757" width="0.0485%" height="15" fill="rgb(221,135,30)" fg:x="521" fg:w="4"/><text x="6.5713%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="6.3213%" y="741" width="0.0485%" height="15" fill="rgb(249,193,18)" fg:x="521" fg:w="4"/><text x="6.5713%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="6.3213%" y="725" width="0.0485%" height="15" fill="rgb(209,133,39)" fg:x="521" fg:w="4"/><text x="6.5713%" y="735.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="6.3213%" y="709" width="0.0485%" height="15" fill="rgb(232,100,14)" fg:x="521" fg:w="4"/><text x="6.5713%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="6.3213%" y="693" width="0.0485%" height="15" fill="rgb(224,185,1)" fg:x="521" fg:w="4"/><text x="6.5713%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="6.3455%" y="677" width="0.0243%" height="15" fill="rgb(223,139,8)" fg:x="523" fg:w="2"/><text x="6.5955%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3455%" y="661" width="0.0243%" height="15" fill="rgb(232,213,38)" fg:x="523" fg:w="2"/><text x="6.5955%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3455%" y="645" width="0.0243%" height="15" fill="rgb(207,94,22)" fg:x="523" fg:w="2"/><text x="6.5955%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3455%" y="629" width="0.0243%" height="15" fill="rgb(219,183,54)" fg:x="523" fg:w="2"/><text x="6.5955%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="6.3577%" y="613" width="0.0121%" height="15" fill="rgb(216,185,54)" fg:x="524" fg:w="1"/><text x="6.6077%" y="623.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="6.3819%" y="693" width="0.0121%" height="15" fill="rgb(254,217,39)" fg:x="526" fg:w="1"/><text x="6.6319%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="6.3819%" y="677" width="0.0121%" height="15" fill="rgb(240,178,23)" fg:x="526" fg:w="1"/><text x="6.6319%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="6.3819%" y="661" width="0.0121%" height="15" fill="rgb(218,11,47)" fg:x="526" fg:w="1"/><text x="6.6319%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="6.3819%" y="645" width="0.0121%" height="15" fill="rgb(218,51,51)" fg:x="526" fg:w="1"/><text x="6.6319%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="6.3819%" y="629" width="0.0121%" height="15" fill="rgb(238,126,27)" fg:x="526" fg:w="1"/><text x="6.6319%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="6.3819%" y="613" width="0.0121%" height="15" fill="rgb(249,202,22)" fg:x="526" fg:w="1"/><text x="6.6319%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="6.3819%" y="805" width="0.0364%" height="15" fill="rgb(254,195,49)" fg:x="526" fg:w="3"/><text x="6.6319%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="6.3819%" y="789" width="0.0364%" height="15" fill="rgb(208,123,14)" fg:x="526" fg:w="3"/><text x="6.6319%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="6.3819%" y="773" width="0.0364%" height="15" fill="rgb(224,200,8)" fg:x="526" fg:w="3"/><text x="6.6319%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="6.3819%" y="757" width="0.0364%" height="15" fill="rgb(217,61,36)" fg:x="526" fg:w="3"/><text x="6.6319%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="6.3819%" y="741" width="0.0364%" height="15" fill="rgb(206,35,45)" fg:x="526" fg:w="3"/><text x="6.6319%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="6.3819%" y="725" width="0.0364%" height="15" fill="rgb(217,65,33)" fg:x="526" fg:w="3"/><text x="6.6319%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="6.3819%" y="709" width="0.0364%" height="15" fill="rgb(222,158,48)" fg:x="526" fg:w="3"/><text x="6.6319%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="6.3941%" y="693" width="0.0243%" height="15" fill="rgb(254,2,54)" fg:x="527" fg:w="2"/><text x="6.6441%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3941%" y="677" width="0.0243%" height="15" fill="rgb(250,143,38)" fg:x="527" fg:w="2"/><text x="6.6441%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3941%" y="661" width="0.0243%" height="15" fill="rgb(248,25,0)" fg:x="527" fg:w="2"/><text x="6.6441%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3941%" y="645" width="0.0243%" height="15" fill="rgb(206,152,27)" fg:x="527" fg:w="2"/><text x="6.6441%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="6.3941%" y="629" width="0.0243%" height="15" fill="rgb(240,77,30)" fg:x="527" fg:w="2"/><text x="6.6441%" y="639.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_account (5 samples, 0.06%)</title><rect x="6.3698%" y="869" width="0.0607%" height="15" fill="rgb(231,5,3)" fg:x="525" fg:w="5"/><text x="6.6198%" y="879.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.06%)</title><rect x="6.3698%" y="853" width="0.0607%" height="15" fill="rgb(207,226,32)" fg:x="525" fg:w="5"/><text x="6.6198%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.05%)</title><rect x="6.3819%" y="837" width="0.0485%" height="15" fill="rgb(222,207,47)" fg:x="526" fg:w="4"/><text x="6.6319%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.05%)</title><rect x="6.3819%" y="821" width="0.0485%" height="15" fill="rgb(229,115,45)" fg:x="526" fg:w="4"/><text x="6.6319%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="6.4183%" y="805" width="0.0121%" height="15" fill="rgb(224,191,6)" fg:x="529" fg:w="1"/><text x="6.6683%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="6.4183%" y="789" width="0.0121%" height="15" fill="rgb(230,227,24)" fg:x="529" fg:w="1"/><text x="6.6683%" y="799.50"></text></g><g><title>__GI_memcpy (2 samples, 0.02%)</title><rect x="6.4547%" y="709" width="0.0243%" height="15" fill="rgb(228,80,19)" fg:x="532" fg:w="2"/><text x="6.7047%" y="719.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (1 samples, 0.01%)</title><rect x="6.4669%" y="693" width="0.0121%" height="15" fill="rgb(247,229,0)" fg:x="533" fg:w="1"/><text x="6.7169%" y="703.50"></text></g><g><title>_int_realloc (6 samples, 0.07%)</title><rect x="6.4305%" y="725" width="0.0728%" height="15" fill="rgb(237,194,15)" fg:x="530" fg:w="6"/><text x="6.6805%" y="735.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="6.4790%" y="709" width="0.0243%" height="15" fill="rgb(219,203,20)" fg:x="534" fg:w="2"/><text x="6.7290%" y="719.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="6.4911%" y="693" width="0.0121%" height="15" fill="rgb(234,128,8)" fg:x="535" fg:w="1"/><text x="6.7411%" y="703.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.08%)</title><rect x="6.4305%" y="741" width="0.0849%" height="15" fill="rgb(248,202,8)" fg:x="530" fg:w="7"/><text x="6.6805%" y="751.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="6.5033%" y="725" width="0.0121%" height="15" fill="rgb(206,104,37)" fg:x="536" fg:w="1"/><text x="6.7533%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.10%)</title><rect x="6.4305%" y="805" width="0.0971%" height="15" fill="rgb(223,8,27)" fg:x="530" fg:w="8"/><text x="6.6805%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.10%)</title><rect x="6.4305%" y="789" width="0.0971%" height="15" fill="rgb(216,217,28)" fg:x="530" fg:w="8"/><text x="6.6805%" y="799.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.10%)</title><rect x="6.4305%" y="773" width="0.0971%" height="15" fill="rgb(249,199,1)" fg:x="530" fg:w="8"/><text x="6.6805%" y="783.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.10%)</title><rect x="6.4305%" y="757" width="0.0971%" height="15" fill="rgb(240,85,17)" fg:x="530" fg:w="8"/><text x="6.6805%" y="767.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="6.5154%" y="741" width="0.0121%" height="15" fill="rgb(206,108,45)" fg:x="537" fg:w="1"/><text x="6.7654%" y="751.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="6.5154%" y="725" width="0.0121%" height="15" fill="rgb(245,210,41)" fg:x="537" fg:w="1"/><text x="6.7654%" y="735.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (9 samples, 0.11%)</title><rect x="6.4305%" y="869" width="0.1092%" height="15" fill="rgb(206,13,37)" fg:x="530" fg:w="9"/><text x="6.6805%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.11%)</title><rect x="6.4305%" y="853" width="0.1092%" height="15" fill="rgb(250,61,18)" fg:x="530" fg:w="9"/><text x="6.6805%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.11%)</title><rect x="6.4305%" y="837" width="0.1092%" height="15" fill="rgb(235,172,48)" fg:x="530" fg:w="9"/><text x="6.6805%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.11%)</title><rect x="6.4305%" y="821" width="0.1092%" height="15" fill="rgb(249,201,17)" fg:x="530" fg:w="9"/><text x="6.6805%" y="831.50"></text></g><g><title>core::cmp::max (1 samples, 0.01%)</title><rect x="6.5275%" y="805" width="0.0121%" height="15" fill="rgb(219,208,6)" fg:x="538" fg:w="1"/><text x="6.7775%" y="815.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.01%)</title><rect x="6.5275%" y="789" width="0.0121%" height="15" fill="rgb(248,31,23)" fg:x="538" fg:w="1"/><text x="6.7775%" y="799.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.01%)</title><rect x="6.5275%" y="773" width="0.0121%" height="15" fill="rgb(245,15,42)" fg:x="538" fg:w="1"/><text x="6.7775%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.01%)</title><rect x="6.5397%" y="853" width="0.0121%" height="15" fill="rgb(222,217,39)" fg:x="539" fg:w="1"/><text x="6.7897%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="6.5397%" y="837" width="0.0121%" height="15" fill="rgb(210,219,27)" fg:x="539" fg:w="1"/><text x="6.7897%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="6.5761%" y="773" width="0.0121%" height="15" fill="rgb(252,166,36)" fg:x="542" fg:w="1"/><text x="6.8261%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="6.5761%" y="757" width="0.0121%" height="15" fill="rgb(245,132,34)" fg:x="542" fg:w="1"/><text x="6.8261%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="6.5761%" y="741" width="0.0121%" height="15" fill="rgb(236,54,3)" fg:x="542" fg:w="1"/><text x="6.8261%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="6.5761%" y="725" width="0.0121%" height="15" fill="rgb(241,173,43)" fg:x="542" fg:w="1"/><text x="6.8261%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="6.5761%" y="709" width="0.0121%" height="15" fill="rgb(215,190,9)" fg:x="542" fg:w="1"/><text x="6.8261%" y="719.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="6.5882%" y="773" width="0.0121%" height="15" fill="rgb(242,101,16)" fg:x="543" fg:w="1"/><text x="6.8382%" y="783.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="6.6003%" y="693" width="0.0243%" height="15" fill="rgb(223,190,21)" fg:x="544" fg:w="2"/><text x="6.8503%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="6.6003%" y="677" width="0.0243%" height="15" fill="rgb(215,228,25)" fg:x="544" fg:w="2"/><text x="6.8503%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.6003%" y="661" width="0.0243%" height="15" fill="rgb(225,36,22)" fg:x="544" fg:w="2"/><text x="6.8503%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.6003%" y="645" width="0.0243%" height="15" fill="rgb(251,106,46)" fg:x="544" fg:w="2"/><text x="6.8503%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.6003%" y="629" width="0.0243%" height="15" fill="rgb(208,90,1)" fg:x="544" fg:w="2"/><text x="6.8503%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="6.6125%" y="613" width="0.0121%" height="15" fill="rgb(243,10,4)" fg:x="545" fg:w="1"/><text x="6.8625%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="6.6125%" y="597" width="0.0121%" height="15" fill="rgb(212,137,27)" fg:x="545" fg:w="1"/><text x="6.8625%" y="607.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (9 samples, 0.11%)</title><rect x="6.5397%" y="869" width="0.1092%" height="15" fill="rgb(231,220,49)" fg:x="539" fg:w="9"/><text x="6.7897%" y="879.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (8 samples, 0.10%)</title><rect x="6.5518%" y="853" width="0.0971%" height="15" fill="rgb(237,96,20)" fg:x="540" fg:w="8"/><text x="6.8018%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.10%)</title><rect x="6.5518%" y="837" width="0.0971%" height="15" fill="rgb(239,229,30)" fg:x="540" fg:w="8"/><text x="6.8018%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.10%)</title><rect x="6.5518%" y="821" width="0.0971%" height="15" fill="rgb(219,65,33)" fg:x="540" fg:w="8"/><text x="6.8018%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.08%)</title><rect x="6.5639%" y="805" width="0.0849%" height="15" fill="rgb(243,134,7)" fg:x="541" fg:w="7"/><text x="6.8139%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.08%)</title><rect x="6.5639%" y="789" width="0.0849%" height="15" fill="rgb(216,177,54)" fg:x="541" fg:w="7"/><text x="6.8139%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="6.6003%" y="773" width="0.0485%" height="15" fill="rgb(211,160,20)" fg:x="544" fg:w="4"/><text x="6.8503%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="6.6003%" y="757" width="0.0485%" height="15" fill="rgb(239,85,39)" fg:x="544" fg:w="4"/><text x="6.8503%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="6.6003%" y="741" width="0.0485%" height="15" fill="rgb(232,125,22)" fg:x="544" fg:w="4"/><text x="6.8503%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="6.6003%" y="725" width="0.0485%" height="15" fill="rgb(244,57,34)" fg:x="544" fg:w="4"/><text x="6.8503%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="6.6003%" y="709" width="0.0485%" height="15" fill="rgb(214,203,32)" fg:x="544" fg:w="4"/><text x="6.8503%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="6.6246%" y="693" width="0.0243%" height="15" fill="rgb(207,58,43)" fg:x="546" fg:w="2"/><text x="6.8746%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.6246%" y="677" width="0.0243%" height="15" fill="rgb(215,193,15)" fg:x="546" fg:w="2"/><text x="6.8746%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.6246%" y="661" width="0.0243%" height="15" fill="rgb(232,15,44)" fg:x="546" fg:w="2"/><text x="6.8746%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.6246%" y="645" width="0.0243%" height="15" fill="rgb(212,3,48)" fg:x="546" fg:w="2"/><text x="6.8746%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="6.6367%" y="629" width="0.0121%" height="15" fill="rgb(218,128,7)" fg:x="547" fg:w="1"/><text x="6.8867%" y="639.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (1 samples, 0.01%)</title><rect x="6.6610%" y="853" width="0.0121%" height="15" fill="rgb(226,216,39)" fg:x="549" fg:w="1"/><text x="6.9110%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="6.6610%" y="837" width="0.0121%" height="15" fill="rgb(243,47,51)" fg:x="549" fg:w="1"/><text x="6.9110%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="6.6610%" y="821" width="0.0121%" height="15" fill="rgb(241,183,40)" fg:x="549" fg:w="1"/><text x="6.9110%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="6.6610%" y="805" width="0.0121%" height="15" fill="rgb(231,217,32)" fg:x="549" fg:w="1"/><text x="6.9110%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="6.6610%" y="789" width="0.0121%" height="15" fill="rgb(229,61,38)" fg:x="549" fg:w="1"/><text x="6.9110%" y="799.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="6.6610%" y="773" width="0.0121%" height="15" fill="rgb(225,210,5)" fg:x="549" fg:w="1"/><text x="6.9110%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="6.6610%" y="757" width="0.0121%" height="15" fill="rgb(231,79,45)" fg:x="549" fg:w="1"/><text x="6.9110%" y="767.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="6.6731%" y="773" width="0.0121%" height="15" fill="rgb(224,100,7)" fg:x="550" fg:w="1"/><text x="6.9231%" y="783.50"></text></g><g><title>revm::journaled_state::JournaledState::touch (4 samples, 0.05%)</title><rect x="6.6489%" y="869" width="0.0485%" height="15" fill="rgb(241,198,18)" fg:x="548" fg:w="4"/><text x="6.8989%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.02%)</title><rect x="6.6731%" y="853" width="0.0243%" height="15" fill="rgb(252,97,53)" fg:x="550" fg:w="2"/><text x="6.9231%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.02%)</title><rect x="6.6731%" y="837" width="0.0243%" height="15" fill="rgb(220,88,7)" fg:x="550" fg:w="2"/><text x="6.9231%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.02%)</title><rect x="6.6731%" y="821" width="0.0243%" height="15" fill="rgb(213,176,14)" fg:x="550" fg:w="2"/><text x="6.9231%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="6.6731%" y="805" width="0.0243%" height="15" fill="rgb(246,73,7)" fg:x="550" fg:w="2"/><text x="6.9231%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="6.6731%" y="789" width="0.0243%" height="15" fill="rgb(245,64,36)" fg:x="550" fg:w="2"/><text x="6.9231%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="6.6853%" y="773" width="0.0121%" height="15" fill="rgb(245,80,10)" fg:x="551" fg:w="1"/><text x="6.9353%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="6.6853%" y="757" width="0.0121%" height="15" fill="rgb(232,107,50)" fg:x="551" fg:w="1"/><text x="6.9353%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="6.6853%" y="741" width="0.0121%" height="15" fill="rgb(253,3,0)" fg:x="551" fg:w="1"/><text x="6.9353%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="6.6853%" y="725" width="0.0121%" height="15" fill="rgb(212,99,53)" fg:x="551" fg:w="1"/><text x="6.9353%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="6.6853%" y="709" width="0.0121%" height="15" fill="rgb(249,111,54)" fg:x="551" fg:w="1"/><text x="6.9353%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="6.6853%" y="693" width="0.0121%" height="15" fill="rgb(249,55,30)" fg:x="551" fg:w="1"/><text x="6.9353%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="6.6853%" y="677" width="0.0121%" height="15" fill="rgb(237,47,42)" fg:x="551" fg:w="1"/><text x="6.9353%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="6.6853%" y="661" width="0.0121%" height="15" fill="rgb(211,20,18)" fg:x="551" fg:w="1"/><text x="6.9353%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="6.6853%" y="645" width="0.0121%" height="15" fill="rgb(231,203,46)" fg:x="551" fg:w="1"/><text x="6.9353%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="6.6853%" y="629" width="0.0121%" height="15" fill="rgb(237,142,3)" fg:x="551" fg:w="1"/><text x="6.9353%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="6.6974%" y="853" width="0.0121%" height="15" fill="rgb(241,107,1)" fg:x="552" fg:w="1"/><text x="6.9474%" y="863.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="6.6974%" y="837" width="0.0121%" height="15" fill="rgb(229,83,13)" fg:x="552" fg:w="1"/><text x="6.9474%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="6.7338%" y="773" width="0.0364%" height="15" fill="rgb(241,91,40)" fg:x="555" fg:w="3"/><text x="6.9838%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="6.7338%" y="757" width="0.0364%" height="15" fill="rgb(225,3,45)" fg:x="555" fg:w="3"/><text x="6.9838%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="6.7338%" y="741" width="0.0364%" height="15" fill="rgb(244,223,14)" fg:x="555" fg:w="3"/><text x="6.9838%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="6.7581%" y="725" width="0.0121%" height="15" fill="rgb(224,124,37)" fg:x="557" fg:w="1"/><text x="7.0081%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="6.7581%" y="709" width="0.0121%" height="15" fill="rgb(251,171,30)" fg:x="557" fg:w="1"/><text x="7.0081%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="6.7702%" y="693" width="0.0364%" height="15" fill="rgb(236,46,54)" fg:x="558" fg:w="3"/><text x="7.0202%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="6.7702%" y="677" width="0.0364%" height="15" fill="rgb(245,213,5)" fg:x="558" fg:w="3"/><text x="7.0202%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="6.7702%" y="661" width="0.0364%" height="15" fill="rgb(230,144,27)" fg:x="558" fg:w="3"/><text x="7.0202%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="6.7702%" y="645" width="0.0364%" height="15" fill="rgb(220,86,6)" fg:x="558" fg:w="3"/><text x="7.0202%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="6.7702%" y="629" width="0.0364%" height="15" fill="rgb(240,20,13)" fg:x="558" fg:w="3"/><text x="7.0202%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="6.7823%" y="613" width="0.0243%" height="15" fill="rgb(217,89,34)" fg:x="559" fg:w="2"/><text x="7.0323%" y="623.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (13 samples, 0.16%)</title><rect x="6.7095%" y="853" width="0.1577%" height="15" fill="rgb(229,13,5)" fg:x="553" fg:w="13"/><text x="6.9595%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (12 samples, 0.15%)</title><rect x="6.7217%" y="837" width="0.1456%" height="15" fill="rgb(244,67,35)" fg:x="554" fg:w="12"/><text x="6.9717%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (12 samples, 0.15%)</title><rect x="6.7217%" y="821" width="0.1456%" height="15" fill="rgb(221,40,2)" fg:x="554" fg:w="12"/><text x="6.9717%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.13%)</title><rect x="6.7338%" y="805" width="0.1335%" height="15" fill="rgb(237,157,21)" fg:x="555" fg:w="11"/><text x="6.9838%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.13%)</title><rect x="6.7338%" y="789" width="0.1335%" height="15" fill="rgb(222,94,11)" fg:x="555" fg:w="11"/><text x="6.9838%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.10%)</title><rect x="6.7702%" y="773" width="0.0971%" height="15" fill="rgb(249,113,6)" fg:x="558" fg:w="8"/><text x="7.0202%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="6.7702%" y="757" width="0.0971%" height="15" fill="rgb(238,137,36)" fg:x="558" fg:w="8"/><text x="7.0202%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="6.7702%" y="741" width="0.0971%" height="15" fill="rgb(210,102,26)" fg:x="558" fg:w="8"/><text x="7.0202%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.10%)</title><rect x="6.7702%" y="725" width="0.0971%" height="15" fill="rgb(218,30,30)" fg:x="558" fg:w="8"/><text x="7.0202%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.10%)</title><rect x="6.7702%" y="709" width="0.0971%" height="15" fill="rgb(214,67,26)" fg:x="558" fg:w="8"/><text x="7.0202%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (5 samples, 0.06%)</title><rect x="6.8066%" y="693" width="0.0607%" height="15" fill="rgb(251,9,53)" fg:x="561" fg:w="5"/><text x="7.0566%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="6.8066%" y="677" width="0.0607%" height="15" fill="rgb(228,204,25)" fg:x="561" fg:w="5"/><text x="7.0566%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="6.8066%" y="661" width="0.0607%" height="15" fill="rgb(207,153,8)" fg:x="561" fg:w="5"/><text x="7.0566%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="6.8066%" y="645" width="0.0607%" height="15" fill="rgb(242,9,16)" fg:x="561" fg:w="5"/><text x="7.0566%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.05%)</title><rect x="6.8187%" y="629" width="0.0485%" height="15" fill="rgb(217,211,10)" fg:x="562" fg:w="4"/><text x="7.0687%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="6.8430%" y="613" width="0.0243%" height="15" fill="rgb(219,228,52)" fg:x="564" fg:w="2"/><text x="7.0930%" y="623.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_sub (1 samples, 0.01%)</title><rect x="6.8673%" y="853" width="0.0121%" height="15" fill="rgb(231,92,29)" fg:x="566" fg:w="1"/><text x="7.1173%" y="863.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.01%)</title><rect x="6.8673%" y="837" width="0.0121%" height="15" fill="rgb(232,8,23)" fg:x="566" fg:w="1"/><text x="7.1173%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="6.8915%" y="773" width="0.0121%" height="15" fill="rgb(216,211,34)" fg:x="568" fg:w="1"/><text x="7.1415%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="6.8915%" y="757" width="0.0121%" height="15" fill="rgb(236,151,0)" fg:x="568" fg:w="1"/><text x="7.1415%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="6.8915%" y="741" width="0.0121%" height="15" fill="rgb(209,168,3)" fg:x="568" fg:w="1"/><text x="7.1415%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.9158%" y="661" width="0.0243%" height="15" fill="rgb(208,129,28)" fg:x="570" fg:w="2"/><text x="7.1658%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.9158%" y="645" width="0.0243%" height="15" fill="rgb(229,78,22)" fg:x="570" fg:w="2"/><text x="7.1658%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.9158%" y="629" width="0.0243%" height="15" fill="rgb(228,187,13)" fg:x="570" fg:w="2"/><text x="7.1658%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="6.9158%" y="613" width="0.0243%" height="15" fill="rgb(240,119,24)" fg:x="570" fg:w="2"/><text x="7.1658%" y="623.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.05%)</title><rect x="6.9037%" y="693" width="0.0485%" height="15" fill="rgb(209,194,42)" fg:x="569" fg:w="4"/><text x="7.1537%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.05%)</title><rect x="6.9037%" y="677" width="0.0485%" height="15" fill="rgb(247,200,46)" fg:x="569" fg:w="4"/><text x="7.1537%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="6.9401%" y="661" width="0.0121%" height="15" fill="rgb(218,76,16)" fg:x="572" fg:w="1"/><text x="7.1901%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.08%)</title><rect x="6.8915%" y="805" width="0.0849%" height="15" fill="rgb(225,21,48)" fg:x="568" fg:w="7"/><text x="7.1415%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.08%)</title><rect x="6.8915%" y="789" width="0.0849%" height="15" fill="rgb(239,223,50)" fg:x="568" fg:w="7"/><text x="7.1415%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.07%)</title><rect x="6.9037%" y="773" width="0.0728%" height="15" fill="rgb(244,45,21)" fg:x="569" fg:w="6"/><text x="7.1537%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="6.9037%" y="757" width="0.0728%" height="15" fill="rgb(232,33,43)" fg:x="569" fg:w="6"/><text x="7.1537%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="6.9037%" y="741" width="0.0728%" height="15" fill="rgb(209,8,3)" fg:x="569" fg:w="6"/><text x="7.1537%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.07%)</title><rect x="6.9037%" y="725" width="0.0728%" height="15" fill="rgb(214,25,53)" fg:x="569" fg:w="6"/><text x="7.1537%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.07%)</title><rect x="6.9037%" y="709" width="0.0728%" height="15" fill="rgb(254,186,54)" fg:x="569" fg:w="6"/><text x="7.1537%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="6.9522%" y="693" width="0.0243%" height="15" fill="rgb(208,174,49)" fg:x="573" fg:w="2"/><text x="7.2022%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.9522%" y="677" width="0.0243%" height="15" fill="rgb(233,191,51)" fg:x="573" fg:w="2"/><text x="7.2022%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.9522%" y="661" width="0.0243%" height="15" fill="rgb(222,134,10)" fg:x="573" fg:w="2"/><text x="7.2022%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.9522%" y="645" width="0.0243%" height="15" fill="rgb(230,226,20)" fg:x="573" fg:w="2"/><text x="7.2022%" y="655.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (79 samples, 0.96%)</title><rect x="6.0301%" y="933" width="0.9585%" height="15" fill="rgb(251,111,25)" fg:x="497" fg:w="79"/><text x="6.2801%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (68 samples, 0.83%)</title><rect x="6.1636%" y="917" width="0.8250%" height="15" fill="rgb(224,40,46)" fg:x="508" fg:w="68"/><text x="6.4136%" y="927.50"></text></g><g><title>revm::handler::mainnet::execution::call (68 samples, 0.83%)</title><rect x="6.1636%" y="901" width="0.8250%" height="15" fill="rgb(236,108,47)" fg:x="508" fg:w="68"/><text x="6.4136%" y="911.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (66 samples, 0.80%)</title><rect x="6.1878%" y="885" width="0.8008%" height="15" fill="rgb(234,93,0)" fg:x="510" fg:w="66"/><text x="6.4378%" y="895.50"></text></g><g><title>revm::journaled_state::JournaledState::transfer (24 samples, 0.29%)</title><rect x="6.6974%" y="869" width="0.2912%" height="15" fill="rgb(224,213,32)" fg:x="552" fg:w="24"/><text x="6.9474%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (9 samples, 0.11%)</title><rect x="6.8794%" y="853" width="0.1092%" height="15" fill="rgb(251,11,48)" fg:x="567" fg:w="9"/><text x="7.1294%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (8 samples, 0.10%)</title><rect x="6.8915%" y="837" width="0.0971%" height="15" fill="rgb(236,173,5)" fg:x="568" fg:w="8"/><text x="7.1415%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (8 samples, 0.10%)</title><rect x="6.8915%" y="821" width="0.0971%" height="15" fill="rgb(230,95,12)" fg:x="568" fg:w="8"/><text x="7.1415%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.01%)</title><rect x="6.9765%" y="805" width="0.0121%" height="15" fill="rgb(232,209,1)" fg:x="575" fg:w="1"/><text x="7.2265%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="6.9765%" y="789" width="0.0121%" height="15" fill="rgb(232,6,1)" fg:x="575" fg:w="1"/><text x="7.2265%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="6.9765%" y="773" width="0.0121%" height="15" fill="rgb(210,224,50)" fg:x="575" fg:w="1"/><text x="7.2265%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="6.9765%" y="757" width="0.0121%" height="15" fill="rgb(228,127,35)" fg:x="575" fg:w="1"/><text x="7.2265%" y="767.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.01%)</title><rect x="6.9765%" y="741" width="0.0121%" height="15" fill="rgb(245,102,45)" fg:x="575" fg:w="1"/><text x="7.2265%" y="751.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.01%)</title><rect x="6.9765%" y="725" width="0.0121%" height="15" fill="rgb(214,1,49)" fg:x="575" fg:w="1"/><text x="7.2265%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="6.9765%" y="709" width="0.0121%" height="15" fill="rgb(226,163,40)" fg:x="575" fg:w="1"/><text x="7.2265%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="6.9765%" y="693" width="0.0121%" height="15" fill="rgb(239,212,28)" fg:x="575" fg:w="1"/><text x="7.2265%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="6.9765%" y="677" width="0.0121%" height="15" fill="rgb(220,20,13)" fg:x="575" fg:w="1"/><text x="7.2265%" y="687.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="6.9765%" y="661" width="0.0121%" height="15" fill="rgb(210,164,35)" fg:x="575" fg:w="1"/><text x="7.2265%" y="671.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="6.9765%" y="645" width="0.0121%" height="15" fill="rgb(248,109,41)" fg:x="575" fg:w="1"/><text x="7.2265%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="7.0250%" y="869" width="0.0121%" height="15" fill="rgb(238,23,50)" fg:x="579" fg:w="1"/><text x="7.2750%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="7.0250%" y="853" width="0.0121%" height="15" fill="rgb(211,48,49)" fg:x="579" fg:w="1"/><text x="7.2750%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="7.0250%" y="837" width="0.0121%" height="15" fill="rgb(223,36,21)" fg:x="579" fg:w="1"/><text x="7.2750%" y="847.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="7.0250%" y="821" width="0.0121%" height="15" fill="rgb(207,123,46)" fg:x="579" fg:w="1"/><text x="7.2750%" y="831.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="7.0250%" y="805" width="0.0121%" height="15" fill="rgb(240,218,32)" fg:x="579" fg:w="1"/><text x="7.2750%" y="815.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="7.0250%" y="789" width="0.0121%" height="15" fill="rgb(252,5,43)" fg:x="579" fg:w="1"/><text x="7.2750%" y="799.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="7.0250%" y="773" width="0.0121%" height="15" fill="rgb(252,84,19)" fg:x="579" fg:w="1"/><text x="7.2750%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="7.0371%" y="853" width="0.0485%" height="15" fill="rgb(243,152,39)" fg:x="580" fg:w="4"/><text x="7.2871%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;]&gt; (4 samples, 0.05%)</title><rect x="7.0371%" y="837" width="0.0485%" height="15" fill="rgb(234,160,15)" fg:x="580" fg:w="4"/><text x="7.2871%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt; (3 samples, 0.04%)</title><rect x="7.0493%" y="821" width="0.0364%" height="15" fill="rgb(237,34,20)" fg:x="581" fg:w="3"/><text x="7.2993%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::journaled_state::JournalEntry&gt;&gt; (3 samples, 0.04%)</title><rect x="7.0493%" y="805" width="0.0364%" height="15" fill="rgb(229,97,13)" fg:x="581" fg:w="3"/><text x="7.2993%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="7.0493%" y="789" width="0.0364%" height="15" fill="rgb(234,71,50)" fg:x="581" fg:w="3"/><text x="7.2993%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="7.0493%" y="773" width="0.0364%" height="15" fill="rgb(253,155,4)" fg:x="581" fg:w="3"/><text x="7.2993%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="7.0493%" y="757" width="0.0364%" height="15" fill="rgb(222,185,37)" fg:x="581" fg:w="3"/><text x="7.2993%" y="767.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="7.0614%" y="741" width="0.0243%" height="15" fill="rgb(251,177,13)" fg:x="582" fg:w="2"/><text x="7.3114%" y="751.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="7.0735%" y="725" width="0.0121%" height="15" fill="rgb(250,179,40)" fg:x="583" fg:w="1"/><text x="7.3235%" y="735.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::output (10 samples, 0.12%)</title><rect x="6.9886%" y="933" width="0.1213%" height="15" fill="rgb(242,44,2)" fg:x="576" fg:w="10"/><text x="7.2386%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (10 samples, 0.12%)</title><rect x="6.9886%" y="917" width="0.1213%" height="15" fill="rgb(216,177,13)" fg:x="576" fg:w="10"/><text x="7.2386%" y="927.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (10 samples, 0.12%)</title><rect x="6.9886%" y="901" width="0.1213%" height="15" fill="rgb(216,106,43)" fg:x="576" fg:w="10"/><text x="7.2386%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::finalize (7 samples, 0.08%)</title><rect x="7.0250%" y="885" width="0.0849%" height="15" fill="rgb(216,183,2)" fg:x="579" fg:w="7"/><text x="7.2750%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="7.0371%" y="869" width="0.0728%" height="15" fill="rgb(249,75,3)" fg:x="580" fg:w="6"/><text x="7.2871%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="7.0857%" y="853" width="0.0243%" height="15" fill="rgb(219,67,39)" fg:x="584" fg:w="2"/><text x="7.3357%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="7.0857%" y="837" width="0.0243%" height="15" fill="rgb(253,228,2)" fg:x="584" fg:w="2"/><text x="7.3357%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="7.0857%" y="821" width="0.0243%" height="15" fill="rgb(235,138,27)" fg:x="584" fg:w="2"/><text x="7.3357%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="7.0857%" y="805" width="0.0243%" height="15" fill="rgb(236,97,51)" fg:x="584" fg:w="2"/><text x="7.3357%" y="815.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="7.0857%" y="789" width="0.0243%" height="15" fill="rgb(240,80,30)" fg:x="584" fg:w="2"/><text x="7.3357%" y="799.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="7.0857%" y="773" width="0.0243%" height="15" fill="rgb(230,178,19)" fg:x="584" fg:w="2"/><text x="7.3357%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.1099%" y="805" width="0.0121%" height="15" fill="rgb(210,190,27)" fg:x="586" fg:w="1"/><text x="7.3599%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.1099%" y="789" width="0.0121%" height="15" fill="rgb(222,107,31)" fg:x="586" fg:w="1"/><text x="7.3599%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.1099%" y="773" width="0.0121%" height="15" fill="rgb(216,127,34)" fg:x="586" fg:w="1"/><text x="7.3599%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="7.1099%" y="757" width="0.0121%" height="15" fill="rgb(234,116,52)" fg:x="586" fg:w="1"/><text x="7.3599%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="7.1099%" y="741" width="0.0121%" height="15" fill="rgb(222,124,15)" fg:x="586" fg:w="1"/><text x="7.3599%" y="751.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="7.1221%" y="725" width="0.0121%" height="15" fill="rgb(231,179,28)" fg:x="587" fg:w="1"/><text x="7.3721%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="7.1221%" y="709" width="0.0121%" height="15" fill="rgb(226,93,45)" fg:x="587" fg:w="1"/><text x="7.3721%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1221%" y="693" width="0.0121%" height="15" fill="rgb(215,8,51)" fg:x="587" fg:w="1"/><text x="7.3721%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1221%" y="677" width="0.0121%" height="15" fill="rgb(223,106,5)" fg:x="587" fg:w="1"/><text x="7.3721%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1221%" y="661" width="0.0121%" height="15" fill="rgb(250,191,5)" fg:x="587" fg:w="1"/><text x="7.3721%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="7.1221%" y="645" width="0.0121%" height="15" fill="rgb(242,132,44)" fg:x="587" fg:w="1"/><text x="7.3721%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="7.1099%" y="837" width="0.0364%" height="15" fill="rgb(251,152,29)" fg:x="586" fg:w="3"/><text x="7.3599%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="7.1099%" y="821" width="0.0364%" height="15" fill="rgb(218,179,5)" fg:x="586" fg:w="3"/><text x="7.3599%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="7.1221%" y="805" width="0.0243%" height="15" fill="rgb(227,67,19)" fg:x="587" fg:w="2"/><text x="7.3721%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="7.1221%" y="789" width="0.0243%" height="15" fill="rgb(233,119,31)" fg:x="587" fg:w="2"/><text x="7.3721%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="7.1221%" y="773" width="0.0243%" height="15" fill="rgb(241,120,22)" fg:x="587" fg:w="2"/><text x="7.3721%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="7.1221%" y="757" width="0.0243%" height="15" fill="rgb(224,102,30)" fg:x="587" fg:w="2"/><text x="7.3721%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="7.1221%" y="741" width="0.0243%" height="15" fill="rgb(210,164,37)" fg:x="587" fg:w="2"/><text x="7.3721%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="7.1342%" y="725" width="0.0121%" height="15" fill="rgb(226,191,16)" fg:x="588" fg:w="1"/><text x="7.3842%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1342%" y="709" width="0.0121%" height="15" fill="rgb(214,40,45)" fg:x="588" fg:w="1"/><text x="7.3842%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1342%" y="693" width="0.0121%" height="15" fill="rgb(244,29,26)" fg:x="588" fg:w="1"/><text x="7.3842%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1342%" y="677" width="0.0121%" height="15" fill="rgb(216,16,5)" fg:x="588" fg:w="1"/><text x="7.3842%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="7.1342%" y="661" width="0.0121%" height="15" fill="rgb(249,76,35)" fg:x="588" fg:w="1"/><text x="7.3842%" y="671.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reimburse_caller (4 samples, 0.05%)</title><rect x="7.1099%" y="933" width="0.0485%" height="15" fill="rgb(207,11,44)" fg:x="586" fg:w="4"/><text x="7.3599%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (4 samples, 0.05%)</title><rect x="7.1099%" y="917" width="0.0485%" height="15" fill="rgb(228,190,49)" fg:x="586" fg:w="4"/><text x="7.3599%" y="927.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (4 samples, 0.05%)</title><rect x="7.1099%" y="901" width="0.0485%" height="15" fill="rgb(214,173,12)" fg:x="586" fg:w="4"/><text x="7.3599%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (4 samples, 0.05%)</title><rect x="7.1099%" y="885" width="0.0485%" height="15" fill="rgb(218,26,35)" fg:x="586" fg:w="4"/><text x="7.3599%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.05%)</title><rect x="7.1099%" y="869" width="0.0485%" height="15" fill="rgb(220,200,19)" fg:x="586" fg:w="4"/><text x="7.3599%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.05%)</title><rect x="7.1099%" y="853" width="0.0485%" height="15" fill="rgb(239,95,49)" fg:x="586" fg:w="4"/><text x="7.3599%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="7.1463%" y="837" width="0.0121%" height="15" fill="rgb(235,85,53)" fg:x="589" fg:w="1"/><text x="7.3963%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="7.1463%" y="821" width="0.0121%" height="15" fill="rgb(233,133,31)" fg:x="589" fg:w="1"/><text x="7.3963%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="7.1463%" y="805" width="0.0121%" height="15" fill="rgb(218,25,20)" fg:x="589" fg:w="1"/><text x="7.3963%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="7.1463%" y="789" width="0.0121%" height="15" fill="rgb(252,210,38)" fg:x="589" fg:w="1"/><text x="7.3963%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="7.1585%" y="805" width="0.0243%" height="15" fill="rgb(242,134,21)" fg:x="590" fg:w="2"/><text x="7.4085%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="7.1585%" y="789" width="0.0243%" height="15" fill="rgb(213,28,48)" fg:x="590" fg:w="2"/><text x="7.4085%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="7.1585%" y="773" width="0.0243%" height="15" fill="rgb(250,196,2)" fg:x="590" fg:w="2"/><text x="7.4085%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="7.1706%" y="757" width="0.0121%" height="15" fill="rgb(227,5,17)" fg:x="591" fg:w="1"/><text x="7.4206%" y="767.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="7.1827%" y="725" width="0.0121%" height="15" fill="rgb(221,226,24)" fg:x="592" fg:w="1"/><text x="7.4327%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="7.1827%" y="709" width="0.0121%" height="15" fill="rgb(211,5,48)" fg:x="592" fg:w="1"/><text x="7.4327%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1827%" y="693" width="0.0121%" height="15" fill="rgb(219,150,6)" fg:x="592" fg:w="1"/><text x="7.4327%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1827%" y="677" width="0.0121%" height="15" fill="rgb(251,46,16)" fg:x="592" fg:w="1"/><text x="7.4327%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.1827%" y="661" width="0.0121%" height="15" fill="rgb(220,204,40)" fg:x="592" fg:w="1"/><text x="7.4327%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="7.1585%" y="837" width="0.0728%" height="15" fill="rgb(211,85,2)" fg:x="590" fg:w="6"/><text x="7.4085%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="7.1585%" y="821" width="0.0728%" height="15" fill="rgb(229,17,7)" fg:x="590" fg:w="6"/><text x="7.4085%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="7.1827%" y="805" width="0.0485%" height="15" fill="rgb(239,72,28)" fg:x="592" fg:w="4"/><text x="7.4327%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="7.1827%" y="789" width="0.0485%" height="15" fill="rgb(230,47,54)" fg:x="592" fg:w="4"/><text x="7.4327%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="7.1827%" y="773" width="0.0485%" height="15" fill="rgb(214,50,8)" fg:x="592" fg:w="4"/><text x="7.4327%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="7.1827%" y="757" width="0.0485%" height="15" fill="rgb(216,198,43)" fg:x="592" fg:w="4"/><text x="7.4327%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="7.1827%" y="741" width="0.0485%" height="15" fill="rgb(234,20,35)" fg:x="592" fg:w="4"/><text x="7.4327%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="7.1949%" y="725" width="0.0364%" height="15" fill="rgb(254,45,19)" fg:x="593" fg:w="3"/><text x="7.4449%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="7.1949%" y="709" width="0.0364%" height="15" fill="rgb(219,14,44)" fg:x="593" fg:w="3"/><text x="7.4449%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="7.1949%" y="693" width="0.0364%" height="15" fill="rgb(217,220,26)" fg:x="593" fg:w="3"/><text x="7.4449%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="7.1949%" y="677" width="0.0364%" height="15" fill="rgb(213,158,28)" fg:x="593" fg:w="3"/><text x="7.4449%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="7.2070%" y="661" width="0.0243%" height="15" fill="rgb(252,51,52)" fg:x="594" fg:w="2"/><text x="7.4570%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="7.2191%" y="645" width="0.0121%" height="15" fill="rgb(246,89,16)" fg:x="595" fg:w="1"/><text x="7.4691%" y="655.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reward_beneficiary (8 samples, 0.10%)</title><rect x="7.1585%" y="933" width="0.0971%" height="15" fill="rgb(216,158,49)" fg:x="590" fg:w="8"/><text x="7.4085%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (8 samples, 0.10%)</title><rect x="7.1585%" y="917" width="0.0971%" height="15" fill="rgb(236,107,19)" fg:x="590" fg:w="8"/><text x="7.4085%" y="927.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (8 samples, 0.10%)</title><rect x="7.1585%" y="901" width="0.0971%" height="15" fill="rgb(228,185,30)" fg:x="590" fg:w="8"/><text x="7.4085%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (8 samples, 0.10%)</title><rect x="7.1585%" y="885" width="0.0971%" height="15" fill="rgb(246,134,8)" fg:x="590" fg:w="8"/><text x="7.4085%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.10%)</title><rect x="7.1585%" y="869" width="0.0971%" height="15" fill="rgb(214,143,50)" fg:x="590" fg:w="8"/><text x="7.4085%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.10%)</title><rect x="7.1585%" y="853" width="0.0971%" height="15" fill="rgb(228,75,8)" fg:x="590" fg:w="8"/><text x="7.4085%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="7.2313%" y="837" width="0.0243%" height="15" fill="rgb(207,175,4)" fg:x="596" fg:w="2"/><text x="7.4813%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="7.2313%" y="821" width="0.0243%" height="15" fill="rgb(205,108,24)" fg:x="596" fg:w="2"/><text x="7.4813%" y="831.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="7.2434%" y="805" width="0.0121%" height="15" fill="rgb(244,120,49)" fg:x="597" fg:w="1"/><text x="7.4934%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="7.2555%" y="917" width="0.0121%" height="15" fill="rgb(223,47,38)" fg:x="598" fg:w="1"/><text x="7.5055%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="7.2555%" y="901" width="0.0121%" height="15" fill="rgb(229,179,11)" fg:x="598" fg:w="1"/><text x="7.5055%" y="911.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="7.2555%" y="885" width="0.0121%" height="15" fill="rgb(231,122,1)" fg:x="598" fg:w="1"/><text x="7.5055%" y="895.50"></text></g><g><title>ruint::from::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from (1 samples, 0.01%)</title><rect x="7.3162%" y="821" width="0.0121%" height="15" fill="rgb(245,119,9)" fg:x="603" fg:w="1"/><text x="7.5662%" y="831.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as ruint::from::UintTryFrom&lt;T&gt;&gt;::uint_try_from (1 samples, 0.01%)</title><rect x="7.3162%" y="805" width="0.0121%" height="15" fill="rgb(241,163,25)" fg:x="603" fg:w="1"/><text x="7.5662%" y="815.50"></text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;u128&gt; for ruint::Uint&lt;_,_&gt;&gt;::try_from (1 samples, 0.01%)</title><rect x="7.3162%" y="789" width="0.0121%" height="15" fill="rgb(217,214,3)" fg:x="603" fg:w="1"/><text x="7.5662%" y="799.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee (3 samples, 0.04%)</title><rect x="7.3162%" y="869" width="0.0364%" height="15" fill="rgb(240,86,28)" fg:x="603" fg:w="3"/><text x="7.5662%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.04%)</title><rect x="7.3162%" y="853" width="0.0364%" height="15" fill="rgb(215,47,9)" fg:x="603" fg:w="3"/><text x="7.5662%" y="863.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee::_{{closure}} (3 samples, 0.04%)</title><rect x="7.3162%" y="837" width="0.0364%" height="15" fill="rgb(252,25,45)" fg:x="603" fg:w="3"/><text x="7.5662%" y="847.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (2 samples, 0.02%)</title><rect x="7.3283%" y="821" width="0.0243%" height="15" fill="rgb(251,164,9)" fg:x="604" fg:w="2"/><text x="7.5783%" y="831.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="7.3283%" y="805" width="0.0243%" height="15" fill="rgb(233,194,0)" fg:x="604" fg:w="2"/><text x="7.5783%" y="815.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="7.3283%" y="789" width="0.0243%" height="15" fill="rgb(249,111,24)" fg:x="604" fg:w="2"/><text x="7.5783%" y="799.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_sub (1 samples, 0.01%)</title><rect x="7.3526%" y="869" width="0.0121%" height="15" fill="rgb(250,223,3)" fg:x="606" fg:w="1"/><text x="7.6026%" y="879.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.01%)</title><rect x="7.3526%" y="853" width="0.0121%" height="15" fill="rgb(236,178,37)" fg:x="606" fg:w="1"/><text x="7.6026%" y="863.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller_inner (8 samples, 0.10%)</title><rect x="7.2919%" y="885" width="0.0971%" height="15" fill="rgb(241,158,50)" fg:x="601" fg:w="8"/><text x="7.5419%" y="895.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (2 samples, 0.02%)</title><rect x="7.3647%" y="869" width="0.0243%" height="15" fill="rgb(213,121,41)" fg:x="607" fg:w="2"/><text x="7.6147%" y="879.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="7.3647%" y="853" width="0.0243%" height="15" fill="rgb(240,92,3)" fg:x="607" fg:w="2"/><text x="7.6147%" y="863.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="7.3647%" y="837" width="0.0243%" height="15" fill="rgb(205,123,3)" fg:x="607" fg:w="2"/><text x="7.6147%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="7.3890%" y="837" width="0.0121%" height="15" fill="rgb(205,97,47)" fg:x="609" fg:w="1"/><text x="7.6390%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="7.3890%" y="821" width="0.0121%" height="15" fill="rgb(247,152,14)" fg:x="609" fg:w="1"/><text x="7.6390%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.3890%" y="805" width="0.0121%" height="15" fill="rgb(248,195,53)" fg:x="609" fg:w="1"/><text x="7.6390%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.3890%" y="789" width="0.0121%" height="15" fill="rgb(226,201,16)" fg:x="609" fg:w="1"/><text x="7.6390%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.3890%" y="773" width="0.0121%" height="15" fill="rgb(205,98,0)" fg:x="609" fg:w="1"/><text x="7.6390%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="7.3890%" y="757" width="0.0121%" height="15" fill="rgb(214,191,48)" fg:x="609" fg:w="1"/><text x="7.6390%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="7.3890%" y="741" width="0.0121%" height="15" fill="rgb(237,112,39)" fg:x="609" fg:w="1"/><text x="7.6390%" y="751.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::deduct_caller (13 samples, 0.16%)</title><rect x="7.2555%" y="933" width="0.1577%" height="15" fill="rgb(247,203,27)" fg:x="598" fg:w="13"/><text x="7.5055%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (12 samples, 0.15%)</title><rect x="7.2677%" y="917" width="0.1456%" height="15" fill="rgb(235,124,28)" fg:x="599" fg:w="12"/><text x="7.5177%" y="927.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (12 samples, 0.15%)</title><rect x="7.2677%" y="901" width="0.1456%" height="15" fill="rgb(208,207,46)" fg:x="599" fg:w="12"/><text x="7.5177%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (2 samples, 0.02%)</title><rect x="7.3890%" y="885" width="0.0243%" height="15" fill="rgb(234,176,4)" fg:x="609" fg:w="2"/><text x="7.6390%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.02%)</title><rect x="7.3890%" y="869" width="0.0243%" height="15" fill="rgb(230,133,28)" fg:x="609" fg:w="2"/><text x="7.6390%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.02%)</title><rect x="7.3890%" y="853" width="0.0243%" height="15" fill="rgb(211,137,40)" fg:x="609" fg:w="2"/><text x="7.6390%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="7.4011%" y="837" width="0.0121%" height="15" fill="rgb(254,35,13)" fg:x="610" fg:w="1"/><text x="7.6511%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="7.4011%" y="821" width="0.0121%" height="15" fill="rgb(225,49,51)" fg:x="610" fg:w="1"/><text x="7.6511%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="7.4011%" y="805" width="0.0121%" height="15" fill="rgb(251,10,15)" fg:x="610" fg:w="1"/><text x="7.6511%" y="815.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1 samples, 0.01%)</title><rect x="7.4011%" y="789" width="0.0121%" height="15" fill="rgb(228,207,15)" fg:x="610" fg:w="1"/><text x="7.6511%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="7.4011%" y="773" width="0.0121%" height="15" fill="rgb(241,99,19)" fg:x="610" fg:w="1"/><text x="7.6511%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="7.4011%" y="757" width="0.0121%" height="15" fill="rgb(207,104,49)" fg:x="610" fg:w="1"/><text x="7.6511%" y="767.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="7.4011%" y="741" width="0.0121%" height="15" fill="rgb(234,99,18)" fg:x="610" fg:w="1"/><text x="7.6511%" y="751.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="7.4011%" y="725" width="0.0121%" height="15" fill="rgb(213,191,49)" fg:x="610" fg:w="1"/><text x="7.6511%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="7.4254%" y="917" width="0.0121%" height="15" fill="rgb(210,226,19)" fg:x="612" fg:w="1"/><text x="7.6754%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="7.4254%" y="901" width="0.0121%" height="15" fill="rgb(229,97,18)" fg:x="612" fg:w="1"/><text x="7.6754%" y="911.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="7.4254%" y="885" width="0.0121%" height="15" fill="rgb(211,167,15)" fg:x="612" fg:w="1"/><text x="7.6754%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (3 samples, 0.04%)</title><rect x="7.4496%" y="869" width="0.0364%" height="15" fill="rgb(210,169,34)" fg:x="614" fg:w="3"/><text x="7.6996%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="7.4496%" y="853" width="0.0364%" height="15" fill="rgb(241,121,31)" fg:x="614" fg:w="3"/><text x="7.6996%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.04%)</title><rect x="7.4860%" y="869" width="0.0364%" height="15" fill="rgb(232,40,11)" fg:x="617" fg:w="3"/><text x="7.7360%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="7.5831%" y="821" width="0.0364%" height="15" fill="rgb(205,86,26)" fg:x="625" fg:w="3"/><text x="7.8331%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="7.5831%" y="805" width="0.0364%" height="15" fill="rgb(231,126,28)" fg:x="625" fg:w="3"/><text x="7.8331%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.04%)</title><rect x="7.5831%" y="789" width="0.0364%" height="15" fill="rgb(219,221,18)" fg:x="625" fg:w="3"/><text x="7.8331%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.04%)</title><rect x="7.5831%" y="773" width="0.0364%" height="15" fill="rgb(211,40,0)" fg:x="625" fg:w="3"/><text x="7.8331%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.04%)</title><rect x="7.5831%" y="757" width="0.0364%" height="15" fill="rgb(239,85,43)" fg:x="625" fg:w="3"/><text x="7.8331%" y="767.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.04%)</title><rect x="7.5831%" y="741" width="0.0364%" height="15" fill="rgb(231,55,21)" fg:x="625" fg:w="3"/><text x="7.8331%" y="751.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="7.5831%" y="725" width="0.0364%" height="15" fill="rgb(225,184,43)" fg:x="625" fg:w="3"/><text x="7.8331%" y="735.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="7.5952%" y="709" width="0.0243%" height="15" fill="rgb(251,158,41)" fg:x="626" fg:w="2"/><text x="7.8452%" y="719.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (6 samples, 0.07%)</title><rect x="7.5588%" y="853" width="0.0728%" height="15" fill="rgb(234,159,37)" fg:x="623" fg:w="6"/><text x="7.8088%" y="863.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (4 samples, 0.05%)</title><rect x="7.5831%" y="837" width="0.0485%" height="15" fill="rgb(216,204,22)" fg:x="625" fg:w="4"/><text x="7.8331%" y="847.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (1 samples, 0.01%)</title><rect x="7.6195%" y="821" width="0.0121%" height="15" fill="rgb(214,17,3)" fg:x="628" fg:w="1"/><text x="7.8695%" y="831.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (1 samples, 0.01%)</title><rect x="7.6195%" y="805" width="0.0121%" height="15" fill="rgb(212,111,17)" fg:x="628" fg:w="1"/><text x="7.8695%" y="815.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (1 samples, 0.01%)</title><rect x="7.6195%" y="789" width="0.0121%" height="15" fill="rgb(221,157,24)" fg:x="628" fg:w="1"/><text x="7.8695%" y="799.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::partial_tail (1 samples, 0.01%)</title><rect x="7.6195%" y="773" width="0.0121%" height="15" fill="rgb(252,16,13)" fg:x="628" fg:w="1"/><text x="7.8695%" y="783.50"></text></g><g><title>bitvec::domain::PartialElement&lt;M,T,O&gt;::new (1 samples, 0.01%)</title><rect x="7.6195%" y="757" width="0.0121%" height="15" fill="rgb(221,62,2)" fg:x="628" fg:w="1"/><text x="7.8695%" y="767.50"></text></g><g><title>&lt;bitvec::order::Lsb0 as bitvec::order::BitOrder&gt;::mask (1 samples, 0.01%)</title><rect x="7.6195%" y="741" width="0.0121%" height="15" fill="rgb(247,87,22)" fg:x="628" fg:w="1"/><text x="7.8695%" y="751.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="7.6316%" y="757" width="0.0121%" height="15" fill="rgb(215,73,9)" fg:x="629" fg:w="1"/><text x="7.8816%" y="767.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="7.6316%" y="741" width="0.0121%" height="15" fill="rgb(207,175,33)" fg:x="629" fg:w="1"/><text x="7.8816%" y="751.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (11 samples, 0.13%)</title><rect x="7.5224%" y="869" width="0.1335%" height="15" fill="rgb(243,129,54)" fg:x="620" fg:w="11"/><text x="7.7724%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (2 samples, 0.02%)</title><rect x="7.6316%" y="853" width="0.0243%" height="15" fill="rgb(227,119,45)" fg:x="629" fg:w="2"/><text x="7.8816%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="7.6316%" y="837" width="0.0243%" height="15" fill="rgb(205,109,36)" fg:x="629" fg:w="2"/><text x="7.8816%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="7.6316%" y="821" width="0.0243%" height="15" fill="rgb(205,6,39)" fg:x="629" fg:w="2"/><text x="7.8816%" y="831.50"></text></g><g><title>std::hash::random::RandomState::new (2 samples, 0.02%)</title><rect x="7.6316%" y="805" width="0.0243%" height="15" fill="rgb(221,32,16)" fg:x="629" fg:w="2"/><text x="7.8816%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="7.6316%" y="789" width="0.0243%" height="15" fill="rgb(228,144,50)" fg:x="629" fg:w="2"/><text x="7.8816%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="7.6316%" y="773" width="0.0243%" height="15" fill="rgb(229,201,53)" fg:x="629" fg:w="2"/><text x="7.8816%" y="783.50"></text></g><g><title>std::hash::random::RandomState::new::_{{closure}} (1 samples, 0.01%)</title><rect x="7.6438%" y="757" width="0.0121%" height="15" fill="rgb(249,153,27)" fg:x="630" fg:w="1"/><text x="7.8938%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="7.6438%" y="741" width="0.0121%" height="15" fill="rgb(227,106,25)" fg:x="630" fg:w="1"/><text x="7.8938%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="7.6438%" y="725" width="0.0121%" height="15" fill="rgb(230,65,29)" fg:x="630" fg:w="1"/><text x="7.8938%" y="735.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="7.6438%" y="709" width="0.0121%" height="15" fill="rgb(221,57,46)" fg:x="630" fg:w="1"/><text x="7.8938%" y="719.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="7.6438%" y="693" width="0.0121%" height="15" fill="rgb(229,161,17)" fg:x="630" fg:w="1"/><text x="7.8938%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="7.6559%" y="757" width="0.0121%" height="15" fill="rgb(222,213,11)" fg:x="631" fg:w="1"/><text x="7.9059%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="7.6559%" y="741" width="0.0121%" height="15" fill="rgb(235,35,13)" fg:x="631" fg:w="1"/><text x="7.9059%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="7.6559%" y="805" width="0.0243%" height="15" fill="rgb(233,158,34)" fg:x="631" fg:w="2"/><text x="7.9059%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="7.6559%" y="789" width="0.0243%" height="15" fill="rgb(215,151,48)" fg:x="631" fg:w="2"/><text x="7.9059%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="7.6559%" y="773" width="0.0243%" height="15" fill="rgb(229,84,14)" fg:x="631" fg:w="2"/><text x="7.9059%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="7.6680%" y="757" width="0.0121%" height="15" fill="rgb(229,68,14)" fg:x="632" fg:w="1"/><text x="7.9180%" y="767.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="7.6802%" y="725" width="0.0243%" height="15" fill="rgb(243,106,26)" fg:x="633" fg:w="2"/><text x="7.9302%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="7.6802%" y="709" width="0.0243%" height="15" fill="rgb(206,45,38)" fg:x="633" fg:w="2"/><text x="7.9302%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="7.6802%" y="693" width="0.0243%" height="15" fill="rgb(226,6,15)" fg:x="633" fg:w="2"/><text x="7.9302%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="7.6802%" y="677" width="0.0243%" height="15" fill="rgb(232,22,54)" fg:x="633" fg:w="2"/><text x="7.9302%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="7.6802%" y="661" width="0.0243%" height="15" fill="rgb(229,222,32)" fg:x="633" fg:w="2"/><text x="7.9302%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="7.6802%" y="645" width="0.0243%" height="15" fill="rgb(228,62,29)" fg:x="633" fg:w="2"/><text x="7.9302%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="7.6923%" y="629" width="0.0121%" height="15" fill="rgb(251,103,34)" fg:x="634" fg:w="1"/><text x="7.9423%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="7.6559%" y="837" width="0.0607%" height="15" fill="rgb(233,12,30)" fg:x="631" fg:w="5"/><text x="7.9059%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.06%)</title><rect x="7.6559%" y="821" width="0.0607%" height="15" fill="rgb(238,52,0)" fg:x="631" fg:w="5"/><text x="7.9059%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="7.6802%" y="805" width="0.0364%" height="15" fill="rgb(223,98,5)" fg:x="633" fg:w="3"/><text x="7.9302%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="7.6802%" y="789" width="0.0364%" height="15" fill="rgb(228,75,37)" fg:x="633" fg:w="3"/><text x="7.9302%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="7.6802%" y="773" width="0.0364%" height="15" fill="rgb(205,115,49)" fg:x="633" fg:w="3"/><text x="7.9302%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="7.6802%" y="757" width="0.0364%" height="15" fill="rgb(250,154,43)" fg:x="633" fg:w="3"/><text x="7.9302%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="7.6802%" y="741" width="0.0364%" height="15" fill="rgb(226,43,29)" fg:x="633" fg:w="3"/><text x="7.9302%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="7.7044%" y="725" width="0.0121%" height="15" fill="rgb(249,228,39)" fg:x="635" fg:w="1"/><text x="7.9544%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.7044%" y="709" width="0.0121%" height="15" fill="rgb(216,79,43)" fg:x="635" fg:w="1"/><text x="7.9544%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.7044%" y="693" width="0.0121%" height="15" fill="rgb(228,95,12)" fg:x="635" fg:w="1"/><text x="7.9544%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.7044%" y="677" width="0.0121%" height="15" fill="rgb(249,221,15)" fg:x="635" fg:w="1"/><text x="7.9544%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (6 samples, 0.07%)</title><rect x="7.6559%" y="869" width="0.0728%" height="15" fill="rgb(233,34,13)" fg:x="631" fg:w="6"/><text x="7.9059%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6 samples, 0.07%)</title><rect x="7.6559%" y="853" width="0.0728%" height="15" fill="rgb(214,103,39)" fg:x="631" fg:w="6"/><text x="7.9059%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="7.7166%" y="837" width="0.0121%" height="15" fill="rgb(251,126,39)" fg:x="636" fg:w="1"/><text x="7.9666%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="7.7287%" y="837" width="0.0121%" height="15" fill="rgb(214,216,36)" fg:x="637" fg:w="1"/><text x="7.9787%" y="847.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_accounts (29 samples, 0.35%)</title><rect x="7.4132%" y="933" width="0.3519%" height="15" fill="rgb(220,221,8)" fg:x="611" fg:w="29"/><text x="7.6632%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (27 samples, 0.33%)</title><rect x="7.4375%" y="917" width="0.3276%" height="15" fill="rgb(240,216,3)" fg:x="613" fg:w="27"/><text x="7.6875%" y="927.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_accounts (27 samples, 0.33%)</title><rect x="7.4375%" y="901" width="0.3276%" height="15" fill="rgb(232,218,17)" fg:x="613" fg:w="27"/><text x="7.6875%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (26 samples, 0.32%)</title><rect x="7.4496%" y="885" width="0.3155%" height="15" fill="rgb(229,163,45)" fg:x="614" fg:w="26"/><text x="7.6996%" y="895.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.04%)</title><rect x="7.7287%" y="869" width="0.0364%" height="15" fill="rgb(231,110,42)" fg:x="637" fg:w="3"/><text x="7.9787%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.04%)</title><rect x="7.7287%" y="853" width="0.0364%" height="15" fill="rgb(208,170,48)" fg:x="637" fg:w="3"/><text x="7.9787%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="7.7408%" y="837" width="0.0243%" height="15" fill="rgb(239,116,25)" fg:x="638" fg:w="2"/><text x="7.9908%" y="847.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="7.7408%" y="821" width="0.0243%" height="15" fill="rgb(219,200,50)" fg:x="638" fg:w="2"/><text x="7.9908%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="7.7408%" y="805" width="0.0243%" height="15" fill="rgb(245,200,0)" fg:x="638" fg:w="2"/><text x="7.9908%" y="815.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="7.7408%" y="789" width="0.0243%" height="15" fill="rgb(245,119,33)" fg:x="638" fg:w="2"/><text x="7.9908%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="7.7530%" y="773" width="0.0121%" height="15" fill="rgb(231,125,12)" fg:x="639" fg:w="1"/><text x="8.0030%" y="783.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="7.8258%" y="693" width="0.0243%" height="15" fill="rgb(216,96,41)" fg:x="645" fg:w="2"/><text x="8.0758%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.05%)</title><rect x="7.8136%" y="709" width="0.0485%" height="15" fill="rgb(248,43,45)" fg:x="644" fg:w="4"/><text x="8.0636%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="7.8500%" y="693" width="0.0121%" height="15" fill="rgb(217,222,7)" fg:x="647" fg:w="1"/><text x="8.1000%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="7.8500%" y="677" width="0.0121%" height="15" fill="rgb(233,28,6)" fg:x="647" fg:w="1"/><text x="8.1000%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="7.8500%" y="661" width="0.0121%" height="15" fill="rgb(231,218,15)" fg:x="647" fg:w="1"/><text x="8.1000%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="7.9107%" y="661" width="0.0485%" height="15" fill="rgb(226,171,48)" fg:x="652" fg:w="4"/><text x="8.1607%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="8.0442%" y="549" width="0.0243%" height="15" fill="rgb(235,201,9)" fg:x="663" fg:w="2"/><text x="8.2942%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.10%)</title><rect x="7.9835%" y="613" width="0.0971%" height="15" fill="rgb(217,80,15)" fg:x="658" fg:w="8"/><text x="8.2335%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.10%)</title><rect x="7.9835%" y="597" width="0.0971%" height="15" fill="rgb(219,152,8)" fg:x="658" fg:w="8"/><text x="8.2335%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.10%)</title><rect x="7.9835%" y="581" width="0.0971%" height="15" fill="rgb(243,107,38)" fg:x="658" fg:w="8"/><text x="8.2335%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.10%)</title><rect x="7.9835%" y="565" width="0.0971%" height="15" fill="rgb(231,17,5)" fg:x="658" fg:w="8"/><text x="8.2335%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="8.0684%" y="549" width="0.0121%" height="15" fill="rgb(209,25,54)" fg:x="665" fg:w="1"/><text x="8.3184%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="8.0806%" y="453" width="0.0364%" height="15" fill="rgb(219,0,2)" fg:x="666" fg:w="3"/><text x="8.3306%" y="463.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (9 samples, 0.11%)</title><rect x="8.0806%" y="533" width="0.1092%" height="15" fill="rgb(246,9,5)" fg:x="666" fg:w="9"/><text x="8.3306%" y="543.50"></text></g><g><title>core::hash::Hasher::write_usize (9 samples, 0.11%)</title><rect x="8.0806%" y="517" width="0.1092%" height="15" fill="rgb(226,159,4)" fg:x="666" fg:w="9"/><text x="8.3306%" y="527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="8.0806%" y="501" width="0.1092%" height="15" fill="rgb(219,175,34)" fg:x="666" fg:w="9"/><text x="8.3306%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="8.0806%" y="485" width="0.1092%" height="15" fill="rgb(236,10,46)" fg:x="666" fg:w="9"/><text x="8.3306%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.11%)</title><rect x="8.0806%" y="469" width="0.1092%" height="15" fill="rgb(240,211,16)" fg:x="666" fg:w="9"/><text x="8.3306%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.07%)</title><rect x="8.1170%" y="453" width="0.0728%" height="15" fill="rgb(205,3,43)" fg:x="669" fg:w="6"/><text x="8.3670%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.07%)</title><rect x="8.2504%" y="469" width="0.0728%" height="15" fill="rgb(245,7,22)" fg:x="680" fg:w="6"/><text x="8.5004%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="8.2990%" y="453" width="0.0243%" height="15" fill="rgb(239,132,32)" fg:x="684" fg:w="2"/><text x="8.5490%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 0.38%)</title><rect x="7.9835%" y="645" width="0.3761%" height="15" fill="rgb(228,202,34)" fg:x="658" fg:w="31"/><text x="8.2335%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.38%)</title><rect x="7.9835%" y="629" width="0.3761%" height="15" fill="rgb(254,200,22)" fg:x="658" fg:w="31"/><text x="8.2335%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (23 samples, 0.28%)</title><rect x="8.0806%" y="613" width="0.2791%" height="15" fill="rgb(219,10,39)" fg:x="666" fg:w="23"/><text x="8.3306%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (23 samples, 0.28%)</title><rect x="8.0806%" y="597" width="0.2791%" height="15" fill="rgb(226,210,39)" fg:x="666" fg:w="23"/><text x="8.3306%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (23 samples, 0.28%)</title><rect x="8.0806%" y="581" width="0.2791%" height="15" fill="rgb(208,219,16)" fg:x="666" fg:w="23"/><text x="8.3306%" y="591.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (23 samples, 0.28%)</title><rect x="8.0806%" y="565" width="0.2791%" height="15" fill="rgb(216,158,51)" fg:x="666" fg:w="23"/><text x="8.3306%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (23 samples, 0.28%)</title><rect x="8.0806%" y="549" width="0.2791%" height="15" fill="rgb(233,14,44)" fg:x="666" fg:w="23"/><text x="8.3306%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (14 samples, 0.17%)</title><rect x="8.1898%" y="533" width="0.1699%" height="15" fill="rgb(237,97,39)" fg:x="675" fg:w="14"/><text x="8.4398%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="8.1898%" y="517" width="0.1699%" height="15" fill="rgb(218,198,43)" fg:x="675" fg:w="14"/><text x="8.4398%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="8.1898%" y="501" width="0.1699%" height="15" fill="rgb(231,104,20)" fg:x="675" fg:w="14"/><text x="8.4398%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.17%)</title><rect x="8.1898%" y="485" width="0.1699%" height="15" fill="rgb(254,36,13)" fg:x="675" fg:w="14"/><text x="8.4398%" y="495.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.04%)</title><rect x="8.3232%" y="469" width="0.0364%" height="15" fill="rgb(248,14,50)" fg:x="686" fg:w="3"/><text x="8.5732%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="8.3596%" y="629" width="0.0121%" height="15" fill="rgb(217,107,29)" fg:x="689" fg:w="1"/><text x="8.6096%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.01%)</title><rect x="8.3839%" y="613" width="0.0121%" height="15" fill="rgb(251,169,33)" fg:x="691" fg:w="1"/><text x="8.6339%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.01%)</title><rect x="8.3839%" y="597" width="0.0121%" height="15" fill="rgb(217,108,32)" fg:x="691" fg:w="1"/><text x="8.6339%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="8.3839%" y="581" width="0.0121%" height="15" fill="rgb(219,66,42)" fg:x="691" fg:w="1"/><text x="8.6339%" y="591.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="8.3960%" y="613" width="0.0243%" height="15" fill="rgb(206,180,7)" fg:x="692" fg:w="2"/><text x="8.6460%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="8.4203%" y="613" width="0.0121%" height="15" fill="rgb(208,226,31)" fg:x="694" fg:w="1"/><text x="8.6703%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="8.4203%" y="597" width="0.0121%" height="15" fill="rgb(218,26,49)" fg:x="694" fg:w="1"/><text x="8.6703%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.10%)</title><rect x="8.3596%" y="645" width="0.0971%" height="15" fill="rgb(233,197,48)" fg:x="689" fg:w="8"/><text x="8.6096%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.08%)</title><rect x="8.3718%" y="629" width="0.0849%" height="15" fill="rgb(252,181,51)" fg:x="690" fg:w="7"/><text x="8.6218%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.02%)</title><rect x="8.4324%" y="613" width="0.0243%" height="15" fill="rgb(253,90,19)" fg:x="695" fg:w="2"/><text x="8.6824%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="8.4324%" y="597" width="0.0243%" height="15" fill="rgb(215,171,30)" fg:x="695" fg:w="2"/><text x="8.6824%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="8.4324%" y="581" width="0.0243%" height="15" fill="rgb(214,222,9)" fg:x="695" fg:w="2"/><text x="8.6824%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (19 samples, 0.23%)</title><rect x="8.4567%" y="629" width="0.2305%" height="15" fill="rgb(223,3,22)" fg:x="697" fg:w="19"/><text x="8.7067%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (19 samples, 0.23%)</title><rect x="8.4567%" y="613" width="0.2305%" height="15" fill="rgb(225,196,46)" fg:x="697" fg:w="19"/><text x="8.7067%" y="623.50"></text></g><g><title>core::ptr::write (19 samples, 0.23%)</title><rect x="8.4567%" y="597" width="0.2305%" height="15" fill="rgb(209,110,37)" fg:x="697" fg:w="19"/><text x="8.7067%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.01%)</title><rect x="8.6872%" y="629" width="0.0121%" height="15" fill="rgb(249,89,12)" fg:x="716" fg:w="1"/><text x="8.9372%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="8.6872%" y="613" width="0.0121%" height="15" fill="rgb(226,27,33)" fg:x="716" fg:w="1"/><text x="8.9372%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="8.6872%" y="597" width="0.0121%" height="15" fill="rgb(213,82,22)" fg:x="716" fg:w="1"/><text x="8.9372%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (77 samples, 0.93%)</title><rect x="7.7894%" y="789" width="0.9342%" height="15" fill="rgb(248,140,0)" fg:x="642" fg:w="77"/><text x="8.0394%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (77 samples, 0.93%)</title><rect x="7.7894%" y="773" width="0.9342%" height="15" fill="rgb(228,106,3)" fg:x="642" fg:w="77"/><text x="8.0394%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (76 samples, 0.92%)</title><rect x="7.8015%" y="757" width="0.9221%" height="15" fill="rgb(209,23,37)" fg:x="643" fg:w="76"/><text x="8.0515%" y="767.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (76 samples, 0.92%)</title><rect x="7.8015%" y="741" width="0.9221%" height="15" fill="rgb(241,93,50)" fg:x="643" fg:w="76"/><text x="8.0515%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (76 samples, 0.92%)</title><rect x="7.8015%" y="725" width="0.9221%" height="15" fill="rgb(253,46,43)" fg:x="643" fg:w="76"/><text x="8.0515%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (71 samples, 0.86%)</title><rect x="7.8622%" y="709" width="0.8614%" height="15" fill="rgb(226,206,43)" fg:x="648" fg:w="71"/><text x="8.1122%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (70 samples, 0.85%)</title><rect x="7.8743%" y="693" width="0.8493%" height="15" fill="rgb(217,54,7)" fg:x="649" fg:w="70"/><text x="8.1243%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (70 samples, 0.85%)</title><rect x="7.8743%" y="677" width="0.8493%" height="15" fill="rgb(223,5,52)" fg:x="649" fg:w="70"/><text x="8.1243%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (63 samples, 0.76%)</title><rect x="7.9592%" y="661" width="0.7644%" height="15" fill="rgb(206,52,46)" fg:x="656" fg:w="63"/><text x="8.2092%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (22 samples, 0.27%)</title><rect x="8.4567%" y="645" width="0.2669%" height="15" fill="rgb(253,136,11)" fg:x="697" fg:w="22"/><text x="8.7067%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2 samples, 0.02%)</title><rect x="8.6993%" y="629" width="0.0243%" height="15" fill="rgb(208,106,33)" fg:x="717" fg:w="2"/><text x="8.9493%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (2 samples, 0.02%)</title><rect x="8.6993%" y="613" width="0.0243%" height="15" fill="rgb(206,54,4)" fg:x="717" fg:w="2"/><text x="8.9493%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2 samples, 0.02%)</title><rect x="8.6993%" y="597" width="0.0243%" height="15" fill="rgb(213,3,15)" fg:x="717" fg:w="2"/><text x="8.9493%" y="607.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.02%)</title><rect x="8.7236%" y="661" width="0.0243%" height="15" fill="rgb(252,211,39)" fg:x="719" fg:w="2"/><text x="8.9736%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="8.7236%" y="645" width="0.0243%" height="15" fill="rgb(223,6,36)" fg:x="719" fg:w="2"/><text x="8.9736%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="8.7236%" y="629" width="0.0243%" height="15" fill="rgb(252,169,45)" fg:x="719" fg:w="2"/><text x="8.9736%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="8.7357%" y="613" width="0.0121%" height="15" fill="rgb(212,48,26)" fg:x="720" fg:w="1"/><text x="8.9857%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="8.7357%" y="597" width="0.0121%" height="15" fill="rgb(251,102,48)" fg:x="720" fg:w="1"/><text x="8.9857%" y="607.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="8.7357%" y="581" width="0.0121%" height="15" fill="rgb(243,208,16)" fg:x="720" fg:w="1"/><text x="8.9857%" y="591.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="8.7357%" y="565" width="0.0121%" height="15" fill="rgb(219,96,24)" fg:x="720" fg:w="1"/><text x="8.9857%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.04%)</title><rect x="8.7236%" y="725" width="0.0364%" height="15" fill="rgb(219,33,29)" fg:x="719" fg:w="3"/><text x="8.9736%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.04%)</title><rect x="8.7236%" y="709" width="0.0364%" height="15" fill="rgb(223,176,5)" fg:x="719" fg:w="3"/><text x="8.9736%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.04%)</title><rect x="8.7236%" y="693" width="0.0364%" height="15" fill="rgb(228,140,14)" fg:x="719" fg:w="3"/><text x="8.9736%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.04%)</title><rect x="8.7236%" y="677" width="0.0364%" height="15" fill="rgb(217,179,31)" fg:x="719" fg:w="3"/><text x="8.9736%" y="687.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.01%)</title><rect x="8.7479%" y="661" width="0.0121%" height="15" fill="rgb(230,9,30)" fg:x="721" fg:w="1"/><text x="8.9979%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (83 samples, 1.01%)</title><rect x="7.7651%" y="885" width="1.0070%" height="15" fill="rgb(230,136,20)" fg:x="640" fg:w="83"/><text x="8.0151%" y="895.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (82 samples, 0.99%)</title><rect x="7.7772%" y="869" width="0.9949%" height="15" fill="rgb(215,210,22)" fg:x="641" fg:w="82"/><text x="8.0272%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (82 samples, 0.99%)</title><rect x="7.7772%" y="853" width="0.9949%" height="15" fill="rgb(218,43,5)" fg:x="641" fg:w="82"/><text x="8.0272%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (82 samples, 0.99%)</title><rect x="7.7772%" y="837" width="0.9949%" height="15" fill="rgb(216,11,5)" fg:x="641" fg:w="82"/><text x="8.0272%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (81 samples, 0.98%)</title><rect x="7.7894%" y="821" width="0.9828%" height="15" fill="rgb(209,82,29)" fg:x="642" fg:w="81"/><text x="8.0394%" y="831.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (81 samples, 0.98%)</title><rect x="7.7894%" y="805" width="0.9828%" height="15" fill="rgb(244,115,12)" fg:x="642" fg:w="81"/><text x="8.0394%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4 samples, 0.05%)</title><rect x="8.7236%" y="789" width="0.0485%" height="15" fill="rgb(222,82,18)" fg:x="719" fg:w="4"/><text x="8.9736%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.05%)</title><rect x="8.7236%" y="773" width="0.0485%" height="15" fill="rgb(249,227,8)" fg:x="719" fg:w="4"/><text x="8.9736%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.05%)</title><rect x="8.7236%" y="757" width="0.0485%" height="15" fill="rgb(253,141,45)" fg:x="719" fg:w="4"/><text x="8.9736%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4 samples, 0.05%)</title><rect x="8.7236%" y="741" width="0.0485%" height="15" fill="rgb(234,184,4)" fg:x="719" fg:w="4"/><text x="8.9736%" y="751.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.01%)</title><rect x="8.7600%" y="725" width="0.0121%" height="15" fill="rgb(218,194,23)" fg:x="722" fg:w="1"/><text x="9.0100%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="8.8207%" y="757" width="0.0121%" height="15" fill="rgb(235,66,41)" fg:x="727" fg:w="1"/><text x="9.0707%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.05%)</title><rect x="8.8207%" y="789" width="0.0485%" height="15" fill="rgb(245,217,1)" fg:x="727" fg:w="4"/><text x="9.0707%" y="799.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (4 samples, 0.05%)</title><rect x="8.8207%" y="773" width="0.0485%" height="15" fill="rgb(229,91,1)" fg:x="727" fg:w="4"/><text x="9.0707%" y="783.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (3 samples, 0.04%)</title><rect x="8.8328%" y="757" width="0.0364%" height="15" fill="rgb(207,101,30)" fg:x="728" fg:w="3"/><text x="9.0828%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.04%)</title><rect x="8.8328%" y="741" width="0.0364%" height="15" fill="rgb(223,82,49)" fg:x="728" fg:w="3"/><text x="9.0828%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.04%)</title><rect x="8.8328%" y="725" width="0.0364%" height="15" fill="rgb(218,167,17)" fg:x="728" fg:w="3"/><text x="9.0828%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="8.8692%" y="773" width="0.0121%" height="15" fill="rgb(208,103,14)" fg:x="731" fg:w="1"/><text x="9.1192%" y="783.50"></text></g><g><title>core::clone::Clone::clone (3 samples, 0.04%)</title><rect x="8.8692%" y="789" width="0.0364%" height="15" fill="rgb(238,20,8)" fg:x="731" fg:w="3"/><text x="9.1192%" y="799.50"></text></g><g><title>&lt;revm_primitives::precompile::Precompile as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="8.8813%" y="773" width="0.0243%" height="15" fill="rgb(218,80,54)" fg:x="732" fg:w="2"/><text x="9.1313%" y="783.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (95 samples, 1.15%)</title><rect x="7.7651%" y="933" width="1.1526%" height="15" fill="rgb(240,144,17)" fg:x="640" fg:w="95"/><text x="8.0151%" y="943.50"></text></g><g><title>core::ops::function::Fn::call (95 samples, 1.15%)</title><rect x="7.7651%" y="917" width="1.1526%" height="15" fill="rgb(245,27,50)" fg:x="640" fg:w="95"/><text x="8.0151%" y="927.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (95 samples, 1.15%)</title><rect x="7.7651%" y="901" width="1.1526%" height="15" fill="rgb(251,51,7)" fg:x="640" fg:w="95"/><text x="8.0151%" y="911.50"></text></g><g><title>&lt;revm_precompile::Precompiles as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="8.7721%" y="885" width="0.1456%" height="15" fill="rgb(245,217,29)" fg:x="723" fg:w="12"/><text x="9.0221%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="8.7721%" y="869" width="0.1456%" height="15" fill="rgb(221,176,29)" fg:x="723" fg:w="12"/><text x="9.0221%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="8.7721%" y="853" width="0.1456%" height="15" fill="rgb(212,180,24)" fg:x="723" fg:w="12"/><text x="9.0221%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="8.7721%" y="837" width="0.1456%" height="15" fill="rgb(254,24,2)" fg:x="723" fg:w="12"/><text x="9.0221%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (10 samples, 0.12%)</title><rect x="8.7964%" y="821" width="0.1213%" height="15" fill="rgb(230,100,2)" fg:x="725" fg:w="10"/><text x="9.0464%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (10 samples, 0.12%)</title><rect x="8.7964%" y="805" width="0.1213%" height="15" fill="rgb(219,142,25)" fg:x="725" fg:w="10"/><text x="9.0464%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="8.9056%" y="789" width="0.0121%" height="15" fill="rgb(240,73,43)" fg:x="734" fg:w="1"/><text x="9.1556%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="8.9056%" y="773" width="0.0121%" height="15" fill="rgb(214,114,15)" fg:x="734" fg:w="1"/><text x="9.1556%" y="783.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="8.9056%" y="757" width="0.0121%" height="15" fill="rgb(207,130,4)" fg:x="734" fg:w="1"/><text x="9.1556%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="8.9177%" y="917" width="0.0243%" height="15" fill="rgb(221,25,40)" fg:x="735" fg:w="2"/><text x="9.1677%" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="8.9177%" y="901" width="0.0243%" height="15" fill="rgb(241,184,7)" fg:x="735" fg:w="2"/><text x="9.1677%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="8.9177%" y="885" width="0.0243%" height="15" fill="rgb(235,159,4)" fg:x="735" fg:w="2"/><text x="9.1677%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="8.9299%" y="869" width="0.0121%" height="15" fill="rgb(214,87,48)" fg:x="736" fg:w="1"/><text x="9.1799%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="8.9299%" y="853" width="0.0121%" height="15" fill="rgb(246,198,24)" fg:x="736" fg:w="1"/><text x="9.1799%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="8.9299%" y="837" width="0.0121%" height="15" fill="rgb(209,66,40)" fg:x="736" fg:w="1"/><text x="9.1799%" y="847.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="8.9299%" y="821" width="0.0121%" height="15" fill="rgb(233,147,39)" fg:x="736" fg:w="1"/><text x="9.1799%" y="831.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="8.9299%" y="805" width="0.0121%" height="15" fill="rgb(231,145,52)" fg:x="736" fg:w="1"/><text x="9.1799%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (563 samples, 6.83%)</title><rect x="2.1233%" y="1029" width="6.8309%" height="15" fill="rgb(206,20,26)" fg:x="175" fg:w="563"/><text x="2.3733%" y="1039.50">&lt;core::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (563 samples, 6.83%)</title><rect x="2.1233%" y="1013" width="6.8309%" height="15" fill="rgb(238,220,4)" fg:x="175" fg:w="563"/><text x="2.3733%" y="1023.50">&lt;core::sl..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (563 samples, 6.83%)</title><rect x="2.1233%" y="997" width="6.8309%" height="15" fill="rgb(252,195,42)" fg:x="175" fg:w="563"/><text x="2.3733%" y="1007.50">core::ite..</text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (563 samples, 6.83%)</title><rect x="2.1233%" y="981" width="6.8309%" height="15" fill="rgb(209,10,6)" fg:x="175" fg:w="563"/><text x="2.3733%" y="991.50">block_stm..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (315 samples, 3.82%)</title><rect x="5.1322%" y="965" width="3.8219%" height="15" fill="rgb(229,3,52)" fg:x="423" fg:w="315"/><text x="5.3822%" y="975.50">revm..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (315 samples, 3.82%)</title><rect x="5.1322%" y="949" width="3.8219%" height="15" fill="rgb(253,49,37)" fg:x="423" fg:w="315"/><text x="5.3822%" y="959.50">revm..</text></g><g><title>revm_interpreter::inner_models::CallInputs::new_boxed (3 samples, 0.04%)</title><rect x="8.9177%" y="933" width="0.0364%" height="15" fill="rgb(240,103,49)" fg:x="735" fg:w="3"/><text x="9.1677%" y="943.50"></text></g><g><title>revm_interpreter::inner_models::CallInputs::new (1 samples, 0.01%)</title><rect x="8.9420%" y="917" width="0.0121%" height="15" fill="rgb(250,182,30)" fg:x="737" fg:w="1"/><text x="9.1920%" y="927.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (1 samples, 0.01%)</title><rect x="8.9541%" y="1029" width="0.0121%" height="15" fill="rgb(248,8,30)" fg:x="738" fg:w="1"/><text x="9.2041%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="8.9663%" y="1029" width="0.0121%" height="15" fill="rgb(237,120,30)" fg:x="739" fg:w="1"/><text x="9.2163%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="8.9663%" y="1013" width="0.0121%" height="15" fill="rgb(221,146,34)" fg:x="739" fg:w="1"/><text x="9.2163%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="8.9663%" y="997" width="0.0121%" height="15" fill="rgb(242,55,13)" fg:x="739" fg:w="1"/><text x="9.2163%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="8.9784%" y="1029" width="0.0243%" height="15" fill="rgb(242,112,31)" fg:x="740" fg:w="2"/><text x="9.2284%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1 samples, 0.01%)</title><rect x="8.9905%" y="1013" width="0.0121%" height="15" fill="rgb(249,192,27)" fg:x="741" fg:w="1"/><text x="9.2405%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1 samples, 0.01%)</title><rect x="8.9905%" y="997" width="0.0121%" height="15" fill="rgb(208,204,44)" fg:x="741" fg:w="1"/><text x="9.2405%" y="1007.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.01%)</title><rect x="8.9905%" y="981" width="0.0121%" height="15" fill="rgb(208,93,54)" fg:x="741" fg:w="1"/><text x="9.2405%" y="991.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="8.9905%" y="965" width="0.0121%" height="15" fill="rgb(242,1,31)" fg:x="741" fg:w="1"/><text x="9.2405%" y="975.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="8.9905%" y="949" width="0.0121%" height="15" fill="rgb(241,83,25)" fg:x="741" fg:w="1"/><text x="9.2405%" y="959.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="8.9905%" y="933" width="0.0121%" height="15" fill="rgb(205,169,50)" fg:x="741" fg:w="1"/><text x="9.2405%" y="943.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="9.0027%" y="1029" width="0.0121%" height="15" fill="rgb(239,186,37)" fg:x="742" fg:w="1"/><text x="9.2527%" y="1039.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="9.0148%" y="1029" width="0.0728%" height="15" fill="rgb(205,221,10)" fg:x="743" fg:w="6"/><text x="9.2648%" y="1039.50"></text></g><g><title>[block-stm-revm] (1 samples, 0.01%)</title><rect x="9.0876%" y="1029" width="0.0121%" height="15" fill="rgb(218,196,15)" fg:x="749" fg:w="1"/><text x="9.3376%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="9.0876%" y="1013" width="0.0121%" height="15" fill="rgb(218,196,35)" fg:x="749" fg:w="1"/><text x="9.3376%" y="1023.50"></text></g><g><title>__GI___libc_free (15 samples, 0.18%)</title><rect x="9.0997%" y="1029" width="0.1820%" height="15" fill="rgb(233,63,24)" fg:x="750" fg:w="15"/><text x="9.3497%" y="1039.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.13%)</title><rect x="9.2817%" y="1029" width="0.1335%" height="15" fill="rgb(225,8,4)" fg:x="765" fg:w="11"/><text x="9.5317%" y="1039.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="9.4152%" y="1029" width="0.0121%" height="15" fill="rgb(234,105,35)" fg:x="776" fg:w="1"/><text x="9.6652%" y="1039.50"></text></g><g><title>__libc_start_main_impl (2 samples, 0.02%)</title><rect x="9.4273%" y="1029" width="0.0243%" height="15" fill="rgb(236,21,32)" fg:x="777" fg:w="2"/><text x="9.6773%" y="1039.50"></text></g><g><title>__libc_start_call_main (2 samples, 0.02%)</title><rect x="9.4273%" y="1013" width="0.0243%" height="15" fill="rgb(228,109,6)" fg:x="777" fg:w="2"/><text x="9.6773%" y="1023.50"></text></g><g><title>main (2 samples, 0.02%)</title><rect x="9.4273%" y="997" width="0.0243%" height="15" fill="rgb(229,215,31)" fg:x="777" fg:w="2"/><text x="9.6773%" y="1007.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 0.02%)</title><rect x="9.4273%" y="981" width="0.0243%" height="15" fill="rgb(221,52,54)" fg:x="777" fg:w="2"/><text x="9.6773%" y="991.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.02%)</title><rect x="9.4273%" y="965" width="0.0243%" height="15" fill="rgb(252,129,43)" fg:x="777" fg:w="2"/><text x="9.6773%" y="975.50"></text></g><g><title>std::panicking::try (2 samples, 0.02%)</title><rect x="9.4273%" y="949" width="0.0243%" height="15" fill="rgb(248,183,27)" fg:x="777" fg:w="2"/><text x="9.6773%" y="959.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.02%)</title><rect x="9.4273%" y="933" width="0.0243%" height="15" fill="rgb(250,0,22)" fg:x="777" fg:w="2"/><text x="9.6773%" y="943.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2 samples, 0.02%)</title><rect x="9.4273%" y="917" width="0.0243%" height="15" fill="rgb(213,166,10)" fg:x="777" fg:w="2"/><text x="9.6773%" y="927.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.02%)</title><rect x="9.4273%" y="901" width="0.0243%" height="15" fill="rgb(207,163,36)" fg:x="777" fg:w="2"/><text x="9.6773%" y="911.50"></text></g><g><title>std::panicking::try (2 samples, 0.02%)</title><rect x="9.4273%" y="885" width="0.0243%" height="15" fill="rgb(208,122,22)" fg:x="777" fg:w="2"/><text x="9.6773%" y="895.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.02%)</title><rect x="9.4273%" y="869" width="0.0243%" height="15" fill="rgb(207,104,49)" fg:x="777" fg:w="2"/><text x="9.6773%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 0.02%)</title><rect x="9.4273%" y="853" width="0.0243%" height="15" fill="rgb(248,211,50)" fg:x="777" fg:w="2"/><text x="9.6773%" y="863.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (2 samples, 0.02%)</title><rect x="9.4273%" y="837" width="0.0243%" height="15" fill="rgb(217,13,45)" fg:x="777" fg:w="2"/><text x="9.6773%" y="847.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.02%)</title><rect x="9.4273%" y="821" width="0.0243%" height="15" fill="rgb(211,216,49)" fg:x="777" fg:w="2"/><text x="9.6773%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="9.4273%" y="805" width="0.0243%" height="15" fill="rgb(221,58,53)" fg:x="777" fg:w="2"/><text x="9.6773%" y="815.50"></text></g><g><title>block_stm_revm::main (2 samples, 0.02%)</title><rect x="9.4273%" y="789" width="0.0243%" height="15" fill="rgb(220,112,41)" fg:x="777" fg:w="2"/><text x="9.6773%" y="799.50"></text></g><g><title>block_stm_revm::execute_sequential (2 samples, 0.02%)</title><rect x="9.4273%" y="773" width="0.0243%" height="15" fill="rgb(236,38,28)" fg:x="777" fg:w="2"/><text x="9.6773%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="9.4273%" y="757" width="0.0243%" height="15" fill="rgb(227,195,22)" fg:x="777" fg:w="2"/><text x="9.6773%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="9.4273%" y="741" width="0.0243%" height="15" fill="rgb(214,55,33)" fg:x="777" fg:w="2"/><text x="9.6773%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="9.4273%" y="725" width="0.0243%" height="15" fill="rgb(248,80,13)" fg:x="777" fg:w="2"/><text x="9.6773%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="9.4273%" y="709" width="0.0243%" height="15" fill="rgb(238,52,6)" fg:x="777" fg:w="2"/><text x="9.6773%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="9.4273%" y="693" width="0.0243%" height="15" fill="rgb(224,198,47)" fg:x="777" fg:w="2"/><text x="9.6773%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.02%)</title><rect x="9.4273%" y="677" width="0.0243%" height="15" fill="rgb(233,171,20)" fg:x="777" fg:w="2"/><text x="9.6773%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="9.4273%" y="661" width="0.0243%" height="15" fill="rgb(241,30,25)" fg:x="777" fg:w="2"/><text x="9.6773%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="9.4273%" y="645" width="0.0243%" height="15" fill="rgb(207,171,38)" fg:x="777" fg:w="2"/><text x="9.6773%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="9.4273%" y="629" width="0.0243%" height="15" fill="rgb(234,70,1)" fg:x="777" fg:w="2"/><text x="9.6773%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="9.4273%" y="613" width="0.0243%" height="15" fill="rgb(232,178,18)" fg:x="777" fg:w="2"/><text x="9.6773%" y="623.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (2 samples, 0.02%)</title><rect x="9.4273%" y="597" width="0.0243%" height="15" fill="rgb(241,78,40)" fg:x="777" fg:w="2"/><text x="9.6773%" y="607.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (2 samples, 0.02%)</title><rect x="9.4273%" y="581" width="0.0243%" height="15" fill="rgb(222,35,25)" fg:x="777" fg:w="2"/><text x="9.6773%" y="591.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (2 samples, 0.02%)</title><rect x="9.4273%" y="565" width="0.0243%" height="15" fill="rgb(207,92,16)" fg:x="777" fg:w="2"/><text x="9.6773%" y="575.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.02%)</title><rect x="9.4273%" y="549" width="0.0243%" height="15" fill="rgb(216,59,51)" fg:x="777" fg:w="2"/><text x="9.6773%" y="559.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (2 samples, 0.02%)</title><rect x="9.4273%" y="533" width="0.0243%" height="15" fill="rgb(213,80,28)" fg:x="777" fg:w="2"/><text x="9.6773%" y="543.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (2 samples, 0.02%)</title><rect x="9.4273%" y="517" width="0.0243%" height="15" fill="rgb(220,93,7)" fg:x="777" fg:w="2"/><text x="9.6773%" y="527.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_mul (2 samples, 0.02%)</title><rect x="9.4273%" y="501" width="0.0243%" height="15" fill="rgb(225,24,44)" fg:x="777" fg:w="2"/><text x="9.6773%" y="511.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="9.4273%" y="485" width="0.0243%" height="15" fill="rgb(243,74,40)" fg:x="777" fg:w="2"/><text x="9.6773%" y="495.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="9.4273%" y="469" width="0.0243%" height="15" fill="rgb(228,39,7)" fg:x="777" fg:w="2"/><text x="9.6773%" y="479.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="9.4516%" y="1029" width="0.0243%" height="15" fill="rgb(227,79,8)" fg:x="779" fg:w="2"/><text x="9.7016%" y="1039.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (1 samples, 0.01%)</title><rect x="9.4759%" y="1029" width="0.0121%" height="15" fill="rgb(236,58,11)" fg:x="781" fg:w="1"/><text x="9.7259%" y="1039.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="9.4759%" y="1013" width="0.0121%" height="15" fill="rgb(249,63,35)" fg:x="781" fg:w="1"/><text x="9.7259%" y="1023.50"></text></g><g><title>_int_free (15 samples, 0.18%)</title><rect x="9.4880%" y="1029" width="0.1820%" height="15" fill="rgb(252,114,16)" fg:x="782" fg:w="15"/><text x="9.7380%" y="1039.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.04%)</title><rect x="9.6700%" y="1029" width="0.0364%" height="15" fill="rgb(254,151,24)" fg:x="797" fg:w="3"/><text x="9.9200%" y="1039.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="9.7670%" y="997" width="0.0121%" height="15" fill="rgb(253,54,39)" fg:x="805" fg:w="1"/><text x="10.0170%" y="1007.50"></text></g><g><title>_int_malloc (7 samples, 0.08%)</title><rect x="9.7064%" y="1029" width="0.0849%" height="15" fill="rgb(243,25,45)" fg:x="800" fg:w="7"/><text x="9.9564%" y="1039.50"></text></g><g><title>sysmalloc (2 samples, 0.02%)</title><rect x="9.7670%" y="1013" width="0.0243%" height="15" fill="rgb(234,134,9)" fg:x="805" fg:w="2"/><text x="10.0170%" y="1023.50"></text></g><g><title>grow_heap (1 samples, 0.01%)</title><rect x="9.7792%" y="997" width="0.0121%" height="15" fill="rgb(227,166,31)" fg:x="806" fg:w="1"/><text x="10.0292%" y="1007.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="9.7913%" y="1029" width="0.0121%" height="15" fill="rgb(245,143,41)" fg:x="807" fg:w="1"/><text x="10.0413%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8034%" y="997" width="0.0121%" height="15" fill="rgb(238,181,32)" fg:x="808" fg:w="1"/><text x="10.0534%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8034%" y="981" width="0.0121%" height="15" fill="rgb(224,113,18)" fg:x="808" fg:w="1"/><text x="10.0534%" y="991.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="9.8034%" y="965" width="0.0121%" height="15" fill="rgb(240,229,28)" fg:x="808" fg:w="1"/><text x="10.0534%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="9.8034%" y="949" width="0.0121%" height="15" fill="rgb(250,185,3)" fg:x="808" fg:w="1"/><text x="10.0534%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="9.8034%" y="933" width="0.0121%" height="15" fill="rgb(212,59,25)" fg:x="808" fg:w="1"/><text x="10.0534%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8156%" y="997" width="0.0121%" height="15" fill="rgb(221,87,20)" fg:x="809" fg:w="1"/><text x="10.0656%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8156%" y="981" width="0.0121%" height="15" fill="rgb(213,74,28)" fg:x="809" fg:w="1"/><text x="10.0656%" y="991.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="9.8156%" y="965" width="0.0121%" height="15" fill="rgb(224,132,34)" fg:x="809" fg:w="1"/><text x="10.0656%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="9.8156%" y="949" width="0.0121%" height="15" fill="rgb(222,101,24)" fg:x="809" fg:w="1"/><text x="10.0656%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="9.8156%" y="933" width="0.0121%" height="15" fill="rgb(254,142,4)" fg:x="809" fg:w="1"/><text x="10.0656%" y="943.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="9.8034%" y="1013" width="0.0364%" height="15" fill="rgb(230,229,49)" fg:x="808" fg:w="3"/><text x="10.0534%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8277%" y="997" width="0.0121%" height="15" fill="rgb(238,70,47)" fg:x="810" fg:w="1"/><text x="10.0777%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8277%" y="981" width="0.0121%" height="15" fill="rgb(231,160,17)" fg:x="810" fg:w="1"/><text x="10.0777%" y="991.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="9.8277%" y="965" width="0.0121%" height="15" fill="rgb(218,68,53)" fg:x="810" fg:w="1"/><text x="10.0777%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="9.8277%" y="949" width="0.0121%" height="15" fill="rgb(236,111,10)" fg:x="810" fg:w="1"/><text x="10.0777%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="9.8277%" y="933" width="0.0121%" height="15" fill="rgb(224,34,41)" fg:x="810" fg:w="1"/><text x="10.0777%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="9.8034%" y="1029" width="0.0485%" height="15" fill="rgb(241,118,19)" fg:x="808" fg:w="4"/><text x="10.0534%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::mv_memory::MvMemory&gt; (1 samples, 0.01%)</title><rect x="9.8398%" y="1013" width="0.0121%" height="15" fill="rgb(238,129,25)" fg:x="811" fg:w="1"/><text x="10.0898%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8398%" y="997" width="0.0121%" height="15" fill="rgb(238,22,31)" fg:x="811" fg:w="1"/><text x="10.0898%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8398%" y="981" width="0.0121%" height="15" fill="rgb(222,174,48)" fg:x="811" fg:w="1"/><text x="10.0898%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;]&gt; (1 samples, 0.01%)</title><rect x="9.8398%" y="965" width="0.0121%" height="15" fill="rgb(206,152,40)" fg:x="811" fg:w="1"/><text x="10.0898%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8398%" y="949" width="0.0121%" height="15" fill="rgb(218,99,54)" fg:x="811" fg:w="1"/><text x="10.0898%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8398%" y="933" width="0.0121%" height="15" fill="rgb(220,174,26)" fg:x="811" fg:w="1"/><text x="10.0898%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8398%" y="917" width="0.0121%" height="15" fill="rgb(245,116,9)" fg:x="811" fg:w="1"/><text x="10.0898%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8398%" y="901" width="0.0121%" height="15" fill="rgb(209,72,35)" fg:x="811" fg:w="1"/><text x="10.0898%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8398%" y="885" width="0.0121%" height="15" fill="rgb(226,126,21)" fg:x="811" fg:w="1"/><text x="10.0898%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="9.8398%" y="869" width="0.0121%" height="15" fill="rgb(227,192,1)" fg:x="811" fg:w="1"/><text x="10.0898%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="9.8398%" y="853" width="0.0121%" height="15" fill="rgb(237,180,29)" fg:x="811" fg:w="1"/><text x="10.0898%" y="863.50"></text></g><g><title>alloc_perturb (1 samples, 0.01%)</title><rect x="9.8520%" y="1029" width="0.0121%" height="15" fill="rgb(230,197,35)" fg:x="812" fg:w="1"/><text x="10.1020%" y="1039.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="9.8641%" y="981" width="0.0364%" height="15" fill="rgb(246,193,31)" fg:x="813" fg:w="3"/><text x="10.1141%" y="991.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="9.8762%" y="965" width="0.0243%" height="15" fill="rgb(241,36,4)" fg:x="814" fg:w="2"/><text x="10.1262%" y="975.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="9.8762%" y="949" width="0.0243%" height="15" fill="rgb(241,130,17)" fg:x="814" fg:w="2"/><text x="10.1262%" y="959.50"></text></g><g><title>heap_for_ptr (2 samples, 0.02%)</title><rect x="9.8762%" y="933" width="0.0243%" height="15" fill="rgb(206,137,32)" fg:x="814" fg:w="2"/><text x="10.1262%" y="943.50"></text></g><g><title>heap_max_size (2 samples, 0.02%)</title><rect x="9.8762%" y="917" width="0.0243%" height="15" fill="rgb(237,228,51)" fg:x="814" fg:w="2"/><text x="10.1262%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.24%)</title><rect x="9.9005%" y="981" width="0.2427%" height="15" fill="rgb(243,6,42)" fg:x="816" fg:w="20"/><text x="10.1505%" y="991.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="10.1432%" y="981" width="0.0121%" height="15" fill="rgb(251,74,28)" fg:x="836" fg:w="1"/><text x="10.3932%" y="991.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="10.1432%" y="965" width="0.0121%" height="15" fill="rgb(218,20,49)" fg:x="836" fg:w="1"/><text x="10.3932%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="10.1432%" y="949" width="0.0121%" height="15" fill="rgb(238,28,14)" fg:x="836" fg:w="1"/><text x="10.3932%" y="959.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="10.1432%" y="933" width="0.0121%" height="15" fill="rgb(229,40,46)" fg:x="836" fg:w="1"/><text x="10.3932%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.1432%" y="917" width="0.0121%" height="15" fill="rgb(244,195,20)" fg:x="836" fg:w="1"/><text x="10.3932%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.1432%" y="901" width="0.0121%" height="15" fill="rgb(253,56,35)" fg:x="836" fg:w="1"/><text x="10.3932%" y="911.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="10.1553%" y="965" width="0.0485%" height="15" fill="rgb(210,149,44)" fg:x="837" fg:w="4"/><text x="10.4053%" y="975.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="10.1674%" y="949" width="0.0364%" height="15" fill="rgb(240,135,12)" fg:x="838" fg:w="3"/><text x="10.4174%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="10.2038%" y="965" width="0.0243%" height="15" fill="rgb(251,24,50)" fg:x="841" fg:w="2"/><text x="10.4538%" y="975.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="10.2038%" y="949" width="0.0243%" height="15" fill="rgb(243,200,47)" fg:x="841" fg:w="2"/><text x="10.4538%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="10.2038%" y="933" width="0.0243%" height="15" fill="rgb(224,166,26)" fg:x="841" fg:w="2"/><text x="10.4538%" y="943.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="10.2038%" y="917" width="0.0243%" height="15" fill="rgb(233,0,47)" fg:x="841" fg:w="2"/><text x="10.4538%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="10.2038%" y="901" width="0.0243%" height="15" fill="rgb(253,80,5)" fg:x="841" fg:w="2"/><text x="10.4538%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="10.2038%" y="885" width="0.0243%" height="15" fill="rgb(214,133,25)" fg:x="841" fg:w="2"/><text x="10.4538%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_interpreter::instructions::opcode::InstructionTables&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="10.2281%" y="965" width="0.0121%" height="15" fill="rgb(209,27,14)" fg:x="843" fg:w="1"/><text x="10.4781%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::instructions::opcode::InstructionTables&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="10.2281%" y="949" width="0.0121%" height="15" fill="rgb(219,102,51)" fg:x="843" fg:w="1"/><text x="10.4781%" y="959.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="10.2402%" y="901" width="0.0121%" height="15" fill="rgb(237,18,16)" fg:x="844" fg:w="1"/><text x="10.4902%" y="911.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="10.2402%" y="917" width="0.0243%" height="15" fill="rgb(241,85,17)" fg:x="844" fg:w="2"/><text x="10.4902%" y="927.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="10.2524%" y="901" width="0.0121%" height="15" fill="rgb(236,90,42)" fg:x="845" fg:w="1"/><text x="10.5024%" y="911.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="10.2524%" y="885" width="0.0121%" height="15" fill="rgb(249,57,21)" fg:x="845" fg:w="1"/><text x="10.5024%" y="895.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="10.2524%" y="869" width="0.0121%" height="15" fill="rgb(243,12,36)" fg:x="845" fg:w="1"/><text x="10.5024%" y="879.50"></text></g><g><title>heap_max_size (1 samples, 0.01%)</title><rect x="10.2524%" y="853" width="0.0121%" height="15" fill="rgb(253,128,47)" fg:x="845" fg:w="1"/><text x="10.5024%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.06%)</title><rect x="10.2645%" y="917" width="0.0607%" height="15" fill="rgb(207,33,20)" fg:x="846" fg:w="5"/><text x="10.5145%" y="927.50"></text></g><g><title>core::mem::drop (5 samples, 0.06%)</title><rect x="10.2645%" y="901" width="0.0607%" height="15" fill="rgb(233,215,35)" fg:x="846" fg:w="5"/><text x="10.5145%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (5 samples, 0.06%)</title><rect x="10.2645%" y="885" width="0.0607%" height="15" fill="rgb(249,188,52)" fg:x="846" fg:w="5"/><text x="10.5145%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="10.2645%" y="869" width="0.0607%" height="15" fill="rgb(225,12,32)" fg:x="846" fg:w="5"/><text x="10.5145%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="10.2645%" y="853" width="0.0607%" height="15" fill="rgb(247,98,14)" fg:x="846" fg:w="5"/><text x="10.5145%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="10.2645%" y="837" width="0.0607%" height="15" fill="rgb(247,219,48)" fg:x="846" fg:w="5"/><text x="10.5145%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="10.2402%" y="949" width="0.1213%" height="15" fill="rgb(253,60,48)" fg:x="844" fg:w="10"/><text x="10.4902%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="10.2402%" y="933" width="0.1213%" height="15" fill="rgb(245,15,52)" fg:x="844" fg:w="10"/><text x="10.4902%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="10.3252%" y="917" width="0.0364%" height="15" fill="rgb(220,133,28)" fg:x="851" fg:w="3"/><text x="10.5752%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="10.3252%" y="901" width="0.0364%" height="15" fill="rgb(217,180,4)" fg:x="851" fg:w="3"/><text x="10.5752%" y="911.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="10.3616%" y="917" width="0.0607%" height="15" fill="rgb(251,24,1)" fg:x="854" fg:w="5"/><text x="10.6116%" y="927.50"></text></g><g><title>_int_free (5 samples, 0.06%)</title><rect x="10.3616%" y="901" width="0.0607%" height="15" fill="rgb(212,185,49)" fg:x="854" fg:w="5"/><text x="10.6116%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="10.4222%" y="917" width="0.0121%" height="15" fill="rgb(215,175,22)" fg:x="859" fg:w="1"/><text x="10.6722%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="10.4222%" y="901" width="0.0121%" height="15" fill="rgb(250,205,14)" fg:x="859" fg:w="1"/><text x="10.6722%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (17 samples, 0.21%)</title><rect x="10.2402%" y="965" width="0.2063%" height="15" fill="rgb(225,211,22)" fg:x="844" fg:w="17"/><text x="10.4902%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="10.3616%" y="949" width="0.0849%" height="15" fill="rgb(251,179,42)" fg:x="854" fg:w="7"/><text x="10.6116%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="10.3616%" y="933" width="0.0849%" height="15" fill="rgb(208,216,51)" fg:x="854" fg:w="7"/><text x="10.6116%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.4344%" y="917" width="0.0121%" height="15" fill="rgb(235,36,11)" fg:x="860" fg:w="1"/><text x="10.6844%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.4344%" y="901" width="0.0121%" height="15" fill="rgb(213,189,28)" fg:x="860" fg:w="1"/><text x="10.6844%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="10.4465%" y="917" width="0.0121%" height="15" fill="rgb(227,203,42)" fg:x="861" fg:w="1"/><text x="10.6965%" y="927.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="10.4465%" y="901" width="0.0121%" height="15" fill="rgb(244,72,36)" fg:x="861" fg:w="1"/><text x="10.6965%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="10.4465%" y="885" width="0.0121%" height="15" fill="rgb(213,53,17)" fg:x="861" fg:w="1"/><text x="10.6965%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="10.4465%" y="869" width="0.0121%" height="15" fill="rgb(207,167,3)" fg:x="861" fg:w="1"/><text x="10.6965%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="10.4465%" y="949" width="0.0485%" height="15" fill="rgb(216,98,30)" fg:x="861" fg:w="4"/><text x="10.6965%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="10.4465%" y="933" width="0.0485%" height="15" fill="rgb(236,123,15)" fg:x="861" fg:w="4"/><text x="10.6965%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="10.4586%" y="917" width="0.0364%" height="15" fill="rgb(248,81,50)" fg:x="862" fg:w="3"/><text x="10.7086%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="10.4586%" y="901" width="0.0364%" height="15" fill="rgb(214,120,4)" fg:x="862" fg:w="3"/><text x="10.7086%" y="911.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="10.4950%" y="917" width="0.0121%" height="15" fill="rgb(208,179,34)" fg:x="865" fg:w="1"/><text x="10.7450%" y="927.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="10.5072%" y="853" width="0.0121%" height="15" fill="rgb(227,140,7)" fg:x="866" fg:w="1"/><text x="10.7572%" y="863.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="10.5072%" y="837" width="0.0121%" height="15" fill="rgb(214,22,6)" fg:x="866" fg:w="1"/><text x="10.7572%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="10.5072%" y="917" width="0.0243%" height="15" fill="rgb(207,137,27)" fg:x="866" fg:w="2"/><text x="10.7572%" y="927.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="10.5072%" y="901" width="0.0243%" height="15" fill="rgb(210,8,46)" fg:x="866" fg:w="2"/><text x="10.7572%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="10.5072%" y="885" width="0.0243%" height="15" fill="rgb(240,16,54)" fg:x="866" fg:w="2"/><text x="10.7572%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="10.5072%" y="869" width="0.0243%" height="15" fill="rgb(211,209,29)" fg:x="866" fg:w="2"/><text x="10.7572%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.5193%" y="853" width="0.0121%" height="15" fill="rgb(226,228,24)" fg:x="867" fg:w="1"/><text x="10.7693%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.5193%" y="837" width="0.0121%" height="15" fill="rgb(222,84,9)" fg:x="867" fg:w="1"/><text x="10.7693%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (9 samples, 0.11%)</title><rect x="10.4465%" y="965" width="0.1092%" height="15" fill="rgb(234,203,30)" fg:x="861" fg:w="9"/><text x="10.6965%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="10.4950%" y="949" width="0.0607%" height="15" fill="rgb(238,109,14)" fg:x="865" fg:w="5"/><text x="10.7450%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="10.4950%" y="933" width="0.0607%" height="15" fill="rgb(233,206,34)" fg:x="865" fg:w="5"/><text x="10.7450%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="10.5314%" y="917" width="0.0243%" height="15" fill="rgb(220,167,47)" fg:x="868" fg:w="2"/><text x="10.7814%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="10.5314%" y="901" width="0.0243%" height="15" fill="rgb(238,105,10)" fg:x="868" fg:w="2"/><text x="10.7814%" y="911.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="10.5678%" y="917" width="0.0121%" height="15" fill="rgb(213,227,17)" fg:x="871" fg:w="1"/><text x="10.8178%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="10.5557%" y="949" width="0.0364%" height="15" fill="rgb(217,132,38)" fg:x="870" fg:w="3"/><text x="10.8057%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="10.5557%" y="933" width="0.0364%" height="15" fill="rgb(242,146,4)" fg:x="870" fg:w="3"/><text x="10.8057%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.5800%" y="917" width="0.0121%" height="15" fill="rgb(212,61,9)" fg:x="872" fg:w="1"/><text x="10.8300%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.5800%" y="901" width="0.0121%" height="15" fill="rgb(247,126,22)" fg:x="872" fg:w="1"/><text x="10.8300%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="10.5921%" y="949" width="0.0121%" height="15" fill="rgb(220,196,2)" fg:x="873" fg:w="1"/><text x="10.8421%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="10.5921%" y="933" width="0.0121%" height="15" fill="rgb(208,46,4)" fg:x="873" fg:w="1"/><text x="10.8421%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.5921%" y="917" width="0.0121%" height="15" fill="rgb(252,104,46)" fg:x="873" fg:w="1"/><text x="10.8421%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.5921%" y="901" width="0.0121%" height="15" fill="rgb(237,152,48)" fg:x="873" fg:w="1"/><text x="10.8421%" y="911.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="10.6042%" y="917" width="0.0607%" height="15" fill="rgb(221,59,37)" fg:x="874" fg:w="5"/><text x="10.8542%" y="927.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="10.6042%" y="901" width="0.0607%" height="15" fill="rgb(209,202,51)" fg:x="874" fg:w="5"/><text x="10.8542%" y="911.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="10.6042%" y="885" width="0.0607%" height="15" fill="rgb(228,81,30)" fg:x="874" fg:w="5"/><text x="10.8542%" y="895.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="10.6042%" y="869" width="0.0607%" height="15" fill="rgb(227,42,39)" fg:x="874" fg:w="5"/><text x="10.8542%" y="879.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="10.6042%" y="853" width="0.0607%" height="15" fill="rgb(221,26,2)" fg:x="874" fg:w="5"/><text x="10.8542%" y="863.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="10.6042%" y="837" width="0.0607%" height="15" fill="rgb(254,61,31)" fg:x="874" fg:w="5"/><text x="10.8542%" y="847.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="10.6042%" y="821" width="0.0607%" height="15" fill="rgb(222,173,38)" fg:x="874" fg:w="5"/><text x="10.8542%" y="831.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="10.6042%" y="805" width="0.0607%" height="15" fill="rgb(218,50,12)" fg:x="874" fg:w="5"/><text x="10.8542%" y="815.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="10.6042%" y="789" width="0.0607%" height="15" fill="rgb(223,88,40)" fg:x="874" fg:w="5"/><text x="10.8542%" y="799.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="10.6042%" y="773" width="0.0607%" height="15" fill="rgb(237,54,19)" fg:x="874" fg:w="5"/><text x="10.8542%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="10.6649%" y="917" width="0.0364%" height="15" fill="rgb(251,129,25)" fg:x="879" fg:w="3"/><text x="10.9149%" y="927.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="10.6649%" y="901" width="0.0364%" height="15" fill="rgb(238,97,19)" fg:x="879" fg:w="3"/><text x="10.9149%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="10.6649%" y="885" width="0.0364%" height="15" fill="rgb(240,169,18)" fg:x="879" fg:w="3"/><text x="10.9149%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="10.6649%" y="869" width="0.0364%" height="15" fill="rgb(230,187,49)" fg:x="879" fg:w="3"/><text x="10.9149%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="10.6649%" y="853" width="0.0364%" height="15" fill="rgb(209,44,26)" fg:x="879" fg:w="3"/><text x="10.9149%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="10.6649%" y="837" width="0.0364%" height="15" fill="rgb(244,0,6)" fg:x="879" fg:w="3"/><text x="10.9149%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (49 samples, 0.59%)</title><rect x="10.1553%" y="981" width="0.5945%" height="15" fill="rgb(248,18,21)" fg:x="837" fg:w="49"/><text x="10.4053%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (16 samples, 0.19%)</title><rect x="10.5557%" y="965" width="0.1941%" height="15" fill="rgb(245,180,19)" fg:x="870" fg:w="16"/><text x="10.8057%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (12 samples, 0.15%)</title><rect x="10.6042%" y="949" width="0.1456%" height="15" fill="rgb(252,118,36)" fg:x="874" fg:w="12"/><text x="10.8542%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.15%)</title><rect x="10.6042%" y="933" width="0.1456%" height="15" fill="rgb(210,224,19)" fg:x="874" fg:w="12"/><text x="10.8542%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="10.7013%" y="917" width="0.0485%" height="15" fill="rgb(218,30,24)" fg:x="882" fg:w="4"/><text x="10.9513%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="10.7013%" y="901" width="0.0485%" height="15" fill="rgb(219,75,50)" fg:x="882" fg:w="4"/><text x="10.9513%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="10.7498%" y="965" width="0.0121%" height="15" fill="rgb(234,72,50)" fg:x="886" fg:w="1"/><text x="10.9998%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="10.7498%" y="949" width="0.0121%" height="15" fill="rgb(219,100,48)" fg:x="886" fg:w="1"/><text x="10.9998%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.7498%" y="933" width="0.0121%" height="15" fill="rgb(253,5,41)" fg:x="886" fg:w="1"/><text x="10.9998%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.7498%" y="917" width="0.0121%" height="15" fill="rgb(247,181,11)" fg:x="886" fg:w="1"/><text x="10.9998%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="10.7620%" y="965" width="0.0121%" height="15" fill="rgb(222,223,25)" fg:x="887" fg:w="1"/><text x="11.0120%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="10.7620%" y="949" width="0.0121%" height="15" fill="rgb(214,198,28)" fg:x="887" fg:w="1"/><text x="11.0120%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.7620%" y="933" width="0.0121%" height="15" fill="rgb(230,46,43)" fg:x="887" fg:w="1"/><text x="11.0120%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.7620%" y="917" width="0.0121%" height="15" fill="rgb(233,65,53)" fg:x="887" fg:w="1"/><text x="11.0120%" y="927.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="10.7741%" y="933" width="0.0121%" height="15" fill="rgb(221,121,27)" fg:x="888" fg:w="1"/><text x="11.0241%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="10.7741%" y="917" width="0.0121%" height="15" fill="rgb(247,70,47)" fg:x="888" fg:w="1"/><text x="11.0241%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="10.7741%" y="965" width="0.0243%" height="15" fill="rgb(228,85,35)" fg:x="888" fg:w="2"/><text x="11.0241%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="10.7741%" y="949" width="0.0243%" height="15" fill="rgb(209,50,18)" fg:x="888" fg:w="2"/><text x="11.0241%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="10.7862%" y="933" width="0.0121%" height="15" fill="rgb(250,19,35)" fg:x="889" fg:w="1"/><text x="11.0362%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="10.7862%" y="917" width="0.0121%" height="15" fill="rgb(253,107,29)" fg:x="889" fg:w="1"/><text x="11.0362%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="10.7983%" y="917" width="0.0121%" height="15" fill="rgb(252,179,29)" fg:x="890" fg:w="1"/><text x="11.0483%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="10.7983%" y="933" width="0.0364%" height="15" fill="rgb(238,194,6)" fg:x="890" fg:w="3"/><text x="11.0483%" y="943.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="10.8105%" y="917" width="0.0243%" height="15" fill="rgb(238,164,29)" fg:x="891" fg:w="2"/><text x="11.0605%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="10.8105%" y="901" width="0.0243%" height="15" fill="rgb(224,25,9)" fg:x="891" fg:w="2"/><text x="11.0605%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="10.8105%" y="885" width="0.0243%" height="15" fill="rgb(244,153,23)" fg:x="891" fg:w="2"/><text x="11.0605%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="10.8105%" y="869" width="0.0243%" height="15" fill="rgb(212,203,14)" fg:x="891" fg:w="2"/><text x="11.0605%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="10.8105%" y="853" width="0.0243%" height="15" fill="rgb(220,164,20)" fg:x="891" fg:w="2"/><text x="11.0605%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="10.7983%" y="965" width="0.0728%" height="15" fill="rgb(222,203,48)" fg:x="890" fg:w="6"/><text x="11.0483%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="10.7983%" y="949" width="0.0728%" height="15" fill="rgb(215,159,22)" fg:x="890" fg:w="6"/><text x="11.0483%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="10.8347%" y="933" width="0.0364%" height="15" fill="rgb(216,183,47)" fg:x="893" fg:w="3"/><text x="11.0847%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="10.8347%" y="917" width="0.0364%" height="15" fill="rgb(229,195,25)" fg:x="893" fg:w="3"/><text x="11.0847%" y="927.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="10.8711%" y="933" width="0.0243%" height="15" fill="rgb(224,132,51)" fg:x="896" fg:w="2"/><text x="11.1211%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="10.8833%" y="917" width="0.0121%" height="15" fill="rgb(240,63,7)" fg:x="897" fg:w="1"/><text x="11.1333%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="10.8954%" y="933" width="0.0121%" height="15" fill="rgb(249,182,41)" fg:x="898" fg:w="1"/><text x="11.1454%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="10.8711%" y="965" width="0.0607%" height="15" fill="rgb(243,47,26)" fg:x="896" fg:w="5"/><text x="11.1211%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="10.8711%" y="949" width="0.0607%" height="15" fill="rgb(233,48,2)" fg:x="896" fg:w="5"/><text x="11.1211%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="10.9075%" y="933" width="0.0243%" height="15" fill="rgb(244,165,34)" fg:x="899" fg:w="2"/><text x="11.1575%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="10.9075%" y="917" width="0.0243%" height="15" fill="rgb(207,89,7)" fg:x="899" fg:w="2"/><text x="11.1575%" y="927.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="10.9318%" y="933" width="0.0607%" height="15" fill="rgb(244,117,36)" fg:x="901" fg:w="5"/><text x="11.1818%" y="943.50"></text></g><g><title>_int_free (5 samples, 0.06%)</title><rect x="10.9318%" y="917" width="0.0607%" height="15" fill="rgb(226,144,34)" fg:x="901" fg:w="5"/><text x="11.1818%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="10.9925%" y="933" width="0.0121%" height="15" fill="rgb(213,23,19)" fg:x="906" fg:w="1"/><text x="11.2425%" y="943.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="10.9925%" y="917" width="0.0121%" height="15" fill="rgb(217,75,12)" fg:x="906" fg:w="1"/><text x="11.2425%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="10.9925%" y="901" width="0.0121%" height="15" fill="rgb(224,159,17)" fg:x="906" fg:w="1"/><text x="11.2425%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="10.9925%" y="885" width="0.0121%" height="15" fill="rgb(217,118,1)" fg:x="906" fg:w="1"/><text x="11.2425%" y="895.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="10.9925%" y="869" width="0.0121%" height="15" fill="rgb(232,180,48)" fg:x="906" fg:w="1"/><text x="11.2425%" y="879.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="10.9925%" y="853" width="0.0121%" height="15" fill="rgb(230,27,33)" fg:x="906" fg:w="1"/><text x="11.2425%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="10.9318%" y="965" width="0.0971%" height="15" fill="rgb(205,31,21)" fg:x="901" fg:w="8"/><text x="11.1818%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="10.9318%" y="949" width="0.0971%" height="15" fill="rgb(253,59,4)" fg:x="901" fg:w="8"/><text x="11.1818%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="11.0046%" y="933" width="0.0243%" height="15" fill="rgb(224,201,9)" fg:x="907" fg:w="2"/><text x="11.2546%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="11.0046%" y="917" width="0.0243%" height="15" fill="rgb(229,206,30)" fg:x="907" fg:w="2"/><text x="11.2546%" y="927.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="11.0289%" y="933" width="0.0364%" height="15" fill="rgb(212,67,47)" fg:x="909" fg:w="3"/><text x="11.2789%" y="943.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="11.0289%" y="917" width="0.0364%" height="15" fill="rgb(211,96,50)" fg:x="909" fg:w="3"/><text x="11.2789%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (29 samples, 0.35%)</title><rect x="10.7498%" y="981" width="0.3519%" height="15" fill="rgb(252,114,18)" fg:x="886" fg:w="29"/><text x="10.9998%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="11.0289%" y="965" width="0.0728%" height="15" fill="rgb(223,58,37)" fg:x="909" fg:w="6"/><text x="11.2789%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="11.0289%" y="949" width="0.0728%" height="15" fill="rgb(237,70,4)" fg:x="909" fg:w="6"/><text x="11.2789%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="11.0653%" y="933" width="0.0364%" height="15" fill="rgb(244,85,46)" fg:x="912" fg:w="3"/><text x="11.3153%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="11.0653%" y="917" width="0.0364%" height="15" fill="rgb(223,39,52)" fg:x="912" fg:w="3"/><text x="11.3153%" y="927.50"></text></g><g><title>revm::context::Context&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="11.1017%" y="981" width="0.0121%" height="15" fill="rgb(218,200,14)" fg:x="915" fg:w="1"/><text x="11.3517%" y="991.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="11.1017%" y="965" width="0.0121%" height="15" fill="rgb(208,171,16)" fg:x="915" fg:w="1"/><text x="11.3517%" y="975.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (104 samples, 1.26%)</title><rect x="9.8641%" y="1029" width="1.2618%" height="15" fill="rgb(234,200,18)" fg:x="813" fg:w="104"/><text x="10.1141%" y="1039.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (104 samples, 1.26%)</title><rect x="9.8641%" y="1013" width="1.2618%" height="15" fill="rgb(228,45,11)" fg:x="813" fg:w="104"/><text x="10.1141%" y="1023.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (104 samples, 1.26%)</title><rect x="9.8641%" y="997" width="1.2618%" height="15" fill="rgb(237,182,11)" fg:x="813" fg:w="104"/><text x="10.1141%" y="1007.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (1 samples, 0.01%)</title><rect x="11.1138%" y="981" width="0.0121%" height="15" fill="rgb(241,175,49)" fg:x="916" fg:w="1"/><text x="11.3638%" y="991.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::with_db (1 samples, 0.01%)</title><rect x="11.1138%" y="965" width="0.0121%" height="15" fill="rgb(247,38,35)" fg:x="916" fg:w="1"/><text x="11.3638%" y="975.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="11.1138%" y="949" width="0.0121%" height="15" fill="rgb(228,39,49)" fg:x="916" fg:w="1"/><text x="11.3638%" y="959.50"></text></g><g><title>&lt;revm_primitives::db::WrapDatabaseRef&lt;T&gt; as revm_primitives::db::Database&gt;::basic (2 samples, 0.02%)</title><rect x="11.1259%" y="741" width="0.0243%" height="15" fill="rgb(226,101,26)" fg:x="917" fg:w="2"/><text x="11.3759%" y="751.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for &amp;T&gt;::basic_ref (2 samples, 0.02%)</title><rect x="11.1259%" y="725" width="0.0243%" height="15" fill="rgb(206,141,19)" fg:x="917" fg:w="2"/><text x="11.3759%" y="735.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (2 samples, 0.02%)</title><rect x="11.1259%" y="709" width="0.0243%" height="15" fill="rgb(211,200,13)" fg:x="917" fg:w="2"/><text x="11.3759%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="11.1502%" y="741" width="0.0121%" height="15" fill="rgb(241,121,6)" fg:x="919" fg:w="1"/><text x="11.4002%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="11.1502%" y="725" width="0.0121%" height="15" fill="rgb(234,221,29)" fg:x="919" fg:w="1"/><text x="11.4002%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="11.1502%" y="709" width="0.0121%" height="15" fill="rgb(229,136,5)" fg:x="919" fg:w="1"/><text x="11.4002%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="11.1502%" y="693" width="0.0121%" height="15" fill="rgb(238,36,11)" fg:x="919" fg:w="1"/><text x="11.4002%" y="703.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="11.1502%" y="677" width="0.0121%" height="15" fill="rgb(251,55,41)" fg:x="919" fg:w="1"/><text x="11.4002%" y="687.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="11.1502%" y="661" width="0.0121%" height="15" fill="rgb(242,34,40)" fg:x="919" fg:w="1"/><text x="11.4002%" y="671.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="11.1502%" y="645" width="0.0121%" height="15" fill="rgb(215,42,17)" fg:x="919" fg:w="1"/><text x="11.4002%" y="655.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (3 samples, 0.04%)</title><rect x="11.1623%" y="741" width="0.0364%" height="15" fill="rgb(207,44,46)" fg:x="920" fg:w="3"/><text x="11.4123%" y="751.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="11.1866%" y="725" width="0.0121%" height="15" fill="rgb(211,206,28)" fg:x="922" fg:w="1"/><text x="11.4366%" y="735.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (1 samples, 0.01%)</title><rect x="11.1866%" y="709" width="0.0121%" height="15" fill="rgb(237,167,16)" fg:x="922" fg:w="1"/><text x="11.4366%" y="719.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (1 samples, 0.01%)</title><rect x="11.1866%" y="693" width="0.0121%" height="15" fill="rgb(233,66,6)" fg:x="922" fg:w="1"/><text x="11.4366%" y="703.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (1 samples, 0.01%)</title><rect x="11.1866%" y="677" width="0.0121%" height="15" fill="rgb(246,123,29)" fg:x="922" fg:w="1"/><text x="11.4366%" y="687.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (1 samples, 0.01%)</title><rect x="11.1866%" y="661" width="0.0121%" height="15" fill="rgb(209,62,40)" fg:x="922" fg:w="1"/><text x="11.4366%" y="671.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="11.3443%" y="437" width="0.0121%" height="15" fill="rgb(218,4,25)" fg:x="935" fg:w="1"/><text x="11.5943%" y="447.50"></text></g><g><title>down_read_trylock (1 samples, 0.01%)</title><rect x="11.3565%" y="437" width="0.0121%" height="15" fill="rgb(253,91,49)" fg:x="936" fg:w="1"/><text x="11.6065%" y="447.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="11.3929%" y="389" width="0.0121%" height="15" fill="rgb(228,155,29)" fg:x="939" fg:w="1"/><text x="11.6429%" y="399.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="11.4414%" y="373" width="0.0121%" height="15" fill="rgb(243,57,37)" fg:x="943" fg:w="1"/><text x="11.6914%" y="383.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="11.4535%" y="357" width="0.0121%" height="15" fill="rgb(244,167,17)" fg:x="944" fg:w="1"/><text x="11.7035%" y="367.50"></text></g><g><title>__folio_throttle_swaprate (6 samples, 0.07%)</title><rect x="11.4535%" y="373" width="0.0728%" height="15" fill="rgb(207,181,38)" fg:x="944" fg:w="6"/><text x="11.7035%" y="383.50"></text></g><g><title>blk_cgroup_congested (5 samples, 0.06%)</title><rect x="11.4657%" y="357" width="0.0607%" height="15" fill="rgb(211,8,23)" fg:x="945" fg:w="5"/><text x="11.7157%" y="367.50"></text></g><g><title>__get_vma_policy (1 samples, 0.01%)</title><rect x="11.5263%" y="373" width="0.0121%" height="15" fill="rgb(235,11,44)" fg:x="950" fg:w="1"/><text x="11.7763%" y="383.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="11.5385%" y="357" width="0.0121%" height="15" fill="rgb(248,18,52)" fg:x="951" fg:w="1"/><text x="11.7885%" y="367.50"></text></g><g><title>__count_memcg_events (3 samples, 0.04%)</title><rect x="11.5506%" y="341" width="0.0364%" height="15" fill="rgb(208,4,7)" fg:x="952" fg:w="3"/><text x="11.8006%" y="351.50"></text></g><g><title>charge_memcg (4 samples, 0.05%)</title><rect x="11.5506%" y="357" width="0.0485%" height="15" fill="rgb(240,17,39)" fg:x="952" fg:w="4"/><text x="11.8006%" y="367.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="11.5870%" y="341" width="0.0121%" height="15" fill="rgb(207,170,3)" fg:x="955" fg:w="1"/><text x="11.8370%" y="351.50"></text></g><g><title>consume_stock (1 samples, 0.01%)</title><rect x="11.5870%" y="325" width="0.0121%" height="15" fill="rgb(236,100,52)" fg:x="955" fg:w="1"/><text x="11.8370%" y="335.50"></text></g><g><title>__mem_cgroup_charge (25 samples, 0.30%)</title><rect x="11.5385%" y="373" width="0.3033%" height="15" fill="rgb(246,78,51)" fg:x="951" fg:w="25"/><text x="11.7885%" y="383.50"></text></g><g><title>get_mem_cgroup_from_mm (20 samples, 0.24%)</title><rect x="11.5991%" y="357" width="0.2427%" height="15" fill="rgb(211,17,15)" fg:x="956" fg:w="20"/><text x="11.8491%" y="367.50"></text></g><g><title>_raw_spin_lock (10 samples, 0.12%)</title><rect x="11.8418%" y="373" width="0.1213%" height="15" fill="rgb(209,59,46)" fg:x="976" fg:w="10"/><text x="12.0918%" y="383.50"></text></g><g><title>folio_add_lru_vma (8 samples, 0.10%)</title><rect x="11.9631%" y="373" width="0.0971%" height="15" fill="rgb(210,92,25)" fg:x="986" fg:w="8"/><text x="12.2131%" y="383.50"></text></g><g><title>folio_add_lru (8 samples, 0.10%)</title><rect x="11.9631%" y="357" width="0.0971%" height="15" fill="rgb(238,174,52)" fg:x="986" fg:w="8"/><text x="12.2131%" y="367.50"></text></g><g><title>folio_batch_move_lru (6 samples, 0.07%)</title><rect x="11.9874%" y="341" width="0.0728%" height="15" fill="rgb(230,73,7)" fg:x="988" fg:w="6"/><text x="12.2374%" y="351.50"></text></g><g><title>lru_add_fn (6 samples, 0.07%)</title><rect x="11.9874%" y="325" width="0.0728%" height="15" fill="rgb(243,124,40)" fg:x="988" fg:w="6"/><text x="12.2374%" y="335.50"></text></g><g><title>lru_gen_add_folio (4 samples, 0.05%)</title><rect x="12.0116%" y="309" width="0.0485%" height="15" fill="rgb(244,170,11)" fg:x="990" fg:w="4"/><text x="12.2616%" y="319.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.02%)</title><rect x="12.0359%" y="293" width="0.0243%" height="15" fill="rgb(207,114,54)" fg:x="992" fg:w="2"/><text x="12.2859%" y="303.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.02%)</title><rect x="12.0359%" y="277" width="0.0243%" height="15" fill="rgb(205,42,20)" fg:x="992" fg:w="2"/><text x="12.2859%" y="287.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="12.0966%" y="325" width="0.0121%" height="15" fill="rgb(230,30,28)" fg:x="997" fg:w="1"/><text x="12.3466%" y="335.50"></text></g><g><title>folio_add_new_anon_rmap (5 samples, 0.06%)</title><rect x="12.0602%" y="373" width="0.0607%" height="15" fill="rgb(205,73,54)" fg:x="994" fg:w="5"/><text x="12.3102%" y="383.50"></text></g><g><title>__mod_lruvec_page_state (3 samples, 0.04%)</title><rect x="12.0844%" y="357" width="0.0364%" height="15" fill="rgb(254,227,23)" fg:x="996" fg:w="3"/><text x="12.3344%" y="367.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.02%)</title><rect x="12.0966%" y="341" width="0.0243%" height="15" fill="rgb(228,202,34)" fg:x="997" fg:w="2"/><text x="12.3466%" y="351.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="12.1087%" y="325" width="0.0121%" height="15" fill="rgb(222,225,37)" fg:x="998" fg:w="1"/><text x="12.3587%" y="335.50"></text></g><g><title>inc_mm_counter (2 samples, 0.02%)</title><rect x="12.1208%" y="373" width="0.0243%" height="15" fill="rgb(221,14,54)" fg:x="999" fg:w="2"/><text x="12.3708%" y="383.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="12.1330%" y="357" width="0.0121%" height="15" fill="rgb(254,102,2)" fg:x="1000" fg:w="1"/><text x="12.3830%" y="367.50"></text></g><g><title>_raw_spin_trylock (1 samples, 0.01%)</title><rect x="12.1694%" y="309" width="0.0121%" height="15" fill="rgb(232,104,17)" fg:x="1003" fg:w="1"/><text x="12.4194%" y="319.50"></text></g><g><title>handle_mm_fault (70 samples, 0.85%)</title><rect x="11.3686%" y="437" width="0.8493%" height="15" fill="rgb(250,220,14)" fg:x="937" fg:w="70"/><text x="11.6186%" y="447.50"></text></g><g><title>__handle_mm_fault (70 samples, 0.85%)</title><rect x="11.3686%" y="421" width="0.8493%" height="15" fill="rgb(241,158,9)" fg:x="937" fg:w="70"/><text x="11.6186%" y="431.50"></text></g><g><title>handle_pte_fault (68 samples, 0.83%)</title><rect x="11.3929%" y="405" width="0.8250%" height="15" fill="rgb(246,9,43)" fg:x="939" fg:w="68"/><text x="11.6429%" y="415.50"></text></g><g><title>do_anonymous_page (67 samples, 0.81%)</title><rect x="11.4050%" y="389" width="0.8129%" height="15" fill="rgb(206,73,33)" fg:x="940" fg:w="67"/><text x="11.6550%" y="399.50"></text></g><g><title>vma_alloc_folio (6 samples, 0.07%)</title><rect x="12.1451%" y="373" width="0.0728%" height="15" fill="rgb(222,79,8)" fg:x="1001" fg:w="6"/><text x="12.3951%" y="383.50"></text></g><g><title>__folio_alloc (6 samples, 0.07%)</title><rect x="12.1451%" y="357" width="0.0728%" height="15" fill="rgb(234,8,54)" fg:x="1001" fg:w="6"/><text x="12.3951%" y="367.50"></text></g><g><title>__alloc_pages (6 samples, 0.07%)</title><rect x="12.1451%" y="341" width="0.0728%" height="15" fill="rgb(209,134,38)" fg:x="1001" fg:w="6"/><text x="12.3951%" y="351.50"></text></g><g><title>get_page_from_freelist (5 samples, 0.06%)</title><rect x="12.1572%" y="325" width="0.0607%" height="15" fill="rgb(230,127,29)" fg:x="1002" fg:w="5"/><text x="12.4072%" y="335.50"></text></g><g><title>rmqueue (3 samples, 0.04%)</title><rect x="12.1815%" y="309" width="0.0364%" height="15" fill="rgb(242,44,41)" fg:x="1004" fg:w="3"/><text x="12.4315%" y="319.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="12.1936%" y="293" width="0.0243%" height="15" fill="rgb(222,56,43)" fg:x="1005" fg:w="2"/><text x="12.4436%" y="303.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="12.1936%" y="277" width="0.0243%" height="15" fill="rgb(238,39,47)" fg:x="1005" fg:w="2"/><text x="12.4436%" y="287.50"></text></g><g><title>do_user_addr_fault (78 samples, 0.95%)</title><rect x="11.3079%" y="453" width="0.9464%" height="15" fill="rgb(226,79,43)" fg:x="932" fg:w="78"/><text x="11.5579%" y="463.50"></text></g><g><title>lock_vma_under_rcu (3 samples, 0.04%)</title><rect x="12.2179%" y="437" width="0.0364%" height="15" fill="rgb(242,105,53)" fg:x="1007" fg:w="3"/><text x="12.4679%" y="447.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="12.2300%" y="421" width="0.0243%" height="15" fill="rgb(251,132,46)" fg:x="1008" fg:w="2"/><text x="12.4800%" y="431.50"></text></g><g><title>mtree_range_walk (2 samples, 0.02%)</title><rect x="12.2300%" y="405" width="0.0243%" height="15" fill="rgb(231,77,14)" fg:x="1008" fg:w="2"/><text x="12.4800%" y="415.50"></text></g><g><title>asm_exc_page_fault (80 samples, 0.97%)</title><rect x="11.3079%" y="485" width="0.9706%" height="15" fill="rgb(240,135,9)" fg:x="932" fg:w="80"/><text x="11.5579%" y="495.50"></text></g><g><title>exc_page_fault (80 samples, 0.97%)</title><rect x="11.3079%" y="469" width="0.9706%" height="15" fill="rgb(248,109,14)" fg:x="932" fg:w="80"/><text x="11.5579%" y="479.50"></text></g><g><title>irqentry_exit (2 samples, 0.02%)</title><rect x="12.2543%" y="453" width="0.0243%" height="15" fill="rgb(227,146,52)" fg:x="1010" fg:w="2"/><text x="12.5043%" y="463.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.02%)</title><rect x="12.2543%" y="437" width="0.0243%" height="15" fill="rgb(232,54,3)" fg:x="1010" fg:w="2"/><text x="12.5043%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.02%)</title><rect x="12.2543%" y="421" width="0.0243%" height="15" fill="rgb(229,201,43)" fg:x="1010" fg:w="2"/><text x="12.5043%" y="431.50"></text></g><g><title>sync_regs (7 samples, 0.08%)</title><rect x="12.2786%" y="485" width="0.0849%" height="15" fill="rgb(252,161,33)" fg:x="1012" fg:w="7"/><text x="12.5286%" y="495.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.01%)</title><rect x="12.3756%" y="469" width="0.0121%" height="15" fill="rgb(226,146,40)" fg:x="1020" fg:w="1"/><text x="12.6256%" y="479.50"></text></g><g><title>charge_memcg (1 samples, 0.01%)</title><rect x="12.3999%" y="341" width="0.0121%" height="15" fill="rgb(219,47,25)" fg:x="1022" fg:w="1"/><text x="12.6499%" y="351.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="12.3999%" y="357" width="0.0243%" height="15" fill="rgb(250,135,13)" fg:x="1022" fg:w="2"/><text x="12.6499%" y="367.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="12.4120%" y="341" width="0.0121%" height="15" fill="rgb(219,229,18)" fg:x="1023" fg:w="1"/><text x="12.6620%" y="351.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.05%)</title><rect x="12.3878%" y="469" width="0.0485%" height="15" fill="rgb(217,152,27)" fg:x="1021" fg:w="4"/><text x="12.6378%" y="479.50"></text></g><g><title>exc_page_fault (4 samples, 0.05%)</title><rect x="12.3878%" y="453" width="0.0485%" height="15" fill="rgb(225,71,47)" fg:x="1021" fg:w="4"/><text x="12.6378%" y="463.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.05%)</title><rect x="12.3878%" y="437" width="0.0485%" height="15" fill="rgb(220,139,14)" fg:x="1021" fg:w="4"/><text x="12.6378%" y="447.50"></text></g><g><title>handle_mm_fault (4 samples, 0.05%)</title><rect x="12.3878%" y="421" width="0.0485%" height="15" fill="rgb(247,54,32)" fg:x="1021" fg:w="4"/><text x="12.6378%" y="431.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.05%)</title><rect x="12.3878%" y="405" width="0.0485%" height="15" fill="rgb(252,131,39)" fg:x="1021" fg:w="4"/><text x="12.6378%" y="415.50"></text></g><g><title>handle_pte_fault (3 samples, 0.04%)</title><rect x="12.3999%" y="389" width="0.0364%" height="15" fill="rgb(210,108,39)" fg:x="1022" fg:w="3"/><text x="12.6499%" y="399.50"></text></g><g><title>do_anonymous_page (3 samples, 0.04%)</title><rect x="12.3999%" y="373" width="0.0364%" height="15" fill="rgb(205,23,29)" fg:x="1022" fg:w="3"/><text x="12.6499%" y="383.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.01%)</title><rect x="12.4242%" y="357" width="0.0121%" height="15" fill="rgb(246,139,46)" fg:x="1024" fg:w="1"/><text x="12.6742%" y="367.50"></text></g><g><title>folio_add_lru (1 samples, 0.01%)</title><rect x="12.4242%" y="341" width="0.0121%" height="15" fill="rgb(250,81,26)" fg:x="1024" fg:w="1"/><text x="12.6742%" y="351.50"></text></g><g><title>__GI___libc_malloc (103 samples, 1.25%)</title><rect x="11.1987%" y="517" width="1.2497%" height="15" fill="rgb(214,104,7)" fg:x="923" fg:w="103"/><text x="11.4487%" y="527.50"></text></g><g><title>_int_malloc (101 samples, 1.23%)</title><rect x="11.2230%" y="501" width="1.2254%" height="15" fill="rgb(233,189,8)" fg:x="925" fg:w="101"/><text x="11.4730%" y="511.50"></text></g><g><title>sysmalloc (7 samples, 0.08%)</title><rect x="12.3635%" y="485" width="0.0849%" height="15" fill="rgb(228,141,17)" fg:x="1019" fg:w="7"/><text x="12.6135%" y="495.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="12.4363%" y="469" width="0.0121%" height="15" fill="rgb(247,157,1)" fg:x="1025" fg:w="1"/><text x="12.6863%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (104 samples, 1.26%)</title><rect x="11.1987%" y="709" width="1.2618%" height="15" fill="rgb(249,225,5)" fg:x="923" fg:w="104"/><text x="11.4487%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (104 samples, 1.26%)</title><rect x="11.1987%" y="693" width="1.2618%" height="15" fill="rgb(242,55,13)" fg:x="923" fg:w="104"/><text x="11.4487%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (104 samples, 1.26%)</title><rect x="11.1987%" y="677" width="1.2618%" height="15" fill="rgb(230,49,50)" fg:x="923" fg:w="104"/><text x="11.4487%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (104 samples, 1.26%)</title><rect x="11.1987%" y="661" width="1.2618%" height="15" fill="rgb(241,111,38)" fg:x="923" fg:w="104"/><text x="11.4487%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (104 samples, 1.26%)</title><rect x="11.1987%" y="645" width="1.2618%" height="15" fill="rgb(252,155,4)" fg:x="923" fg:w="104"/><text x="11.4487%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (104 samples, 1.26%)</title><rect x="11.1987%" y="629" width="1.2618%" height="15" fill="rgb(212,69,32)" fg:x="923" fg:w="104"/><text x="11.4487%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (104 samples, 1.26%)</title><rect x="11.1987%" y="613" width="1.2618%" height="15" fill="rgb(243,107,47)" fg:x="923" fg:w="104"/><text x="11.4487%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (104 samples, 1.26%)</title><rect x="11.1987%" y="597" width="1.2618%" height="15" fill="rgb(247,130,12)" fg:x="923" fg:w="104"/><text x="11.4487%" y="607.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (104 samples, 1.26%)</title><rect x="11.1987%" y="581" width="1.2618%" height="15" fill="rgb(233,74,16)" fg:x="923" fg:w="104"/><text x="11.4487%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 1.26%)</title><rect x="11.1987%" y="565" width="1.2618%" height="15" fill="rgb(208,58,18)" fg:x="923" fg:w="104"/><text x="11.4487%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 1.26%)</title><rect x="11.1987%" y="549" width="1.2618%" height="15" fill="rgb(242,225,1)" fg:x="923" fg:w="104"/><text x="11.4487%" y="559.50"></text></g><g><title>alloc::alloc::alloc (104 samples, 1.26%)</title><rect x="11.1987%" y="533" width="1.2618%" height="15" fill="rgb(249,39,40)" fg:x="923" fg:w="104"/><text x="11.4487%" y="543.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="12.4484%" y="517" width="0.0121%" height="15" fill="rgb(207,72,44)" fg:x="1026" fg:w="1"/><text x="12.6984%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="12.4727%" y="629" width="0.0121%" height="15" fill="rgb(215,193,12)" fg:x="1028" fg:w="1"/><text x="12.7227%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="12.4727%" y="613" width="0.0121%" height="15" fill="rgb(248,41,39)" fg:x="1028" fg:w="1"/><text x="12.7227%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="12.4727%" y="677" width="0.0364%" height="15" fill="rgb(253,85,4)" fg:x="1028" fg:w="3"/><text x="12.7227%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="12.4727%" y="661" width="0.0364%" height="15" fill="rgb(243,70,31)" fg:x="1028" fg:w="3"/><text x="12.7227%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="12.4727%" y="645" width="0.0364%" height="15" fill="rgb(253,195,26)" fg:x="1028" fg:w="3"/><text x="12.7227%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="12.4848%" y="629" width="0.0243%" height="15" fill="rgb(243,42,11)" fg:x="1029" fg:w="2"/><text x="12.7348%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="12.4848%" y="613" width="0.0243%" height="15" fill="rgb(239,66,17)" fg:x="1029" fg:w="2"/><text x="12.7348%" y="623.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="12.5091%" y="597" width="0.0121%" height="15" fill="rgb(217,132,21)" fg:x="1031" fg:w="1"/><text x="12.7591%" y="607.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="12.5091%" y="581" width="0.0121%" height="15" fill="rgb(252,202,21)" fg:x="1031" fg:w="1"/><text x="12.7591%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="12.5091%" y="565" width="0.0121%" height="15" fill="rgb(233,98,36)" fg:x="1031" fg:w="1"/><text x="12.7591%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="12.5091%" y="549" width="0.0121%" height="15" fill="rgb(216,153,54)" fg:x="1031" fg:w="1"/><text x="12.7591%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="12.5091%" y="533" width="0.0121%" height="15" fill="rgb(250,99,7)" fg:x="1031" fg:w="1"/><text x="12.7591%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="12.5091%" y="517" width="0.0121%" height="15" fill="rgb(207,56,50)" fg:x="1031" fg:w="1"/><text x="12.7591%" y="527.50"></text></g><g><title>block_stm_revm::main (118 samples, 1.43%)</title><rect x="11.1259%" y="1029" width="1.4317%" height="15" fill="rgb(244,61,34)" fg:x="917" fg:w="118"/><text x="11.3759%" y="1039.50"></text></g><g><title>block_stm_revm::execute_sequential (118 samples, 1.43%)</title><rect x="11.1259%" y="1013" width="1.4317%" height="15" fill="rgb(241,50,38)" fg:x="917" fg:w="118"/><text x="11.3759%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (118 samples, 1.43%)</title><rect x="11.1259%" y="997" width="1.4317%" height="15" fill="rgb(212,166,30)" fg:x="917" fg:w="118"/><text x="11.3759%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (118 samples, 1.43%)</title><rect x="11.1259%" y="981" width="1.4317%" height="15" fill="rgb(249,127,32)" fg:x="917" fg:w="118"/><text x="11.3759%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (118 samples, 1.43%)</title><rect x="11.1259%" y="965" width="1.4317%" height="15" fill="rgb(209,103,0)" fg:x="917" fg:w="118"/><text x="11.3759%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (118 samples, 1.43%)</title><rect x="11.1259%" y="949" width="1.4317%" height="15" fill="rgb(238,209,51)" fg:x="917" fg:w="118"/><text x="11.3759%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (118 samples, 1.43%)</title><rect x="11.1259%" y="933" width="1.4317%" height="15" fill="rgb(237,56,23)" fg:x="917" fg:w="118"/><text x="11.3759%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (118 samples, 1.43%)</title><rect x="11.1259%" y="917" width="1.4317%" height="15" fill="rgb(215,153,46)" fg:x="917" fg:w="118"/><text x="11.3759%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (118 samples, 1.43%)</title><rect x="11.1259%" y="901" width="1.4317%" height="15" fill="rgb(224,49,31)" fg:x="917" fg:w="118"/><text x="11.3759%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (118 samples, 1.43%)</title><rect x="11.1259%" y="885" width="1.4317%" height="15" fill="rgb(250,18,42)" fg:x="917" fg:w="118"/><text x="11.3759%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (118 samples, 1.43%)</title><rect x="11.1259%" y="869" width="1.4317%" height="15" fill="rgb(215,176,39)" fg:x="917" fg:w="118"/><text x="11.3759%" y="879.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (118 samples, 1.43%)</title><rect x="11.1259%" y="853" width="1.4317%" height="15" fill="rgb(223,77,29)" fg:x="917" fg:w="118"/><text x="11.3759%" y="863.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (118 samples, 1.43%)</title><rect x="11.1259%" y="837" width="1.4317%" height="15" fill="rgb(234,94,52)" fg:x="917" fg:w="118"/><text x="11.3759%" y="847.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (118 samples, 1.43%)</title><rect x="11.1259%" y="821" width="1.4317%" height="15" fill="rgb(220,154,50)" fg:x="917" fg:w="118"/><text x="11.3759%" y="831.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (118 samples, 1.43%)</title><rect x="11.1259%" y="805" width="1.4317%" height="15" fill="rgb(212,11,10)" fg:x="917" fg:w="118"/><text x="11.3759%" y="815.50"></text></g><g><title>core::ops::function::Fn::call (118 samples, 1.43%)</title><rect x="11.1259%" y="789" width="1.4317%" height="15" fill="rgb(205,166,19)" fg:x="917" fg:w="118"/><text x="11.3759%" y="799.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (118 samples, 1.43%)</title><rect x="11.1259%" y="773" width="1.4317%" height="15" fill="rgb(244,198,16)" fg:x="917" fg:w="118"/><text x="11.3759%" y="783.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (118 samples, 1.43%)</title><rect x="11.1259%" y="757" width="1.4317%" height="15" fill="rgb(219,69,12)" fg:x="917" fg:w="118"/><text x="11.3759%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (112 samples, 1.36%)</title><rect x="11.1987%" y="741" width="1.3589%" height="15" fill="rgb(245,30,7)" fg:x="923" fg:w="112"/><text x="11.4487%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (112 samples, 1.36%)</title><rect x="11.1987%" y="725" width="1.3589%" height="15" fill="rgb(218,221,48)" fg:x="923" fg:w="112"/><text x="11.4487%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.10%)</title><rect x="12.4606%" y="709" width="0.0971%" height="15" fill="rgb(216,66,15)" fg:x="1027" fg:w="8"/><text x="12.7106%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.10%)</title><rect x="12.4606%" y="693" width="0.0971%" height="15" fill="rgb(226,122,50)" fg:x="1027" fg:w="8"/><text x="12.7106%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="12.5091%" y="677" width="0.0485%" height="15" fill="rgb(239,156,16)" fg:x="1031" fg:w="4"/><text x="12.7591%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="12.5091%" y="661" width="0.0485%" height="15" fill="rgb(224,27,38)" fg:x="1031" fg:w="4"/><text x="12.7591%" y="671.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="12.5091%" y="645" width="0.0485%" height="15" fill="rgb(224,39,27)" fg:x="1031" fg:w="4"/><text x="12.7591%" y="655.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="12.5091%" y="629" width="0.0485%" height="15" fill="rgb(215,92,29)" fg:x="1031" fg:w="4"/><text x="12.7591%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="12.5091%" y="613" width="0.0485%" height="15" fill="rgb(207,159,16)" fg:x="1031" fg:w="4"/><text x="12.7591%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="12.5212%" y="597" width="0.0364%" height="15" fill="rgb(238,163,47)" fg:x="1032" fg:w="3"/><text x="12.7712%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="12.5212%" y="581" width="0.0364%" height="15" fill="rgb(219,91,49)" fg:x="1032" fg:w="3"/><text x="12.7712%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="12.5212%" y="565" width="0.0364%" height="15" fill="rgb(227,167,31)" fg:x="1032" fg:w="3"/><text x="12.7712%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="12.5212%" y="549" width="0.0364%" height="15" fill="rgb(234,80,54)" fg:x="1032" fg:w="3"/><text x="12.7712%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="12.5334%" y="533" width="0.0243%" height="15" fill="rgb(212,114,2)" fg:x="1033" fg:w="2"/><text x="12.7834%" y="543.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (1 samples, 0.01%)</title><rect x="12.5576%" y="1029" width="0.0121%" height="15" fill="rgb(234,50,24)" fg:x="1035" fg:w="1"/><text x="12.8076%" y="1039.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::record (1 samples, 0.01%)</title><rect x="12.5698%" y="1029" width="0.0121%" height="15" fill="rgb(221,68,8)" fg:x="1036" fg:w="1"/><text x="12.8198%" y="1039.50"></text></g><g><title>dashmap::DashMap&lt;K,V&gt;::with_shard_amount (1 samples, 0.01%)</title><rect x="12.5698%" y="1013" width="0.0121%" height="15" fill="rgb(254,180,31)" fg:x="1036" fg:w="1"/><text x="12.8198%" y="1023.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount (1 samples, 0.01%)</title><rect x="12.5698%" y="997" width="0.0121%" height="15" fill="rgb(247,130,50)" fg:x="1036" fg:w="1"/><text x="12.8198%" y="1007.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.05%)</title><rect x="12.5940%" y="949" width="0.0485%" height="15" fill="rgb(211,109,4)" fg:x="1038" fg:w="4"/><text x="12.8440%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="12.6426%" y="933" width="0.0364%" height="15" fill="rgb(238,50,21)" fg:x="1042" fg:w="3"/><text x="12.8926%" y="943.50"></text></g><g><title>osq_lock (19 samples, 0.23%)</title><rect x="13.0793%" y="629" width="0.2305%" height="15" fill="rgb(225,57,45)" fg:x="1078" fg:w="19"/><text x="13.3293%" y="639.50"></text></g><g><title>osq_unlock (1 samples, 0.01%)</title><rect x="13.3099%" y="629" width="0.0121%" height="15" fill="rgb(209,196,50)" fg:x="1097" fg:w="1"/><text x="13.5599%" y="639.50"></text></g><g><title>down_write_killable (25 samples, 0.30%)</title><rect x="13.0793%" y="677" width="0.3033%" height="15" fill="rgb(242,140,13)" fg:x="1078" fg:w="25"/><text x="13.3293%" y="687.50"></text></g><g><title>rwsem_down_write_slowpath (25 samples, 0.30%)</title><rect x="13.0793%" y="661" width="0.3033%" height="15" fill="rgb(217,111,7)" fg:x="1078" fg:w="25"/><text x="13.3293%" y="671.50"></text></g><g><title>rwsem_optimistic_spin (25 samples, 0.30%)</title><rect x="13.0793%" y="645" width="0.3033%" height="15" fill="rgb(253,193,51)" fg:x="1078" fg:w="25"/><text x="13.3293%" y="655.50"></text></g><g><title>rwsem_spin_on_owner (5 samples, 0.06%)</title><rect x="13.3220%" y="629" width="0.0607%" height="15" fill="rgb(252,70,29)" fg:x="1098" fg:w="5"/><text x="13.5720%" y="639.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="13.3705%" y="613" width="0.0121%" height="15" fill="rgb(232,127,12)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="623.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="13.3705%" y="597" width="0.0121%" height="15" fill="rgb(211,180,21)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="607.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="13.3705%" y="581" width="0.0121%" height="15" fill="rgb(229,72,13)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="591.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="13.3705%" y="565" width="0.0121%" height="15" fill="rgb(240,211,49)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="575.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="13.3705%" y="549" width="0.0121%" height="15" fill="rgb(219,149,40)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="559.50"></text></g><g><title>hrtimer_wakeup (1 samples, 0.01%)</title><rect x="13.3705%" y="533" width="0.0121%" height="15" fill="rgb(210,127,46)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="543.50"></text></g><g><title>wake_up_process (1 samples, 0.01%)</title><rect x="13.3705%" y="517" width="0.0121%" height="15" fill="rgb(220,106,7)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="527.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="13.3705%" y="501" width="0.0121%" height="15" fill="rgb(249,31,22)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="511.50"></text></g><g><title>ttwu_do_activate (1 samples, 0.01%)</title><rect x="13.3705%" y="485" width="0.0121%" height="15" fill="rgb(253,1,49)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="495.50"></text></g><g><title>enqueue_task (1 samples, 0.01%)</title><rect x="13.3705%" y="469" width="0.0121%" height="15" fill="rgb(227,144,33)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="479.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.01%)</title><rect x="13.3705%" y="453" width="0.0121%" height="15" fill="rgb(249,163,44)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="463.50"></text></g><g><title>update_load_avg (1 samples, 0.01%)</title><rect x="13.3705%" y="437" width="0.0121%" height="15" fill="rgb(234,15,39)" fg:x="1102" fg:w="1"/><text x="13.6205%" y="447.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="13.3827%" y="661" width="0.0121%" height="15" fill="rgb(207,66,16)" fg:x="1103" fg:w="1"/><text x="13.6327%" y="671.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.01%)</title><rect x="13.3827%" y="645" width="0.0121%" height="15" fill="rgb(233,112,24)" fg:x="1103" fg:w="1"/><text x="13.6327%" y="655.50"></text></g><g><title>perf_iterate_sb.constprop.0 (1 samples, 0.01%)</title><rect x="13.3827%" y="629" width="0.0121%" height="15" fill="rgb(230,90,22)" fg:x="1103" fg:w="1"/><text x="13.6327%" y="639.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="13.3827%" y="613" width="0.0121%" height="15" fill="rgb(229,61,13)" fg:x="1103" fg:w="1"/><text x="13.6327%" y="623.50"></text></g><g><title>kmem_cache_free (1 samples, 0.01%)</title><rect x="13.3948%" y="629" width="0.0121%" height="15" fill="rgb(225,57,24)" fg:x="1104" fg:w="1"/><text x="13.6448%" y="639.50"></text></g><g><title>_int_malloc (43 samples, 0.52%)</title><rect x="12.8974%" y="805" width="0.5217%" height="15" fill="rgb(208,169,48)" fg:x="1063" fg:w="43"/><text x="13.1474%" y="815.50"></text></g><g><title>sysmalloc (29 samples, 0.35%)</title><rect x="13.0672%" y="789" width="0.3519%" height="15" fill="rgb(244,218,51)" fg:x="1077" fg:w="29"/><text x="13.3172%" y="799.50"></text></g><g><title>grow_heap (28 samples, 0.34%)</title><rect x="13.0793%" y="773" width="0.3397%" height="15" fill="rgb(214,148,10)" fg:x="1078" fg:w="28"/><text x="13.3293%" y="783.50"></text></g><g><title>__GI_mprotect (28 samples, 0.34%)</title><rect x="13.0793%" y="757" width="0.3397%" height="15" fill="rgb(225,174,27)" fg:x="1078" fg:w="28"/><text x="13.3293%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28 samples, 0.34%)</title><rect x="13.0793%" y="741" width="0.3397%" height="15" fill="rgb(230,96,26)" fg:x="1078" fg:w="28"/><text x="13.3293%" y="751.50"></text></g><g><title>do_syscall_64 (28 samples, 0.34%)</title><rect x="13.0793%" y="725" width="0.3397%" height="15" fill="rgb(232,10,30)" fg:x="1078" fg:w="28"/><text x="13.3293%" y="735.50"></text></g><g><title>__x64_sys_mprotect (28 samples, 0.34%)</title><rect x="13.0793%" y="709" width="0.3397%" height="15" fill="rgb(222,8,50)" fg:x="1078" fg:w="28"/><text x="13.3293%" y="719.50"></text></g><g><title>do_mprotect_pkey (28 samples, 0.34%)</title><rect x="13.0793%" y="693" width="0.3397%" height="15" fill="rgb(213,81,27)" fg:x="1078" fg:w="28"/><text x="13.3293%" y="703.50"></text></g><g><title>mprotect_fixup (3 samples, 0.04%)</title><rect x="13.3827%" y="677" width="0.0364%" height="15" fill="rgb(245,50,10)" fg:x="1103" fg:w="3"/><text x="13.6327%" y="687.50"></text></g><g><title>vma_merge (2 samples, 0.02%)</title><rect x="13.3948%" y="661" width="0.0243%" height="15" fill="rgb(216,100,18)" fg:x="1104" fg:w="2"/><text x="13.6448%" y="671.50"></text></g><g><title>mas_store_prealloc (2 samples, 0.02%)</title><rect x="13.3948%" y="645" width="0.0243%" height="15" fill="rgb(236,147,54)" fg:x="1104" fg:w="2"/><text x="13.6448%" y="655.50"></text></g><g><title>mas_destroy (1 samples, 0.01%)</title><rect x="13.4069%" y="629" width="0.0121%" height="15" fill="rgb(205,143,26)" fg:x="1105" fg:w="1"/><text x="13.6569%" y="639.50"></text></g><g><title>kmem_cache_free (1 samples, 0.01%)</title><rect x="13.4069%" y="613" width="0.0121%" height="15" fill="rgb(236,26,9)" fg:x="1105" fg:w="1"/><text x="13.6569%" y="623.50"></text></g><g><title>cache_from_obj (1 samples, 0.01%)</title><rect x="13.4069%" y="597" width="0.0121%" height="15" fill="rgb(221,165,53)" fg:x="1105" fg:w="1"/><text x="13.6569%" y="607.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="13.4191%" y="805" width="0.0121%" height="15" fill="rgb(214,110,17)" fg:x="1106" fg:w="1"/><text x="13.6691%" y="815.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="13.4191%" y="789" width="0.0121%" height="15" fill="rgb(237,197,12)" fg:x="1106" fg:w="1"/><text x="13.6691%" y="799.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="13.4191%" y="773" width="0.0121%" height="15" fill="rgb(205,84,17)" fg:x="1106" fg:w="1"/><text x="13.6691%" y="783.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="13.4312%" y="661" width="0.0485%" height="15" fill="rgb(237,18,45)" fg:x="1107" fg:w="4"/><text x="13.6812%" y="671.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="13.4312%" y="645" width="0.0485%" height="15" fill="rgb(221,87,14)" fg:x="1107" fg:w="4"/><text x="13.6812%" y="655.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="13.4312%" y="805" width="0.0607%" height="15" fill="rgb(238,186,15)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="815.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="13.4312%" y="789" width="0.0607%" height="15" fill="rgb(208,115,11)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="799.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="13.4312%" y="773" width="0.0607%" height="15" fill="rgb(254,175,0)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="783.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="13.4312%" y="757" width="0.0607%" height="15" fill="rgb(227,24,42)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="767.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="13.4312%" y="741" width="0.0607%" height="15" fill="rgb(223,211,37)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="751.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="13.4312%" y="725" width="0.0607%" height="15" fill="rgb(235,49,27)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="735.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="13.4312%" y="709" width="0.0607%" height="15" fill="rgb(254,97,51)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="719.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="13.4312%" y="693" width="0.0607%" height="15" fill="rgb(249,51,40)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="703.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="13.4312%" y="677" width="0.0607%" height="15" fill="rgb(210,128,45)" fg:x="1107" fg:w="5"/><text x="13.6812%" y="687.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.01%)</title><rect x="13.4797%" y="661" width="0.0121%" height="15" fill="rgb(224,137,50)" fg:x="1111" fg:w="1"/><text x="13.7297%" y="671.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (68 samples, 0.83%)</title><rect x="12.6790%" y="933" width="0.8250%" height="15" fill="rgb(242,15,9)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (68 samples, 0.83%)</title><rect x="12.6790%" y="917" width="0.8250%" height="15" fill="rgb(233,187,41)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (68 samples, 0.83%)</title><rect x="12.6790%" y="901" width="0.8250%" height="15" fill="rgb(227,2,29)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (68 samples, 0.83%)</title><rect x="12.6790%" y="885" width="0.8250%" height="15" fill="rgb(222,70,3)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68 samples, 0.83%)</title><rect x="12.6790%" y="869" width="0.8250%" height="15" fill="rgb(213,11,42)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.83%)</title><rect x="12.6790%" y="853" width="0.8250%" height="15" fill="rgb(225,150,9)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="863.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.83%)</title><rect x="12.6790%" y="837" width="0.8250%" height="15" fill="rgb(230,162,45)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="847.50"></text></g><g><title>__GI___libc_malloc (68 samples, 0.83%)</title><rect x="12.6790%" y="821" width="0.8250%" height="15" fill="rgb(222,14,52)" fg:x="1045" fg:w="68"/><text x="12.9290%" y="831.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="13.4919%" y="805" width="0.0121%" height="15" fill="rgb(254,198,14)" fg:x="1112" fg:w="1"/><text x="13.7419%" y="815.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="13.4919%" y="789" width="0.0121%" height="15" fill="rgb(220,217,30)" fg:x="1112" fg:w="1"/><text x="13.7419%" y="799.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="13.6739%" y="693" width="0.0121%" height="15" fill="rgb(215,146,41)" fg:x="1127" fg:w="1"/><text x="13.9239%" y="703.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="13.6739%" y="677" width="0.0121%" height="15" fill="rgb(217,27,36)" fg:x="1127" fg:w="1"/><text x="13.9239%" y="687.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="13.6739%" y="661" width="0.0121%" height="15" fill="rgb(219,218,39)" fg:x="1127" fg:w="1"/><text x="13.9239%" y="671.50"></text></g><g><title>_int_malloc (12 samples, 0.15%)</title><rect x="13.5889%" y="805" width="0.1456%" height="15" fill="rgb(219,4,42)" fg:x="1120" fg:w="12"/><text x="13.8389%" y="815.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="13.6739%" y="789" width="0.0607%" height="15" fill="rgb(249,119,36)" fg:x="1127" fg:w="5"/><text x="13.9239%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="13.6739%" y="773" width="0.0607%" height="15" fill="rgb(209,23,33)" fg:x="1127" fg:w="5"/><text x="13.9239%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="13.6739%" y="757" width="0.0607%" height="15" fill="rgb(211,10,0)" fg:x="1127" fg:w="5"/><text x="13.9239%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="13.6739%" y="741" width="0.0607%" height="15" fill="rgb(208,99,37)" fg:x="1127" fg:w="5"/><text x="13.9239%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="13.6739%" y="725" width="0.0607%" height="15" fill="rgb(213,132,31)" fg:x="1127" fg:w="5"/><text x="13.9239%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="13.6739%" y="709" width="0.0607%" height="15" fill="rgb(243,129,40)" fg:x="1127" fg:w="5"/><text x="13.9239%" y="719.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="13.6860%" y="693" width="0.0485%" height="15" fill="rgb(210,66,33)" fg:x="1128" fg:w="4"/><text x="13.9360%" y="703.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="13.6860%" y="677" width="0.0485%" height="15" fill="rgb(209,189,4)" fg:x="1128" fg:w="4"/><text x="13.9360%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="13.6860%" y="661" width="0.0485%" height="15" fill="rgb(214,107,37)" fg:x="1128" fg:w="4"/><text x="13.9360%" y="671.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="13.6860%" y="645" width="0.0485%" height="15" fill="rgb(245,88,54)" fg:x="1128" fg:w="4"/><text x="13.9360%" y="655.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="13.6860%" y="629" width="0.0485%" height="15" fill="rgb(205,146,20)" fg:x="1128" fg:w="4"/><text x="13.9360%" y="639.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.23%)</title><rect x="13.5161%" y="821" width="0.2305%" height="15" fill="rgb(220,161,25)" fg:x="1114" fg:w="19"/><text x="13.7661%" y="831.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="13.7345%" y="805" width="0.0121%" height="15" fill="rgb(215,152,15)" fg:x="1132" fg:w="1"/><text x="13.9845%" y="815.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (22 samples, 0.27%)</title><rect x="13.5040%" y="933" width="0.2669%" height="15" fill="rgb(233,192,44)" fg:x="1113" fg:w="22"/><text x="13.7540%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (22 samples, 0.27%)</title><rect x="13.5040%" y="917" width="0.2669%" height="15" fill="rgb(240,170,46)" fg:x="1113" fg:w="22"/><text x="13.7540%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.27%)</title><rect x="13.5040%" y="901" width="0.2669%" height="15" fill="rgb(207,104,33)" fg:x="1113" fg:w="22"/><text x="13.7540%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (21 samples, 0.25%)</title><rect x="13.5161%" y="885" width="0.2548%" height="15" fill="rgb(219,21,39)" fg:x="1114" fg:w="21"/><text x="13.7661%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.25%)</title><rect x="13.5161%" y="869" width="0.2548%" height="15" fill="rgb(214,133,29)" fg:x="1114" fg:w="21"/><text x="13.7661%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.25%)</title><rect x="13.5161%" y="853" width="0.2548%" height="15" fill="rgb(226,93,6)" fg:x="1114" fg:w="21"/><text x="13.7661%" y="863.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.25%)</title><rect x="13.5161%" y="837" width="0.2548%" height="15" fill="rgb(252,222,34)" fg:x="1114" fg:w="21"/><text x="13.7661%" y="847.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="13.7467%" y="821" width="0.0243%" height="15" fill="rgb(252,92,48)" fg:x="1133" fg:w="2"/><text x="13.9967%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="13.7467%" y="805" width="0.0243%" height="15" fill="rgb(245,223,24)" fg:x="1133" fg:w="2"/><text x="13.9967%" y="815.50"></text></g><g><title>_int_malloc (18 samples, 0.22%)</title><rect x="13.8437%" y="805" width="0.2184%" height="15" fill="rgb(205,176,3)" fg:x="1141" fg:w="18"/><text x="14.0937%" y="815.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="14.0500%" y="789" width="0.0121%" height="15" fill="rgb(235,151,15)" fg:x="1158" fg:w="1"/><text x="14.3000%" y="799.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="14.0621%" y="805" width="0.0121%" height="15" fill="rgb(237,209,11)" fg:x="1159" fg:w="1"/><text x="14.3121%" y="815.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="14.0621%" y="789" width="0.0121%" height="15" fill="rgb(243,227,24)" fg:x="1159" fg:w="1"/><text x="14.3121%" y="799.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="14.0621%" y="773" width="0.0121%" height="15" fill="rgb(239,193,16)" fg:x="1159" fg:w="1"/><text x="14.3121%" y="783.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.30%)</title><rect x="13.7831%" y="821" width="0.3033%" height="15" fill="rgb(231,27,9)" fg:x="1136" fg:w="25"/><text x="14.0331%" y="831.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="14.0743%" y="805" width="0.0121%" height="15" fill="rgb(219,169,10)" fg:x="1160" fg:w="1"/><text x="14.3243%" y="815.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="14.0743%" y="789" width="0.0121%" height="15" fill="rgb(244,229,43)" fg:x="1160" fg:w="1"/><text x="14.3243%" y="799.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (27 samples, 0.33%)</title><rect x="13.7709%" y="933" width="0.3276%" height="15" fill="rgb(254,38,20)" fg:x="1135" fg:w="27"/><text x="14.0209%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (27 samples, 0.33%)</title><rect x="13.7709%" y="917" width="0.3276%" height="15" fill="rgb(250,47,30)" fg:x="1135" fg:w="27"/><text x="14.0209%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (27 samples, 0.33%)</title><rect x="13.7709%" y="901" width="0.3276%" height="15" fill="rgb(224,124,36)" fg:x="1135" fg:w="27"/><text x="14.0209%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (26 samples, 0.32%)</title><rect x="13.7831%" y="885" width="0.3155%" height="15" fill="rgb(246,68,51)" fg:x="1136" fg:w="26"/><text x="14.0331%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.32%)</title><rect x="13.7831%" y="869" width="0.3155%" height="15" fill="rgb(253,43,49)" fg:x="1136" fg:w="26"/><text x="14.0331%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.32%)</title><rect x="13.7831%" y="853" width="0.3155%" height="15" fill="rgb(219,54,36)" fg:x="1136" fg:w="26"/><text x="14.0331%" y="863.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.32%)</title><rect x="13.7831%" y="837" width="0.3155%" height="15" fill="rgb(227,133,34)" fg:x="1136" fg:w="26"/><text x="14.0331%" y="847.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="14.0864%" y="821" width="0.0121%" height="15" fill="rgb(247,227,15)" fg:x="1161" fg:w="1"/><text x="14.3364%" y="831.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="14.1713%" y="805" width="0.0121%" height="15" fill="rgb(229,96,14)" fg:x="1168" fg:w="1"/><text x="14.4213%" y="815.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="14.1713%" y="789" width="0.0121%" height="15" fill="rgb(220,79,17)" fg:x="1168" fg:w="1"/><text x="14.4213%" y="799.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.10%)</title><rect x="14.0985%" y="821" width="0.0971%" height="15" fill="rgb(205,131,53)" fg:x="1162" fg:w="8"/><text x="14.3485%" y="831.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="14.1835%" y="805" width="0.0121%" height="15" fill="rgb(209,50,29)" fg:x="1169" fg:w="1"/><text x="14.4335%" y="815.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="14.1835%" y="789" width="0.0121%" height="15" fill="rgb(245,86,46)" fg:x="1169" fg:w="1"/><text x="14.4335%" y="799.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (134 samples, 1.63%)</title><rect x="12.5819%" y="1013" width="1.6258%" height="15" fill="rgb(235,66,46)" fg:x="1037" fg:w="134"/><text x="12.8319%" y="1023.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (134 samples, 1.63%)</title><rect x="12.5819%" y="997" width="1.6258%" height="15" fill="rgb(232,148,31)" fg:x="1037" fg:w="134"/><text x="12.8319%" y="1007.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (134 samples, 1.63%)</title><rect x="12.5819%" y="981" width="1.6258%" height="15" fill="rgb(217,149,8)" fg:x="1037" fg:w="134"/><text x="12.8319%" y="991.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (134 samples, 1.63%)</title><rect x="12.5819%" y="965" width="1.6258%" height="15" fill="rgb(209,183,11)" fg:x="1037" fg:w="134"/><text x="12.8319%" y="975.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (129 samples, 1.57%)</title><rect x="12.6426%" y="949" width="1.5652%" height="15" fill="rgb(208,55,20)" fg:x="1042" fg:w="129"/><text x="12.8926%" y="959.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (9 samples, 0.11%)</title><rect x="14.0985%" y="933" width="0.1092%" height="15" fill="rgb(218,39,14)" fg:x="1162" fg:w="9"/><text x="14.3485%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="14.0985%" y="917" width="0.1092%" height="15" fill="rgb(216,169,33)" fg:x="1162" fg:w="9"/><text x="14.3485%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.11%)</title><rect x="14.0985%" y="901" width="0.1092%" height="15" fill="rgb(233,80,24)" fg:x="1162" fg:w="9"/><text x="14.3485%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.11%)</title><rect x="14.0985%" y="885" width="0.1092%" height="15" fill="rgb(213,179,31)" fg:x="1162" fg:w="9"/><text x="14.3485%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.11%)</title><rect x="14.0985%" y="869" width="0.1092%" height="15" fill="rgb(209,19,5)" fg:x="1162" fg:w="9"/><text x="14.3485%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.11%)</title><rect x="14.0985%" y="853" width="0.1092%" height="15" fill="rgb(219,18,35)" fg:x="1162" fg:w="9"/><text x="14.3485%" y="863.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.11%)</title><rect x="14.0985%" y="837" width="0.1092%" height="15" fill="rgb(209,169,16)" fg:x="1162" fg:w="9"/><text x="14.3485%" y="847.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="14.1956%" y="821" width="0.0121%" height="15" fill="rgb(245,90,51)" fg:x="1170" fg:w="1"/><text x="14.4456%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="14.1956%" y="805" width="0.0121%" height="15" fill="rgb(220,99,45)" fg:x="1170" fg:w="1"/><text x="14.4456%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="14.2198%" y="933" width="0.0243%" height="15" fill="rgb(249,89,25)" fg:x="1172" fg:w="2"/><text x="14.4698%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="14.2441%" y="885" width="0.0364%" height="15" fill="rgb(239,193,0)" fg:x="1174" fg:w="3"/><text x="14.4941%" y="895.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (6 samples, 0.07%)</title><rect x="14.2441%" y="917" width="0.0728%" height="15" fill="rgb(231,126,1)" fg:x="1174" fg:w="6"/><text x="14.4941%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.07%)</title><rect x="14.2441%" y="901" width="0.0728%" height="15" fill="rgb(243,166,3)" fg:x="1174" fg:w="6"/><text x="14.4941%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.04%)</title><rect x="14.2805%" y="885" width="0.0364%" height="15" fill="rgb(223,22,34)" fg:x="1177" fg:w="3"/><text x="14.5305%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.04%)</title><rect x="14.2805%" y="869" width="0.0364%" height="15" fill="rgb(251,52,51)" fg:x="1177" fg:w="3"/><text x="14.5305%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.04%)</title><rect x="14.2805%" y="853" width="0.0364%" height="15" fill="rgb(221,165,28)" fg:x="1177" fg:w="3"/><text x="14.5305%" y="863.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.04%)</title><rect x="14.2805%" y="837" width="0.0364%" height="15" fill="rgb(218,121,47)" fg:x="1177" fg:w="3"/><text x="14.5305%" y="847.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="14.2805%" y="821" width="0.0364%" height="15" fill="rgb(209,120,9)" fg:x="1177" fg:w="3"/><text x="14.5305%" y="831.50"></text></g><g><title>tcache_get (3 samples, 0.04%)</title><rect x="14.2805%" y="805" width="0.0364%" height="15" fill="rgb(236,68,12)" fg:x="1177" fg:w="3"/><text x="14.5305%" y="815.50"></text></g><g><title>tcache_get_n (3 samples, 0.04%)</title><rect x="14.2805%" y="789" width="0.0364%" height="15" fill="rgb(225,194,26)" fg:x="1177" fg:w="3"/><text x="14.5305%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="14.3169%" y="917" width="0.0243%" height="15" fill="rgb(231,84,39)" fg:x="1180" fg:w="2"/><text x="14.5669%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="14.3533%" y="901" width="0.0121%" height="15" fill="rgb(210,11,45)" fg:x="1183" fg:w="1"/><text x="14.6033%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="14.3533%" y="885" width="0.0121%" height="15" fill="rgb(224,54,52)" fg:x="1183" fg:w="1"/><text x="14.6033%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="14.3533%" y="869" width="0.0121%" height="15" fill="rgb(238,102,14)" fg:x="1183" fg:w="1"/><text x="14.6033%" y="879.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="14.3533%" y="853" width="0.0121%" height="15" fill="rgb(243,160,52)" fg:x="1183" fg:w="1"/><text x="14.6033%" y="863.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="14.3533%" y="837" width="0.0121%" height="15" fill="rgb(216,114,19)" fg:x="1183" fg:w="1"/><text x="14.6033%" y="847.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (14 samples, 0.17%)</title><rect x="14.2077%" y="981" width="0.1699%" height="15" fill="rgb(244,166,37)" fg:x="1171" fg:w="14"/><text x="14.4577%" y="991.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (14 samples, 0.17%)</title><rect x="14.2077%" y="965" width="0.1699%" height="15" fill="rgb(246,29,44)" fg:x="1171" fg:w="14"/><text x="14.4577%" y="975.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (14 samples, 0.17%)</title><rect x="14.2077%" y="949" width="0.1699%" height="15" fill="rgb(215,56,53)" fg:x="1171" fg:w="14"/><text x="14.4577%" y="959.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (11 samples, 0.13%)</title><rect x="14.2441%" y="933" width="0.1335%" height="15" fill="rgb(217,60,2)" fg:x="1174" fg:w="11"/><text x="14.4941%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::new (3 samples, 0.04%)</title><rect x="14.3412%" y="917" width="0.0364%" height="15" fill="rgb(207,26,24)" fg:x="1182" fg:w="3"/><text x="14.5912%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (1 samples, 0.01%)</title><rect x="14.3654%" y="901" width="0.0121%" height="15" fill="rgb(252,210,15)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="14.3654%" y="885" width="0.0121%" height="15" fill="rgb(253,209,26)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="895.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="14.3654%" y="869" width="0.0121%" height="15" fill="rgb(238,170,14)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="879.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="14.3654%" y="853" width="0.0121%" height="15" fill="rgb(216,178,15)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="14.3654%" y="837" width="0.0121%" height="15" fill="rgb(250,197,2)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="14.3654%" y="821" width="0.0121%" height="15" fill="rgb(212,70,42)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="831.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="14.3654%" y="805" width="0.0121%" height="15" fill="rgb(227,213,9)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="815.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="14.3654%" y="789" width="0.0121%" height="15" fill="rgb(245,99,25)" fg:x="1184" fg:w="1"/><text x="14.6154%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.10%)</title><rect x="14.3897%" y="933" width="0.0971%" height="15" fill="rgb(250,82,29)" fg:x="1186" fg:w="8"/><text x="14.6397%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.06%)</title><rect x="14.4868%" y="917" width="0.0607%" height="15" fill="rgb(241,226,54)" fg:x="1194" fg:w="5"/><text x="14.7368%" y="927.50"></text></g><g><title>_int_malloc (15 samples, 0.18%)</title><rect x="14.6202%" y="789" width="0.1820%" height="15" fill="rgb(221,99,41)" fg:x="1205" fg:w="15"/><text x="14.8702%" y="799.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="14.7780%" y="773" width="0.0243%" height="15" fill="rgb(213,90,21)" fg:x="1218" fg:w="2"/><text x="15.0280%" y="783.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.35%)</title><rect x="14.5474%" y="805" width="0.3519%" height="15" fill="rgb(205,208,24)" fg:x="1199" fg:w="29"/><text x="14.7974%" y="815.50"></text></g><g><title>tcache_get (8 samples, 0.10%)</title><rect x="14.8022%" y="789" width="0.0971%" height="15" fill="rgb(246,31,12)" fg:x="1220" fg:w="8"/><text x="15.0522%" y="799.50"></text></g><g><title>tcache_get_n (8 samples, 0.10%)</title><rect x="14.8022%" y="773" width="0.0971%" height="15" fill="rgb(213,154,6)" fg:x="1220" fg:w="8"/><text x="15.0522%" y="783.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="14.8386%" y="757" width="0.0607%" height="15" fill="rgb(222,163,29)" fg:x="1223" fg:w="5"/><text x="15.0886%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="14.8386%" y="741" width="0.0607%" height="15" fill="rgb(227,201,8)" fg:x="1223" fg:w="5"/><text x="15.0886%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="14.8386%" y="725" width="0.0607%" height="15" fill="rgb(233,9,32)" fg:x="1223" fg:w="5"/><text x="15.0886%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="14.8386%" y="709" width="0.0607%" height="15" fill="rgb(217,54,24)" fg:x="1223" fg:w="5"/><text x="15.0886%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="14.8386%" y="693" width="0.0607%" height="15" fill="rgb(235,192,0)" fg:x="1223" fg:w="5"/><text x="15.0886%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="14.8386%" y="677" width="0.0607%" height="15" fill="rgb(235,45,9)" fg:x="1223" fg:w="5"/><text x="15.0886%" y="687.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="14.8508%" y="661" width="0.0485%" height="15" fill="rgb(246,42,40)" fg:x="1224" fg:w="4"/><text x="15.1008%" y="671.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="14.8508%" y="645" width="0.0485%" height="15" fill="rgb(248,111,24)" fg:x="1224" fg:w="4"/><text x="15.1008%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="14.8508%" y="629" width="0.0485%" height="15" fill="rgb(249,65,22)" fg:x="1224" fg:w="4"/><text x="15.1008%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="14.8508%" y="613" width="0.0485%" height="15" fill="rgb(238,111,51)" fg:x="1224" fg:w="4"/><text x="15.1008%" y="623.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="14.8508%" y="597" width="0.0485%" height="15" fill="rgb(250,118,22)" fg:x="1224" fg:w="4"/><text x="15.1008%" y="607.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="14.8993%" y="805" width="0.0121%" height="15" fill="rgb(234,84,26)" fg:x="1228" fg:w="1"/><text x="15.1493%" y="815.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (31 samples, 0.38%)</title><rect x="14.5474%" y="917" width="0.3761%" height="15" fill="rgb(243,172,12)" fg:x="1199" fg:w="31"/><text x="14.7974%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (31 samples, 0.38%)</title><rect x="14.5474%" y="901" width="0.3761%" height="15" fill="rgb(236,150,49)" fg:x="1199" fg:w="31"/><text x="14.7974%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (31 samples, 0.38%)</title><rect x="14.5474%" y="885" width="0.3761%" height="15" fill="rgb(225,197,26)" fg:x="1199" fg:w="31"/><text x="14.7974%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.38%)</title><rect x="14.5474%" y="869" width="0.3761%" height="15" fill="rgb(214,17,42)" fg:x="1199" fg:w="31"/><text x="14.7974%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.38%)</title><rect x="14.5474%" y="853" width="0.3761%" height="15" fill="rgb(224,165,40)" fg:x="1199" fg:w="31"/><text x="14.7974%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.38%)</title><rect x="14.5474%" y="837" width="0.3761%" height="15" fill="rgb(246,100,4)" fg:x="1199" fg:w="31"/><text x="14.7974%" y="847.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.38%)</title><rect x="14.5474%" y="821" width="0.3761%" height="15" fill="rgb(222,103,0)" fg:x="1199" fg:w="31"/><text x="14.7974%" y="831.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="14.9114%" y="805" width="0.0121%" height="15" fill="rgb(227,189,26)" fg:x="1229" fg:w="1"/><text x="15.1614%" y="815.50"></text></g><g><title>_int_malloc (21 samples, 0.25%)</title><rect x="15.0206%" y="789" width="0.2548%" height="15" fill="rgb(214,202,17)" fg:x="1238" fg:w="21"/><text x="15.2706%" y="799.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="15.2633%" y="773" width="0.0121%" height="15" fill="rgb(229,111,3)" fg:x="1258" fg:w="1"/><text x="15.5133%" y="783.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (30 samples, 0.36%)</title><rect x="14.9236%" y="917" width="0.3640%" height="15" fill="rgb(229,172,15)" fg:x="1230" fg:w="30"/><text x="15.1736%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (29 samples, 0.35%)</title><rect x="14.9357%" y="901" width="0.3519%" height="15" fill="rgb(230,224,35)" fg:x="1231" fg:w="29"/><text x="15.1857%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (29 samples, 0.35%)</title><rect x="14.9357%" y="885" width="0.3519%" height="15" fill="rgb(251,141,6)" fg:x="1231" fg:w="29"/><text x="15.1857%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.34%)</title><rect x="14.9478%" y="869" width="0.3397%" height="15" fill="rgb(225,208,6)" fg:x="1232" fg:w="28"/><text x="15.1978%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.34%)</title><rect x="14.9478%" y="853" width="0.3397%" height="15" fill="rgb(246,181,16)" fg:x="1232" fg:w="28"/><text x="15.1978%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.34%)</title><rect x="14.9478%" y="837" width="0.3397%" height="15" fill="rgb(227,129,36)" fg:x="1232" fg:w="28"/><text x="15.1978%" y="847.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.34%)</title><rect x="14.9478%" y="821" width="0.3397%" height="15" fill="rgb(248,117,24)" fg:x="1232" fg:w="28"/><text x="15.1978%" y="831.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.34%)</title><rect x="14.9478%" y="805" width="0.3397%" height="15" fill="rgb(214,185,35)" fg:x="1232" fg:w="28"/><text x="15.1978%" y="815.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="15.2754%" y="789" width="0.0121%" height="15" fill="rgb(236,150,34)" fg:x="1259" fg:w="1"/><text x="15.5254%" y="799.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="15.2754%" y="773" width="0.0121%" height="15" fill="rgb(243,228,27)" fg:x="1259" fg:w="1"/><text x="15.5254%" y="783.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (4 samples, 0.05%)</title><rect x="15.2876%" y="917" width="0.0485%" height="15" fill="rgb(245,77,44)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="15.2876%" y="901" width="0.0485%" height="15" fill="rgb(235,214,42)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="15.2876%" y="885" width="0.0485%" height="15" fill="rgb(221,74,3)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.05%)</title><rect x="15.2876%" y="869" width="0.0485%" height="15" fill="rgb(206,121,29)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="15.2876%" y="853" width="0.0485%" height="15" fill="rgb(249,131,53)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="15.2876%" y="837" width="0.0485%" height="15" fill="rgb(236,170,29)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="847.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="15.2876%" y="821" width="0.0485%" height="15" fill="rgb(247,96,15)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="831.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="15.2876%" y="805" width="0.0485%" height="15" fill="rgb(211,210,7)" fg:x="1260" fg:w="4"/><text x="15.5376%" y="815.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="15.3118%" y="789" width="0.0243%" height="15" fill="rgb(240,88,50)" fg:x="1262" fg:w="2"/><text x="15.5618%" y="799.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="15.3118%" y="773" width="0.0243%" height="15" fill="rgb(209,229,26)" fg:x="1262" fg:w="2"/><text x="15.5618%" y="783.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="15.3725%" y="805" width="0.0121%" height="15" fill="rgb(210,68,23)" fg:x="1267" fg:w="1"/><text x="15.6225%" y="815.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="15.3846%" y="805" width="0.0121%" height="15" fill="rgb(229,180,13)" fg:x="1268" fg:w="1"/><text x="15.6346%" y="815.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="15.3846%" y="789" width="0.0121%" height="15" fill="rgb(236,53,44)" fg:x="1268" fg:w="1"/><text x="15.6346%" y="799.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (99 samples, 1.20%)</title><rect x="14.2077%" y="1013" width="1.2012%" height="15" fill="rgb(244,214,29)" fg:x="1171" fg:w="99"/><text x="14.4577%" y="1023.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (99 samples, 1.20%)</title><rect x="14.2077%" y="997" width="1.2012%" height="15" fill="rgb(220,75,29)" fg:x="1171" fg:w="99"/><text x="14.4577%" y="1007.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (85 samples, 1.03%)</title><rect x="14.3776%" y="981" width="1.0313%" height="15" fill="rgb(214,183,37)" fg:x="1185" fg:w="85"/><text x="14.6276%" y="991.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (85 samples, 1.03%)</title><rect x="14.3776%" y="965" width="1.0313%" height="15" fill="rgb(239,117,29)" fg:x="1185" fg:w="85"/><text x="14.6276%" y="975.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (85 samples, 1.03%)</title><rect x="14.3776%" y="949" width="1.0313%" height="15" fill="rgb(237,171,35)" fg:x="1185" fg:w="85"/><text x="14.6276%" y="959.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (76 samples, 0.92%)</title><rect x="14.4868%" y="933" width="0.9221%" height="15" fill="rgb(229,178,53)" fg:x="1194" fg:w="76"/><text x="14.7368%" y="943.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (6 samples, 0.07%)</title><rect x="15.3361%" y="917" width="0.0728%" height="15" fill="rgb(210,102,19)" fg:x="1264" fg:w="6"/><text x="15.5861%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5 samples, 0.06%)</title><rect x="15.3482%" y="901" width="0.0607%" height="15" fill="rgb(235,127,22)" fg:x="1265" fg:w="5"/><text x="15.5982%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.06%)</title><rect x="15.3482%" y="885" width="0.0607%" height="15" fill="rgb(244,31,31)" fg:x="1265" fg:w="5"/><text x="15.5982%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.04%)</title><rect x="15.3725%" y="869" width="0.0364%" height="15" fill="rgb(231,43,21)" fg:x="1267" fg:w="3"/><text x="15.6225%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.04%)</title><rect x="15.3725%" y="853" width="0.0364%" height="15" fill="rgb(217,131,35)" fg:x="1267" fg:w="3"/><text x="15.6225%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.04%)</title><rect x="15.3725%" y="837" width="0.0364%" height="15" fill="rgb(221,149,4)" fg:x="1267" fg:w="3"/><text x="15.6225%" y="847.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.04%)</title><rect x="15.3725%" y="821" width="0.0364%" height="15" fill="rgb(232,170,28)" fg:x="1267" fg:w="3"/><text x="15.6225%" y="831.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="15.3967%" y="805" width="0.0121%" height="15" fill="rgb(238,56,10)" fg:x="1269" fg:w="1"/><text x="15.6467%" y="815.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.05%)</title><rect x="15.4210%" y="981" width="0.0485%" height="15" fill="rgb(235,196,14)" fg:x="1271" fg:w="4"/><text x="15.6710%" y="991.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="15.4695%" y="981" width="0.0243%" height="15" fill="rgb(216,45,48)" fg:x="1275" fg:w="2"/><text x="15.7195%" y="991.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="15.4817%" y="965" width="0.0121%" height="15" fill="rgb(238,213,17)" fg:x="1276" fg:w="1"/><text x="15.7317%" y="975.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="15.4817%" y="949" width="0.0121%" height="15" fill="rgb(212,13,2)" fg:x="1276" fg:w="1"/><text x="15.7317%" y="959.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="15.4817%" y="933" width="0.0121%" height="15" fill="rgb(240,114,20)" fg:x="1276" fg:w="1"/><text x="15.7317%" y="943.50"></text></g><g><title>heap_max_size (1 samples, 0.01%)</title><rect x="15.4817%" y="917" width="0.0121%" height="15" fill="rgb(228,41,40)" fg:x="1276" fg:w="1"/><text x="15.7317%" y="927.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.04%)</title><rect x="15.5545%" y="549" width="0.0364%" height="15" fill="rgb(244,132,35)" fg:x="1282" fg:w="3"/><text x="15.8045%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.05%)</title><rect x="15.5545%" y="565" width="0.0485%" height="15" fill="rgb(253,189,4)" fg:x="1282" fg:w="4"/><text x="15.8045%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="15.5909%" y="549" width="0.0121%" height="15" fill="rgb(224,37,19)" fg:x="1285" fg:w="1"/><text x="15.8409%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="15.6151%" y="549" width="0.0121%" height="15" fill="rgb(235,223,18)" fg:x="1287" fg:w="1"/><text x="15.8651%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.15%)</title><rect x="15.5059%" y="613" width="0.1456%" height="15" fill="rgb(235,163,25)" fg:x="1278" fg:w="12"/><text x="15.7559%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.15%)</title><rect x="15.5059%" y="597" width="0.1456%" height="15" fill="rgb(217,145,28)" fg:x="1278" fg:w="12"/><text x="15.7559%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.15%)</title><rect x="15.5059%" y="581" width="0.1456%" height="15" fill="rgb(223,223,32)" fg:x="1278" fg:w="12"/><text x="15.7559%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.05%)</title><rect x="15.6030%" y="565" width="0.0485%" height="15" fill="rgb(227,189,39)" fg:x="1286" fg:w="4"/><text x="15.8530%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="15.6273%" y="549" width="0.0243%" height="15" fill="rgb(248,10,22)" fg:x="1288" fg:w="2"/><text x="15.8773%" y="559.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.04%)</title><rect x="15.6515%" y="613" width="0.0364%" height="15" fill="rgb(248,46,39)" fg:x="1290" fg:w="3"/><text x="15.9015%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.02%)</title><rect x="15.6637%" y="597" width="0.0243%" height="15" fill="rgb(248,113,48)" fg:x="1291" fg:w="2"/><text x="15.9137%" y="607.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.02%)</title><rect x="15.6637%" y="581" width="0.0243%" height="15" fill="rgb(245,16,25)" fg:x="1291" fg:w="2"/><text x="15.9137%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.02%)</title><rect x="15.6637%" y="565" width="0.0243%" height="15" fill="rgb(249,152,16)" fg:x="1291" fg:w="2"/><text x="15.9137%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="15.7365%" y="453" width="0.0121%" height="15" fill="rgb(250,16,1)" fg:x="1297" fg:w="1"/><text x="15.9865%" y="463.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (8 samples, 0.10%)</title><rect x="15.6879%" y="533" width="0.0971%" height="15" fill="rgb(249,138,3)" fg:x="1293" fg:w="8"/><text x="15.9379%" y="543.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.10%)</title><rect x="15.6879%" y="517" width="0.0971%" height="15" fill="rgb(227,71,41)" fg:x="1293" fg:w="8"/><text x="15.9379%" y="527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.10%)</title><rect x="15.6879%" y="501" width="0.0971%" height="15" fill="rgb(209,184,23)" fg:x="1293" fg:w="8"/><text x="15.9379%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.10%)</title><rect x="15.6879%" y="485" width="0.0971%" height="15" fill="rgb(223,215,31)" fg:x="1293" fg:w="8"/><text x="15.9379%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.10%)</title><rect x="15.6879%" y="469" width="0.0971%" height="15" fill="rgb(210,146,28)" fg:x="1293" fg:w="8"/><text x="15.9379%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.04%)</title><rect x="15.7486%" y="453" width="0.0364%" height="15" fill="rgb(209,183,41)" fg:x="1298" fg:w="3"/><text x="15.9986%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="15.7971%" y="469" width="0.0364%" height="15" fill="rgb(209,224,45)" fg:x="1302" fg:w="3"/><text x="16.0471%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="15.8093%" y="453" width="0.0243%" height="15" fill="rgb(224,209,51)" fg:x="1303" fg:w="2"/><text x="16.0593%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.35%)</title><rect x="15.5059%" y="645" width="0.3519%" height="15" fill="rgb(223,17,39)" fg:x="1278" fg:w="29"/><text x="15.7559%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.35%)</title><rect x="15.5059%" y="629" width="0.3519%" height="15" fill="rgb(234,204,37)" fg:x="1278" fg:w="29"/><text x="15.7559%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.17%)</title><rect x="15.6879%" y="613" width="0.1699%" height="15" fill="rgb(236,120,5)" fg:x="1293" fg:w="14"/><text x="15.9379%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (14 samples, 0.17%)</title><rect x="15.6879%" y="597" width="0.1699%" height="15" fill="rgb(248,97,27)" fg:x="1293" fg:w="14"/><text x="15.9379%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (14 samples, 0.17%)</title><rect x="15.6879%" y="581" width="0.1699%" height="15" fill="rgb(240,66,17)" fg:x="1293" fg:w="14"/><text x="15.9379%" y="591.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (14 samples, 0.17%)</title><rect x="15.6879%" y="565" width="0.1699%" height="15" fill="rgb(210,79,3)" fg:x="1293" fg:w="14"/><text x="15.9379%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (14 samples, 0.17%)</title><rect x="15.6879%" y="549" width="0.1699%" height="15" fill="rgb(214,176,27)" fg:x="1293" fg:w="14"/><text x="15.9379%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (6 samples, 0.07%)</title><rect x="15.7850%" y="533" width="0.0728%" height="15" fill="rgb(235,185,3)" fg:x="1301" fg:w="6"/><text x="16.0350%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="15.7850%" y="517" width="0.0728%" height="15" fill="rgb(227,24,12)" fg:x="1301" fg:w="6"/><text x="16.0350%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="15.7850%" y="501" width="0.0728%" height="15" fill="rgb(252,169,48)" fg:x="1301" fg:w="6"/><text x="16.0350%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="15.7850%" y="485" width="0.0728%" height="15" fill="rgb(212,65,1)" fg:x="1301" fg:w="6"/><text x="16.0350%" y="495.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="15.8335%" y="469" width="0.0243%" height="15" fill="rgb(242,39,24)" fg:x="1305" fg:w="2"/><text x="16.0835%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="15.8942%" y="613" width="0.0121%" height="15" fill="rgb(249,32,23)" fg:x="1310" fg:w="1"/><text x="16.1442%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="15.8942%" y="597" width="0.0121%" height="15" fill="rgb(251,195,23)" fg:x="1310" fg:w="1"/><text x="16.1442%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.01%)</title><rect x="15.9063%" y="613" width="0.0121%" height="15" fill="rgb(236,174,8)" fg:x="1311" fg:w="1"/><text x="16.1563%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.01%)</title><rect x="15.9063%" y="597" width="0.0121%" height="15" fill="rgb(220,197,8)" fg:x="1311" fg:w="1"/><text x="16.1563%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="15.9063%" y="581" width="0.0121%" height="15" fill="rgb(240,108,37)" fg:x="1311" fg:w="1"/><text x="16.1563%" y="591.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="15.9185%" y="613" width="0.0121%" height="15" fill="rgb(232,176,24)" fg:x="1312" fg:w="1"/><text x="16.1685%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="15.9306%" y="613" width="0.0121%" height="15" fill="rgb(243,35,29)" fg:x="1313" fg:w="1"/><text x="16.1806%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="15.9306%" y="597" width="0.0121%" height="15" fill="rgb(210,37,18)" fg:x="1313" fg:w="1"/><text x="16.1806%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="15.9306%" y="581" width="0.0121%" height="15" fill="rgb(224,184,40)" fg:x="1313" fg:w="1"/><text x="16.1806%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="15.9427%" y="613" width="0.0243%" height="15" fill="rgb(236,39,29)" fg:x="1314" fg:w="2"/><text x="16.1927%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="15.9427%" y="597" width="0.0243%" height="15" fill="rgb(232,48,39)" fg:x="1314" fg:w="2"/><text x="16.1927%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10 samples, 0.12%)</title><rect x="15.8578%" y="645" width="0.1213%" height="15" fill="rgb(236,34,42)" fg:x="1307" fg:w="10"/><text x="16.1078%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.11%)</title><rect x="15.8699%" y="629" width="0.1092%" height="15" fill="rgb(243,106,37)" fg:x="1308" fg:w="9"/><text x="16.1199%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.01%)</title><rect x="15.9670%" y="613" width="0.0121%" height="15" fill="rgb(218,96,6)" fg:x="1316" fg:w="1"/><text x="16.2170%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="15.9670%" y="597" width="0.0121%" height="15" fill="rgb(235,130,12)" fg:x="1316" fg:w="1"/><text x="16.2170%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="15.9670%" y="581" width="0.0121%" height="15" fill="rgb(231,95,0)" fg:x="1316" fg:w="1"/><text x="16.2170%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.01%)</title><rect x="15.9791%" y="629" width="0.0121%" height="15" fill="rgb(228,12,23)" fg:x="1317" fg:w="1"/><text x="16.2291%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="15.9791%" y="613" width="0.0121%" height="15" fill="rgb(216,12,1)" fg:x="1317" fg:w="1"/><text x="16.2291%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="15.9791%" y="597" width="0.0121%" height="15" fill="rgb(219,59,3)" fg:x="1317" fg:w="1"/><text x="16.2291%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (44 samples, 0.53%)</title><rect x="15.5059%" y="885" width="0.5339%" height="15" fill="rgb(215,208,46)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.53%)</title><rect x="15.5059%" y="869" width="0.5339%" height="15" fill="rgb(254,224,29)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.53%)</title><rect x="15.5059%" y="853" width="0.5339%" height="15" fill="rgb(232,14,29)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.53%)</title><rect x="15.5059%" y="837" width="0.5339%" height="15" fill="rgb(208,45,52)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.53%)</title><rect x="15.5059%" y="821" width="0.5339%" height="15" fill="rgb(234,191,28)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="831.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.53%)</title><rect x="15.5059%" y="805" width="0.5339%" height="15" fill="rgb(244,67,43)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.53%)</title><rect x="15.5059%" y="789" width="0.5339%" height="15" fill="rgb(236,189,24)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="799.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (44 samples, 0.53%)</title><rect x="15.5059%" y="773" width="0.5339%" height="15" fill="rgb(239,214,33)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="783.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (44 samples, 0.53%)</title><rect x="15.5059%" y="757" width="0.5339%" height="15" fill="rgb(226,176,41)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (44 samples, 0.53%)</title><rect x="15.5059%" y="741" width="0.5339%" height="15" fill="rgb(248,47,8)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="751.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (44 samples, 0.53%)</title><rect x="15.5059%" y="725" width="0.5339%" height="15" fill="rgb(218,81,44)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (44 samples, 0.53%)</title><rect x="15.5059%" y="709" width="0.5339%" height="15" fill="rgb(213,98,6)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (44 samples, 0.53%)</title><rect x="15.5059%" y="693" width="0.5339%" height="15" fill="rgb(222,85,22)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (44 samples, 0.53%)</title><rect x="15.5059%" y="677" width="0.5339%" height="15" fill="rgb(239,46,39)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (44 samples, 0.53%)</title><rect x="15.5059%" y="661" width="0.5339%" height="15" fill="rgb(237,12,29)" fg:x="1278" fg:w="44"/><text x="15.7559%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.06%)</title><rect x="15.9791%" y="645" width="0.0607%" height="15" fill="rgb(214,77,8)" fg:x="1317" fg:w="5"/><text x="16.2291%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (4 samples, 0.05%)</title><rect x="15.9913%" y="629" width="0.0485%" height="15" fill="rgb(217,168,37)" fg:x="1318" fg:w="4"/><text x="16.2413%" y="639.50"></text></g><g><title>hashbrown::raw::special_is_empty (2 samples, 0.02%)</title><rect x="16.0155%" y="613" width="0.0243%" height="15" fill="rgb(221,217,23)" fg:x="1320" fg:w="2"/><text x="16.2655%" y="623.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.01%)</title><rect x="16.0398%" y="757" width="0.0121%" height="15" fill="rgb(243,229,36)" fg:x="1322" fg:w="1"/><text x="16.2898%" y="767.50"></text></g><g><title>malloc_consolidate (4 samples, 0.05%)</title><rect x="16.1611%" y="661" width="0.0485%" height="15" fill="rgb(251,163,40)" fg:x="1332" fg:w="4"/><text x="16.4111%" y="671.50"></text></g><g><title>down_read_trylock (2 samples, 0.02%)</title><rect x="16.2218%" y="597" width="0.0243%" height="15" fill="rgb(237,222,12)" fg:x="1337" fg:w="2"/><text x="16.4718%" y="607.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="16.2461%" y="549" width="0.0121%" height="15" fill="rgb(248,132,6)" fg:x="1339" fg:w="1"/><text x="16.4961%" y="559.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="16.2825%" y="501" width="0.0121%" height="15" fill="rgb(227,167,50)" fg:x="1342" fg:w="1"/><text x="16.5325%" y="511.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="16.2825%" y="485" width="0.0121%" height="15" fill="rgb(242,84,37)" fg:x="1342" fg:w="1"/><text x="16.5325%" y="495.50"></text></g><g><title>charge_memcg (4 samples, 0.05%)</title><rect x="16.2582%" y="517" width="0.0485%" height="15" fill="rgb(212,4,50)" fg:x="1340" fg:w="4"/><text x="16.5082%" y="527.50"></text></g><g><title>memcg_check_events (1 samples, 0.01%)</title><rect x="16.2946%" y="501" width="0.0121%" height="15" fill="rgb(230,228,32)" fg:x="1343" fg:w="1"/><text x="16.5446%" y="511.50"></text></g><g><title>__mem_cgroup_threshold (1 samples, 0.01%)</title><rect x="16.2946%" y="485" width="0.0121%" height="15" fill="rgb(248,217,23)" fg:x="1343" fg:w="1"/><text x="16.5446%" y="495.50"></text></g><g><title>__mem_cgroup_charge (9 samples, 0.11%)</title><rect x="16.2582%" y="533" width="0.1092%" height="15" fill="rgb(238,197,32)" fg:x="1340" fg:w="9"/><text x="16.5082%" y="543.50"></text></g><g><title>get_mem_cgroup_from_mm (5 samples, 0.06%)</title><rect x="16.3067%" y="517" width="0.0607%" height="15" fill="rgb(236,106,1)" fg:x="1344" fg:w="5"/><text x="16.5567%" y="527.50"></text></g><g><title>__pte_alloc (1 samples, 0.01%)</title><rect x="16.3674%" y="533" width="0.0121%" height="15" fill="rgb(219,228,13)" fg:x="1349" fg:w="1"/><text x="16.6174%" y="543.50"></text></g><g><title>pte_alloc_one (1 samples, 0.01%)</title><rect x="16.3674%" y="517" width="0.0121%" height="15" fill="rgb(238,30,35)" fg:x="1349" fg:w="1"/><text x="16.6174%" y="527.50"></text></g><g><title>alloc_pages (1 samples, 0.01%)</title><rect x="16.3674%" y="501" width="0.0121%" height="15" fill="rgb(236,70,23)" fg:x="1349" fg:w="1"/><text x="16.6174%" y="511.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="16.3674%" y="485" width="0.0121%" height="15" fill="rgb(249,104,48)" fg:x="1349" fg:w="1"/><text x="16.6174%" y="495.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="16.3674%" y="469" width="0.0121%" height="15" fill="rgb(254,117,50)" fg:x="1349" fg:w="1"/><text x="16.6174%" y="479.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="16.3674%" y="453" width="0.0121%" height="15" fill="rgb(223,152,4)" fg:x="1349" fg:w="1"/><text x="16.6174%" y="463.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="16.3674%" y="437" width="0.0121%" height="15" fill="rgb(245,6,2)" fg:x="1349" fg:w="1"/><text x="16.6174%" y="447.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="16.3795%" y="533" width="0.0243%" height="15" fill="rgb(249,150,24)" fg:x="1350" fg:w="2"/><text x="16.6295%" y="543.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="16.3795%" y="517" width="0.0243%" height="15" fill="rgb(228,185,42)" fg:x="1350" fg:w="2"/><text x="16.6295%" y="527.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.01%)</title><rect x="16.3917%" y="501" width="0.0121%" height="15" fill="rgb(226,39,33)" fg:x="1351" fg:w="1"/><text x="16.6417%" y="511.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="16.3917%" y="485" width="0.0121%" height="15" fill="rgb(221,166,19)" fg:x="1351" fg:w="1"/><text x="16.6417%" y="495.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="16.4038%" y="533" width="0.0121%" height="15" fill="rgb(209,109,2)" fg:x="1352" fg:w="1"/><text x="16.6538%" y="543.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="16.4038%" y="517" width="0.0121%" height="15" fill="rgb(252,216,26)" fg:x="1352" fg:w="1"/><text x="16.6538%" y="527.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="16.4038%" y="501" width="0.0121%" height="15" fill="rgb(227,173,36)" fg:x="1352" fg:w="1"/><text x="16.6538%" y="511.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="16.4038%" y="485" width="0.0121%" height="15" fill="rgb(209,90,7)" fg:x="1352" fg:w="1"/><text x="16.6538%" y="495.50"></text></g><g><title>inc_mm_counter (2 samples, 0.02%)</title><rect x="16.4159%" y="533" width="0.0243%" height="15" fill="rgb(250,194,11)" fg:x="1353" fg:w="2"/><text x="16.6659%" y="543.50"></text></g><g><title>percpu_counter_add_batch (2 samples, 0.02%)</title><rect x="16.4159%" y="517" width="0.0243%" height="15" fill="rgb(220,72,50)" fg:x="1353" fg:w="2"/><text x="16.6659%" y="527.50"></text></g><g><title>_raw_spin_trylock (1 samples, 0.01%)</title><rect x="16.4523%" y="469" width="0.0121%" height="15" fill="rgb(222,106,48)" fg:x="1356" fg:w="1"/><text x="16.7023%" y="479.50"></text></g><g><title>__rmqueue_pcplist (3 samples, 0.04%)</title><rect x="16.4766%" y="453" width="0.0364%" height="15" fill="rgb(216,220,45)" fg:x="1358" fg:w="3"/><text x="16.7266%" y="463.50"></text></g><g><title>rmqueue_bulk (3 samples, 0.04%)</title><rect x="16.4766%" y="437" width="0.0364%" height="15" fill="rgb(234,112,18)" fg:x="1358" fg:w="3"/><text x="16.7266%" y="447.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.01%)</title><rect x="16.5008%" y="421" width="0.0121%" height="15" fill="rgb(206,179,9)" fg:x="1360" fg:w="1"/><text x="16.7508%" y="431.50"></text></g><g><title>do_anonymous_page (22 samples, 0.27%)</title><rect x="16.2582%" y="549" width="0.2669%" height="15" fill="rgb(215,115,40)" fg:x="1340" fg:w="22"/><text x="16.5082%" y="559.50"></text></g><g><title>vma_alloc_folio (7 samples, 0.08%)</title><rect x="16.4402%" y="533" width="0.0849%" height="15" fill="rgb(222,69,34)" fg:x="1355" fg:w="7"/><text x="16.6902%" y="543.50"></text></g><g><title>__folio_alloc (7 samples, 0.08%)</title><rect x="16.4402%" y="517" width="0.0849%" height="15" fill="rgb(209,161,10)" fg:x="1355" fg:w="7"/><text x="16.6902%" y="527.50"></text></g><g><title>__alloc_pages (7 samples, 0.08%)</title><rect x="16.4402%" y="501" width="0.0849%" height="15" fill="rgb(217,6,38)" fg:x="1355" fg:w="7"/><text x="16.6902%" y="511.50"></text></g><g><title>get_page_from_freelist (6 samples, 0.07%)</title><rect x="16.4523%" y="485" width="0.0728%" height="15" fill="rgb(229,229,48)" fg:x="1356" fg:w="6"/><text x="16.7023%" y="495.50"></text></g><g><title>rmqueue (5 samples, 0.06%)</title><rect x="16.4645%" y="469" width="0.0607%" height="15" fill="rgb(225,21,28)" fg:x="1357" fg:w="5"/><text x="16.7145%" y="479.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="16.5130%" y="453" width="0.0121%" height="15" fill="rgb(206,33,13)" fg:x="1361" fg:w="1"/><text x="16.7630%" y="463.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="16.5130%" y="437" width="0.0121%" height="15" fill="rgb(242,178,17)" fg:x="1361" fg:w="1"/><text x="16.7630%" y="447.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="16.5130%" y="421" width="0.0121%" height="15" fill="rgb(220,162,5)" fg:x="1361" fg:w="1"/><text x="16.7630%" y="431.50"></text></g><g><title>handle_mm_fault (24 samples, 0.29%)</title><rect x="16.2461%" y="597" width="0.2912%" height="15" fill="rgb(210,33,43)" fg:x="1339" fg:w="24"/><text x="16.4961%" y="607.50"></text></g><g><title>__handle_mm_fault (24 samples, 0.29%)</title><rect x="16.2461%" y="581" width="0.2912%" height="15" fill="rgb(216,116,54)" fg:x="1339" fg:w="24"/><text x="16.4961%" y="591.50"></text></g><g><title>handle_pte_fault (24 samples, 0.29%)</title><rect x="16.2461%" y="565" width="0.2912%" height="15" fill="rgb(249,92,24)" fg:x="1339" fg:w="24"/><text x="16.4961%" y="575.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="16.5251%" y="549" width="0.0121%" height="15" fill="rgb(231,189,14)" fg:x="1362" fg:w="1"/><text x="16.7751%" y="559.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="16.5372%" y="597" width="0.0243%" height="15" fill="rgb(230,8,41)" fg:x="1363" fg:w="2"/><text x="16.7872%" y="607.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="16.5372%" y="581" width="0.0243%" height="15" fill="rgb(249,7,27)" fg:x="1363" fg:w="2"/><text x="16.7872%" y="591.50"></text></g><g><title>mtree_range_walk (2 samples, 0.02%)</title><rect x="16.5372%" y="565" width="0.0243%" height="15" fill="rgb(232,86,5)" fg:x="1363" fg:w="2"/><text x="16.7872%" y="575.50"></text></g><g><title>asm_exc_page_fault (29 samples, 0.35%)</title><rect x="16.2218%" y="645" width="0.3519%" height="15" fill="rgb(224,175,18)" fg:x="1337" fg:w="29"/><text x="16.4718%" y="655.50"></text></g><g><title>exc_page_fault (29 samples, 0.35%)</title><rect x="16.2218%" y="629" width="0.3519%" height="15" fill="rgb(220,129,12)" fg:x="1337" fg:w="29"/><text x="16.4718%" y="639.50"></text></g><g><title>do_user_addr_fault (29 samples, 0.35%)</title><rect x="16.2218%" y="613" width="0.3519%" height="15" fill="rgb(210,19,36)" fg:x="1337" fg:w="29"/><text x="16.4718%" y="623.50"></text></g><g><title>up_read (1 samples, 0.01%)</title><rect x="16.5615%" y="597" width="0.0121%" height="15" fill="rgb(219,96,14)" fg:x="1365" fg:w="1"/><text x="16.8115%" y="607.50"></text></g><g><title>early_xen_iret_patch (1 samples, 0.01%)</title><rect x="16.5736%" y="645" width="0.0121%" height="15" fill="rgb(249,106,1)" fg:x="1366" fg:w="1"/><text x="16.8236%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="16.5858%" y="645" width="0.0121%" height="15" fill="rgb(249,155,20)" fg:x="1367" fg:w="1"/><text x="16.8358%" y="655.50"></text></g><g><title>apparmor_file_mprotect (1 samples, 0.01%)</title><rect x="16.6343%" y="549" width="0.0121%" height="15" fill="rgb(244,168,9)" fg:x="1371" fg:w="1"/><text x="16.8843%" y="559.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="16.6828%" y="517" width="0.0121%" height="15" fill="rgb(216,23,50)" fg:x="1375" fg:w="1"/><text x="16.9328%" y="527.50"></text></g><g><title>osq_lock (182 samples, 2.21%)</title><rect x="16.7071%" y="501" width="2.2082%" height="15" fill="rgb(224,219,20)" fg:x="1377" fg:w="182"/><text x="16.9571%" y="511.50">o..</text></g><g><title>osq_unlock (2 samples, 0.02%)</title><rect x="18.9153%" y="501" width="0.0243%" height="15" fill="rgb(222,156,15)" fg:x="1559" fg:w="2"/><text x="19.1653%" y="511.50"></text></g><g><title>rwsem_optimistic_spin (225 samples, 2.73%)</title><rect x="16.6950%" y="517" width="2.7299%" height="15" fill="rgb(231,97,17)" fg:x="1376" fg:w="225"/><text x="16.9450%" y="527.50">rw..</text></g><g><title>rwsem_spin_on_owner (40 samples, 0.49%)</title><rect x="18.9396%" y="501" width="0.4853%" height="15" fill="rgb(218,70,48)" fg:x="1561" fg:w="40"/><text x="19.1896%" y="511.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="19.4249%" y="517" width="0.0121%" height="15" fill="rgb(212,196,52)" fg:x="1601" fg:w="1"/><text x="19.6749%" y="527.50"></text></g><g><title>asm_sysvec_irq_work (4 samples, 0.05%)</title><rect x="19.4734%" y="469" width="0.0485%" height="15" fill="rgb(243,203,18)" fg:x="1605" fg:w="4"/><text x="19.7234%" y="479.50"></text></g><g><title>update_curr (2 samples, 0.02%)</title><rect x="19.5220%" y="421" width="0.0243%" height="15" fill="rgb(252,125,41)" fg:x="1609" fg:w="2"/><text x="19.7720%" y="431.50"></text></g><g><title>__calc_delta (1 samples, 0.01%)</title><rect x="19.5341%" y="405" width="0.0121%" height="15" fill="rgb(223,180,33)" fg:x="1610" fg:w="1"/><text x="19.7841%" y="415.50"></text></g><g><title>dequeue_task (3 samples, 0.04%)</title><rect x="19.5220%" y="469" width="0.0364%" height="15" fill="rgb(254,159,46)" fg:x="1609" fg:w="3"/><text x="19.7720%" y="479.50"></text></g><g><title>dequeue_task_fair (3 samples, 0.04%)</title><rect x="19.5220%" y="453" width="0.0364%" height="15" fill="rgb(254,38,10)" fg:x="1609" fg:w="3"/><text x="19.7720%" y="463.50"></text></g><g><title>dequeue_entity (3 samples, 0.04%)</title><rect x="19.5220%" y="437" width="0.0364%" height="15" fill="rgb(208,217,32)" fg:x="1609" fg:w="3"/><text x="19.7720%" y="447.50"></text></g><g><title>update_load_avg (1 samples, 0.01%)</title><rect x="19.5462%" y="421" width="0.0121%" height="15" fill="rgb(221,120,13)" fg:x="1611" fg:w="1"/><text x="19.7962%" y="431.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.01%)</title><rect x="19.5462%" y="405" width="0.0121%" height="15" fill="rgb(246,54,52)" fg:x="1611" fg:w="1"/><text x="19.7962%" y="415.50"></text></g><g><title>perf_ctx_enable (13 samples, 0.16%)</title><rect x="19.6554%" y="437" width="0.1577%" height="15" fill="rgb(242,34,25)" fg:x="1620" fg:w="13"/><text x="19.9054%" y="447.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="19.8010%" y="421" width="0.0121%" height="15" fill="rgb(247,209,9)" fg:x="1632" fg:w="1"/><text x="20.0510%" y="431.50"></text></g><g><title>perf_pmu_nop_void (17 samples, 0.21%)</title><rect x="19.8132%" y="437" width="0.2063%" height="15" fill="rgb(228,71,26)" fg:x="1633" fg:w="17"/><text x="20.0632%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (42 samples, 0.51%)</title><rect x="19.5584%" y="453" width="0.5096%" height="15" fill="rgb(222,145,49)" fg:x="1612" fg:w="42"/><text x="19.8084%" y="463.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="20.0194%" y="437" width="0.0485%" height="15" fill="rgb(218,121,17)" fg:x="1650" fg:w="4"/><text x="20.2694%" y="447.50"></text></g><g><title>finish_task_switch.isra.0 (54 samples, 0.66%)</title><rect x="19.5584%" y="469" width="0.6552%" height="15" fill="rgb(244,50,7)" fg:x="1612" fg:w="54"/><text x="19.8084%" y="479.50"></text></g><g><title>_raw_spin_unlock (12 samples, 0.15%)</title><rect x="20.0679%" y="453" width="0.1456%" height="15" fill="rgb(246,229,37)" fg:x="1654" fg:w="12"/><text x="20.3179%" y="463.50"></text></g><g><title>down_write_killable (296 samples, 3.59%)</title><rect x="16.6464%" y="549" width="3.5914%" height="15" fill="rgb(225,18,5)" fg:x="1372" fg:w="296"/><text x="16.8964%" y="559.50">down..</text></g><g><title>rwsem_down_write_slowpath (295 samples, 3.58%)</title><rect x="16.6586%" y="533" width="3.5792%" height="15" fill="rgb(213,204,8)" fg:x="1373" fg:w="295"/><text x="16.9086%" y="543.50">rwse..</text></g><g><title>schedule_preempt_disabled (66 samples, 0.80%)</title><rect x="19.4370%" y="517" width="0.8008%" height="15" fill="rgb(238,103,6)" fg:x="1602" fg:w="66"/><text x="19.6870%" y="527.50"></text></g><g><title>schedule (66 samples, 0.80%)</title><rect x="19.4370%" y="501" width="0.8008%" height="15" fill="rgb(222,25,35)" fg:x="1602" fg:w="66"/><text x="19.6870%" y="511.50"></text></g><g><title>__schedule (64 samples, 0.78%)</title><rect x="19.4613%" y="485" width="0.7765%" height="15" fill="rgb(213,203,35)" fg:x="1604" fg:w="64"/><text x="19.7113%" y="495.50"></text></g><g><title>pick_next_task (2 samples, 0.02%)</title><rect x="20.2135%" y="469" width="0.0243%" height="15" fill="rgb(221,79,53)" fg:x="1666" fg:w="2"/><text x="20.4635%" y="479.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="20.2257%" y="453" width="0.0121%" height="15" fill="rgb(243,200,35)" fg:x="1667" fg:w="1"/><text x="20.4757%" y="463.50"></text></g><g><title>newidle_balance (1 samples, 0.01%)</title><rect x="20.2257%" y="437" width="0.0121%" height="15" fill="rgb(248,60,25)" fg:x="1667" fg:w="1"/><text x="20.4757%" y="447.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="20.2257%" y="421" width="0.0121%" height="15" fill="rgb(227,53,46)" fg:x="1667" fg:w="1"/><text x="20.4757%" y="431.50"></text></g><g><title>__update_blocked_fair (1 samples, 0.01%)</title><rect x="20.2257%" y="405" width="0.0121%" height="15" fill="rgb(216,120,32)" fg:x="1667" fg:w="1"/><text x="20.4757%" y="415.50"></text></g><g><title>mas_find (5 samples, 0.06%)</title><rect x="20.2378%" y="549" width="0.0607%" height="15" fill="rgb(220,134,1)" fg:x="1668" fg:w="5"/><text x="20.4878%" y="559.50"></text></g><g><title>mas_walk (5 samples, 0.06%)</title><rect x="20.2378%" y="533" width="0.0607%" height="15" fill="rgb(237,168,5)" fg:x="1668" fg:w="5"/><text x="20.4878%" y="543.50"></text></g><g><title>mtree_range_walk (4 samples, 0.05%)</title><rect x="20.2499%" y="517" width="0.0485%" height="15" fill="rgb(231,100,33)" fg:x="1669" fg:w="4"/><text x="20.4999%" y="527.50"></text></g><g><title>change_protection (2 samples, 0.02%)</title><rect x="20.2985%" y="533" width="0.0243%" height="15" fill="rgb(236,177,47)" fg:x="1673" fg:w="2"/><text x="20.5485%" y="543.50"></text></g><g><title>change_protection_range (2 samples, 0.02%)</title><rect x="20.2985%" y="517" width="0.0243%" height="15" fill="rgb(235,7,49)" fg:x="1673" fg:w="2"/><text x="20.5485%" y="527.50"></text></g><g><title>change_p4d_range (2 samples, 0.02%)</title><rect x="20.2985%" y="501" width="0.0243%" height="15" fill="rgb(232,119,22)" fg:x="1673" fg:w="2"/><text x="20.5485%" y="511.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.01%)</title><rect x="20.3106%" y="485" width="0.0121%" height="15" fill="rgb(254,73,53)" fg:x="1674" fg:w="1"/><text x="20.5606%" y="495.50"></text></g><g><title>change_pte_range (1 samples, 0.01%)</title><rect x="20.3106%" y="469" width="0.0121%" height="15" fill="rgb(251,35,20)" fg:x="1674" fg:w="1"/><text x="20.5606%" y="479.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="20.3106%" y="453" width="0.0121%" height="15" fill="rgb(241,119,20)" fg:x="1674" fg:w="1"/><text x="20.5606%" y="463.50"></text></g><g><title>__perf_event__output_id_sample (1 samples, 0.01%)</title><rect x="20.4805%" y="453" width="0.0121%" height="15" fill="rgb(207,102,14)" fg:x="1688" fg:w="1"/><text x="20.7305%" y="463.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="20.4805%" y="437" width="0.0121%" height="15" fill="rgb(248,201,50)" fg:x="1688" fg:w="1"/><text x="20.7305%" y="447.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="20.4805%" y="421" width="0.0121%" height="15" fill="rgb(222,185,44)" fg:x="1688" fg:w="1"/><text x="20.7305%" y="431.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.01%)</title><rect x="20.4926%" y="453" width="0.0121%" height="15" fill="rgb(218,107,18)" fg:x="1689" fg:w="1"/><text x="20.7426%" y="463.50"></text></g><g><title>local_clock (1 samples, 0.01%)</title><rect x="20.4926%" y="437" width="0.0121%" height="15" fill="rgb(237,177,39)" fg:x="1689" fg:w="1"/><text x="20.7426%" y="447.50"></text></g><g><title>local_clock_noinstr (1 samples, 0.01%)</title><rect x="20.4926%" y="421" width="0.0121%" height="15" fill="rgb(246,69,6)" fg:x="1689" fg:w="1"/><text x="20.7426%" y="431.50"></text></g><g><title>sched_clock_noinstr (1 samples, 0.01%)</title><rect x="20.4926%" y="405" width="0.0121%" height="15" fill="rgb(234,208,37)" fg:x="1689" fg:w="1"/><text x="20.7426%" y="415.50"></text></g><g><title>native_sched_clock (1 samples, 0.01%)</title><rect x="20.4926%" y="389" width="0.0121%" height="15" fill="rgb(225,4,6)" fg:x="1689" fg:w="1"/><text x="20.7426%" y="399.50"></text></g><g><title>perf_event_mmap (16 samples, 0.19%)</title><rect x="20.3227%" y="533" width="0.1941%" height="15" fill="rgb(233,45,0)" fg:x="1675" fg:w="16"/><text x="20.5727%" y="543.50"></text></g><g><title>perf_event_mmap_event (15 samples, 0.18%)</title><rect x="20.3349%" y="517" width="0.1820%" height="15" fill="rgb(226,136,5)" fg:x="1676" fg:w="15"/><text x="20.5849%" y="527.50"></text></g><g><title>perf_iterate_sb.constprop.0 (14 samples, 0.17%)</title><rect x="20.3470%" y="501" width="0.1699%" height="15" fill="rgb(211,91,47)" fg:x="1677" fg:w="14"/><text x="20.5970%" y="511.50"></text></g><g><title>perf_iterate_ctx (13 samples, 0.16%)</title><rect x="20.3591%" y="485" width="0.1577%" height="15" fill="rgb(242,88,51)" fg:x="1678" fg:w="13"/><text x="20.6091%" y="495.50"></text></g><g><title>perf_event_mmap_output (3 samples, 0.04%)</title><rect x="20.4805%" y="469" width="0.0364%" height="15" fill="rgb(230,91,28)" fg:x="1688" fg:w="3"/><text x="20.7305%" y="479.50"></text></g><g><title>perf_output_begin (1 samples, 0.01%)</title><rect x="20.5047%" y="453" width="0.0121%" height="15" fill="rgb(254,186,29)" fg:x="1690" fg:w="1"/><text x="20.7547%" y="463.50"></text></g><g><title>khugepaged_enter_vma (1 samples, 0.01%)</title><rect x="20.5169%" y="517" width="0.0121%" height="15" fill="rgb(238,6,4)" fg:x="1691" fg:w="1"/><text x="20.7669%" y="527.50"></text></g><g><title>mas_preallocate (3 samples, 0.04%)</title><rect x="20.5290%" y="517" width="0.0364%" height="15" fill="rgb(221,151,16)" fg:x="1692" fg:w="3"/><text x="20.7790%" y="527.50"></text></g><g><title>mas_alloc_nodes (2 samples, 0.02%)</title><rect x="20.5411%" y="501" width="0.0243%" height="15" fill="rgb(251,143,52)" fg:x="1693" fg:w="2"/><text x="20.7911%" y="511.50"></text></g><g><title>kmem_cache_alloc_bulk (2 samples, 0.02%)</title><rect x="20.5411%" y="485" width="0.0243%" height="15" fill="rgb(206,90,15)" fg:x="1693" fg:w="2"/><text x="20.7911%" y="495.50"></text></g><g><title>__kmem_cache_alloc_bulk (2 samples, 0.02%)</title><rect x="20.5411%" y="469" width="0.0243%" height="15" fill="rgb(218,35,8)" fg:x="1693" fg:w="2"/><text x="20.7911%" y="479.50"></text></g><g><title>___slab_alloc (1 samples, 0.01%)</title><rect x="20.5533%" y="453" width="0.0121%" height="15" fill="rgb(239,215,6)" fg:x="1694" fg:w="1"/><text x="20.8033%" y="463.50"></text></g><g><title>kmem_cache_free (4 samples, 0.05%)</title><rect x="20.5654%" y="485" width="0.0485%" height="15" fill="rgb(245,116,39)" fg:x="1695" fg:w="4"/><text x="20.8154%" y="495.50"></text></g><g><title>__slab_free (2 samples, 0.02%)</title><rect x="20.5897%" y="469" width="0.0243%" height="15" fill="rgb(242,65,28)" fg:x="1697" fg:w="2"/><text x="20.8397%" y="479.50"></text></g><g><title>slab_update_freelist.isra.0 (2 samples, 0.02%)</title><rect x="20.5897%" y="453" width="0.0243%" height="15" fill="rgb(252,132,53)" fg:x="1697" fg:w="2"/><text x="20.8397%" y="463.50"></text></g><g><title>mas_destroy (7 samples, 0.08%)</title><rect x="20.5654%" y="501" width="0.0849%" height="15" fill="rgb(224,159,50)" fg:x="1695" fg:w="7"/><text x="20.8154%" y="511.50"></text></g><g><title>kmem_cache_free_bulk (3 samples, 0.04%)</title><rect x="20.6139%" y="485" width="0.0364%" height="15" fill="rgb(224,93,4)" fg:x="1699" fg:w="3"/><text x="20.8639%" y="495.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (3 samples, 0.04%)</title><rect x="20.6139%" y="469" width="0.0364%" height="15" fill="rgb(208,81,34)" fg:x="1699" fg:w="3"/><text x="20.8639%" y="479.50"></text></g><g><title>build_detached_freelist (1 samples, 0.01%)</title><rect x="20.6382%" y="453" width="0.0121%" height="15" fill="rgb(233,92,54)" fg:x="1701" fg:w="1"/><text x="20.8882%" y="463.50"></text></g><g><title>cache_from_obj (1 samples, 0.01%)</title><rect x="20.6382%" y="437" width="0.0121%" height="15" fill="rgb(237,21,14)" fg:x="1701" fg:w="1"/><text x="20.8882%" y="447.50"></text></g><g><title>mas_store_prealloc (8 samples, 0.10%)</title><rect x="20.5654%" y="517" width="0.0971%" height="15" fill="rgb(249,128,51)" fg:x="1695" fg:w="8"/><text x="20.8154%" y="527.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="20.6503%" y="501" width="0.0121%" height="15" fill="rgb(223,129,24)" fg:x="1702" fg:w="1"/><text x="20.9003%" y="511.50"></text></g><g><title>mas_wr_modify (1 samples, 0.01%)</title><rect x="20.6503%" y="485" width="0.0121%" height="15" fill="rgb(231,168,25)" fg:x="1702" fg:w="1"/><text x="20.9003%" y="495.50"></text></g><g><title>mt_find (1 samples, 0.01%)</title><rect x="20.6625%" y="517" width="0.0121%" height="15" fill="rgb(224,39,20)" fg:x="1703" fg:w="1"/><text x="20.9125%" y="527.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="20.6625%" y="501" width="0.0121%" height="15" fill="rgb(225,152,53)" fg:x="1703" fg:w="1"/><text x="20.9125%" y="511.50"></text></g><g><title>vma_adjust_trans_huge (2 samples, 0.02%)</title><rect x="20.6746%" y="517" width="0.0243%" height="15" fill="rgb(252,17,24)" fg:x="1704" fg:w="2"/><text x="20.9246%" y="527.50"></text></g><g><title>find_vma (2 samples, 0.02%)</title><rect x="20.6746%" y="501" width="0.0243%" height="15" fill="rgb(250,114,30)" fg:x="1704" fg:w="2"/><text x="20.9246%" y="511.50"></text></g><g><title>mt_find (2 samples, 0.02%)</title><rect x="20.6746%" y="485" width="0.0243%" height="15" fill="rgb(229,5,4)" fg:x="1704" fg:w="2"/><text x="20.9246%" y="495.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="20.6867%" y="469" width="0.0121%" height="15" fill="rgb(225,176,49)" fg:x="1705" fg:w="1"/><text x="20.9367%" y="479.50"></text></g><g><title>mprotect_fixup (40 samples, 0.49%)</title><rect x="20.2985%" y="549" width="0.4853%" height="15" fill="rgb(224,221,49)" fg:x="1673" fg:w="40"/><text x="20.5485%" y="559.50"></text></g><g><title>vma_merge (22 samples, 0.27%)</title><rect x="20.5169%" y="533" width="0.2669%" height="15" fill="rgb(253,169,27)" fg:x="1691" fg:w="22"/><text x="20.7669%" y="543.50"></text></g><g><title>vma_prepare (7 samples, 0.08%)</title><rect x="20.6989%" y="517" width="0.0849%" height="15" fill="rgb(211,206,16)" fg:x="1706" fg:w="7"/><text x="20.9489%" y="527.50"></text></g><g><title>down_write (6 samples, 0.07%)</title><rect x="20.7110%" y="501" width="0.0728%" height="15" fill="rgb(244,87,35)" fg:x="1707" fg:w="6"/><text x="20.9610%" y="511.50"></text></g><g><title>__cond_resched (4 samples, 0.05%)</title><rect x="20.7353%" y="485" width="0.0485%" height="15" fill="rgb(246,28,10)" fg:x="1709" fg:w="4"/><text x="20.9853%" y="495.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="20.7353%" y="469" width="0.0485%" height="15" fill="rgb(229,12,44)" fg:x="1709" fg:w="4"/><text x="20.9853%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="20.7353%" y="453" width="0.0485%" height="15" fill="rgb(210,145,37)" fg:x="1709" fg:w="4"/><text x="20.9853%" y="463.50"></text></g><g><title>__rcu_read_unlock (4 samples, 0.05%)</title><rect x="20.7353%" y="437" width="0.0485%" height="15" fill="rgb(227,112,52)" fg:x="1709" fg:w="4"/><text x="20.9853%" y="447.50"></text></g><g><title>tlb_finish_mmu (2 samples, 0.02%)</title><rect x="20.7838%" y="549" width="0.0243%" height="15" fill="rgb(238,155,34)" fg:x="1713" fg:w="2"/><text x="21.0338%" y="559.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="20.8081%" y="517" width="0.0121%" height="15" fill="rgb(239,226,36)" fg:x="1715" fg:w="1"/><text x="21.0581%" y="527.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="20.8081%" y="501" width="0.0121%" height="15" fill="rgb(230,16,23)" fg:x="1715" fg:w="1"/><text x="21.0581%" y="511.50"></text></g><g><title>wake_q_add (1 samples, 0.01%)</title><rect x="20.8202%" y="517" width="0.0121%" height="15" fill="rgb(236,171,36)" fg:x="1716" fg:w="1"/><text x="21.0702%" y="527.50"></text></g><g><title>__x64_sys_mprotect (349 samples, 4.23%)</title><rect x="16.6100%" y="581" width="4.2344%" height="15" fill="rgb(221,22,14)" fg:x="1369" fg:w="349"/><text x="16.8600%" y="591.50">__x64..</text></g><g><title>do_mprotect_pkey (349 samples, 4.23%)</title><rect x="16.6100%" y="565" width="4.2344%" height="15" fill="rgb(242,43,11)" fg:x="1369" fg:w="349"/><text x="16.8600%" y="575.50">do_mp..</text></g><g><title>up_write (3 samples, 0.04%)</title><rect x="20.8081%" y="549" width="0.0364%" height="15" fill="rgb(232,69,23)" fg:x="1715" fg:w="3"/><text x="21.0581%" y="559.50"></text></g><g><title>rwsem_wake.isra.0 (3 samples, 0.04%)</title><rect x="20.8081%" y="533" width="0.0364%" height="15" fill="rgb(216,180,54)" fg:x="1715" fg:w="3"/><text x="21.0581%" y="543.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="20.8323%" y="517" width="0.0121%" height="15" fill="rgb(216,5,24)" fg:x="1717" fg:w="1"/><text x="21.0823%" y="527.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="20.8323%" y="501" width="0.0121%" height="15" fill="rgb(225,89,9)" fg:x="1717" fg:w="1"/><text x="21.0823%" y="511.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="20.8323%" y="485" width="0.0121%" height="15" fill="rgb(243,75,33)" fg:x="1717" fg:w="1"/><text x="21.0823%" y="495.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="20.8323%" y="469" width="0.0121%" height="15" fill="rgb(247,141,45)" fg:x="1717" fg:w="1"/><text x="21.0823%" y="479.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.01%)</title><rect x="20.8445%" y="581" width="0.0121%" height="15" fill="rgb(232,177,36)" fg:x="1718" fg:w="1"/><text x="21.0945%" y="591.50"></text></g><g><title>do_syscall_64 (356 samples, 4.32%)</title><rect x="16.5979%" y="597" width="4.3193%" height="15" fill="rgb(219,125,36)" fg:x="1368" fg:w="356"/><text x="16.8479%" y="607.50">do_sy..</text></g><g><title>syscall_exit_to_user_mode (5 samples, 0.06%)</title><rect x="20.8566%" y="581" width="0.0607%" height="15" fill="rgb(227,94,9)" fg:x="1719" fg:w="5"/><text x="21.1066%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="20.8566%" y="565" width="0.0607%" height="15" fill="rgb(240,34,52)" fg:x="1719" fg:w="5"/><text x="21.1066%" y="575.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="20.8566%" y="549" width="0.0607%" height="15" fill="rgb(216,45,12)" fg:x="1719" fg:w="5"/><text x="21.1066%" y="559.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="20.8687%" y="533" width="0.0485%" height="15" fill="rgb(246,21,19)" fg:x="1720" fg:w="4"/><text x="21.1187%" y="543.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="20.8687%" y="517" width="0.0485%" height="15" fill="rgb(213,98,42)" fg:x="1720" fg:w="4"/><text x="21.1187%" y="527.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="20.8687%" y="501" width="0.0485%" height="15" fill="rgb(250,136,47)" fg:x="1720" fg:w="4"/><text x="21.1187%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (357 samples, 4.33%)</title><rect x="16.5979%" y="613" width="4.3315%" height="15" fill="rgb(251,124,27)" fg:x="1368" fg:w="357"/><text x="16.8479%" y="623.50">entry..</text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.01%)</title><rect x="20.9173%" y="597" width="0.0121%" height="15" fill="rgb(229,180,14)" fg:x="1724" fg:w="1"/><text x="21.1673%" y="607.50"></text></g><g><title>grow_heap (358 samples, 4.34%)</title><rect x="16.5979%" y="645" width="4.3436%" height="15" fill="rgb(245,216,25)" fg:x="1368" fg:w="358"/><text x="16.8479%" y="655.50">grow_..</text></g><g><title>__GI_mprotect (358 samples, 4.34%)</title><rect x="16.5979%" y="629" width="4.3436%" height="15" fill="rgb(251,43,5)" fg:x="1368" fg:w="358"/><text x="16.8479%" y="639.50">__GI_..</text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="20.9294%" y="613" width="0.0121%" height="15" fill="rgb(250,128,24)" fg:x="1725" fg:w="1"/><text x="21.1794%" y="623.50"></text></g><g><title>__GI___libc_malloc (406 samples, 4.93%)</title><rect x="16.0519%" y="693" width="4.9260%" height="15" fill="rgb(217,117,27)" fg:x="1323" fg:w="406"/><text x="16.3019%" y="703.50">__GI__..</text></g><g><title>_int_malloc (402 samples, 4.88%)</title><rect x="16.1005%" y="677" width="4.8775%" height="15" fill="rgb(245,147,4)" fg:x="1327" fg:w="402"/><text x="16.3505%" y="687.50">_int_m..</text></g><g><title>sysmalloc (393 samples, 4.77%)</title><rect x="16.2097%" y="661" width="4.7683%" height="15" fill="rgb(242,201,35)" fg:x="1336" fg:w="393"/><text x="16.4597%" y="671.50">sysmal..</text></g><g><title>sync_regs (3 samples, 0.04%)</title><rect x="20.9415%" y="645" width="0.0364%" height="15" fill="rgb(218,181,1)" fg:x="1726" fg:w="3"/><text x="21.1915%" y="655.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (453 samples, 5.50%)</title><rect x="15.4938%" y="981" width="5.4962%" height="15" fill="rgb(222,6,29)" fg:x="1277" fg:w="453"/><text x="15.7438%" y="991.50">revm::c..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (453 samples, 5.50%)</title><rect x="15.4938%" y="965" width="5.4962%" height="15" fill="rgb(208,186,3)" fg:x="1277" fg:w="453"/><text x="15.7438%" y="975.50">core::i..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (453 samples, 5.50%)</title><rect x="15.4938%" y="949" width="5.4962%" height="15" fill="rgb(216,36,26)" fg:x="1277" fg:w="453"/><text x="15.7438%" y="959.50">&lt;std::c..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (452 samples, 5.48%)</title><rect x="15.5059%" y="933" width="5.4841%" height="15" fill="rgb(248,201,23)" fg:x="1278" fg:w="452"/><text x="15.7559%" y="943.50">&lt;std::c..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (452 samples, 5.48%)</title><rect x="15.5059%" y="917" width="5.4841%" height="15" fill="rgb(251,170,31)" fg:x="1278" fg:w="452"/><text x="15.7559%" y="927.50">&lt;hashbr..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (452 samples, 5.48%)</title><rect x="15.5059%" y="901" width="5.4841%" height="15" fill="rgb(207,110,25)" fg:x="1278" fg:w="452"/><text x="15.7559%" y="911.50">&lt;hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (408 samples, 4.95%)</title><rect x="16.0398%" y="885" width="4.9503%" height="15" fill="rgb(250,54,15)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="895.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (408 samples, 4.95%)</title><rect x="16.0398%" y="869" width="4.9503%" height="15" fill="rgb(227,68,33)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="879.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (408 samples, 4.95%)</title><rect x="16.0398%" y="853" width="4.9503%" height="15" fill="rgb(238,34,41)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="863.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (408 samples, 4.95%)</title><rect x="16.0398%" y="837" width="4.9503%" height="15" fill="rgb(220,11,15)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="847.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (408 samples, 4.95%)</title><rect x="16.0398%" y="821" width="4.9503%" height="15" fill="rgb(246,111,35)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="831.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (408 samples, 4.95%)</title><rect x="16.0398%" y="805" width="4.9503%" height="15" fill="rgb(209,88,53)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="815.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (408 samples, 4.95%)</title><rect x="16.0398%" y="789" width="4.9503%" height="15" fill="rgb(231,185,47)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="799.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (408 samples, 4.95%)</title><rect x="16.0398%" y="773" width="4.9503%" height="15" fill="rgb(233,154,1)" fg:x="1322" fg:w="408"/><text x="16.2898%" y="783.50">hashbr..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (407 samples, 4.94%)</title><rect x="16.0519%" y="757" width="4.9381%" height="15" fill="rgb(225,15,46)" fg:x="1323" fg:w="407"/><text x="16.3019%" y="767.50">hashbr..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (407 samples, 4.94%)</title><rect x="16.0519%" y="741" width="4.9381%" height="15" fill="rgb(211,135,41)" fg:x="1323" fg:w="407"/><text x="16.3019%" y="751.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (407 samples, 4.94%)</title><rect x="16.0519%" y="725" width="4.9381%" height="15" fill="rgb(208,54,0)" fg:x="1323" fg:w="407"/><text x="16.3019%" y="735.50">alloc:..</text></g><g><title>alloc::alloc::alloc (407 samples, 4.94%)</title><rect x="16.0519%" y="709" width="4.9381%" height="15" fill="rgb(244,136,14)" fg:x="1323" fg:w="407"/><text x="16.3019%" y="719.50">alloc:..</text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="20.9779%" y="693" width="0.0121%" height="15" fill="rgb(241,56,14)" fg:x="1729" fg:w="1"/><text x="21.2279%" y="703.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="20.9779%" y="677" width="0.0121%" height="15" fill="rgb(205,80,24)" fg:x="1729" fg:w="1"/><text x="21.2279%" y="687.50"></text></g><g><title>revm::frame::FrameResult::gas (1 samples, 0.01%)</title><rect x="20.9901%" y="981" width="0.0121%" height="15" fill="rgb(220,57,4)" fg:x="1730" fg:w="1"/><text x="21.2401%" y="991.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallContext as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0264%" y="917" width="0.0121%" height="15" fill="rgb(226,193,50)" fg:x="1733" fg:w="1"/><text x="21.2764%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0264%" y="901" width="0.0121%" height="15" fill="rgb(231,168,22)" fg:x="1733" fg:w="1"/><text x="21.2764%" y="911.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallInputs as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="21.0022%" y="933" width="0.0485%" height="15" fill="rgb(254,215,14)" fg:x="1731" fg:w="4"/><text x="21.2522%" y="943.50"></text></g><g><title>&lt;revm_interpreter::inner_models::Transfer as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0386%" y="917" width="0.0121%" height="15" fill="rgb(211,115,16)" fg:x="1734" fg:w="1"/><text x="21.2886%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0386%" y="901" width="0.0121%" height="15" fill="rgb(236,210,16)" fg:x="1734" fg:w="1"/><text x="21.2886%" y="911.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (5 samples, 0.06%)</title><rect x="21.0022%" y="949" width="0.0607%" height="15" fill="rgb(221,94,12)" fg:x="1731" fg:w="5"/><text x="21.2522%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="21.0507%" y="933" width="0.0121%" height="15" fill="rgb(235,218,49)" fg:x="1735" fg:w="1"/><text x="21.3007%" y="943.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="21.0507%" y="917" width="0.0121%" height="15" fill="rgb(217,114,14)" fg:x="1735" fg:w="1"/><text x="21.3007%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.07%)</title><rect x="21.0022%" y="965" width="0.0728%" height="15" fill="rgb(216,145,22)" fg:x="1731" fg:w="6"/><text x="21.2522%" y="975.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.01%)</title><rect x="21.0628%" y="949" width="0.0121%" height="15" fill="rgb(217,112,39)" fg:x="1736" fg:w="1"/><text x="21.3128%" y="959.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.01%)</title><rect x="21.0628%" y="933" width="0.0121%" height="15" fill="rgb(225,85,32)" fg:x="1736" fg:w="1"/><text x="21.3128%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="21.0628%" y="917" width="0.0121%" height="15" fill="rgb(245,209,47)" fg:x="1736" fg:w="1"/><text x="21.3128%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="21.0628%" y="901" width="0.0121%" height="15" fill="rgb(218,220,15)" fg:x="1736" fg:w="1"/><text x="21.3128%" y="911.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="21.0628%" y="885" width="0.0121%" height="15" fill="rgb(222,202,31)" fg:x="1736" fg:w="1"/><text x="21.3128%" y="895.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="21.0628%" y="869" width="0.0121%" height="15" fill="rgb(243,203,4)" fg:x="1736" fg:w="1"/><text x="21.3128%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (1 samples, 0.01%)</title><rect x="21.0750%" y="933" width="0.0121%" height="15" fill="rgb(237,92,17)" fg:x="1737" fg:w="1"/><text x="21.3250%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="21.0750%" y="917" width="0.0121%" height="15" fill="rgb(231,119,7)" fg:x="1737" fg:w="1"/><text x="21.3250%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="21.0750%" y="901" width="0.0121%" height="15" fill="rgb(237,82,41)" fg:x="1737" fg:w="1"/><text x="21.3250%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="21.0750%" y="885" width="0.0121%" height="15" fill="rgb(226,81,48)" fg:x="1737" fg:w="1"/><text x="21.3250%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="21.0750%" y="869" width="0.0121%" height="15" fill="rgb(234,70,51)" fg:x="1737" fg:w="1"/><text x="21.3250%" y="879.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="21.0750%" y="853" width="0.0121%" height="15" fill="rgb(251,86,4)" fg:x="1737" fg:w="1"/><text x="21.3250%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0871%" y="917" width="0.0121%" height="15" fill="rgb(244,144,28)" fg:x="1738" fg:w="1"/><text x="21.3371%" y="927.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0871%" y="901" width="0.0121%" height="15" fill="rgb(232,161,39)" fg:x="1738" fg:w="1"/><text x="21.3371%" y="911.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0871%" y="885" width="0.0121%" height="15" fill="rgb(247,34,51)" fg:x="1738" fg:w="1"/><text x="21.3371%" y="895.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0871%" y="869" width="0.0121%" height="15" fill="rgb(225,132,2)" fg:x="1738" fg:w="1"/><text x="21.3371%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="21.0871%" y="853" width="0.0121%" height="15" fill="rgb(209,159,44)" fg:x="1738" fg:w="1"/><text x="21.3371%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="21.0871%" y="837" width="0.0121%" height="15" fill="rgb(251,214,1)" fg:x="1738" fg:w="1"/><text x="21.3371%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="21.0871%" y="821" width="0.0121%" height="15" fill="rgb(247,84,47)" fg:x="1738" fg:w="1"/><text x="21.3371%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="21.0992%" y="917" width="0.0121%" height="15" fill="rgb(240,111,43)" fg:x="1739" fg:w="1"/><text x="21.3492%" y="927.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="21.1114%" y="805" width="0.0121%" height="15" fill="rgb(215,214,35)" fg:x="1740" fg:w="1"/><text x="21.3614%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="21.1114%" y="789" width="0.0121%" height="15" fill="rgb(248,207,23)" fg:x="1740" fg:w="1"/><text x="21.3614%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="21.1114%" y="773" width="0.0121%" height="15" fill="rgb(214,186,4)" fg:x="1740" fg:w="1"/><text x="21.3614%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="21.1114%" y="757" width="0.0121%" height="15" fill="rgb(220,133,22)" fg:x="1740" fg:w="1"/><text x="21.3614%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="21.1114%" y="741" width="0.0121%" height="15" fill="rgb(239,134,19)" fg:x="1740" fg:w="1"/><text x="21.3614%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="21.1114%" y="837" width="0.0243%" height="15" fill="rgb(250,140,9)" fg:x="1740" fg:w="2"/><text x="21.3614%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="21.1114%" y="821" width="0.0243%" height="15" fill="rgb(225,59,14)" fg:x="1740" fg:w="2"/><text x="21.3614%" y="831.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="21.1235%" y="805" width="0.0121%" height="15" fill="rgb(214,152,51)" fg:x="1741" fg:w="1"/><text x="21.3735%" y="815.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::call_precompile (3 samples, 0.04%)</title><rect x="21.1114%" y="917" width="0.0364%" height="15" fill="rgb(251,227,43)" fg:x="1740" fg:w="3"/><text x="21.3614%" y="927.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::call (3 samples, 0.04%)</title><rect x="21.1114%" y="901" width="0.0364%" height="15" fill="rgb(241,96,17)" fg:x="1740" fg:w="3"/><text x="21.3614%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.04%)</title><rect x="21.1114%" y="885" width="0.0364%" height="15" fill="rgb(234,198,43)" fg:x="1740" fg:w="3"/><text x="21.3614%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.04%)</title><rect x="21.1114%" y="869" width="0.0364%" height="15" fill="rgb(220,108,29)" fg:x="1740" fg:w="3"/><text x="21.3614%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.04%)</title><rect x="21.1114%" y="853" width="0.0364%" height="15" fill="rgb(226,163,33)" fg:x="1740" fg:w="3"/><text x="21.3614%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.01%)</title><rect x="21.1356%" y="837" width="0.0121%" height="15" fill="rgb(205,194,45)" fg:x="1742" fg:w="1"/><text x="21.3856%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="21.1356%" y="821" width="0.0121%" height="15" fill="rgb(206,143,44)" fg:x="1742" fg:w="1"/><text x="21.3856%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="21.1356%" y="805" width="0.0121%" height="15" fill="rgb(236,136,36)" fg:x="1742" fg:w="1"/><text x="21.3856%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="21.1478%" y="821" width="0.0243%" height="15" fill="rgb(249,172,42)" fg:x="1743" fg:w="2"/><text x="21.3978%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="21.1478%" y="805" width="0.0243%" height="15" fill="rgb(216,139,23)" fg:x="1743" fg:w="2"/><text x="21.3978%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="21.1478%" y="789" width="0.0243%" height="15" fill="rgb(207,166,20)" fg:x="1743" fg:w="2"/><text x="21.3978%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="21.1599%" y="773" width="0.0121%" height="15" fill="rgb(210,209,22)" fg:x="1744" fg:w="1"/><text x="21.4099%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="21.1599%" y="757" width="0.0121%" height="15" fill="rgb(232,118,20)" fg:x="1744" fg:w="1"/><text x="21.4099%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="21.1478%" y="853" width="0.0364%" height="15" fill="rgb(238,113,42)" fg:x="1743" fg:w="3"/><text x="21.3978%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="21.1478%" y="837" width="0.0364%" height="15" fill="rgb(231,42,5)" fg:x="1743" fg:w="3"/><text x="21.3978%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="21.1720%" y="821" width="0.0121%" height="15" fill="rgb(243,166,24)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="21.1720%" y="805" width="0.0121%" height="15" fill="rgb(237,226,12)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="21.1720%" y="789" width="0.0121%" height="15" fill="rgb(229,133,24)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="21.1720%" y="773" width="0.0121%" height="15" fill="rgb(238,33,43)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="21.1720%" y="757" width="0.0121%" height="15" fill="rgb(227,59,38)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="21.1720%" y="741" width="0.0121%" height="15" fill="rgb(230,97,0)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="21.1720%" y="725" width="0.0121%" height="15" fill="rgb(250,173,50)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="21.1720%" y="709" width="0.0121%" height="15" fill="rgb(240,15,50)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="21.1720%" y="693" width="0.0121%" height="15" fill="rgb(221,93,22)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="21.1720%" y="677" width="0.0121%" height="15" fill="rgb(245,180,53)" fg:x="1745" fg:w="1"/><text x="21.4220%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="21.1842%" y="821" width="0.0121%" height="15" fill="rgb(231,88,51)" fg:x="1746" fg:w="1"/><text x="21.4342%" y="831.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1 samples, 0.01%)</title><rect x="21.1842%" y="805" width="0.0121%" height="15" fill="rgb(240,58,21)" fg:x="1746" fg:w="1"/><text x="21.4342%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="21.1842%" y="789" width="0.0121%" height="15" fill="rgb(237,21,10)" fg:x="1746" fg:w="1"/><text x="21.4342%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="21.1842%" y="773" width="0.0121%" height="15" fill="rgb(218,43,11)" fg:x="1746" fg:w="1"/><text x="21.4342%" y="783.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="21.1842%" y="757" width="0.0121%" height="15" fill="rgb(218,221,29)" fg:x="1746" fg:w="1"/><text x="21.4342%" y="767.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="21.1842%" y="741" width="0.0121%" height="15" fill="rgb(214,118,42)" fg:x="1746" fg:w="1"/><text x="21.4342%" y="751.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_account (5 samples, 0.06%)</title><rect x="21.1478%" y="917" width="0.0607%" height="15" fill="rgb(251,200,26)" fg:x="1743" fg:w="5"/><text x="21.3978%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.06%)</title><rect x="21.1478%" y="901" width="0.0607%" height="15" fill="rgb(237,101,39)" fg:x="1743" fg:w="5"/><text x="21.3978%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.06%)</title><rect x="21.1478%" y="885" width="0.0607%" height="15" fill="rgb(251,117,11)" fg:x="1743" fg:w="5"/><text x="21.3978%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.06%)</title><rect x="21.1478%" y="869" width="0.0607%" height="15" fill="rgb(216,223,23)" fg:x="1743" fg:w="5"/><text x="21.3978%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="21.1842%" y="853" width="0.0243%" height="15" fill="rgb(251,54,12)" fg:x="1746" fg:w="2"/><text x="21.4342%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="21.1842%" y="837" width="0.0243%" height="15" fill="rgb(254,176,54)" fg:x="1746" fg:w="2"/><text x="21.4342%" y="847.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="21.1963%" y="821" width="0.0121%" height="15" fill="rgb(210,32,8)" fg:x="1747" fg:w="1"/><text x="21.4463%" y="831.50"></text></g><g><title>__GI_memcpy (1 samples, 0.01%)</title><rect x="21.2812%" y="757" width="0.0121%" height="15" fill="rgb(235,52,38)" fg:x="1754" fg:w="1"/><text x="21.5312%" y="767.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (1 samples, 0.01%)</title><rect x="21.2812%" y="741" width="0.0121%" height="15" fill="rgb(231,4,44)" fg:x="1754" fg:w="1"/><text x="21.5312%" y="751.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="21.2934%" y="757" width="0.0485%" height="15" fill="rgb(249,2,32)" fg:x="1755" fg:w="4"/><text x="21.5434%" y="767.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="21.3176%" y="741" width="0.0243%" height="15" fill="rgb(224,65,26)" fg:x="1757" fg:w="2"/><text x="21.5676%" y="751.50"></text></g><g><title>_int_realloc (14 samples, 0.17%)</title><rect x="21.2570%" y="773" width="0.1699%" height="15" fill="rgb(250,73,40)" fg:x="1752" fg:w="14"/><text x="21.5070%" y="783.50"></text></g><g><title>_int_malloc (7 samples, 0.08%)</title><rect x="21.3419%" y="757" width="0.0849%" height="15" fill="rgb(253,177,16)" fg:x="1759" fg:w="7"/><text x="21.5919%" y="767.50"></text></g><g><title>blkcg_maybe_throttle_current (1 samples, 0.01%)</title><rect x="21.4268%" y="677" width="0.0121%" height="15" fill="rgb(217,32,34)" fg:x="1766" fg:w="1"/><text x="21.6768%" y="687.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="21.4268%" y="773" width="0.0607%" height="15" fill="rgb(212,7,10)" fg:x="1766" fg:w="5"/><text x="21.6768%" y="783.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="21.4268%" y="757" width="0.0607%" height="15" fill="rgb(245,89,8)" fg:x="1766" fg:w="5"/><text x="21.6768%" y="767.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="21.4268%" y="741" width="0.0607%" height="15" fill="rgb(237,16,53)" fg:x="1766" fg:w="5"/><text x="21.6768%" y="751.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="21.4268%" y="725" width="0.0607%" height="15" fill="rgb(250,204,30)" fg:x="1766" fg:w="5"/><text x="21.6768%" y="735.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="21.4268%" y="709" width="0.0607%" height="15" fill="rgb(208,77,27)" fg:x="1766" fg:w="5"/><text x="21.6768%" y="719.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="21.4268%" y="693" width="0.0607%" height="15" fill="rgb(250,204,28)" fg:x="1766" fg:w="5"/><text x="21.6768%" y="703.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="21.4390%" y="677" width="0.0485%" height="15" fill="rgb(244,63,21)" fg:x="1767" fg:w="4"/><text x="21.6890%" y="687.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="21.4390%" y="661" width="0.0485%" height="15" fill="rgb(236,85,44)" fg:x="1767" fg:w="4"/><text x="21.6890%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="21.4390%" y="645" width="0.0485%" height="15" fill="rgb(215,98,4)" fg:x="1767" fg:w="4"/><text x="21.6890%" y="655.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="21.4390%" y="629" width="0.0485%" height="15" fill="rgb(235,38,11)" fg:x="1767" fg:w="4"/><text x="21.6890%" y="639.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (24 samples, 0.29%)</title><rect x="21.2084%" y="917" width="0.2912%" height="15" fill="rgb(254,186,25)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24 samples, 0.29%)</title><rect x="21.2084%" y="901" width="0.2912%" height="15" fill="rgb(225,55,31)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.29%)</title><rect x="21.2084%" y="885" width="0.2912%" height="15" fill="rgb(211,15,21)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 0.29%)</title><rect x="21.2084%" y="869" width="0.2912%" height="15" fill="rgb(215,187,41)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="879.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.29%)</title><rect x="21.2084%" y="853" width="0.2912%" height="15" fill="rgb(248,69,32)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (24 samples, 0.29%)</title><rect x="21.2084%" y="837" width="0.2912%" height="15" fill="rgb(252,102,52)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="847.50"></text></g><g><title>alloc::alloc::Global::grow_impl (24 samples, 0.29%)</title><rect x="21.2084%" y="821" width="0.2912%" height="15" fill="rgb(253,140,32)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="831.50"></text></g><g><title>alloc::alloc::realloc (24 samples, 0.29%)</title><rect x="21.2084%" y="805" width="0.2912%" height="15" fill="rgb(216,56,42)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="815.50"></text></g><g><title>__GI___libc_realloc (24 samples, 0.29%)</title><rect x="21.2084%" y="789" width="0.2912%" height="15" fill="rgb(216,184,14)" fg:x="1748" fg:w="24"/><text x="21.4584%" y="799.50"></text></g><g><title>musable (1 samples, 0.01%)</title><rect x="21.4875%" y="773" width="0.0121%" height="15" fill="rgb(237,187,27)" fg:x="1771" fg:w="1"/><text x="21.7375%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.01%)</title><rect x="21.4996%" y="901" width="0.0121%" height="15" fill="rgb(219,65,3)" fg:x="1772" fg:w="1"/><text x="21.7496%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="21.4996%" y="885" width="0.0121%" height="15" fill="rgb(245,83,25)" fg:x="1772" fg:w="1"/><text x="21.7496%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="21.5239%" y="757" width="0.0121%" height="15" fill="rgb(214,205,45)" fg:x="1774" fg:w="1"/><text x="21.7739%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="21.5239%" y="773" width="0.0243%" height="15" fill="rgb(241,20,18)" fg:x="1774" fg:w="2"/><text x="21.7739%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="21.5360%" y="757" width="0.0121%" height="15" fill="rgb(232,163,23)" fg:x="1775" fg:w="1"/><text x="21.7860%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="21.5118%" y="821" width="0.0607%" height="15" fill="rgb(214,5,46)" fg:x="1773" fg:w="5"/><text x="21.7618%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="21.5118%" y="805" width="0.0607%" height="15" fill="rgb(229,78,17)" fg:x="1773" fg:w="5"/><text x="21.7618%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="21.5118%" y="789" width="0.0607%" height="15" fill="rgb(248,89,10)" fg:x="1773" fg:w="5"/><text x="21.7618%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="21.5482%" y="773" width="0.0243%" height="15" fill="rgb(248,54,15)" fg:x="1776" fg:w="2"/><text x="21.7982%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="21.5482%" y="757" width="0.0243%" height="15" fill="rgb(223,116,6)" fg:x="1776" fg:w="2"/><text x="21.7982%" y="767.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="21.5724%" y="821" width="0.0121%" height="15" fill="rgb(205,125,38)" fg:x="1778" fg:w="1"/><text x="21.8224%" y="831.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (9 samples, 0.11%)</title><rect x="21.4996%" y="917" width="0.1092%" height="15" fill="rgb(251,78,38)" fg:x="1772" fg:w="9"/><text x="21.7496%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (8 samples, 0.10%)</title><rect x="21.5118%" y="901" width="0.0971%" height="15" fill="rgb(253,78,28)" fg:x="1773" fg:w="8"/><text x="21.7618%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.10%)</title><rect x="21.5118%" y="885" width="0.0971%" height="15" fill="rgb(209,120,3)" fg:x="1773" fg:w="8"/><text x="21.7618%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.10%)</title><rect x="21.5118%" y="869" width="0.0971%" height="15" fill="rgb(238,229,9)" fg:x="1773" fg:w="8"/><text x="21.7618%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.10%)</title><rect x="21.5118%" y="853" width="0.0971%" height="15" fill="rgb(253,159,18)" fg:x="1773" fg:w="8"/><text x="21.7618%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.10%)</title><rect x="21.5118%" y="837" width="0.0971%" height="15" fill="rgb(244,42,34)" fg:x="1773" fg:w="8"/><text x="21.7618%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="21.5846%" y="821" width="0.0243%" height="15" fill="rgb(224,8,7)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="21.5846%" y="805" width="0.0243%" height="15" fill="rgb(210,201,45)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="21.5846%" y="789" width="0.0243%" height="15" fill="rgb(252,185,21)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="21.5846%" y="773" width="0.0243%" height="15" fill="rgb(223,131,1)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="21.5846%" y="757" width="0.0243%" height="15" fill="rgb(245,141,16)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="21.5846%" y="741" width="0.0243%" height="15" fill="rgb(229,55,45)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="21.5846%" y="725" width="0.0243%" height="15" fill="rgb(208,92,15)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="21.5846%" y="709" width="0.0243%" height="15" fill="rgb(234,185,47)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="21.5846%" y="693" width="0.0243%" height="15" fill="rgb(253,104,50)" fg:x="1779" fg:w="2"/><text x="21.8346%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="21.5967%" y="677" width="0.0121%" height="15" fill="rgb(205,70,7)" fg:x="1780" fg:w="1"/><text x="21.8467%" y="687.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (2 samples, 0.02%)</title><rect x="21.6088%" y="901" width="0.0243%" height="15" fill="rgb(240,178,43)" fg:x="1781" fg:w="2"/><text x="21.8588%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="21.6088%" y="885" width="0.0243%" height="15" fill="rgb(214,112,2)" fg:x="1781" fg:w="2"/><text x="21.8588%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="21.6210%" y="869" width="0.0121%" height="15" fill="rgb(206,46,17)" fg:x="1782" fg:w="1"/><text x="21.8710%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="21.6210%" y="853" width="0.0121%" height="15" fill="rgb(225,220,16)" fg:x="1782" fg:w="1"/><text x="21.8710%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="21.6210%" y="837" width="0.0121%" height="15" fill="rgb(238,65,40)" fg:x="1782" fg:w="1"/><text x="21.8710%" y="847.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="21.6210%" y="821" width="0.0121%" height="15" fill="rgb(230,151,21)" fg:x="1782" fg:w="1"/><text x="21.8710%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="21.6452%" y="677" width="0.0243%" height="15" fill="rgb(218,58,49)" fg:x="1784" fg:w="2"/><text x="21.8952%" y="687.50"></text></g><g><title>revm::journaled_state::JournaledState::touch (6 samples, 0.07%)</title><rect x="21.6088%" y="917" width="0.0728%" height="15" fill="rgb(219,179,14)" fg:x="1781" fg:w="6"/><text x="21.8588%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 0.05%)</title><rect x="21.6331%" y="901" width="0.0485%" height="15" fill="rgb(223,72,1)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 0.05%)</title><rect x="21.6331%" y="885" width="0.0485%" height="15" fill="rgb(238,126,10)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 0.05%)</title><rect x="21.6331%" y="869" width="0.0485%" height="15" fill="rgb(224,206,38)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.05%)</title><rect x="21.6331%" y="853" width="0.0485%" height="15" fill="rgb(212,201,54)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.05%)</title><rect x="21.6331%" y="837" width="0.0485%" height="15" fill="rgb(218,154,48)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="21.6331%" y="821" width="0.0485%" height="15" fill="rgb(232,93,24)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="21.6331%" y="805" width="0.0485%" height="15" fill="rgb(245,30,21)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="21.6331%" y="789" width="0.0485%" height="15" fill="rgb(242,148,29)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="21.6331%" y="773" width="0.0485%" height="15" fill="rgb(244,153,54)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="21.6331%" y="757" width="0.0485%" height="15" fill="rgb(252,87,22)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.05%)</title><rect x="21.6331%" y="741" width="0.0485%" height="15" fill="rgb(210,51,29)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="21.6331%" y="725" width="0.0485%" height="15" fill="rgb(242,136,47)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="21.6331%" y="709" width="0.0485%" height="15" fill="rgb(238,68,4)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="21.6331%" y="693" width="0.0485%" height="15" fill="rgb(242,161,30)" fg:x="1783" fg:w="4"/><text x="21.8831%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="21.6695%" y="677" width="0.0121%" height="15" fill="rgb(218,58,44)" fg:x="1786" fg:w="1"/><text x="21.9195%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="21.6816%" y="821" width="0.0243%" height="15" fill="rgb(252,125,32)" fg:x="1787" fg:w="2"/><text x="21.9316%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="21.6816%" y="805" width="0.0243%" height="15" fill="rgb(219,178,0)" fg:x="1787" fg:w="2"/><text x="21.9316%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="21.6816%" y="789" width="0.0243%" height="15" fill="rgb(213,152,7)" fg:x="1787" fg:w="2"/><text x="21.9316%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="21.6816%" y="773" width="0.0243%" height="15" fill="rgb(249,109,34)" fg:x="1787" fg:w="2"/><text x="21.9316%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="21.6816%" y="757" width="0.0243%" height="15" fill="rgb(232,96,21)" fg:x="1787" fg:w="2"/><text x="21.9316%" y="767.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="21.7059%" y="821" width="0.0121%" height="15" fill="rgb(228,27,39)" fg:x="1789" fg:w="1"/><text x="21.9559%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="21.7302%" y="661" width="0.0121%" height="15" fill="rgb(211,182,52)" fg:x="1791" fg:w="1"/><text x="21.9802%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="21.7180%" y="741" width="0.0364%" height="15" fill="rgb(234,178,38)" fg:x="1790" fg:w="3"/><text x="21.9680%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="21.7180%" y="725" width="0.0364%" height="15" fill="rgb(221,111,3)" fg:x="1790" fg:w="3"/><text x="21.9680%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.7180%" y="709" width="0.0364%" height="15" fill="rgb(228,175,21)" fg:x="1790" fg:w="3"/><text x="21.9680%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.7180%" y="693" width="0.0364%" height="15" fill="rgb(228,174,43)" fg:x="1790" fg:w="3"/><text x="21.9680%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.7180%" y="677" width="0.0364%" height="15" fill="rgb(211,191,0)" fg:x="1790" fg:w="3"/><text x="21.9680%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="21.7423%" y="661" width="0.0121%" height="15" fill="rgb(253,117,3)" fg:x="1792" fg:w="1"/><text x="21.9923%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="21.7666%" y="677" width="0.0121%" height="15" fill="rgb(241,127,19)" fg:x="1794" fg:w="1"/><text x="22.0166%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="21.7666%" y="661" width="0.0121%" height="15" fill="rgb(218,103,12)" fg:x="1794" fg:w="1"/><text x="22.0166%" y="671.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (9 samples, 0.11%)</title><rect x="21.6816%" y="901" width="0.1092%" height="15" fill="rgb(236,214,43)" fg:x="1787" fg:w="9"/><text x="21.9316%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.11%)</title><rect x="21.6816%" y="885" width="0.1092%" height="15" fill="rgb(244,144,19)" fg:x="1787" fg:w="9"/><text x="21.9316%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.11%)</title><rect x="21.6816%" y="869" width="0.1092%" height="15" fill="rgb(246,188,10)" fg:x="1787" fg:w="9"/><text x="21.9316%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.11%)</title><rect x="21.6816%" y="853" width="0.1092%" height="15" fill="rgb(212,193,33)" fg:x="1787" fg:w="9"/><text x="21.9316%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.11%)</title><rect x="21.6816%" y="837" width="0.1092%" height="15" fill="rgb(241,51,29)" fg:x="1787" fg:w="9"/><text x="21.9316%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.07%)</title><rect x="21.7180%" y="821" width="0.0728%" height="15" fill="rgb(211,58,19)" fg:x="1790" fg:w="6"/><text x="21.9680%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="21.7180%" y="805" width="0.0728%" height="15" fill="rgb(229,111,26)" fg:x="1790" fg:w="6"/><text x="21.9680%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="21.7180%" y="789" width="0.0728%" height="15" fill="rgb(213,115,40)" fg:x="1790" fg:w="6"/><text x="21.9680%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.07%)</title><rect x="21.7180%" y="773" width="0.0728%" height="15" fill="rgb(209,56,44)" fg:x="1790" fg:w="6"/><text x="21.9680%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.07%)</title><rect x="21.7180%" y="757" width="0.0728%" height="15" fill="rgb(230,108,32)" fg:x="1790" fg:w="6"/><text x="21.9680%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="21.7544%" y="741" width="0.0364%" height="15" fill="rgb(216,165,31)" fg:x="1793" fg:w="3"/><text x="22.0044%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.7544%" y="725" width="0.0364%" height="15" fill="rgb(218,122,21)" fg:x="1793" fg:w="3"/><text x="22.0044%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.7544%" y="709" width="0.0364%" height="15" fill="rgb(223,224,47)" fg:x="1793" fg:w="3"/><text x="22.0044%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.7544%" y="693" width="0.0364%" height="15" fill="rgb(238,102,44)" fg:x="1793" fg:w="3"/><text x="22.0044%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="21.7787%" y="677" width="0.0121%" height="15" fill="rgb(236,46,40)" fg:x="1795" fg:w="1"/><text x="22.0287%" y="687.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (2 samples, 0.02%)</title><rect x="21.7908%" y="901" width="0.0243%" height="15" fill="rgb(247,202,50)" fg:x="1796" fg:w="2"/><text x="22.0408%" y="911.50"></text></g><g><title>revm_primitives::state::Account::is_touched (2 samples, 0.02%)</title><rect x="21.7908%" y="885" width="0.0243%" height="15" fill="rgb(209,99,20)" fg:x="1796" fg:w="2"/><text x="22.0408%" y="895.50"></text></g><g><title>revm_primitives::state::_::&lt;impl revm_primitives::state::AccountStatus&gt;::contains (2 samples, 0.02%)</title><rect x="21.7908%" y="869" width="0.0243%" height="15" fill="rgb(252,27,34)" fg:x="1796" fg:w="2"/><text x="22.0408%" y="879.50"></text></g><g><title>revm_primitives::state::_::InternalBitFlags::contains (2 samples, 0.02%)</title><rect x="21.7908%" y="853" width="0.0243%" height="15" fill="rgb(215,206,23)" fg:x="1796" fg:w="2"/><text x="22.0408%" y="863.50"></text></g><g><title>revm_primitives::state::_::InternalBitFlags::bits (2 samples, 0.02%)</title><rect x="21.7908%" y="837" width="0.0243%" height="15" fill="rgb(212,135,36)" fg:x="1796" fg:w="2"/><text x="22.0408%" y="847.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_add (1 samples, 0.01%)</title><rect x="21.8151%" y="901" width="0.0121%" height="15" fill="rgb(240,189,1)" fg:x="1798" fg:w="1"/><text x="22.0651%" y="911.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_add (1 samples, 0.01%)</title><rect x="21.8151%" y="885" width="0.0121%" height="15" fill="rgb(242,56,20)" fg:x="1798" fg:w="1"/><text x="22.0651%" y="895.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_sub (1 samples, 0.01%)</title><rect x="21.8272%" y="901" width="0.0121%" height="15" fill="rgb(247,132,33)" fg:x="1799" fg:w="1"/><text x="22.0772%" y="911.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.01%)</title><rect x="21.8272%" y="885" width="0.0121%" height="15" fill="rgb(208,149,11)" fg:x="1799" fg:w="1"/><text x="22.0772%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="21.8515%" y="709" width="0.0485%" height="15" fill="rgb(211,33,11)" fg:x="1801" fg:w="4"/><text x="22.1015%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="21.8515%" y="693" width="0.0485%" height="15" fill="rgb(221,29,38)" fg:x="1801" fg:w="4"/><text x="22.1015%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="21.8515%" y="677" width="0.0485%" height="15" fill="rgb(206,182,49)" fg:x="1801" fg:w="4"/><text x="22.1015%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="21.8879%" y="661" width="0.0121%" height="15" fill="rgb(216,140,1)" fg:x="1804" fg:w="1"/><text x="22.1379%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5 samples, 0.06%)</title><rect x="21.8515%" y="741" width="0.0607%" height="15" fill="rgb(232,57,40)" fg:x="1801" fg:w="5"/><text x="22.1015%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.06%)</title><rect x="21.8515%" y="725" width="0.0607%" height="15" fill="rgb(224,186,18)" fg:x="1801" fg:w="5"/><text x="22.1015%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="21.9000%" y="709" width="0.0121%" height="15" fill="rgb(215,121,11)" fg:x="1805" fg:w="1"/><text x="22.1500%" y="719.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (78 samples, 0.95%)</title><rect x="21.0022%" y="981" width="0.9464%" height="15" fill="rgb(245,147,10)" fg:x="1731" fg:w="78"/><text x="21.2522%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (72 samples, 0.87%)</title><rect x="21.0750%" y="965" width="0.8736%" height="15" fill="rgb(238,153,13)" fg:x="1737" fg:w="72"/><text x="21.3250%" y="975.50"></text></g><g><title>revm::handler::mainnet::execution::call (72 samples, 0.87%)</title><rect x="21.0750%" y="949" width="0.8736%" height="15" fill="rgb(233,108,0)" fg:x="1737" fg:w="72"/><text x="21.3250%" y="959.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (71 samples, 0.86%)</title><rect x="21.0871%" y="933" width="0.8614%" height="15" fill="rgb(212,157,17)" fg:x="1738" fg:w="71"/><text x="21.3371%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::transfer (22 samples, 0.27%)</title><rect x="21.6816%" y="917" width="0.2669%" height="15" fill="rgb(225,213,38)" fg:x="1787" fg:w="22"/><text x="21.9316%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (9 samples, 0.11%)</title><rect x="21.8394%" y="901" width="0.1092%" height="15" fill="rgb(248,16,11)" fg:x="1800" fg:w="9"/><text x="22.0894%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (9 samples, 0.11%)</title><rect x="21.8394%" y="885" width="0.1092%" height="15" fill="rgb(241,33,4)" fg:x="1800" fg:w="9"/><text x="22.0894%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (9 samples, 0.11%)</title><rect x="21.8394%" y="869" width="0.1092%" height="15" fill="rgb(222,26,43)" fg:x="1800" fg:w="9"/><text x="22.0894%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.10%)</title><rect x="21.8515%" y="853" width="0.0971%" height="15" fill="rgb(243,29,36)" fg:x="1801" fg:w="8"/><text x="22.1015%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.10%)</title><rect x="21.8515%" y="837" width="0.0971%" height="15" fill="rgb(241,9,27)" fg:x="1801" fg:w="8"/><text x="22.1015%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.10%)</title><rect x="21.8515%" y="821" width="0.0971%" height="15" fill="rgb(205,117,26)" fg:x="1801" fg:w="8"/><text x="22.1015%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="21.8515%" y="805" width="0.0971%" height="15" fill="rgb(209,80,39)" fg:x="1801" fg:w="8"/><text x="22.1015%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="21.8515%" y="789" width="0.0971%" height="15" fill="rgb(239,155,6)" fg:x="1801" fg:w="8"/><text x="22.1015%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.10%)</title><rect x="21.8515%" y="773" width="0.0971%" height="15" fill="rgb(212,104,12)" fg:x="1801" fg:w="8"/><text x="22.1015%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.10%)</title><rect x="21.8515%" y="757" width="0.0971%" height="15" fill="rgb(234,204,3)" fg:x="1801" fg:w="8"/><text x="22.1015%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="21.9122%" y="741" width="0.0364%" height="15" fill="rgb(251,218,7)" fg:x="1806" fg:w="3"/><text x="22.1622%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.9122%" y="725" width="0.0364%" height="15" fill="rgb(221,81,32)" fg:x="1806" fg:w="3"/><text x="22.1622%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.9122%" y="709" width="0.0364%" height="15" fill="rgb(214,152,26)" fg:x="1806" fg:w="3"/><text x="22.1622%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.9122%" y="693" width="0.0364%" height="15" fill="rgb(223,22,3)" fg:x="1806" fg:w="3"/><text x="22.1622%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="21.9364%" y="677" width="0.0121%" height="15" fill="rgb(207,174,7)" fg:x="1808" fg:w="1"/><text x="22.1864%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="21.9850%" y="901" width="0.0121%" height="15" fill="rgb(224,19,52)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;]&gt; (1 samples, 0.01%)</title><rect x="21.9850%" y="885" width="0.0121%" height="15" fill="rgb(228,24,14)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt; (1 samples, 0.01%)</title><rect x="21.9850%" y="869" width="0.0121%" height="15" fill="rgb(230,153,43)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::journaled_state::JournalEntry&gt;&gt; (1 samples, 0.01%)</title><rect x="21.9850%" y="853" width="0.0121%" height="15" fill="rgb(231,106,12)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="21.9850%" y="837" width="0.0121%" height="15" fill="rgb(215,92,2)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="21.9850%" y="821" width="0.0121%" height="15" fill="rgb(249,143,25)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="21.9850%" y="805" width="0.0121%" height="15" fill="rgb(252,7,35)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="815.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="21.9850%" y="789" width="0.0121%" height="15" fill="rgb(216,69,40)" fg:x="1812" fg:w="1"/><text x="22.2350%" y="799.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::output (6 samples, 0.07%)</title><rect x="21.9486%" y="981" width="0.0728%" height="15" fill="rgb(240,36,33)" fg:x="1809" fg:w="6"/><text x="22.1986%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.06%)</title><rect x="21.9607%" y="965" width="0.0607%" height="15" fill="rgb(231,128,14)" fg:x="1810" fg:w="5"/><text x="22.2107%" y="975.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (5 samples, 0.06%)</title><rect x="21.9607%" y="949" width="0.0607%" height="15" fill="rgb(245,143,14)" fg:x="1810" fg:w="5"/><text x="22.2107%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::finalize (3 samples, 0.04%)</title><rect x="21.9850%" y="933" width="0.0364%" height="15" fill="rgb(222,130,28)" fg:x="1812" fg:w="3"/><text x="22.2350%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="21.9850%" y="917" width="0.0364%" height="15" fill="rgb(212,10,48)" fg:x="1812" fg:w="3"/><text x="22.2350%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="21.9971%" y="901" width="0.0243%" height="15" fill="rgb(254,118,45)" fg:x="1813" fg:w="2"/><text x="22.2471%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="21.9971%" y="885" width="0.0243%" height="15" fill="rgb(228,6,45)" fg:x="1813" fg:w="2"/><text x="22.2471%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="21.9971%" y="869" width="0.0243%" height="15" fill="rgb(241,18,35)" fg:x="1813" fg:w="2"/><text x="22.2471%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="21.9971%" y="853" width="0.0243%" height="15" fill="rgb(227,214,53)" fg:x="1813" fg:w="2"/><text x="22.2471%" y="863.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="21.9971%" y="837" width="0.0243%" height="15" fill="rgb(224,107,51)" fg:x="1813" fg:w="2"/><text x="22.2471%" y="847.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="22.0092%" y="821" width="0.0121%" height="15" fill="rgb(248,60,28)" fg:x="1814" fg:w="1"/><text x="22.2592%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="22.0214%" y="933" width="0.0121%" height="15" fill="rgb(249,101,23)" fg:x="1815" fg:w="1"/><text x="22.2714%" y="943.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="22.0456%" y="805" width="0.0121%" height="15" fill="rgb(228,51,19)" fg:x="1817" fg:w="1"/><text x="22.2956%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="22.0456%" y="789" width="0.0121%" height="15" fill="rgb(213,20,6)" fg:x="1817" fg:w="1"/><text x="22.2956%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.0456%" y="853" width="0.0243%" height="15" fill="rgb(212,124,10)" fg:x="1817" fg:w="2"/><text x="22.2956%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.0456%" y="837" width="0.0243%" height="15" fill="rgb(248,3,40)" fg:x="1817" fg:w="2"/><text x="22.2956%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.0456%" y="821" width="0.0243%" height="15" fill="rgb(223,178,23)" fg:x="1817" fg:w="2"/><text x="22.2956%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="22.0578%" y="805" width="0.0121%" height="15" fill="rgb(240,132,45)" fg:x="1818" fg:w="1"/><text x="22.3078%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="22.0578%" y="789" width="0.0121%" height="15" fill="rgb(245,164,36)" fg:x="1818" fg:w="1"/><text x="22.3078%" y="799.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="22.0699%" y="853" width="0.0121%" height="15" fill="rgb(231,188,53)" fg:x="1819" fg:w="1"/><text x="22.3199%" y="863.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="22.0820%" y="773" width="0.0364%" height="15" fill="rgb(237,198,39)" fg:x="1820" fg:w="3"/><text x="22.3320%" y="783.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="22.0820%" y="757" width="0.0364%" height="15" fill="rgb(223,120,35)" fg:x="1820" fg:w="3"/><text x="22.3320%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="22.0820%" y="741" width="0.0364%" height="15" fill="rgb(253,107,49)" fg:x="1820" fg:w="3"/><text x="22.3320%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="22.0820%" y="725" width="0.0364%" height="15" fill="rgb(216,44,31)" fg:x="1820" fg:w="3"/><text x="22.3320%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="22.0820%" y="709" width="0.0364%" height="15" fill="rgb(253,87,21)" fg:x="1820" fg:w="3"/><text x="22.3320%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="22.0942%" y="693" width="0.0243%" height="15" fill="rgb(226,18,2)" fg:x="1821" fg:w="2"/><text x="22.3442%" y="703.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (8 samples, 0.10%)</title><rect x="22.0335%" y="933" width="0.0971%" height="15" fill="rgb(216,8,46)" fg:x="1816" fg:w="8"/><text x="22.2835%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7 samples, 0.08%)</title><rect x="22.0456%" y="917" width="0.0849%" height="15" fill="rgb(226,140,39)" fg:x="1817" fg:w="7"/><text x="22.2956%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.08%)</title><rect x="22.0456%" y="901" width="0.0849%" height="15" fill="rgb(221,194,54)" fg:x="1817" fg:w="7"/><text x="22.2956%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.08%)</title><rect x="22.0456%" y="885" width="0.0849%" height="15" fill="rgb(213,92,11)" fg:x="1817" fg:w="7"/><text x="22.2956%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.08%)</title><rect x="22.0456%" y="869" width="0.0849%" height="15" fill="rgb(229,162,46)" fg:x="1817" fg:w="7"/><text x="22.2956%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.05%)</title><rect x="22.0820%" y="853" width="0.0485%" height="15" fill="rgb(214,111,36)" fg:x="1820" fg:w="4"/><text x="22.3320%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="22.0820%" y="837" width="0.0485%" height="15" fill="rgb(207,6,21)" fg:x="1820" fg:w="4"/><text x="22.3320%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="22.0820%" y="821" width="0.0485%" height="15" fill="rgb(213,127,38)" fg:x="1820" fg:w="4"/><text x="22.3320%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.05%)</title><rect x="22.0820%" y="805" width="0.0485%" height="15" fill="rgb(238,118,32)" fg:x="1820" fg:w="4"/><text x="22.3320%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.05%)</title><rect x="22.0820%" y="789" width="0.0485%" height="15" fill="rgb(240,139,39)" fg:x="1820" fg:w="4"/><text x="22.3320%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="22.1184%" y="773" width="0.0121%" height="15" fill="rgb(235,10,37)" fg:x="1823" fg:w="1"/><text x="22.3684%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.1184%" y="757" width="0.0121%" height="15" fill="rgb(249,171,38)" fg:x="1823" fg:w="1"/><text x="22.3684%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.1184%" y="741" width="0.0121%" height="15" fill="rgb(242,144,32)" fg:x="1823" fg:w="1"/><text x="22.3684%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.1184%" y="725" width="0.0121%" height="15" fill="rgb(217,117,21)" fg:x="1823" fg:w="1"/><text x="22.3684%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="22.1184%" y="709" width="0.0121%" height="15" fill="rgb(249,87,1)" fg:x="1823" fg:w="1"/><text x="22.3684%" y="719.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reimburse_caller (11 samples, 0.13%)</title><rect x="22.0214%" y="981" width="0.1335%" height="15" fill="rgb(248,196,48)" fg:x="1815" fg:w="11"/><text x="22.2714%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (11 samples, 0.13%)</title><rect x="22.0214%" y="965" width="0.1335%" height="15" fill="rgb(251,206,33)" fg:x="1815" fg:w="11"/><text x="22.2714%" y="975.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (11 samples, 0.13%)</title><rect x="22.0214%" y="949" width="0.1335%" height="15" fill="rgb(232,141,28)" fg:x="1815" fg:w="11"/><text x="22.2714%" y="959.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_add (2 samples, 0.02%)</title><rect x="22.1306%" y="933" width="0.0243%" height="15" fill="rgb(209,167,14)" fg:x="1824" fg:w="2"/><text x="22.3806%" y="943.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_add (2 samples, 0.02%)</title><rect x="22.1306%" y="917" width="0.0243%" height="15" fill="rgb(225,11,50)" fg:x="1824" fg:w="2"/><text x="22.3806%" y="927.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="22.1791%" y="933" width="0.0121%" height="15" fill="rgb(209,50,20)" fg:x="1828" fg:w="1"/><text x="22.4291%" y="943.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="22.2033%" y="693" width="0.0121%" height="15" fill="rgb(212,17,46)" fg:x="1830" fg:w="1"/><text x="22.4533%" y="703.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="22.2033%" y="773" width="0.0243%" height="15" fill="rgb(216,101,39)" fg:x="1830" fg:w="2"/><text x="22.4533%" y="783.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="22.2033%" y="757" width="0.0243%" height="15" fill="rgb(212,228,48)" fg:x="1830" fg:w="2"/><text x="22.4533%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="22.2033%" y="741" width="0.0243%" height="15" fill="rgb(250,6,50)" fg:x="1830" fg:w="2"/><text x="22.4533%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="22.2033%" y="725" width="0.0243%" height="15" fill="rgb(250,160,48)" fg:x="1830" fg:w="2"/><text x="22.4533%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="22.2033%" y="709" width="0.0243%" height="15" fill="rgb(244,216,33)" fg:x="1830" fg:w="2"/><text x="22.4533%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="22.2155%" y="693" width="0.0121%" height="15" fill="rgb(207,157,5)" fg:x="1831" fg:w="1"/><text x="22.4655%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="22.2033%" y="885" width="0.0364%" height="15" fill="rgb(228,199,8)" fg:x="1830" fg:w="3"/><text x="22.4533%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="22.2033%" y="869" width="0.0364%" height="15" fill="rgb(227,80,20)" fg:x="1830" fg:w="3"/><text x="22.4533%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="22.2033%" y="853" width="0.0364%" height="15" fill="rgb(222,9,33)" fg:x="1830" fg:w="3"/><text x="22.4533%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="22.2033%" y="837" width="0.0364%" height="15" fill="rgb(239,44,28)" fg:x="1830" fg:w="3"/><text x="22.4533%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="22.2033%" y="821" width="0.0364%" height="15" fill="rgb(249,187,43)" fg:x="1830" fg:w="3"/><text x="22.4533%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="22.2033%" y="805" width="0.0364%" height="15" fill="rgb(216,141,28)" fg:x="1830" fg:w="3"/><text x="22.4533%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="22.2033%" y="789" width="0.0364%" height="15" fill="rgb(230,154,53)" fg:x="1830" fg:w="3"/><text x="22.4533%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="22.2276%" y="773" width="0.0121%" height="15" fill="rgb(227,82,4)" fg:x="1832" fg:w="1"/><text x="22.4776%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.2276%" y="757" width="0.0121%" height="15" fill="rgb(220,107,16)" fg:x="1832" fg:w="1"/><text x="22.4776%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.2276%" y="741" width="0.0121%" height="15" fill="rgb(207,187,2)" fg:x="1832" fg:w="1"/><text x="22.4776%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.2276%" y="725" width="0.0121%" height="15" fill="rgb(210,162,52)" fg:x="1832" fg:w="1"/><text x="22.4776%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="22.2276%" y="709" width="0.0121%" height="15" fill="rgb(217,216,49)" fg:x="1832" fg:w="1"/><text x="22.4776%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="22.2397%" y="853" width="0.0121%" height="15" fill="rgb(218,146,49)" fg:x="1833" fg:w="1"/><text x="22.4897%" y="863.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="22.2397%" y="837" width="0.0121%" height="15" fill="rgb(216,55,40)" fg:x="1833" fg:w="1"/><text x="22.4897%" y="847.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (6 samples, 0.07%)</title><rect x="22.1912%" y="933" width="0.0728%" height="15" fill="rgb(208,196,21)" fg:x="1829" fg:w="6"/><text x="22.4412%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.06%)</title><rect x="22.2033%" y="917" width="0.0607%" height="15" fill="rgb(242,117,42)" fg:x="1830" fg:w="5"/><text x="22.4533%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.06%)</title><rect x="22.2033%" y="901" width="0.0607%" height="15" fill="rgb(210,11,23)" fg:x="1830" fg:w="5"/><text x="22.4533%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="22.2397%" y="885" width="0.0243%" height="15" fill="rgb(217,110,2)" fg:x="1833" fg:w="2"/><text x="22.4897%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="22.2397%" y="869" width="0.0243%" height="15" fill="rgb(229,77,54)" fg:x="1833" fg:w="2"/><text x="22.4897%" y="879.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="22.2519%" y="853" width="0.0121%" height="15" fill="rgb(218,53,16)" fg:x="1834" fg:w="1"/><text x="22.5019%" y="863.50"></text></g><g><title>revm_primitives::state::Account::mark_touch (1 samples, 0.01%)</title><rect x="22.2640%" y="933" width="0.0121%" height="15" fill="rgb(215,38,13)" fg:x="1835" fg:w="1"/><text x="22.5140%" y="943.50"></text></g><g><title>revm_primitives::state::_::&lt;impl core::ops::bit::BitOrAssign for revm_primitives::state::AccountStatus&gt;::bitor_assign (1 samples, 0.01%)</title><rect x="22.2640%" y="917" width="0.0121%" height="15" fill="rgb(235,42,18)" fg:x="1835" fg:w="1"/><text x="22.5140%" y="927.50"></text></g><g><title>revm_primitives::state::_::&lt;impl revm_primitives::state::AccountStatus&gt;::insert (1 samples, 0.01%)</title><rect x="22.2640%" y="901" width="0.0121%" height="15" fill="rgb(219,66,54)" fg:x="1835" fg:w="1"/><text x="22.5140%" y="911.50"></text></g><g><title>revm_primitives::state::_::InternalBitFlags::insert (1 samples, 0.01%)</title><rect x="22.2640%" y="885" width="0.0121%" height="15" fill="rgb(222,205,4)" fg:x="1835" fg:w="1"/><text x="22.5140%" y="895.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_sub (1 samples, 0.01%)</title><rect x="22.2761%" y="933" width="0.0121%" height="15" fill="rgb(227,213,46)" fg:x="1836" fg:w="1"/><text x="22.5261%" y="943.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.01%)</title><rect x="22.2761%" y="917" width="0.0121%" height="15" fill="rgb(250,145,42)" fg:x="1836" fg:w="1"/><text x="22.5261%" y="927.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reward_beneficiary (12 samples, 0.15%)</title><rect x="22.1548%" y="981" width="0.1456%" height="15" fill="rgb(219,15,2)" fg:x="1826" fg:w="12"/><text x="22.4048%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (12 samples, 0.15%)</title><rect x="22.1548%" y="965" width="0.1456%" height="15" fill="rgb(231,181,52)" fg:x="1826" fg:w="12"/><text x="22.4048%" y="975.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (12 samples, 0.15%)</title><rect x="22.1548%" y="949" width="0.1456%" height="15" fill="rgb(235,1,42)" fg:x="1826" fg:w="12"/><text x="22.4048%" y="959.50"></text></g><g><title>ruint::mul::&lt;impl core::ops::arith::Mul for ruint::Uint&lt;_,_&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="22.2883%" y="933" width="0.0121%" height="15" fill="rgb(249,88,27)" fg:x="1837" fg:w="1"/><text x="22.5383%" y="943.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_mul (1 samples, 0.01%)</title><rect x="22.2883%" y="917" width="0.0121%" height="15" fill="rgb(235,145,16)" fg:x="1837" fg:w="1"/><text x="22.5383%" y="927.50"></text></g><g><title>ruint::algorithms::mul::addmul_n (1 samples, 0.01%)</title><rect x="22.2883%" y="901" width="0.0121%" height="15" fill="rgb(237,114,19)" fg:x="1837" fg:w="1"/><text x="22.5383%" y="911.50"></text></g><g><title>ruint::algorithms::mul::addmul_4 (1 samples, 0.01%)</title><rect x="22.2883%" y="885" width="0.0121%" height="15" fill="rgb(238,51,50)" fg:x="1837" fg:w="1"/><text x="22.5383%" y="895.50"></text></g><g><title>ruint::algorithms::mul::mac (1 samples, 0.01%)</title><rect x="22.2883%" y="869" width="0.0121%" height="15" fill="rgb(205,194,25)" fg:x="1837" fg:w="1"/><text x="22.5383%" y="879.50"></text></g><g><title>&lt;u128 as ruint::algorithms::DoubleWord&lt;u64&gt;&gt;::muladd2 (1 samples, 0.01%)</title><rect x="22.2883%" y="853" width="0.0121%" height="15" fill="rgb(215,203,17)" fg:x="1837" fg:w="1"/><text x="22.5383%" y="863.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller_inner (5 samples, 0.06%)</title><rect x="22.3004%" y="933" width="0.0607%" height="15" fill="rgb(233,112,49)" fg:x="1838" fg:w="5"/><text x="22.5504%" y="943.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (5 samples, 0.06%)</title><rect x="22.3004%" y="917" width="0.0607%" height="15" fill="rgb(241,130,26)" fg:x="1838" fg:w="5"/><text x="22.5504%" y="927.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (4 samples, 0.05%)</title><rect x="22.3125%" y="901" width="0.0485%" height="15" fill="rgb(252,223,19)" fg:x="1839" fg:w="4"/><text x="22.5625%" y="911.50"></text></g><g><title>ruint::algorithms::mul::addmul (4 samples, 0.05%)</title><rect x="22.3125%" y="885" width="0.0485%" height="15" fill="rgb(211,95,25)" fg:x="1839" fg:w="4"/><text x="22.5625%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="22.3611%" y="805" width="0.0121%" height="15" fill="rgb(251,182,27)" fg:x="1843" fg:w="1"/><text x="22.6111%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="22.3611%" y="789" width="0.0121%" height="15" fill="rgb(238,24,4)" fg:x="1843" fg:w="1"/><text x="22.6111%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.3611%" y="853" width="0.0243%" height="15" fill="rgb(224,220,25)" fg:x="1843" fg:w="2"/><text x="22.6111%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.3611%" y="837" width="0.0243%" height="15" fill="rgb(239,133,26)" fg:x="1843" fg:w="2"/><text x="22.6111%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.3611%" y="821" width="0.0243%" height="15" fill="rgb(211,94,48)" fg:x="1843" fg:w="2"/><text x="22.6111%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="22.3732%" y="805" width="0.0121%" height="15" fill="rgb(239,87,6)" fg:x="1844" fg:w="1"/><text x="22.6232%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="22.3732%" y="789" width="0.0121%" height="15" fill="rgb(227,62,0)" fg:x="1844" fg:w="1"/><text x="22.6232%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="22.3975%" y="709" width="0.0121%" height="15" fill="rgb(211,226,4)" fg:x="1846" fg:w="1"/><text x="22.6475%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="22.3975%" y="693" width="0.0121%" height="15" fill="rgb(253,38,52)" fg:x="1846" fg:w="1"/><text x="22.6475%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="22.3611%" y="885" width="0.0607%" height="15" fill="rgb(229,126,40)" fg:x="1843" fg:w="5"/><text x="22.6111%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.06%)</title><rect x="22.3611%" y="869" width="0.0607%" height="15" fill="rgb(229,165,44)" fg:x="1843" fg:w="5"/><text x="22.6111%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="22.3853%" y="853" width="0.0364%" height="15" fill="rgb(247,95,47)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="22.3853%" y="837" width="0.0364%" height="15" fill="rgb(216,140,30)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="22.3853%" y="821" width="0.0364%" height="15" fill="rgb(246,214,8)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="22.3853%" y="805" width="0.0364%" height="15" fill="rgb(227,224,15)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="22.3853%" y="789" width="0.0364%" height="15" fill="rgb(233,175,4)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.04%)</title><rect x="22.3853%" y="773" width="0.0364%" height="15" fill="rgb(221,66,45)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="22.3853%" y="757" width="0.0364%" height="15" fill="rgb(221,178,18)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="22.3853%" y="741" width="0.0364%" height="15" fill="rgb(213,81,29)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="22.3853%" y="725" width="0.0364%" height="15" fill="rgb(220,89,49)" fg:x="1845" fg:w="3"/><text x="22.6353%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="22.4096%" y="709" width="0.0121%" height="15" fill="rgb(227,60,33)" fg:x="1847" fg:w="1"/><text x="22.6596%" y="719.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::deduct_caller (11 samples, 0.13%)</title><rect x="22.3004%" y="981" width="0.1335%" height="15" fill="rgb(205,113,12)" fg:x="1838" fg:w="11"/><text x="22.5504%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (11 samples, 0.13%)</title><rect x="22.3004%" y="965" width="0.1335%" height="15" fill="rgb(211,32,1)" fg:x="1838" fg:w="11"/><text x="22.5504%" y="975.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (11 samples, 0.13%)</title><rect x="22.3004%" y="949" width="0.1335%" height="15" fill="rgb(246,2,12)" fg:x="1838" fg:w="11"/><text x="22.5504%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (6 samples, 0.07%)</title><rect x="22.3611%" y="933" width="0.0728%" height="15" fill="rgb(243,37,27)" fg:x="1843" fg:w="6"/><text x="22.6111%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (6 samples, 0.07%)</title><rect x="22.3611%" y="917" width="0.0728%" height="15" fill="rgb(248,211,31)" fg:x="1843" fg:w="6"/><text x="22.6111%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6 samples, 0.07%)</title><rect x="22.3611%" y="901" width="0.0728%" height="15" fill="rgb(242,146,47)" fg:x="1843" fg:w="6"/><text x="22.6111%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="22.4217%" y="885" width="0.0121%" height="15" fill="rgb(206,70,20)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="22.4217%" y="869" width="0.0121%" height="15" fill="rgb(215,10,51)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.01%)</title><rect x="22.4217%" y="853" width="0.0121%" height="15" fill="rgb(243,178,53)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1 samples, 0.01%)</title><rect x="22.4217%" y="837" width="0.0121%" height="15" fill="rgb(233,221,20)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="22.4217%" y="821" width="0.0121%" height="15" fill="rgb(218,95,35)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="22.4217%" y="805" width="0.0121%" height="15" fill="rgb(229,13,5)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="815.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="22.4217%" y="789" width="0.0121%" height="15" fill="rgb(252,164,30)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="799.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="22.4217%" y="773" width="0.0121%" height="15" fill="rgb(232,68,36)" fg:x="1848" fg:w="1"/><text x="22.6717%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="22.4339%" y="965" width="0.0121%" height="15" fill="rgb(219,59,54)" fg:x="1849" fg:w="1"/><text x="22.6839%" y="975.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="22.4339%" y="949" width="0.0121%" height="15" fill="rgb(250,92,33)" fg:x="1849" fg:w="1"/><text x="22.6839%" y="959.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="22.4339%" y="933" width="0.0121%" height="15" fill="rgb(229,162,54)" fg:x="1849" fg:w="1"/><text x="22.6839%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="22.4581%" y="869" width="0.0121%" height="15" fill="rgb(244,114,52)" fg:x="1851" fg:w="1"/><text x="22.7081%" y="879.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="22.4581%" y="853" width="0.0121%" height="15" fill="rgb(212,211,43)" fg:x="1851" fg:w="1"/><text x="22.7081%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.02%)</title><rect x="22.4824%" y="757" width="0.0243%" height="15" fill="rgb(226,147,8)" fg:x="1853" fg:w="2"/><text x="22.7324%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="22.4824%" y="741" width="0.0243%" height="15" fill="rgb(226,23,13)" fg:x="1853" fg:w="2"/><text x="22.7324%" y="751.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="22.5067%" y="533" width="0.0121%" height="15" fill="rgb(240,63,4)" fg:x="1855" fg:w="1"/><text x="22.7567%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="22.5309%" y="517" width="0.0485%" height="15" fill="rgb(221,1,32)" fg:x="1857" fg:w="4"/><text x="22.7809%" y="527.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="22.5309%" y="501" width="0.0485%" height="15" fill="rgb(242,117,10)" fg:x="1857" fg:w="4"/><text x="22.7809%" y="511.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="22.5309%" y="485" width="0.0485%" height="15" fill="rgb(249,172,44)" fg:x="1857" fg:w="4"/><text x="22.7809%" y="495.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (12 samples, 0.15%)</title><rect x="22.4824%" y="773" width="0.1456%" height="15" fill="rgb(244,46,45)" fg:x="1853" fg:w="12"/><text x="22.7324%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::park (10 samples, 0.12%)</title><rect x="22.5067%" y="757" width="0.1213%" height="15" fill="rgb(206,43,17)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (10 samples, 0.12%)</title><rect x="22.5067%" y="741" width="0.1213%" height="15" fill="rgb(239,218,39)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (10 samples, 0.12%)</title><rect x="22.5067%" y="725" width="0.1213%" height="15" fill="rgb(208,169,54)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="735.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (10 samples, 0.12%)</title><rect x="22.5067%" y="709" width="0.1213%" height="15" fill="rgb(247,25,42)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="719.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (10 samples, 0.12%)</title><rect x="22.5067%" y="693" width="0.1213%" height="15" fill="rgb(226,23,31)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="703.50"></text></g><g><title>syscall (10 samples, 0.12%)</title><rect x="22.5067%" y="677" width="0.1213%" height="15" fill="rgb(247,16,28)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 0.12%)</title><rect x="22.5067%" y="661" width="0.1213%" height="15" fill="rgb(231,147,38)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="671.50"></text></g><g><title>do_syscall_64 (10 samples, 0.12%)</title><rect x="22.5067%" y="645" width="0.1213%" height="15" fill="rgb(253,81,48)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="655.50"></text></g><g><title>__x64_sys_futex (10 samples, 0.12%)</title><rect x="22.5067%" y="629" width="0.1213%" height="15" fill="rgb(249,222,43)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="639.50"></text></g><g><title>do_futex (10 samples, 0.12%)</title><rect x="22.5067%" y="613" width="0.1213%" height="15" fill="rgb(221,3,27)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="623.50"></text></g><g><title>futex_wait (10 samples, 0.12%)</title><rect x="22.5067%" y="597" width="0.1213%" height="15" fill="rgb(228,180,5)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="607.50"></text></g><g><title>futex_wait_queue (10 samples, 0.12%)</title><rect x="22.5067%" y="581" width="0.1213%" height="15" fill="rgb(227,131,42)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="591.50"></text></g><g><title>schedule (10 samples, 0.12%)</title><rect x="22.5067%" y="565" width="0.1213%" height="15" fill="rgb(212,3,39)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="575.50"></text></g><g><title>__schedule (10 samples, 0.12%)</title><rect x="22.5067%" y="549" width="0.1213%" height="15" fill="rgb(226,45,5)" fg:x="1855" fg:w="10"/><text x="22.7567%" y="559.50"></text></g><g><title>finish_task_switch.isra.0 (9 samples, 0.11%)</title><rect x="22.5188%" y="533" width="0.1092%" height="15" fill="rgb(215,167,45)" fg:x="1856" fg:w="9"/><text x="22.7688%" y="543.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="22.5795%" y="517" width="0.0485%" height="15" fill="rgb(250,218,53)" fg:x="1861" fg:w="4"/><text x="22.8295%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5 samples, 0.06%)</title><rect x="22.6280%" y="757" width="0.0607%" height="15" fill="rgb(207,140,0)" fg:x="1865" fg:w="5"/><text x="22.8780%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.06%)</title><rect x="22.6280%" y="741" width="0.0607%" height="15" fill="rgb(238,133,51)" fg:x="1865" fg:w="5"/><text x="22.8780%" y="751.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (25 samples, 0.30%)</title><rect x="22.4703%" y="821" width="0.3033%" height="15" fill="rgb(218,203,53)" fg:x="1852" fg:w="25"/><text x="22.7203%" y="831.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (24 samples, 0.29%)</title><rect x="22.4824%" y="805" width="0.2912%" height="15" fill="rgb(226,184,25)" fg:x="1853" fg:w="24"/><text x="22.7324%" y="815.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (24 samples, 0.29%)</title><rect x="22.4824%" y="789" width="0.2912%" height="15" fill="rgb(231,121,21)" fg:x="1853" fg:w="24"/><text x="22.7324%" y="799.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (12 samples, 0.15%)</title><rect x="22.6280%" y="773" width="0.1456%" height="15" fill="rgb(251,14,34)" fg:x="1865" fg:w="12"/><text x="22.8780%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.08%)</title><rect x="22.6887%" y="757" width="0.0849%" height="15" fill="rgb(249,193,11)" fg:x="1870" fg:w="7"/><text x="22.9387%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.08%)</title><rect x="22.6887%" y="741" width="0.0849%" height="15" fill="rgb(220,172,37)" fg:x="1870" fg:w="7"/><text x="22.9387%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="22.7736%" y="821" width="0.0243%" height="15" fill="rgb(231,229,43)" fg:x="1877" fg:w="2"/><text x="23.0236%" y="831.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="22.7736%" y="805" width="0.0243%" height="15" fill="rgb(250,161,5)" fg:x="1877" fg:w="2"/><text x="23.0236%" y="815.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (2 samples, 0.02%)</title><rect x="22.7736%" y="789" width="0.0243%" height="15" fill="rgb(218,225,18)" fg:x="1877" fg:w="2"/><text x="23.0236%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="22.7736%" y="773" width="0.0243%" height="15" fill="rgb(245,45,42)" fg:x="1877" fg:w="2"/><text x="23.0236%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="22.7736%" y="757" width="0.0243%" height="15" fill="rgb(211,115,1)" fg:x="1877" fg:w="2"/><text x="23.0236%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="22.7979%" y="773" width="0.0121%" height="15" fill="rgb(248,133,52)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="22.7979%" y="757" width="0.0121%" height="15" fill="rgb(238,100,21)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="22.7979%" y="741" width="0.0121%" height="15" fill="rgb(247,144,11)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="22.7979%" y="725" width="0.0121%" height="15" fill="rgb(206,164,16)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="735.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="22.7979%" y="709" width="0.0121%" height="15" fill="rgb(222,34,3)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="719.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="22.7979%" y="693" width="0.0121%" height="15" fill="rgb(248,82,4)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.7979%" y="677" width="0.0121%" height="15" fill="rgb(228,81,46)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.7979%" y="661" width="0.0121%" height="15" fill="rgb(227,67,47)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.7979%" y="645" width="0.0121%" height="15" fill="rgb(215,93,53)" fg:x="1879" fg:w="1"/><text x="23.0479%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.8100%" y="773" width="0.0121%" height="15" fill="rgb(248,194,39)" fg:x="1880" fg:w="1"/><text x="23.0600%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.8100%" y="757" width="0.0121%" height="15" fill="rgb(215,5,19)" fg:x="1880" fg:w="1"/><text x="23.0600%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.8100%" y="741" width="0.0121%" height="15" fill="rgb(226,215,51)" fg:x="1880" fg:w="1"/><text x="23.0600%" y="751.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (3 samples, 0.04%)</title><rect x="22.7979%" y="821" width="0.0364%" height="15" fill="rgb(225,56,26)" fg:x="1879" fg:w="3"/><text x="23.0479%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="22.7979%" y="805" width="0.0364%" height="15" fill="rgb(222,75,29)" fg:x="1879" fg:w="3"/><text x="23.0479%" y="815.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="22.7979%" y="789" width="0.0364%" height="15" fill="rgb(236,139,6)" fg:x="1879" fg:w="3"/><text x="23.0479%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="22.8221%" y="773" width="0.0121%" height="15" fill="rgb(223,137,36)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="783.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="22.8221%" y="757" width="0.0121%" height="15" fill="rgb(226,99,2)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="767.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="22.8221%" y="741" width="0.0121%" height="15" fill="rgb(206,133,23)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.8221%" y="725" width="0.0121%" height="15" fill="rgb(243,173,15)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.8221%" y="709" width="0.0121%" height="15" fill="rgb(228,69,28)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="22.8221%" y="693" width="0.0121%" height="15" fill="rgb(212,51,22)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="22.8221%" y="677" width="0.0121%" height="15" fill="rgb(227,113,0)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="22.8221%" y="661" width="0.0121%" height="15" fill="rgb(252,84,27)" fg:x="1881" fg:w="1"/><text x="23.0721%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.8585%" y="773" width="0.0243%" height="15" fill="rgb(223,145,39)" fg:x="1884" fg:w="2"/><text x="23.1085%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.8585%" y="757" width="0.0243%" height="15" fill="rgb(239,219,30)" fg:x="1884" fg:w="2"/><text x="23.1085%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="22.8585%" y="741" width="0.0243%" height="15" fill="rgb(224,196,39)" fg:x="1884" fg:w="2"/><text x="23.1085%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="22.8707%" y="725" width="0.0121%" height="15" fill="rgb(205,35,43)" fg:x="1885" fg:w="1"/><text x="23.1207%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="22.8585%" y="789" width="0.0364%" height="15" fill="rgb(228,201,21)" fg:x="1884" fg:w="3"/><text x="23.1085%" y="799.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="22.8828%" y="773" width="0.0121%" height="15" fill="rgb(237,118,16)" fg:x="1886" fg:w="1"/><text x="23.1328%" y="783.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="22.8949%" y="741" width="0.0121%" height="15" fill="rgb(241,17,19)" fg:x="1887" fg:w="1"/><text x="23.1449%" y="751.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (37 samples, 0.45%)</title><rect x="22.4703%" y="869" width="0.4489%" height="15" fill="rgb(214,10,25)" fg:x="1852" fg:w="37"/><text x="22.7203%" y="879.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (37 samples, 0.45%)</title><rect x="22.4703%" y="853" width="0.4489%" height="15" fill="rgb(238,37,29)" fg:x="1852" fg:w="37"/><text x="22.7203%" y="863.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (37 samples, 0.45%)</title><rect x="22.4703%" y="837" width="0.4489%" height="15" fill="rgb(253,83,25)" fg:x="1852" fg:w="37"/><text x="22.7203%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (7 samples, 0.08%)</title><rect x="22.8343%" y="821" width="0.0849%" height="15" fill="rgb(234,192,12)" fg:x="1882" fg:w="7"/><text x="23.0843%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.08%)</title><rect x="22.8343%" y="805" width="0.0849%" height="15" fill="rgb(241,216,45)" fg:x="1882" fg:w="7"/><text x="23.0843%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.02%)</title><rect x="22.8949%" y="789" width="0.0243%" height="15" fill="rgb(242,22,33)" fg:x="1887" fg:w="2"/><text x="23.1449%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="22.8949%" y="773" width="0.0243%" height="15" fill="rgb(231,105,49)" fg:x="1887" fg:w="2"/><text x="23.1449%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="22.8949%" y="757" width="0.0243%" height="15" fill="rgb(218,204,15)" fg:x="1887" fg:w="2"/><text x="23.1449%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="22.9071%" y="741" width="0.0121%" height="15" fill="rgb(235,138,41)" fg:x="1888" fg:w="1"/><text x="23.1571%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="22.9071%" y="725" width="0.0121%" height="15" fill="rgb(246,0,9)" fg:x="1888" fg:w="1"/><text x="23.1571%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="22.9071%" y="709" width="0.0121%" height="15" fill="rgb(210,74,4)" fg:x="1888" fg:w="1"/><text x="23.1571%" y="719.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (40 samples, 0.49%)</title><rect x="22.4460%" y="917" width="0.4853%" height="15" fill="rgb(250,60,41)" fg:x="1850" fg:w="40"/><text x="22.6960%" y="927.50"></text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (40 samples, 0.49%)</title><rect x="22.4460%" y="901" width="0.4853%" height="15" fill="rgb(220,115,12)" fg:x="1850" fg:w="40"/><text x="22.6960%" y="911.50"></text></g><g><title>block_stm_revm::vm::VmDb::read (39 samples, 0.47%)</title><rect x="22.4581%" y="885" width="0.4732%" height="15" fill="rgb(237,100,13)" fg:x="1851" fg:w="39"/><text x="22.7081%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.01%)</title><rect x="22.9192%" y="869" width="0.0121%" height="15" fill="rgb(213,55,26)" fg:x="1889" fg:w="1"/><text x="23.1692%" y="879.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="22.9799%" y="757" width="0.0243%" height="15" fill="rgb(216,17,4)" fg:x="1894" fg:w="2"/><text x="23.2299%" y="767.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="22.9920%" y="741" width="0.0121%" height="15" fill="rgb(220,153,47)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="751.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="22.9920%" y="725" width="0.0121%" height="15" fill="rgb(215,131,9)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="735.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="22.9920%" y="709" width="0.0121%" height="15" fill="rgb(233,46,42)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="719.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="22.9920%" y="693" width="0.0121%" height="15" fill="rgb(226,86,7)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="703.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="22.9920%" y="677" width="0.0121%" height="15" fill="rgb(239,226,21)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="687.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="22.9920%" y="661" width="0.0121%" height="15" fill="rgb(244,137,22)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="671.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="22.9920%" y="645" width="0.0121%" height="15" fill="rgb(211,139,35)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="655.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="22.9920%" y="629" width="0.0121%" height="15" fill="rgb(214,62,50)" fg:x="1895" fg:w="1"/><text x="23.2420%" y="639.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="23.0041%" y="757" width="0.0121%" height="15" fill="rgb(212,113,44)" fg:x="1896" fg:w="1"/><text x="23.2541%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (8 samples, 0.10%)</title><rect x="22.9313%" y="869" width="0.0971%" height="15" fill="rgb(226,150,43)" fg:x="1890" fg:w="8"/><text x="23.1813%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (8 samples, 0.10%)</title><rect x="22.9313%" y="853" width="0.0971%" height="15" fill="rgb(250,71,37)" fg:x="1890" fg:w="8"/><text x="23.1813%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.10%)</title><rect x="22.9313%" y="837" width="0.0971%" height="15" fill="rgb(219,76,19)" fg:x="1890" fg:w="8"/><text x="23.1813%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.10%)</title><rect x="22.9313%" y="821" width="0.0971%" height="15" fill="rgb(250,39,11)" fg:x="1890" fg:w="8"/><text x="23.1813%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.10%)</title><rect x="22.9313%" y="805" width="0.0971%" height="15" fill="rgb(230,64,31)" fg:x="1890" fg:w="8"/><text x="23.1813%" y="815.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.10%)</title><rect x="22.9313%" y="789" width="0.0971%" height="15" fill="rgb(208,222,23)" fg:x="1890" fg:w="8"/><text x="23.1813%" y="799.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.08%)</title><rect x="22.9435%" y="773" width="0.0849%" height="15" fill="rgb(227,125,18)" fg:x="1891" fg:w="7"/><text x="23.1935%" y="783.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="23.0163%" y="757" width="0.0121%" height="15" fill="rgb(234,210,9)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="767.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="23.0163%" y="741" width="0.0121%" height="15" fill="rgb(217,127,24)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="751.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.01%)</title><rect x="23.0163%" y="725" width="0.0121%" height="15" fill="rgb(239,141,48)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="735.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.01%)</title><rect x="23.0163%" y="709" width="0.0121%" height="15" fill="rgb(227,109,8)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="719.50"></text></g><g><title>__do_softirq (1 samples, 0.01%)</title><rect x="23.0163%" y="693" width="0.0121%" height="15" fill="rgb(235,184,23)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="703.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="23.0163%" y="677" width="0.0121%" height="15" fill="rgb(227,226,48)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="687.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="23.0163%" y="661" width="0.0121%" height="15" fill="rgb(206,150,11)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="671.50"></text></g><g><title>__update_blocked_fair (1 samples, 0.01%)</title><rect x="23.0163%" y="645" width="0.0121%" height="15" fill="rgb(254,2,33)" fg:x="1897" fg:w="1"/><text x="23.2663%" y="655.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (9 samples, 0.11%)</title><rect x="22.9313%" y="917" width="0.1092%" height="15" fill="rgb(243,160,20)" fg:x="1890" fg:w="9"/><text x="23.1813%" y="927.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (9 samples, 0.11%)</title><rect x="22.9313%" y="901" width="0.1092%" height="15" fill="rgb(218,208,30)" fg:x="1890" fg:w="9"/><text x="23.1813%" y="911.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (9 samples, 0.11%)</title><rect x="22.9313%" y="885" width="0.1092%" height="15" fill="rgb(224,120,49)" fg:x="1890" fg:w="9"/><text x="23.1813%" y="895.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (1 samples, 0.01%)</title><rect x="23.0284%" y="869" width="0.0121%" height="15" fill="rgb(246,12,2)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="879.50"></text></g><g><title>tap::pipe::Pipe::pipe (1 samples, 0.01%)</title><rect x="23.0284%" y="853" width="0.0121%" height="15" fill="rgb(236,117,3)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="23.0284%" y="837" width="0.0121%" height="15" fill="rgb(216,128,52)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="23.0284%" y="821" width="0.0121%" height="15" fill="rgb(246,145,19)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="23.0284%" y="805" width="0.0121%" height="15" fill="rgb(222,11,46)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="23.0284%" y="789" width="0.0121%" height="15" fill="rgb(245,82,36)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="23.0284%" y="773" width="0.0121%" height="15" fill="rgb(250,73,51)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="23.0284%" y="757" width="0.0121%" height="15" fill="rgb(221,189,23)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="23.0284%" y="741" width="0.0121%" height="15" fill="rgb(210,33,7)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="751.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="23.0284%" y="725" width="0.0121%" height="15" fill="rgb(210,107,22)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="23.0284%" y="709" width="0.0121%" height="15" fill="rgb(222,116,37)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="719.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="23.0284%" y="693" width="0.0121%" height="15" fill="rgb(254,17,48)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="703.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="23.0284%" y="677" width="0.0121%" height="15" fill="rgb(224,36,32)" fg:x="1898" fg:w="1"/><text x="23.2784%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="23.0405%" y="853" width="0.0121%" height="15" fill="rgb(232,90,46)" fg:x="1899" fg:w="1"/><text x="23.2905%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="23.0405%" y="837" width="0.0121%" height="15" fill="rgb(241,66,40)" fg:x="1899" fg:w="1"/><text x="23.2905%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="23.0405%" y="821" width="0.0121%" height="15" fill="rgb(249,184,29)" fg:x="1899" fg:w="1"/><text x="23.2905%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="23.0405%" y="805" width="0.0121%" height="15" fill="rgb(231,181,1)" fg:x="1899" fg:w="1"/><text x="23.2905%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="23.0405%" y="789" width="0.0121%" height="15" fill="rgb(224,94,2)" fg:x="1899" fg:w="1"/><text x="23.2905%" y="799.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="23.0527%" y="773" width="0.0243%" height="15" fill="rgb(229,170,15)" fg:x="1900" fg:w="2"/><text x="23.3027%" y="783.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="23.0527%" y="757" width="0.0243%" height="15" fill="rgb(240,127,35)" fg:x="1900" fg:w="2"/><text x="23.3027%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="23.0648%" y="741" width="0.0121%" height="15" fill="rgb(248,196,34)" fg:x="1901" fg:w="1"/><text x="23.3148%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="23.0648%" y="725" width="0.0121%" height="15" fill="rgb(236,137,7)" fg:x="1901" fg:w="1"/><text x="23.3148%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="23.0648%" y="709" width="0.0121%" height="15" fill="rgb(235,127,16)" fg:x="1901" fg:w="1"/><text x="23.3148%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="23.0769%" y="709" width="0.0121%" height="15" fill="rgb(250,192,54)" fg:x="1902" fg:w="1"/><text x="23.3269%" y="719.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="23.0891%" y="613" width="0.0121%" height="15" fill="rgb(218,98,20)" fg:x="1903" fg:w="1"/><text x="23.3391%" y="623.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="23.0891%" y="597" width="0.0121%" height="15" fill="rgb(230,176,47)" fg:x="1903" fg:w="1"/><text x="23.3391%" y="607.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="23.0891%" y="581" width="0.0121%" height="15" fill="rgb(244,2,33)" fg:x="1903" fg:w="1"/><text x="23.3391%" y="591.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="23.0891%" y="709" width="0.0607%" height="15" fill="rgb(231,100,17)" fg:x="1903" fg:w="5"/><text x="23.3391%" y="719.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="23.0891%" y="693" width="0.0607%" height="15" fill="rgb(245,23,12)" fg:x="1903" fg:w="5"/><text x="23.3391%" y="703.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="23.0891%" y="677" width="0.0607%" height="15" fill="rgb(249,55,22)" fg:x="1903" fg:w="5"/><text x="23.3391%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="23.0891%" y="661" width="0.0607%" height="15" fill="rgb(207,134,9)" fg:x="1903" fg:w="5"/><text x="23.3391%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="23.0891%" y="645" width="0.0607%" height="15" fill="rgb(218,134,0)" fg:x="1903" fg:w="5"/><text x="23.3391%" y="655.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="23.0891%" y="629" width="0.0607%" height="15" fill="rgb(213,212,33)" fg:x="1903" fg:w="5"/><text x="23.3391%" y="639.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="23.1012%" y="613" width="0.0485%" height="15" fill="rgb(252,106,18)" fg:x="1904" fg:w="4"/><text x="23.3512%" y="623.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="23.1012%" y="597" width="0.0485%" height="15" fill="rgb(208,126,42)" fg:x="1904" fg:w="4"/><text x="23.3512%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="23.1012%" y="581" width="0.0485%" height="15" fill="rgb(246,175,29)" fg:x="1904" fg:w="4"/><text x="23.3512%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="23.1012%" y="565" width="0.0485%" height="15" fill="rgb(215,13,50)" fg:x="1904" fg:w="4"/><text x="23.3512%" y="575.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="23.1012%" y="549" width="0.0485%" height="15" fill="rgb(216,172,15)" fg:x="1904" fg:w="4"/><text x="23.3512%" y="559.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="23.1012%" y="533" width="0.0485%" height="15" fill="rgb(212,103,13)" fg:x="1904" fg:w="4"/><text x="23.3512%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.12%)</title><rect x="23.0405%" y="885" width="0.1213%" height="15" fill="rgb(231,171,36)" fg:x="1899" fg:w="10"/><text x="23.2905%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.12%)</title><rect x="23.0405%" y="869" width="0.1213%" height="15" fill="rgb(250,123,20)" fg:x="1899" fg:w="10"/><text x="23.2905%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.11%)</title><rect x="23.0527%" y="853" width="0.1092%" height="15" fill="rgb(212,53,50)" fg:x="1900" fg:w="9"/><text x="23.3027%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (9 samples, 0.11%)</title><rect x="23.0527%" y="837" width="0.1092%" height="15" fill="rgb(243,54,12)" fg:x="1900" fg:w="9"/><text x="23.3027%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (9 samples, 0.11%)</title><rect x="23.0527%" y="821" width="0.1092%" height="15" fill="rgb(234,101,34)" fg:x="1900" fg:w="9"/><text x="23.3027%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (9 samples, 0.11%)</title><rect x="23.0527%" y="805" width="0.1092%" height="15" fill="rgb(254,67,22)" fg:x="1900" fg:w="9"/><text x="23.3027%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9 samples, 0.11%)</title><rect x="23.0527%" y="789" width="0.1092%" height="15" fill="rgb(250,35,47)" fg:x="1900" fg:w="9"/><text x="23.3027%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (7 samples, 0.08%)</title><rect x="23.0769%" y="773" width="0.0849%" height="15" fill="rgb(226,126,38)" fg:x="1902" fg:w="7"/><text x="23.3269%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="23.0769%" y="757" width="0.0849%" height="15" fill="rgb(216,138,53)" fg:x="1902" fg:w="7"/><text x="23.3269%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="23.0769%" y="741" width="0.0849%" height="15" fill="rgb(246,199,43)" fg:x="1902" fg:w="7"/><text x="23.3269%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="23.0769%" y="725" width="0.0849%" height="15" fill="rgb(232,125,11)" fg:x="1902" fg:w="7"/><text x="23.3269%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="23.1497%" y="709" width="0.0121%" height="15" fill="rgb(218,219,45)" fg:x="1908" fg:w="1"/><text x="23.3997%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (11 samples, 0.13%)</title><rect x="23.0405%" y="917" width="0.1335%" height="15" fill="rgb(216,102,54)" fg:x="1899" fg:w="11"/><text x="23.2905%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11 samples, 0.13%)</title><rect x="23.0405%" y="901" width="0.1335%" height="15" fill="rgb(250,228,7)" fg:x="1899" fg:w="11"/><text x="23.2905%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="23.1619%" y="885" width="0.0121%" height="15" fill="rgb(226,125,25)" fg:x="1909" fg:w="1"/><text x="23.4119%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.01%)</title><rect x="23.1619%" y="869" width="0.0121%" height="15" fill="rgb(224,165,27)" fg:x="1909" fg:w="1"/><text x="23.4119%" y="879.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="23.1619%" y="853" width="0.0121%" height="15" fill="rgb(233,86,3)" fg:x="1909" fg:w="1"/><text x="23.4119%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="23.1619%" y="837" width="0.0121%" height="15" fill="rgb(228,116,20)" fg:x="1909" fg:w="1"/><text x="23.4119%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="23.1740%" y="885" width="0.0121%" height="15" fill="rgb(209,192,17)" fg:x="1910" fg:w="1"/><text x="23.4240%" y="895.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_accounts (64 samples, 0.78%)</title><rect x="22.4339%" y="981" width="0.7765%" height="15" fill="rgb(224,88,34)" fg:x="1849" fg:w="64"/><text x="22.6839%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (63 samples, 0.76%)</title><rect x="22.4460%" y="965" width="0.7644%" height="15" fill="rgb(233,38,6)" fg:x="1850" fg:w="63"/><text x="22.6960%" y="975.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_accounts (63 samples, 0.76%)</title><rect x="22.4460%" y="949" width="0.7644%" height="15" fill="rgb(212,59,30)" fg:x="1850" fg:w="63"/><text x="22.6960%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (63 samples, 0.76%)</title><rect x="22.4460%" y="933" width="0.7644%" height="15" fill="rgb(213,80,3)" fg:x="1850" fg:w="63"/><text x="22.6960%" y="943.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.04%)</title><rect x="23.1740%" y="917" width="0.0364%" height="15" fill="rgb(251,178,7)" fg:x="1910" fg:w="3"/><text x="23.4240%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.04%)</title><rect x="23.1740%" y="901" width="0.0364%" height="15" fill="rgb(213,154,26)" fg:x="1910" fg:w="3"/><text x="23.4240%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="23.1861%" y="885" width="0.0243%" height="15" fill="rgb(238,165,49)" fg:x="1911" fg:w="2"/><text x="23.4361%" y="895.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="23.1861%" y="869" width="0.0243%" height="15" fill="rgb(248,91,46)" fg:x="1911" fg:w="2"/><text x="23.4361%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="23.1861%" y="853" width="0.0243%" height="15" fill="rgb(244,21,52)" fg:x="1911" fg:w="2"/><text x="23.4361%" y="863.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="23.1861%" y="837" width="0.0243%" height="15" fill="rgb(247,122,20)" fg:x="1911" fg:w="2"/><text x="23.4361%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="23.1861%" y="821" width="0.0243%" height="15" fill="rgb(218,27,9)" fg:x="1911" fg:w="2"/><text x="23.4361%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="23.2711%" y="741" width="0.0121%" height="15" fill="rgb(246,7,6)" fg:x="1918" fg:w="1"/><text x="23.5211%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="23.2711%" y="757" width="0.0243%" height="15" fill="rgb(227,135,54)" fg:x="1918" fg:w="2"/><text x="23.5211%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="23.2832%" y="741" width="0.0121%" height="15" fill="rgb(247,14,11)" fg:x="1919" fg:w="1"/><text x="23.5332%" y="751.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="23.2832%" y="725" width="0.0121%" height="15" fill="rgb(206,149,34)" fg:x="1919" fg:w="1"/><text x="23.5332%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.01%)</title><rect x="23.2832%" y="709" width="0.0121%" height="15" fill="rgb(227,228,4)" fg:x="1919" fg:w="1"/><text x="23.5332%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="23.2832%" y="693" width="0.0121%" height="15" fill="rgb(238,218,28)" fg:x="1919" fg:w="1"/><text x="23.5332%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="23.2832%" y="677" width="0.0121%" height="15" fill="rgb(252,86,40)" fg:x="1919" fg:w="1"/><text x="23.5332%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="23.3560%" y="597" width="0.0121%" height="15" fill="rgb(251,225,11)" fg:x="1925" fg:w="1"/><text x="23.6060%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="23.3560%" y="613" width="0.0364%" height="15" fill="rgb(206,46,49)" fg:x="1925" fg:w="3"/><text x="23.6060%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="23.3681%" y="597" width="0.0243%" height="15" fill="rgb(245,128,24)" fg:x="1926" fg:w="2"/><text x="23.6181%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.04%)</title><rect x="23.4288%" y="597" width="0.0364%" height="15" fill="rgb(219,177,34)" fg:x="1931" fg:w="3"/><text x="23.6788%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.16%)</title><rect x="23.3317%" y="661" width="0.1577%" height="15" fill="rgb(218,60,48)" fg:x="1923" fg:w="13"/><text x="23.5817%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.16%)</title><rect x="23.3317%" y="645" width="0.1577%" height="15" fill="rgb(221,11,5)" fg:x="1923" fg:w="13"/><text x="23.5817%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.16%)</title><rect x="23.3317%" y="629" width="0.1577%" height="15" fill="rgb(220,148,13)" fg:x="1923" fg:w="13"/><text x="23.5817%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.10%)</title><rect x="23.3924%" y="613" width="0.0971%" height="15" fill="rgb(210,16,3)" fg:x="1928" fg:w="8"/><text x="23.6424%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="23.4652%" y="597" width="0.0243%" height="15" fill="rgb(236,80,2)" fg:x="1934" fg:w="2"/><text x="23.7152%" y="607.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="23.4894%" y="661" width="0.0243%" height="15" fill="rgb(239,129,19)" fg:x="1936" fg:w="2"/><text x="23.7394%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="23.5501%" y="501" width="0.0121%" height="15" fill="rgb(220,106,35)" fg:x="1941" fg:w="1"/><text x="23.8001%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="23.5501%" y="485" width="0.0121%" height="15" fill="rgb(252,139,45)" fg:x="1941" fg:w="1"/><text x="23.8001%" y="495.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.07%)</title><rect x="23.5137%" y="581" width="0.0728%" height="15" fill="rgb(229,8,36)" fg:x="1938" fg:w="6"/><text x="23.7637%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.07%)</title><rect x="23.5137%" y="565" width="0.0728%" height="15" fill="rgb(230,126,33)" fg:x="1938" fg:w="6"/><text x="23.7637%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="23.5380%" y="549" width="0.0485%" height="15" fill="rgb(239,140,21)" fg:x="1940" fg:w="4"/><text x="23.7880%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="23.5380%" y="533" width="0.0485%" height="15" fill="rgb(254,104,9)" fg:x="1940" fg:w="4"/><text x="23.7880%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="23.5380%" y="517" width="0.0485%" height="15" fill="rgb(239,52,14)" fg:x="1940" fg:w="4"/><text x="23.7880%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="23.5622%" y="501" width="0.0243%" height="15" fill="rgb(208,227,44)" fg:x="1942" fg:w="2"/><text x="23.8122%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="23.6836%" y="501" width="0.0121%" height="15" fill="rgb(246,18,19)" fg:x="1952" fg:w="1"/><text x="23.9336%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.05%)</title><rect x="23.6714%" y="517" width="0.0485%" height="15" fill="rgb(235,228,25)" fg:x="1951" fg:w="4"/><text x="23.9214%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="23.6957%" y="501" width="0.0243%" height="15" fill="rgb(240,156,20)" fg:x="1953" fg:w="2"/><text x="23.9457%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.45%)</title><rect x="23.3317%" y="693" width="0.4489%" height="15" fill="rgb(224,8,20)" fg:x="1923" fg:w="37"/><text x="23.5817%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (37 samples, 0.45%)</title><rect x="23.3317%" y="677" width="0.4489%" height="15" fill="rgb(214,12,52)" fg:x="1923" fg:w="37"/><text x="23.5817%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (22 samples, 0.27%)</title><rect x="23.5137%" y="661" width="0.2669%" height="15" fill="rgb(211,220,47)" fg:x="1938" fg:w="22"/><text x="23.7637%" y="671.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (22 samples, 0.27%)</title><rect x="23.5137%" y="645" width="0.2669%" height="15" fill="rgb(250,173,5)" fg:x="1938" fg:w="22"/><text x="23.7637%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (22 samples, 0.27%)</title><rect x="23.5137%" y="629" width="0.2669%" height="15" fill="rgb(250,125,52)" fg:x="1938" fg:w="22"/><text x="23.7637%" y="639.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (22 samples, 0.27%)</title><rect x="23.5137%" y="613" width="0.2669%" height="15" fill="rgb(209,133,18)" fg:x="1938" fg:w="22"/><text x="23.7637%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (22 samples, 0.27%)</title><rect x="23.5137%" y="597" width="0.2669%" height="15" fill="rgb(216,173,22)" fg:x="1938" fg:w="22"/><text x="23.7637%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (16 samples, 0.19%)</title><rect x="23.5865%" y="581" width="0.1941%" height="15" fill="rgb(205,3,22)" fg:x="1944" fg:w="16"/><text x="23.8365%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="23.5865%" y="565" width="0.1941%" height="15" fill="rgb(248,22,20)" fg:x="1944" fg:w="16"/><text x="23.8365%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="23.5865%" y="549" width="0.1941%" height="15" fill="rgb(233,6,29)" fg:x="1944" fg:w="16"/><text x="23.8365%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="23.5865%" y="533" width="0.1941%" height="15" fill="rgb(240,22,54)" fg:x="1944" fg:w="16"/><text x="23.8365%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.06%)</title><rect x="23.7200%" y="517" width="0.0607%" height="15" fill="rgb(231,133,32)" fg:x="1955" fg:w="5"/><text x="23.9700%" y="527.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="23.8170%" y="661" width="0.0243%" height="15" fill="rgb(248,193,4)" fg:x="1963" fg:w="2"/><text x="24.0670%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="23.8413%" y="661" width="0.0121%" height="15" fill="rgb(211,178,46)" fg:x="1965" fg:w="1"/><text x="24.0913%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="23.8413%" y="645" width="0.0121%" height="15" fill="rgb(224,5,42)" fg:x="1965" fg:w="1"/><text x="24.0913%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="23.8413%" y="629" width="0.0121%" height="15" fill="rgb(239,176,25)" fg:x="1965" fg:w="1"/><text x="24.0913%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7 samples, 0.08%)</title><rect x="23.7806%" y="693" width="0.0849%" height="15" fill="rgb(245,187,50)" fg:x="1960" fg:w="7"/><text x="24.0306%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.08%)</title><rect x="23.7806%" y="677" width="0.0849%" height="15" fill="rgb(248,24,15)" fg:x="1960" fg:w="7"/><text x="24.0306%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="23.8534%" y="661" width="0.0121%" height="15" fill="rgb(205,166,13)" fg:x="1966" fg:w="1"/><text x="24.1034%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="23.8534%" y="645" width="0.0121%" height="15" fill="rgb(208,114,23)" fg:x="1966" fg:w="1"/><text x="24.1034%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (8 samples, 0.10%)</title><rect x="23.8656%" y="677" width="0.0971%" height="15" fill="rgb(239,127,18)" fg:x="1967" fg:w="8"/><text x="24.1156%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8 samples, 0.10%)</title><rect x="23.8656%" y="661" width="0.0971%" height="15" fill="rgb(219,154,28)" fg:x="1967" fg:w="8"/><text x="24.1156%" y="671.50"></text></g><g><title>core::ptr::write (8 samples, 0.10%)</title><rect x="23.8656%" y="645" width="0.0971%" height="15" fill="rgb(225,157,23)" fg:x="1967" fg:w="8"/><text x="24.1156%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (56 samples, 0.68%)</title><rect x="23.2953%" y="757" width="0.6794%" height="15" fill="rgb(219,8,6)" fg:x="1920" fg:w="56"/><text x="23.5453%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (56 samples, 0.68%)</title><rect x="23.2953%" y="741" width="0.6794%" height="15" fill="rgb(212,47,6)" fg:x="1920" fg:w="56"/><text x="23.5453%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (56 samples, 0.68%)</title><rect x="23.2953%" y="725" width="0.6794%" height="15" fill="rgb(224,190,4)" fg:x="1920" fg:w="56"/><text x="23.5453%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (54 samples, 0.66%)</title><rect x="23.3196%" y="709" width="0.6552%" height="15" fill="rgb(239,183,29)" fg:x="1922" fg:w="54"/><text x="23.5696%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (9 samples, 0.11%)</title><rect x="23.8656%" y="693" width="0.1092%" height="15" fill="rgb(213,57,7)" fg:x="1967" fg:w="9"/><text x="24.1156%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.01%)</title><rect x="23.9626%" y="677" width="0.0121%" height="15" fill="rgb(216,148,1)" fg:x="1975" fg:w="1"/><text x="24.2126%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="23.9626%" y="661" width="0.0121%" height="15" fill="rgb(236,182,29)" fg:x="1975" fg:w="1"/><text x="24.2126%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="23.9626%" y="645" width="0.0121%" height="15" fill="rgb(244,120,48)" fg:x="1975" fg:w="1"/><text x="24.2126%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (61 samples, 0.74%)</title><rect x="23.2589%" y="837" width="0.7401%" height="15" fill="rgb(206,71,34)" fg:x="1917" fg:w="61"/><text x="23.5089%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 0.74%)</title><rect x="23.2589%" y="821" width="0.7401%" height="15" fill="rgb(242,32,6)" fg:x="1917" fg:w="61"/><text x="23.5089%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 0.74%)</title><rect x="23.2589%" y="805" width="0.7401%" height="15" fill="rgb(241,35,3)" fg:x="1917" fg:w="61"/><text x="23.5089%" y="815.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 0.74%)</title><rect x="23.2589%" y="789" width="0.7401%" height="15" fill="rgb(222,62,19)" fg:x="1917" fg:w="61"/><text x="23.5089%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 0.74%)</title><rect x="23.2589%" y="773" width="0.7401%" height="15" fill="rgb(223,110,41)" fg:x="1917" fg:w="61"/><text x="23.5089%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(alloy_primitives::bits::address::Address,revm_primitives::precompile::Precompile)&gt;&gt; (2 samples, 0.02%)</title><rect x="23.9748%" y="757" width="0.0243%" height="15" fill="rgb(208,224,4)" fg:x="1976" fg:w="2"/><text x="24.2248%" y="767.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="23.9748%" y="741" width="0.0243%" height="15" fill="rgb(241,137,19)" fg:x="1976" fg:w="2"/><text x="24.2248%" y="751.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="23.9869%" y="725" width="0.0121%" height="15" fill="rgb(244,24,17)" fg:x="1977" fg:w="1"/><text x="24.2369%" y="735.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (66 samples, 0.80%)</title><rect x="23.2104%" y="933" width="0.8008%" height="15" fill="rgb(245,178,49)" fg:x="1913" fg:w="66"/><text x="23.4604%" y="943.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (66 samples, 0.80%)</title><rect x="23.2104%" y="917" width="0.8008%" height="15" fill="rgb(219,160,38)" fg:x="1913" fg:w="66"/><text x="23.4604%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (66 samples, 0.80%)</title><rect x="23.2104%" y="901" width="0.8008%" height="15" fill="rgb(228,137,14)" fg:x="1913" fg:w="66"/><text x="23.4604%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (66 samples, 0.80%)</title><rect x="23.2104%" y="885" width="0.8008%" height="15" fill="rgb(237,134,11)" fg:x="1913" fg:w="66"/><text x="23.4604%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (63 samples, 0.76%)</title><rect x="23.2468%" y="869" width="0.7644%" height="15" fill="rgb(211,126,44)" fg:x="1916" fg:w="63"/><text x="23.4968%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (63 samples, 0.76%)</title><rect x="23.2468%" y="853" width="0.7644%" height="15" fill="rgb(226,171,33)" fg:x="1916" fg:w="63"/><text x="23.4968%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.01%)</title><rect x="23.9990%" y="837" width="0.0121%" height="15" fill="rgb(253,99,13)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="23.9990%" y="821" width="0.0121%" height="15" fill="rgb(244,48,7)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="23.9990%" y="805" width="0.0121%" height="15" fill="rgb(244,217,54)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.01%)</title><rect x="23.9990%" y="789" width="0.0121%" height="15" fill="rgb(224,15,18)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.01%)</title><rect x="23.9990%" y="773" width="0.0121%" height="15" fill="rgb(244,99,12)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.01%)</title><rect x="23.9990%" y="757" width="0.0121%" height="15" fill="rgb(233,226,8)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.01%)</title><rect x="23.9990%" y="741" width="0.0121%" height="15" fill="rgb(229,211,3)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.01%)</title><rect x="23.9990%" y="725" width="0.0121%" height="15" fill="rgb(216,140,21)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="735.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.01%)</title><rect x="23.9990%" y="709" width="0.0121%" height="15" fill="rgb(234,122,30)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="23.9990%" y="693" width="0.0121%" height="15" fill="rgb(236,25,46)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="23.9990%" y="677" width="0.0121%" height="15" fill="rgb(217,52,54)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="687.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="23.9990%" y="661" width="0.0121%" height="15" fill="rgb(222,29,26)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="671.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="23.9990%" y="645" width="0.0121%" height="15" fill="rgb(216,177,29)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="655.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="23.9990%" y="629" width="0.0121%" height="15" fill="rgb(247,136,51)" fg:x="1978" fg:w="1"/><text x="24.2490%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="24.0961%" y="805" width="0.0121%" height="15" fill="rgb(231,47,47)" fg:x="1986" fg:w="1"/><text x="24.3461%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="24.0961%" y="837" width="0.0243%" height="15" fill="rgb(211,192,36)" fg:x="1986" fg:w="2"/><text x="24.3461%" y="847.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.02%)</title><rect x="24.0961%" y="821" width="0.0243%" height="15" fill="rgb(229,156,32)" fg:x="1986" fg:w="2"/><text x="24.3461%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.01%)</title><rect x="24.1082%" y="805" width="0.0121%" height="15" fill="rgb(248,213,20)" fg:x="1987" fg:w="1"/><text x="24.3582%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="24.1082%" y="789" width="0.0121%" height="15" fill="rgb(217,64,7)" fg:x="1987" fg:w="1"/><text x="24.3582%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="24.1082%" y="773" width="0.0121%" height="15" fill="rgb(232,142,8)" fg:x="1987" fg:w="1"/><text x="24.3582%" y="783.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.01%)</title><rect x="24.1204%" y="837" width="0.0121%" height="15" fill="rgb(224,92,44)" fg:x="1988" fg:w="1"/><text x="24.3704%" y="847.50"></text></g><g><title>&lt;revm_primitives::precompile::Precompile as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="24.1204%" y="821" width="0.0121%" height="15" fill="rgb(214,169,17)" fg:x="1988" fg:w="1"/><text x="24.3704%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (8 samples, 0.10%)</title><rect x="24.0476%" y="869" width="0.0971%" height="15" fill="rgb(210,59,37)" fg:x="1982" fg:w="8"/><text x="24.2976%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (8 samples, 0.10%)</title><rect x="24.0476%" y="853" width="0.0971%" height="15" fill="rgb(214,116,48)" fg:x="1982" fg:w="8"/><text x="24.2976%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="24.1325%" y="837" width="0.0121%" height="15" fill="rgb(244,191,6)" fg:x="1989" fg:w="1"/><text x="24.3825%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="24.1325%" y="821" width="0.0121%" height="15" fill="rgb(241,50,52)" fg:x="1989" fg:w="1"/><text x="24.3825%" y="831.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="24.1325%" y="805" width="0.0121%" height="15" fill="rgb(236,75,39)" fg:x="1989" fg:w="1"/><text x="24.3825%" y="815.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (78 samples, 0.95%)</title><rect x="23.2104%" y="981" width="0.9464%" height="15" fill="rgb(236,99,0)" fg:x="1913" fg:w="78"/><text x="23.4604%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (78 samples, 0.95%)</title><rect x="23.2104%" y="965" width="0.9464%" height="15" fill="rgb(207,202,15)" fg:x="1913" fg:w="78"/><text x="23.4604%" y="975.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (78 samples, 0.95%)</title><rect x="23.2104%" y="949" width="0.9464%" height="15" fill="rgb(233,207,14)" fg:x="1913" fg:w="78"/><text x="23.4604%" y="959.50"></text></g><g><title>&lt;revm_precompile::Precompiles as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="24.0112%" y="933" width="0.1456%" height="15" fill="rgb(226,27,51)" fg:x="1979" fg:w="12"/><text x="24.2612%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="24.0112%" y="917" width="0.1456%" height="15" fill="rgb(206,104,42)" fg:x="1979" fg:w="12"/><text x="24.2612%" y="927.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="24.0112%" y="901" width="0.1456%" height="15" fill="rgb(212,225,4)" fg:x="1979" fg:w="12"/><text x="24.2612%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.13%)</title><rect x="24.0233%" y="885" width="0.1335%" height="15" fill="rgb(233,96,42)" fg:x="1980" fg:w="11"/><text x="24.2733%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (1 samples, 0.01%)</title><rect x="24.1446%" y="869" width="0.0121%" height="15" fill="rgb(229,21,32)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.01%)</title><rect x="24.1446%" y="853" width="0.0121%" height="15" fill="rgb(226,216,24)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="863.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.01%)</title><rect x="24.1446%" y="837" width="0.0121%" height="15" fill="rgb(221,163,17)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="24.1446%" y="821" width="0.0121%" height="15" fill="rgb(216,216,42)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="24.1446%" y="805" width="0.0121%" height="15" fill="rgb(240,118,7)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="815.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="24.1446%" y="789" width="0.0121%" height="15" fill="rgb(221,67,37)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="799.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="24.1446%" y="773" width="0.0121%" height="15" fill="rgb(241,32,44)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="783.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="24.1446%" y="757" width="0.0121%" height="15" fill="rgb(235,204,43)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="767.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="24.1446%" y="741" width="0.0121%" height="15" fill="rgb(213,116,10)" fg:x="1990" fg:w="1"/><text x="24.3946%" y="751.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (959 samples, 11.64%)</title><rect x="12.5819%" y="1029" width="11.6355%" height="15" fill="rgb(239,15,48)" fg:x="1037" fg:w="959"/><text x="12.8319%" y="1039.50">block_stm_revm::v..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (726 samples, 8.81%)</title><rect x="15.4089%" y="1013" width="8.8085%" height="15" fill="rgb(207,123,36)" fg:x="1270" fg:w="726"/><text x="15.6589%" y="1023.50">revm::evm::E..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (726 samples, 8.81%)</title><rect x="15.4089%" y="997" width="8.8085%" height="15" fill="rgb(209,103,30)" fg:x="1270" fg:w="726"/><text x="15.6589%" y="1007.50">revm::evm::E..</text></g><g><title>revm_interpreter::inner_models::CallInputs::new_boxed (5 samples, 0.06%)</title><rect x="24.1568%" y="981" width="0.0607%" height="15" fill="rgb(238,100,19)" fg:x="1991" fg:w="5"/><text x="24.4068%" y="991.50"></text></g><g><title>revm_interpreter::inner_models::CallInputs::new (5 samples, 0.06%)</title><rect x="24.1568%" y="965" width="0.0607%" height="15" fill="rgb(244,30,14)" fg:x="1991" fg:w="5"/><text x="24.4068%" y="975.50"></text></g><g><title>bytes::bytes::static_clone (2 samples, 0.02%)</title><rect x="24.2174%" y="1029" width="0.0243%" height="15" fill="rgb(249,174,6)" fg:x="1996" fg:w="2"/><text x="24.4674%" y="1039.50"></text></g><g><title>bytes::bytes::static_drop (2 samples, 0.02%)</title><rect x="24.2417%" y="1029" width="0.0243%" height="15" fill="rgb(235,213,41)" fg:x="1998" fg:w="2"/><text x="24.4917%" y="1039.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.11%)</title><rect x="24.2660%" y="1029" width="0.1092%" height="15" fill="rgb(213,118,6)" fg:x="2000" fg:w="9"/><text x="24.5160%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="24.3630%" y="1013" width="0.0121%" height="15" fill="rgb(235,44,51)" fg:x="2008" fg:w="1"/><text x="24.6130%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="24.3630%" y="997" width="0.0121%" height="15" fill="rgb(217,9,53)" fg:x="2008" fg:w="1"/><text x="24.6130%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="24.3630%" y="981" width="0.0121%" height="15" fill="rgb(237,172,34)" fg:x="2008" fg:w="1"/><text x="24.6130%" y="991.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="24.3630%" y="965" width="0.0121%" height="15" fill="rgb(206,206,11)" fg:x="2008" fg:w="1"/><text x="24.6130%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="24.3630%" y="949" width="0.0121%" height="15" fill="rgb(214,149,29)" fg:x="2008" fg:w="1"/><text x="24.6130%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="24.3630%" y="933" width="0.0121%" height="15" fill="rgb(208,123,3)" fg:x="2008" fg:w="1"/><text x="24.6130%" y="943.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="24.3630%" y="917" width="0.0121%" height="15" fill="rgb(229,126,4)" fg:x="2008" fg:w="1"/><text x="24.6130%" y="927.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="24.3752%" y="1029" width="0.0121%" height="15" fill="rgb(222,92,36)" fg:x="2009" fg:w="1"/><text x="24.6252%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.04%)</title><rect x="24.3873%" y="1029" width="0.0364%" height="15" fill="rgb(216,39,41)" fg:x="2010" fg:w="3"/><text x="24.6373%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (14 samples, 0.17%)</title><rect x="24.4237%" y="1029" width="0.1699%" height="15" fill="rgb(253,127,28)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (14 samples, 0.17%)</title><rect x="24.4237%" y="1013" width="0.1699%" height="15" fill="rgb(249,152,51)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (14 samples, 0.17%)</title><rect x="24.4237%" y="997" width="0.1699%" height="15" fill="rgb(209,123,42)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="1007.50"></text></g><g><title>std::panicking::try (14 samples, 0.17%)</title><rect x="24.4237%" y="981" width="0.1699%" height="15" fill="rgb(241,118,22)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="991.50"></text></g><g><title>std::panicking::try::do_call (14 samples, 0.17%)</title><rect x="24.4237%" y="965" width="0.1699%" height="15" fill="rgb(208,25,7)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="975.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (14 samples, 0.17%)</title><rect x="24.4237%" y="949" width="0.1699%" height="15" fill="rgb(243,144,39)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="959.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (14 samples, 0.17%)</title><rect x="24.4237%" y="933" width="0.1699%" height="15" fill="rgb(250,50,5)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="943.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14 samples, 0.17%)</title><rect x="24.4237%" y="917" width="0.1699%" height="15" fill="rgb(207,67,11)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="927.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (14 samples, 0.17%)</title><rect x="24.4237%" y="901" width="0.1699%" height="15" fill="rgb(245,204,40)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="911.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (14 samples, 0.17%)</title><rect x="24.4237%" y="885" width="0.1699%" height="15" fill="rgb(238,228,24)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="895.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (14 samples, 0.17%)</title><rect x="24.4237%" y="869" width="0.1699%" height="15" fill="rgb(217,116,22)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="879.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (14 samples, 0.17%)</title><rect x="24.4237%" y="853" width="0.1699%" height="15" fill="rgb(234,98,12)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="863.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (14 samples, 0.17%)</title><rect x="24.4237%" y="837" width="0.1699%" height="15" fill="rgb(242,170,50)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.17%)</title><rect x="24.4237%" y="821" width="0.1699%" height="15" fill="rgb(235,7,5)" fg:x="2013" fg:w="14"/><text x="24.6737%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="24.5935%" y="949" width="0.0243%" height="15" fill="rgb(241,114,28)" fg:x="2027" fg:w="2"/><text x="24.8435%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="24.5935%" y="933" width="0.0243%" height="15" fill="rgb(246,112,42)" fg:x="2027" fg:w="2"/><text x="24.8435%" y="943.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="24.5935%" y="917" width="0.0243%" height="15" fill="rgb(248,228,14)" fg:x="2027" fg:w="2"/><text x="24.8435%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (3 samples, 0.04%)</title><rect x="24.5935%" y="1029" width="0.0364%" height="15" fill="rgb(208,133,18)" fg:x="2027" fg:w="3"/><text x="24.8435%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (3 samples, 0.04%)</title><rect x="24.5935%" y="1013" width="0.0364%" height="15" fill="rgb(207,35,49)" fg:x="2027" fg:w="3"/><text x="24.8435%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (3 samples, 0.04%)</title><rect x="24.5935%" y="997" width="0.0364%" height="15" fill="rgb(205,68,36)" fg:x="2027" fg:w="3"/><text x="24.8435%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (3 samples, 0.04%)</title><rect x="24.5935%" y="981" width="0.0364%" height="15" fill="rgb(245,62,40)" fg:x="2027" fg:w="3"/><text x="24.8435%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (3 samples, 0.04%)</title><rect x="24.5935%" y="965" width="0.0364%" height="15" fill="rgb(228,27,24)" fg:x="2027" fg:w="3"/><text x="24.8435%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (1 samples, 0.01%)</title><rect x="24.6178%" y="949" width="0.0121%" height="15" fill="rgb(253,19,12)" fg:x="2029" fg:w="1"/><text x="24.8678%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (1 samples, 0.01%)</title><rect x="24.6178%" y="933" width="0.0121%" height="15" fill="rgb(232,28,20)" fg:x="2029" fg:w="1"/><text x="24.8678%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6178%" y="917" width="0.0121%" height="15" fill="rgb(218,35,51)" fg:x="2029" fg:w="1"/><text x="24.8678%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="24.6178%" y="901" width="0.0121%" height="15" fill="rgb(212,90,40)" fg:x="2029" fg:w="1"/><text x="24.8678%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6299%" y="1029" width="0.0121%" height="15" fill="rgb(220,172,12)" fg:x="2030" fg:w="1"/><text x="24.8799%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6299%" y="1013" width="0.0121%" height="15" fill="rgb(226,159,20)" fg:x="2030" fg:w="1"/><text x="24.8799%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6299%" y="997" width="0.0121%" height="15" fill="rgb(234,205,16)" fg:x="2030" fg:w="1"/><text x="24.8799%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6299%" y="981" width="0.0121%" height="15" fill="rgb(207,9,39)" fg:x="2030" fg:w="1"/><text x="24.8799%" y="991.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="24.6299%" y="965" width="0.0121%" height="15" fill="rgb(249,143,15)" fg:x="2030" fg:w="1"/><text x="24.8799%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="24.6299%" y="949" width="0.0121%" height="15" fill="rgb(253,133,29)" fg:x="2030" fg:w="1"/><text x="24.8799%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="24.6299%" y="933" width="0.0121%" height="15" fill="rgb(221,187,0)" fg:x="2030" fg:w="1"/><text x="24.8799%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6421%" y="1029" width="0.0121%" height="15" fill="rgb(205,204,26)" fg:x="2031" fg:w="1"/><text x="24.8921%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (1 samples, 0.01%)</title><rect x="24.6542%" y="1029" width="0.0121%" height="15" fill="rgb(224,68,54)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6542%" y="1013" width="0.0121%" height="15" fill="rgb(209,67,4)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6542%" y="997" width="0.0121%" height="15" fill="rgb(228,229,18)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (1 samples, 0.01%)</title><rect x="24.6542%" y="981" width="0.0121%" height="15" fill="rgb(231,89,13)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="24.6542%" y="965" width="0.0121%" height="15" fill="rgb(210,182,18)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="24.6542%" y="949" width="0.0121%" height="15" fill="rgb(240,105,2)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.01%)</title><rect x="24.6542%" y="933" width="0.0121%" height="15" fill="rgb(207,170,50)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="24.6542%" y="917" width="0.0121%" height="15" fill="rgb(232,133,24)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="927.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="24.6542%" y="901" width="0.0121%" height="15" fill="rgb(235,166,27)" fg:x="2032" fg:w="1"/><text x="24.9042%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.08%)</title><rect x="24.6663%" y="1029" width="0.0849%" height="15" fill="rgb(209,19,13)" fg:x="2033" fg:w="7"/><text x="24.9163%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.04%)</title><rect x="24.7513%" y="1029" width="0.0364%" height="15" fill="rgb(226,79,39)" fg:x="2040" fg:w="3"/><text x="25.0013%" y="1039.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_ref_db (1 samples, 0.01%)</title><rect x="24.7877%" y="1029" width="0.0121%" height="15" fill="rgb(222,163,10)" fg:x="2043" fg:w="1"/><text x="25.0377%" y="1039.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (1 samples, 0.01%)</title><rect x="24.7998%" y="1029" width="0.0121%" height="15" fill="rgb(214,44,19)" fg:x="2044" fg:w="1"/><text x="25.0498%" y="1039.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (1 samples, 0.01%)</title><rect x="24.8119%" y="1029" width="0.0121%" height="15" fill="rgb(210,217,13)" fg:x="2045" fg:w="1"/><text x="25.0619%" y="1039.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (2 samples, 0.02%)</title><rect x="24.8241%" y="1029" width="0.0243%" height="15" fill="rgb(237,61,54)" fg:x="2046" fg:w="2"/><text x="25.0741%" y="1039.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (1 samples, 0.01%)</title><rect x="24.8362%" y="1013" width="0.0121%" height="15" fill="rgb(226,184,24)" fg:x="2047" fg:w="1"/><text x="25.0862%" y="1023.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="24.8483%" y="1029" width="0.0121%" height="15" fill="rgb(223,226,4)" fg:x="2048" fg:w="1"/><text x="25.0983%" y="1039.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (1 samples, 0.01%)</title><rect x="24.8605%" y="1029" width="0.0121%" height="15" fill="rgb(210,26,41)" fg:x="2049" fg:w="1"/><text x="25.1105%" y="1039.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.06%)</title><rect x="24.8726%" y="1029" width="0.0607%" height="15" fill="rgb(220,221,6)" fg:x="2050" fg:w="5"/><text x="25.1226%" y="1039.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.01%)</title><rect x="24.9211%" y="1013" width="0.0121%" height="15" fill="rgb(225,89,49)" fg:x="2054" fg:w="1"/><text x="25.1711%" y="1023.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="24.9211%" y="997" width="0.0121%" height="15" fill="rgb(218,70,45)" fg:x="2054" fg:w="1"/><text x="25.1711%" y="1007.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.01%)</title><rect x="24.9211%" y="981" width="0.0121%" height="15" fill="rgb(238,166,21)" fg:x="2054" fg:w="1"/><text x="25.1711%" y="991.50"></text></g><g><title>revm::journaled_state::JournaledState::new (1 samples, 0.01%)</title><rect x="24.9333%" y="1029" width="0.0121%" height="15" fill="rgb(224,141,44)" fg:x="2055" fg:w="1"/><text x="25.1833%" y="1039.50"></text></g><g><title>revm_primitives::env::Env::calc_max_data_fee (1 samples, 0.01%)</title><rect x="24.9454%" y="1029" width="0.0121%" height="15" fill="rgb(230,12,49)" fg:x="2056" fg:w="1"/><text x="25.1954%" y="1039.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (1 samples, 0.01%)</title><rect x="24.9575%" y="1029" width="0.0121%" height="15" fill="rgb(212,174,12)" fg:x="2057" fg:w="1"/><text x="25.2075%" y="1039.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="24.9697%" y="1029" width="0.0243%" height="15" fill="rgb(246,67,9)" fg:x="2058" fg:w="2"/><text x="25.2197%" y="1039.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.01%)</title><rect x="24.9939%" y="1029" width="0.0121%" height="15" fill="rgb(239,35,23)" fg:x="2060" fg:w="1"/><text x="25.2439%" y="1039.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="25.0061%" y="1013" width="0.0121%" height="15" fill="rgb(211,167,0)" fg:x="2061" fg:w="1"/><text x="25.2561%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="25.0182%" y="709" width="0.0243%" height="15" fill="rgb(225,119,45)" fg:x="2062" fg:w="2"/><text x="25.2682%" y="719.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="25.0303%" y="693" width="0.0121%" height="15" fill="rgb(210,162,6)" fg:x="2063" fg:w="1"/><text x="25.2803%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.02%)</title><rect x="25.0425%" y="693" width="0.0243%" height="15" fill="rgb(208,118,35)" fg:x="2064" fg:w="2"/><text x="25.2925%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2 samples, 0.02%)</title><rect x="25.0425%" y="677" width="0.0243%" height="15" fill="rgb(239,4,53)" fg:x="2064" fg:w="2"/><text x="25.2925%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="25.0425%" y="661" width="0.0243%" height="15" fill="rgb(213,130,21)" fg:x="2064" fg:w="2"/><text x="25.2925%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.05%)</title><rect x="25.0425%" y="709" width="0.0485%" height="15" fill="rgb(235,148,0)" fg:x="2064" fg:w="4"/><text x="25.2925%" y="719.50"></text></g><g><title>std::collections::hash::map::map_entry (2 samples, 0.02%)</title><rect x="25.0667%" y="693" width="0.0243%" height="15" fill="rgb(244,224,18)" fg:x="2066" fg:w="2"/><text x="25.3167%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.05%)</title><rect x="25.0910%" y="677" width="0.0485%" height="15" fill="rgb(211,214,4)" fg:x="2068" fg:w="4"/><text x="25.3410%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="25.1395%" y="661" width="0.0121%" height="15" fill="rgb(206,119,25)" fg:x="2072" fg:w="1"/><text x="25.3895%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="25.1395%" y="645" width="0.0121%" height="15" fill="rgb(243,93,47)" fg:x="2072" fg:w="1"/><text x="25.3895%" y="655.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="25.1395%" y="629" width="0.0121%" height="15" fill="rgb(224,194,6)" fg:x="2072" fg:w="1"/><text x="25.3895%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="25.1395%" y="613" width="0.0121%" height="15" fill="rgb(243,229,6)" fg:x="2072" fg:w="1"/><text x="25.3895%" y="623.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.08%)</title><rect x="25.0910%" y="709" width="0.0849%" height="15" fill="rgb(207,23,50)" fg:x="2068" fg:w="7"/><text x="25.3410%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (7 samples, 0.08%)</title><rect x="25.0910%" y="693" width="0.0849%" height="15" fill="rgb(253,192,32)" fg:x="2068" fg:w="7"/><text x="25.3410%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.04%)</title><rect x="25.1395%" y="677" width="0.0364%" height="15" fill="rgb(213,21,6)" fg:x="2072" fg:w="3"/><text x="25.3895%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2 samples, 0.02%)</title><rect x="25.1517%" y="661" width="0.0243%" height="15" fill="rgb(243,151,13)" fg:x="2073" fg:w="2"/><text x="25.4017%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (2 samples, 0.02%)</title><rect x="25.1517%" y="645" width="0.0243%" height="15" fill="rgb(233,165,41)" fg:x="2073" fg:w="2"/><text x="25.4017%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2 samples, 0.02%)</title><rect x="25.1517%" y="629" width="0.0243%" height="15" fill="rgb(246,176,45)" fg:x="2073" fg:w="2"/><text x="25.4017%" y="639.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15 samples, 0.18%)</title><rect x="25.0061%" y="1029" width="0.1820%" height="15" fill="rgb(217,170,52)" fg:x="2061" fg:w="15"/><text x="25.2561%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once (14 samples, 0.17%)</title><rect x="25.0182%" y="1013" width="0.1699%" height="15" fill="rgb(214,203,54)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="1023.50"></text></g><g><title>block_stm_revm::main (14 samples, 0.17%)</title><rect x="25.0182%" y="997" width="0.1699%" height="15" fill="rgb(248,215,49)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="1007.50"></text></g><g><title>block_stm_revm::execute_sequential (14 samples, 0.17%)</title><rect x="25.0182%" y="981" width="0.1699%" height="15" fill="rgb(208,46,10)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.17%)</title><rect x="25.0182%" y="965" width="0.1699%" height="15" fill="rgb(254,5,31)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.17%)</title><rect x="25.0182%" y="949" width="0.1699%" height="15" fill="rgb(222,104,33)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.17%)</title><rect x="25.0182%" y="933" width="0.1699%" height="15" fill="rgb(248,49,16)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (14 samples, 0.17%)</title><rect x="25.0182%" y="917" width="0.1699%" height="15" fill="rgb(232,198,41)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.17%)</title><rect x="25.0182%" y="901" width="0.1699%" height="15" fill="rgb(214,125,3)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (14 samples, 0.17%)</title><rect x="25.0182%" y="885" width="0.1699%" height="15" fill="rgb(229,220,28)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.17%)</title><rect x="25.0182%" y="869" width="0.1699%" height="15" fill="rgb(222,64,37)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.17%)</title><rect x="25.0182%" y="853" width="0.1699%" height="15" fill="rgb(249,184,13)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.17%)</title><rect x="25.0182%" y="837" width="0.1699%" height="15" fill="rgb(252,176,6)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="847.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (14 samples, 0.17%)</title><rect x="25.0182%" y="821" width="0.1699%" height="15" fill="rgb(228,153,7)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="831.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (14 samples, 0.17%)</title><rect x="25.0182%" y="805" width="0.1699%" height="15" fill="rgb(242,193,5)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="815.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (14 samples, 0.17%)</title><rect x="25.0182%" y="789" width="0.1699%" height="15" fill="rgb(232,140,9)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="799.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (14 samples, 0.17%)</title><rect x="25.0182%" y="773" width="0.1699%" height="15" fill="rgb(213,222,16)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="783.50"></text></g><g><title>core::ops::function::Fn::call (14 samples, 0.17%)</title><rect x="25.0182%" y="757" width="0.1699%" height="15" fill="rgb(222,75,50)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="767.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (14 samples, 0.17%)</title><rect x="25.0182%" y="741" width="0.1699%" height="15" fill="rgb(205,180,2)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="751.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (14 samples, 0.17%)</title><rect x="25.0182%" y="725" width="0.1699%" height="15" fill="rgb(216,34,7)" fg:x="2062" fg:w="14"/><text x="25.2682%" y="735.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.01%)</title><rect x="25.1759%" y="709" width="0.0121%" height="15" fill="rgb(253,16,32)" fg:x="2075" fg:w="1"/><text x="25.4259%" y="719.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 0.01%)</title><rect x="25.1759%" y="693" width="0.0121%" height="15" fill="rgb(208,97,28)" fg:x="2075" fg:w="1"/><text x="25.4259%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.01%)</title><rect x="25.1759%" y="677" width="0.0121%" height="15" fill="rgb(225,92,11)" fg:x="2075" fg:w="1"/><text x="25.4259%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.01%)</title><rect x="25.1759%" y="661" width="0.0121%" height="15" fill="rgb(243,38,12)" fg:x="2075" fg:w="1"/><text x="25.4259%" y="671.50"></text></g><g><title>[unknown] (1,914 samples, 23.22%)</title><rect x="1.9777%" y="1045" width="23.2225%" height="15" fill="rgb(208,139,16)" fg:x="163" fg:w="1914"/><text x="2.2277%" y="1055.50">[unknown]</text></g><g><title>unlink_chunk (1 samples, 0.01%)</title><rect x="25.1881%" y="1029" width="0.0121%" height="15" fill="rgb(227,24,9)" fg:x="2076" fg:w="1"/><text x="25.4381%" y="1039.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="25.2002%" y="1045" width="0.0243%" height="15" fill="rgb(206,62,11)" fg:x="2077" fg:w="2"/><text x="25.4502%" y="1055.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (1 samples, 0.01%)</title><rect x="25.2245%" y="1045" width="0.0121%" height="15" fill="rgb(228,134,27)" fg:x="2079" fg:w="1"/><text x="25.4745%" y="1055.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="25.2245%" y="1029" width="0.0121%" height="15" fill="rgb(205,55,33)" fg:x="2079" fg:w="1"/><text x="25.4745%" y="1039.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (3 samples, 0.04%)</title><rect x="25.2366%" y="1045" width="0.0364%" height="15" fill="rgb(243,75,43)" fg:x="2080" fg:w="3"/><text x="25.4866%" y="1055.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="25.2366%" y="1029" width="0.0364%" height="15" fill="rgb(223,27,42)" fg:x="2080" fg:w="3"/><text x="25.4866%" y="1039.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="25.2730%" y="1045" width="0.0243%" height="15" fill="rgb(232,189,33)" fg:x="2083" fg:w="2"/><text x="25.5230%" y="1055.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="25.2973%" y="693" width="0.0485%" height="15" fill="rgb(210,9,39)" fg:x="2085" fg:w="4"/><text x="25.5473%" y="703.50"></text></g><g><title>&lt;revm_primitives::result::Output as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="25.3215%" y="677" width="0.0243%" height="15" fill="rgb(242,85,26)" fg:x="2087" fg:w="2"/><text x="25.5715%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="25.3215%" y="661" width="0.0243%" height="15" fill="rgb(248,44,4)" fg:x="2087" fg:w="2"/><text x="25.5715%" y="671.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="25.3337%" y="645" width="0.0121%" height="15" fill="rgb(250,96,46)" fg:x="2088" fg:w="1"/><text x="25.5837%" y="655.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (1 samples, 0.01%)</title><rect x="25.3337%" y="629" width="0.0121%" height="15" fill="rgb(229,116,26)" fg:x="2088" fg:w="1"/><text x="25.5837%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="25.3458%" y="645" width="0.0121%" height="15" fill="rgb(246,94,34)" fg:x="2089" fg:w="1"/><text x="25.5958%" y="655.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="25.3458%" y="629" width="0.0121%" height="15" fill="rgb(251,73,21)" fg:x="2089" fg:w="1"/><text x="25.5958%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="25.3458%" y="613" width="0.0121%" height="15" fill="rgb(254,121,25)" fg:x="2089" fg:w="1"/><text x="25.5958%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="25.3579%" y="549" width="0.0121%" height="15" fill="rgb(215,161,49)" fg:x="2090" fg:w="1"/><text x="25.6079%" y="559.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="25.3579%" y="533" width="0.0121%" height="15" fill="rgb(221,43,13)" fg:x="2090" fg:w="1"/><text x="25.6079%" y="543.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="25.3579%" y="517" width="0.0121%" height="15" fill="rgb(249,5,37)" fg:x="2090" fg:w="1"/><text x="25.6079%" y="527.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::cmp::PartialEq&gt;::eq (9 samples, 0.11%)</title><rect x="25.3579%" y="565" width="0.1092%" height="15" fill="rgb(226,25,44)" fg:x="2090" fg:w="9"/><text x="25.6079%" y="575.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.10%)</title><rect x="25.3701%" y="549" width="0.0971%" height="15" fill="rgb(238,189,16)" fg:x="2091" fg:w="8"/><text x="25.6201%" y="559.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (8 samples, 0.10%)</title><rect x="25.3701%" y="533" width="0.0971%" height="15" fill="rgb(251,186,8)" fg:x="2091" fg:w="8"/><text x="25.6201%" y="543.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (8 samples, 0.10%)</title><rect x="25.3701%" y="517" width="0.0971%" height="15" fill="rgb(254,34,31)" fg:x="2091" fg:w="8"/><text x="25.6201%" y="527.50"></text></g><g><title>&lt;revm_primitives::state::AccountStatus as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="25.4671%" y="565" width="0.0121%" height="15" fill="rgb(225,215,27)" fg:x="2099" fg:w="1"/><text x="25.7171%" y="575.50"></text></g><g><title>&lt;revm_primitives::state::_::InternalBitFlags as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="25.4671%" y="549" width="0.0121%" height="15" fill="rgb(221,192,48)" fg:x="2099" fg:w="1"/><text x="25.7171%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (12 samples, 0.15%)</title><rect x="25.3579%" y="613" width="0.1456%" height="15" fill="rgb(219,137,20)" fg:x="2090" fg:w="12"/><text x="25.6079%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}}::_{{closure}} (12 samples, 0.15%)</title><rect x="25.3579%" y="597" width="0.1456%" height="15" fill="rgb(219,84,11)" fg:x="2090" fg:w="12"/><text x="25.6079%" y="607.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::cmp::PartialEq&gt;::eq (12 samples, 0.15%)</title><rect x="25.3579%" y="581" width="0.1456%" height="15" fill="rgb(224,10,23)" fg:x="2090" fg:w="12"/><text x="25.6079%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="25.4793%" y="565" width="0.0243%" height="15" fill="rgb(248,22,39)" fg:x="2100" fg:w="2"/><text x="25.7293%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.01%)</title><rect x="25.4914%" y="549" width="0.0121%" height="15" fill="rgb(212,154,20)" fg:x="2101" fg:w="1"/><text x="25.7414%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.01%)</title><rect x="25.4914%" y="533" width="0.0121%" height="15" fill="rgb(236,199,50)" fg:x="2101" fg:w="1"/><text x="25.7414%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.01%)</title><rect x="25.4914%" y="517" width="0.0121%" height="15" fill="rgb(211,9,17)" fg:x="2101" fg:w="1"/><text x="25.7414%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (1 samples, 0.01%)</title><rect x="25.4914%" y="501" width="0.0121%" height="15" fill="rgb(243,216,36)" fg:x="2101" fg:w="1"/><text x="25.7414%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.01%)</title><rect x="25.4914%" y="485" width="0.0121%" height="15" fill="rgb(250,2,10)" fg:x="2101" fg:w="1"/><text x="25.7414%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.01%)</title><rect x="25.4914%" y="469" width="0.0121%" height="15" fill="rgb(226,50,48)" fg:x="2101" fg:w="1"/><text x="25.7414%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.01%)</title><rect x="25.4914%" y="453" width="0.0121%" height="15" fill="rgb(243,81,16)" fg:x="2101" fg:w="1"/><text x="25.7414%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="25.5035%" y="533" width="0.0364%" height="15" fill="rgb(250,14,2)" fg:x="2102" fg:w="3"/><text x="25.7535%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="25.5035%" y="517" width="0.0364%" height="15" fill="rgb(233,135,29)" fg:x="2102" fg:w="3"/><text x="25.7535%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="25.5035%" y="501" width="0.0364%" height="15" fill="rgb(224,64,43)" fg:x="2102" fg:w="3"/><text x="25.7535%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="25.5278%" y="485" width="0.0121%" height="15" fill="rgb(238,84,13)" fg:x="2104" fg:w="1"/><text x="25.7778%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="25.5278%" y="469" width="0.0121%" height="15" fill="rgb(253,48,26)" fg:x="2104" fg:w="1"/><text x="25.7778%" y="479.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="25.5399%" y="533" width="0.0121%" height="15" fill="rgb(205,223,31)" fg:x="2105" fg:w="1"/><text x="25.7899%" y="543.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.05%)</title><rect x="25.5521%" y="453" width="0.0485%" height="15" fill="rgb(221,41,32)" fg:x="2106" fg:w="4"/><text x="25.8021%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.05%)</title><rect x="25.5521%" y="437" width="0.0485%" height="15" fill="rgb(213,158,31)" fg:x="2106" fg:w="4"/><text x="25.8021%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="25.5521%" y="421" width="0.0485%" height="15" fill="rgb(245,126,43)" fg:x="2106" fg:w="4"/><text x="25.8021%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="25.5521%" y="405" width="0.0485%" height="15" fill="rgb(227,7,22)" fg:x="2106" fg:w="4"/><text x="25.8021%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="25.5521%" y="389" width="0.0485%" height="15" fill="rgb(252,90,44)" fg:x="2106" fg:w="4"/><text x="25.8021%" y="399.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="25.5884%" y="373" width="0.0121%" height="15" fill="rgb(253,91,0)" fg:x="2109" fg:w="1"/><text x="25.8384%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="25.6491%" y="389" width="0.0121%" height="15" fill="rgb(252,175,49)" fg:x="2114" fg:w="1"/><text x="25.8991%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 0.29%)</title><rect x="25.5035%" y="565" width="0.2912%" height="15" fill="rgb(246,150,1)" fg:x="2102" fg:w="24"/><text x="25.7535%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.29%)</title><rect x="25.5035%" y="549" width="0.2912%" height="15" fill="rgb(241,192,25)" fg:x="2102" fg:w="24"/><text x="25.7535%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20 samples, 0.24%)</title><rect x="25.5521%" y="533" width="0.2427%" height="15" fill="rgb(239,187,11)" fg:x="2106" fg:w="20"/><text x="25.8021%" y="543.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (20 samples, 0.24%)</title><rect x="25.5521%" y="517" width="0.2427%" height="15" fill="rgb(218,202,51)" fg:x="2106" fg:w="20"/><text x="25.8021%" y="527.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (20 samples, 0.24%)</title><rect x="25.5521%" y="501" width="0.2427%" height="15" fill="rgb(225,176,8)" fg:x="2106" fg:w="20"/><text x="25.8021%" y="511.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (20 samples, 0.24%)</title><rect x="25.5521%" y="485" width="0.2427%" height="15" fill="rgb(219,122,41)" fg:x="2106" fg:w="20"/><text x="25.8021%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (20 samples, 0.24%)</title><rect x="25.5521%" y="469" width="0.2427%" height="15" fill="rgb(248,140,20)" fg:x="2106" fg:w="20"/><text x="25.8021%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (16 samples, 0.19%)</title><rect x="25.6006%" y="453" width="0.1941%" height="15" fill="rgb(245,41,37)" fg:x="2110" fg:w="16"/><text x="25.8506%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="25.6006%" y="437" width="0.1941%" height="15" fill="rgb(235,82,39)" fg:x="2110" fg:w="16"/><text x="25.8506%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="25.6006%" y="421" width="0.1941%" height="15" fill="rgb(230,108,42)" fg:x="2110" fg:w="16"/><text x="25.8506%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.19%)</title><rect x="25.6006%" y="405" width="0.1941%" height="15" fill="rgb(215,150,50)" fg:x="2110" fg:w="16"/><text x="25.8506%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.13%)</title><rect x="25.6612%" y="389" width="0.1335%" height="15" fill="rgb(233,212,5)" fg:x="2115" fg:w="11"/><text x="25.9112%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (11 samples, 0.13%)</title><rect x="25.7947%" y="501" width="0.1335%" height="15" fill="rgb(245,80,22)" fg:x="2126" fg:w="11"/><text x="26.0447%" y="511.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (11 samples, 0.13%)</title><rect x="25.7947%" y="485" width="0.1335%" height="15" fill="rgb(238,129,16)" fg:x="2126" fg:w="11"/><text x="26.0447%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.13%)</title><rect x="25.7947%" y="469" width="0.1335%" height="15" fill="rgb(240,19,0)" fg:x="2126" fg:w="11"/><text x="26.0447%" y="479.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (11 samples, 0.13%)</title><rect x="25.7947%" y="453" width="0.1335%" height="15" fill="rgb(232,42,35)" fg:x="2126" fg:w="11"/><text x="26.0447%" y="463.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.13%)</title><rect x="25.7947%" y="437" width="0.1335%" height="15" fill="rgb(223,130,24)" fg:x="2126" fg:w="11"/><text x="26.0447%" y="447.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (11 samples, 0.13%)</title><rect x="25.7947%" y="421" width="0.1335%" height="15" fill="rgb(237,16,22)" fg:x="2126" fg:w="11"/><text x="26.0447%" y="431.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (11 samples, 0.13%)</title><rect x="25.7947%" y="405" width="0.1335%" height="15" fill="rgb(248,192,20)" fg:x="2126" fg:w="11"/><text x="26.0447%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (12 samples, 0.15%)</title><rect x="25.7947%" y="517" width="0.1456%" height="15" fill="rgb(233,167,2)" fg:x="2126" fg:w="12"/><text x="26.0447%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.01%)</title><rect x="25.9282%" y="501" width="0.0121%" height="15" fill="rgb(252,71,44)" fg:x="2137" fg:w="1"/><text x="26.1782%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="25.9282%" y="485" width="0.0121%" height="15" fill="rgb(238,37,47)" fg:x="2137" fg:w="1"/><text x="26.1782%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="25.9282%" y="469" width="0.0121%" height="15" fill="rgb(214,202,54)" fg:x="2137" fg:w="1"/><text x="26.1782%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="25.9282%" y="453" width="0.0121%" height="15" fill="rgb(254,165,40)" fg:x="2137" fg:w="1"/><text x="26.1782%" y="463.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="25.9403%" y="517" width="0.0121%" height="15" fill="rgb(246,173,38)" fg:x="2138" fg:w="1"/><text x="26.1903%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (69 samples, 0.84%)</title><rect x="25.3458%" y="677" width="0.8372%" height="15" fill="rgb(215,3,27)" fg:x="2089" fg:w="69"/><text x="25.5958%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (69 samples, 0.84%)</title><rect x="25.3458%" y="661" width="0.8372%" height="15" fill="rgb(239,169,51)" fg:x="2089" fg:w="69"/><text x="25.5958%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (68 samples, 0.83%)</title><rect x="25.3579%" y="645" width="0.8250%" height="15" fill="rgb(212,5,25)" fg:x="2090" fg:w="68"/><text x="25.6079%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (68 samples, 0.83%)</title><rect x="25.3579%" y="629" width="0.8250%" height="15" fill="rgb(243,45,17)" fg:x="2090" fg:w="68"/><text x="25.6079%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (56 samples, 0.68%)</title><rect x="25.5035%" y="613" width="0.6794%" height="15" fill="rgb(242,97,9)" fg:x="2102" fg:w="56"/><text x="25.7535%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (56 samples, 0.68%)</title><rect x="25.5035%" y="597" width="0.6794%" height="15" fill="rgb(228,71,31)" fg:x="2102" fg:w="56"/><text x="25.7535%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (56 samples, 0.68%)</title><rect x="25.5035%" y="581" width="0.6794%" height="15" fill="rgb(252,184,16)" fg:x="2102" fg:w="56"/><text x="25.7535%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (32 samples, 0.39%)</title><rect x="25.7947%" y="565" width="0.3883%" height="15" fill="rgb(236,169,46)" fg:x="2126" fg:w="32"/><text x="26.0447%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (32 samples, 0.39%)</title><rect x="25.7947%" y="549" width="0.3883%" height="15" fill="rgb(207,17,47)" fg:x="2126" fg:w="32"/><text x="26.0447%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (32 samples, 0.39%)</title><rect x="25.7947%" y="533" width="0.3883%" height="15" fill="rgb(206,201,28)" fg:x="2126" fg:w="32"/><text x="26.0447%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (19 samples, 0.23%)</title><rect x="25.9524%" y="517" width="0.2305%" height="15" fill="rgb(224,184,23)" fg:x="2139" fg:w="19"/><text x="26.2024%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (19 samples, 0.23%)</title><rect x="25.9524%" y="501" width="0.2305%" height="15" fill="rgb(208,139,48)" fg:x="2139" fg:w="19"/><text x="26.2024%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.23%)</title><rect x="25.9524%" y="485" width="0.2305%" height="15" fill="rgb(208,130,10)" fg:x="2139" fg:w="19"/><text x="26.2024%" y="495.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (80 samples, 0.97%)</title><rect x="25.2973%" y="773" width="0.9706%" height="15" fill="rgb(211,213,45)" fg:x="2085" fg:w="80"/><text x="25.5473%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (80 samples, 0.97%)</title><rect x="25.2973%" y="757" width="0.9706%" height="15" fill="rgb(235,100,30)" fg:x="2085" fg:w="80"/><text x="25.5473%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (80 samples, 0.97%)</title><rect x="25.2973%" y="741" width="0.9706%" height="15" fill="rgb(206,144,31)" fg:x="2085" fg:w="80"/><text x="25.5473%" y="751.50"></text></g><g><title>core::cmp::PartialEq::ne (80 samples, 0.97%)</title><rect x="25.2973%" y="725" width="0.9706%" height="15" fill="rgb(224,200,26)" fg:x="2085" fg:w="80"/><text x="25.5473%" y="735.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::cmp::PartialEq&gt;::eq (80 samples, 0.97%)</title><rect x="25.2973%" y="709" width="0.9706%" height="15" fill="rgb(247,104,53)" fg:x="2085" fg:w="80"/><text x="25.5473%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq (76 samples, 0.92%)</title><rect x="25.3458%" y="693" width="0.9221%" height="15" fill="rgb(220,14,17)" fg:x="2089" fg:w="76"/><text x="25.5958%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (7 samples, 0.08%)</title><rect x="26.1830%" y="677" width="0.0849%" height="15" fill="rgb(230,140,40)" fg:x="2158" fg:w="7"/><text x="26.4330%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (7 samples, 0.08%)</title><rect x="26.1830%" y="661" width="0.0849%" height="15" fill="rgb(229,2,41)" fg:x="2158" fg:w="7"/><text x="26.4330%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (7 samples, 0.08%)</title><rect x="26.1830%" y="645" width="0.0849%" height="15" fill="rgb(232,89,16)" fg:x="2158" fg:w="7"/><text x="26.4330%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (7 samples, 0.08%)</title><rect x="26.1830%" y="629" width="0.0849%" height="15" fill="rgb(247,59,52)" fg:x="2158" fg:w="7"/><text x="26.4330%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (7 samples, 0.08%)</title><rect x="26.1830%" y="613" width="0.0849%" height="15" fill="rgb(226,110,21)" fg:x="2158" fg:w="7"/><text x="26.4330%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (7 samples, 0.08%)</title><rect x="26.1830%" y="597" width="0.0849%" height="15" fill="rgb(224,176,43)" fg:x="2158" fg:w="7"/><text x="26.4330%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (7 samples, 0.08%)</title><rect x="26.1830%" y="581" width="0.0849%" height="15" fill="rgb(221,73,6)" fg:x="2158" fg:w="7"/><text x="26.4330%" y="591.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="26.3043%" y="565" width="0.0243%" height="15" fill="rgb(232,78,19)" fg:x="2168" fg:w="2"/><text x="26.5543%" y="575.50"></text></g><g><title>charge_memcg (1 samples, 0.01%)</title><rect x="26.3164%" y="549" width="0.0121%" height="15" fill="rgb(233,112,48)" fg:x="2169" fg:w="1"/><text x="26.5664%" y="559.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="26.3164%" y="533" width="0.0121%" height="15" fill="rgb(243,131,47)" fg:x="2169" fg:w="1"/><text x="26.5664%" y="543.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="26.3164%" y="517" width="0.0121%" height="15" fill="rgb(226,51,1)" fg:x="2169" fg:w="1"/><text x="26.5664%" y="527.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="26.3286%" y="565" width="0.0243%" height="15" fill="rgb(247,58,7)" fg:x="2170" fg:w="2"/><text x="26.5786%" y="575.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="26.3286%" y="549" width="0.0243%" height="15" fill="rgb(209,7,32)" fg:x="2170" fg:w="2"/><text x="26.5786%" y="559.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="26.3286%" y="533" width="0.0243%" height="15" fill="rgb(209,39,41)" fg:x="2170" fg:w="2"/><text x="26.5786%" y="543.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="26.3286%" y="517" width="0.0243%" height="15" fill="rgb(226,182,46)" fg:x="2170" fg:w="2"/><text x="26.5786%" y="527.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="26.3286%" y="501" width="0.0243%" height="15" fill="rgb(230,219,10)" fg:x="2170" fg:w="2"/><text x="26.5786%" y="511.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.06%)</title><rect x="26.3043%" y="677" width="0.0607%" height="15" fill="rgb(227,175,30)" fg:x="2168" fg:w="5"/><text x="26.5543%" y="687.50"></text></g><g><title>exc_page_fault (5 samples, 0.06%)</title><rect x="26.3043%" y="661" width="0.0607%" height="15" fill="rgb(217,2,50)" fg:x="2168" fg:w="5"/><text x="26.5543%" y="671.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.06%)</title><rect x="26.3043%" y="645" width="0.0607%" height="15" fill="rgb(229,160,0)" fg:x="2168" fg:w="5"/><text x="26.5543%" y="655.50"></text></g><g><title>handle_mm_fault (5 samples, 0.06%)</title><rect x="26.3043%" y="629" width="0.0607%" height="15" fill="rgb(207,78,37)" fg:x="2168" fg:w="5"/><text x="26.5543%" y="639.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.06%)</title><rect x="26.3043%" y="613" width="0.0607%" height="15" fill="rgb(225,57,0)" fg:x="2168" fg:w="5"/><text x="26.5543%" y="623.50"></text></g><g><title>handle_pte_fault (5 samples, 0.06%)</title><rect x="26.3043%" y="597" width="0.0607%" height="15" fill="rgb(232,154,2)" fg:x="2168" fg:w="5"/><text x="26.5543%" y="607.50"></text></g><g><title>do_anonymous_page (5 samples, 0.06%)</title><rect x="26.3043%" y="581" width="0.0607%" height="15" fill="rgb(241,212,25)" fg:x="2168" fg:w="5"/><text x="26.5543%" y="591.50"></text></g><g><title>inc_mm_counter (1 samples, 0.01%)</title><rect x="26.3528%" y="565" width="0.0121%" height="15" fill="rgb(226,69,20)" fg:x="2172" fg:w="1"/><text x="26.6028%" y="575.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="26.3528%" y="549" width="0.0121%" height="15" fill="rgb(247,184,54)" fg:x="2172" fg:w="1"/><text x="26.6028%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (11 samples, 0.13%)</title><rect x="26.2679%" y="693" width="0.1335%" height="15" fill="rgb(210,145,0)" fg:x="2165" fg:w="11"/><text x="26.5179%" y="703.50"></text></g><g><title>sync_regs (3 samples, 0.04%)</title><rect x="26.3650%" y="677" width="0.0364%" height="15" fill="rgb(253,82,12)" fg:x="2173" fg:w="3"/><text x="26.6150%" y="687.50"></text></g><g><title>alloc::vec::from_elem (12 samples, 0.15%)</title><rect x="26.2679%" y="757" width="0.1456%" height="15" fill="rgb(245,42,11)" fg:x="2165" fg:w="12"/><text x="26.5179%" y="767.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (12 samples, 0.15%)</title><rect x="26.2679%" y="741" width="0.1456%" height="15" fill="rgb(219,147,32)" fg:x="2165" fg:w="12"/><text x="26.5179%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.15%)</title><rect x="26.2679%" y="725" width="0.1456%" height="15" fill="rgb(246,12,7)" fg:x="2165" fg:w="12"/><text x="26.5179%" y="735.50"></text></g><g><title>core::ptr::write (12 samples, 0.15%)</title><rect x="26.2679%" y="709" width="0.1456%" height="15" fill="rgb(243,50,9)" fg:x="2165" fg:w="12"/><text x="26.5179%" y="719.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="26.4014%" y="693" width="0.0121%" height="15" fill="rgb(219,149,6)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="703.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="26.4014%" y="677" width="0.0121%" height="15" fill="rgb(241,51,42)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="687.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="26.4014%" y="661" width="0.0121%" height="15" fill="rgb(226,128,27)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="671.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="26.4014%" y="645" width="0.0121%" height="15" fill="rgb(244,144,4)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="655.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="26.4014%" y="629" width="0.0121%" height="15" fill="rgb(221,4,13)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="639.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="26.4014%" y="613" width="0.0121%" height="15" fill="rgb(208,170,28)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="623.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="26.4014%" y="597" width="0.0121%" height="15" fill="rgb(226,131,13)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="607.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="26.4014%" y="581" width="0.0121%" height="15" fill="rgb(215,72,41)" fg:x="2176" fg:w="1"/><text x="26.6514%" y="591.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="26.4135%" y="421" width="0.0243%" height="15" fill="rgb(243,108,20)" fg:x="2177" fg:w="2"/><text x="26.6635%" y="431.50"></text></g><g><title>charge_memcg (2 samples, 0.02%)</title><rect x="26.4135%" y="405" width="0.0243%" height="15" fill="rgb(230,189,17)" fg:x="2177" fg:w="2"/><text x="26.6635%" y="415.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="26.4135%" y="389" width="0.0243%" height="15" fill="rgb(220,50,17)" fg:x="2177" fg:w="2"/><text x="26.6635%" y="399.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="26.4378%" y="421" width="0.0121%" height="15" fill="rgb(248,152,48)" fg:x="2179" fg:w="1"/><text x="26.6878%" y="431.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::new (4 samples, 0.05%)</title><rect x="26.4135%" y="757" width="0.0485%" height="15" fill="rgb(244,91,11)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.05%)</title><rect x="26.4135%" y="741" width="0.0485%" height="15" fill="rgb(220,157,5)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.05%)</title><rect x="26.4135%" y="725" width="0.0485%" height="15" fill="rgb(253,137,8)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.05%)</title><rect x="26.4135%" y="709" width="0.0485%" height="15" fill="rgb(217,137,51)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.05%)</title><rect x="26.4135%" y="693" width="0.0485%" height="15" fill="rgb(218,209,53)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.05%)</title><rect x="26.4135%" y="677" width="0.0485%" height="15" fill="rgb(249,137,25)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.05%)</title><rect x="26.4135%" y="661" width="0.0485%" height="15" fill="rgb(239,155,26)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.05%)</title><rect x="26.4135%" y="645" width="0.0485%" height="15" fill="rgb(227,85,46)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.05%)</title><rect x="26.4135%" y="629" width="0.0485%" height="15" fill="rgb(251,107,43)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.05%)</title><rect x="26.4135%" y="613" width="0.0485%" height="15" fill="rgb(234,170,33)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4 samples, 0.05%)</title><rect x="26.4135%" y="597" width="0.0485%" height="15" fill="rgb(206,29,35)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.05%)</title><rect x="26.4135%" y="581" width="0.0485%" height="15" fill="rgb(227,138,25)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (4 samples, 0.05%)</title><rect x="26.4135%" y="565" width="0.0485%" height="15" fill="rgb(249,131,35)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="575.50"></text></g><g><title>core::ptr::write (4 samples, 0.05%)</title><rect x="26.4135%" y="549" width="0.0485%" height="15" fill="rgb(239,6,40)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="559.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.05%)</title><rect x="26.4135%" y="533" width="0.0485%" height="15" fill="rgb(246,136,47)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="543.50"></text></g><g><title>exc_page_fault (4 samples, 0.05%)</title><rect x="26.4135%" y="517" width="0.0485%" height="15" fill="rgb(253,58,26)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="527.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.05%)</title><rect x="26.4135%" y="501" width="0.0485%" height="15" fill="rgb(237,141,10)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="511.50"></text></g><g><title>handle_mm_fault (4 samples, 0.05%)</title><rect x="26.4135%" y="485" width="0.0485%" height="15" fill="rgb(234,156,12)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="495.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.05%)</title><rect x="26.4135%" y="469" width="0.0485%" height="15" fill="rgb(243,224,36)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="479.50"></text></g><g><title>handle_pte_fault (4 samples, 0.05%)</title><rect x="26.4135%" y="453" width="0.0485%" height="15" fill="rgb(205,229,51)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="463.50"></text></g><g><title>do_anonymous_page (4 samples, 0.05%)</title><rect x="26.4135%" y="437" width="0.0485%" height="15" fill="rgb(223,189,4)" fg:x="2177" fg:w="4"/><text x="26.6635%" y="447.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.01%)</title><rect x="26.4499%" y="421" width="0.0121%" height="15" fill="rgb(249,167,54)" fg:x="2180" fg:w="1"/><text x="26.6999%" y="431.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="26.4499%" y="405" width="0.0121%" height="15" fill="rgb(218,34,28)" fg:x="2180" fg:w="1"/><text x="26.6999%" y="415.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="26.4499%" y="389" width="0.0121%" height="15" fill="rgb(232,109,42)" fg:x="2180" fg:w="1"/><text x="26.6999%" y="399.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="26.4499%" y="373" width="0.0121%" height="15" fill="rgb(248,214,46)" fg:x="2180" fg:w="1"/><text x="26.6999%" y="383.50"></text></g><g><title>clear_page_erms (1 samples, 0.01%)</title><rect x="26.4499%" y="357" width="0.0121%" height="15" fill="rgb(244,216,40)" fg:x="2180" fg:w="1"/><text x="26.6999%" y="367.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="26.4742%" y="741" width="0.0121%" height="15" fill="rgb(231,226,31)" fg:x="2182" fg:w="1"/><text x="26.7242%" y="751.50"></text></g><g><title>&lt;block_stm_revm::MemoryValue as core::clone::Clone&gt;::clone (34 samples, 0.41%)</title><rect x="26.7775%" y="709" width="0.4125%" height="15" fill="rgb(238,38,43)" fg:x="2207" fg:w="34"/><text x="27.0275%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.41%)</title><rect x="26.7775%" y="693" width="0.4125%" height="15" fill="rgb(208,88,43)" fg:x="2207" fg:w="34"/><text x="27.0275%" y="703.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (34 samples, 0.41%)</title><rect x="26.7775%" y="677" width="0.4125%" height="15" fill="rgb(205,136,37)" fg:x="2207" fg:w="34"/><text x="27.0275%" y="687.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.41%)</title><rect x="26.7775%" y="661" width="0.4125%" height="15" fill="rgb(237,34,14)" fg:x="2207" fg:w="34"/><text x="27.0275%" y="671.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (34 samples, 0.41%)</title><rect x="26.7775%" y="645" width="0.4125%" height="15" fill="rgb(236,193,44)" fg:x="2207" fg:w="34"/><text x="27.0275%" y="655.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (33 samples, 0.40%)</title><rect x="26.7896%" y="629" width="0.4004%" height="15" fill="rgb(231,48,10)" fg:x="2208" fg:w="33"/><text x="27.0396%" y="639.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (33 samples, 0.40%)</title><rect x="26.7896%" y="613" width="0.4004%" height="15" fill="rgb(213,141,34)" fg:x="2208" fg:w="33"/><text x="27.0396%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.39%)</title><rect x="26.8017%" y="597" width="0.3883%" height="15" fill="rgb(249,130,34)" fg:x="2209" fg:w="32"/><text x="27.0517%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (31 samples, 0.38%)</title><rect x="26.8139%" y="581" width="0.3761%" height="15" fill="rgb(219,42,41)" fg:x="2210" fg:w="31"/><text x="27.0639%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_add (31 samples, 0.38%)</title><rect x="26.8139%" y="565" width="0.3761%" height="15" fill="rgb(224,100,54)" fg:x="2210" fg:w="31"/><text x="27.0639%" y="575.50"></text></g><g><title>&lt;block_stm_revm::mv_memory::MemoryEntry as core::clone::Clone&gt;::clone (39 samples, 0.47%)</title><rect x="26.7653%" y="725" width="0.4732%" height="15" fill="rgb(229,200,27)" fg:x="2206" fg:w="39"/><text x="27.0153%" y="735.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (4 samples, 0.05%)</title><rect x="27.1900%" y="709" width="0.0485%" height="15" fill="rgb(217,118,10)" fg:x="2241" fg:w="4"/><text x="27.4400%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="27.2992%" y="709" width="0.0364%" height="15" fill="rgb(206,22,3)" fg:x="2250" fg:w="3"/><text x="27.5492%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.04%)</title><rect x="27.2992%" y="693" width="0.0364%" height="15" fill="rgb(232,163,46)" fg:x="2250" fg:w="3"/><text x="27.5492%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.04%)</title><rect x="27.2992%" y="677" width="0.0364%" height="15" fill="rgb(206,95,13)" fg:x="2250" fg:w="3"/><text x="27.5492%" y="687.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (77 samples, 0.93%)</title><rect x="27.3356%" y="709" width="0.9342%" height="15" fill="rgb(253,154,18)" fg:x="2253" fg:w="77"/><text x="27.5856%" y="719.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (77 samples, 0.93%)</title><rect x="27.3356%" y="693" width="0.9342%" height="15" fill="rgb(219,32,23)" fg:x="2253" fg:w="77"/><text x="27.5856%" y="703.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (77 samples, 0.93%)</title><rect x="27.3356%" y="677" width="0.9342%" height="15" fill="rgb(230,191,45)" fg:x="2253" fg:w="77"/><text x="27.5856%" y="687.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (77 samples, 0.93%)</title><rect x="27.3356%" y="661" width="0.9342%" height="15" fill="rgb(229,64,36)" fg:x="2253" fg:w="77"/><text x="27.5856%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (77 samples, 0.93%)</title><rect x="27.3356%" y="645" width="0.9342%" height="15" fill="rgb(205,129,25)" fg:x="2253" fg:w="77"/><text x="27.5856%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (77 samples, 0.93%)</title><rect x="27.3356%" y="629" width="0.9342%" height="15" fill="rgb(254,112,7)" fg:x="2253" fg:w="77"/><text x="27.5856%" y="639.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="28.2698%" y="709" width="0.0121%" height="15" fill="rgb(226,53,48)" fg:x="2330" fg:w="1"/><text x="28.5198%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="28.2698%" y="693" width="0.0121%" height="15" fill="rgb(214,153,38)" fg:x="2330" fg:w="1"/><text x="28.5198%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="28.2698%" y="677" width="0.0121%" height="15" fill="rgb(243,101,7)" fg:x="2330" fg:w="1"/><text x="28.5198%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="28.2698%" y="661" width="0.0121%" height="15" fill="rgb(240,140,22)" fg:x="2330" fg:w="1"/><text x="28.5198%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="28.2941%" y="645" width="0.0121%" height="15" fill="rgb(235,114,2)" fg:x="2332" fg:w="1"/><text x="28.5441%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="28.2941%" y="629" width="0.0121%" height="15" fill="rgb(242,59,12)" fg:x="2332" fg:w="1"/><text x="28.5441%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (4 samples, 0.05%)</title><rect x="28.2820%" y="709" width="0.0485%" height="15" fill="rgb(252,134,9)" fg:x="2331" fg:w="4"/><text x="28.5320%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (4 samples, 0.05%)</title><rect x="28.2820%" y="693" width="0.0485%" height="15" fill="rgb(236,4,44)" fg:x="2331" fg:w="4"/><text x="28.5320%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="28.2820%" y="677" width="0.0485%" height="15" fill="rgb(254,172,41)" fg:x="2331" fg:w="4"/><text x="28.5320%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="28.2820%" y="661" width="0.0485%" height="15" fill="rgb(244,63,20)" fg:x="2331" fg:w="4"/><text x="28.5320%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="28.3062%" y="645" width="0.0243%" height="15" fill="rgb(250,73,31)" fg:x="2333" fg:w="2"/><text x="28.5562%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="28.3062%" y="629" width="0.0243%" height="15" fill="rgb(241,38,36)" fg:x="2333" fg:w="2"/><text x="28.5562%" y="639.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (114 samples, 1.38%)</title><rect x="27.2385%" y="725" width="1.3832%" height="15" fill="rgb(245,211,2)" fg:x="2245" fg:w="114"/><text x="27.4885%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (24 samples, 0.29%)</title><rect x="28.3305%" y="709" width="0.2912%" height="15" fill="rgb(206,120,28)" fg:x="2335" fg:w="24"/><text x="28.5805%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (24 samples, 0.29%)</title><rect x="28.3305%" y="693" width="0.2912%" height="15" fill="rgb(211,59,34)" fg:x="2335" fg:w="24"/><text x="28.5805%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (24 samples, 0.29%)</title><rect x="28.3305%" y="677" width="0.2912%" height="15" fill="rgb(233,168,5)" fg:x="2335" fg:w="24"/><text x="28.5805%" y="687.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (24 samples, 0.29%)</title><rect x="28.3305%" y="661" width="0.2912%" height="15" fill="rgb(234,33,13)" fg:x="2335" fg:w="24"/><text x="28.5805%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (24 samples, 0.29%)</title><rect x="28.3305%" y="645" width="0.2912%" height="15" fill="rgb(231,150,26)" fg:x="2335" fg:w="24"/><text x="28.5805%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (24 samples, 0.29%)</title><rect x="28.3305%" y="629" width="0.2912%" height="15" fill="rgb(217,191,4)" fg:x="2335" fg:w="24"/><text x="28.5805%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="28.6217%" y="645" width="0.0121%" height="15" fill="rgb(246,198,38)" fg:x="2359" fg:w="1"/><text x="28.8717%" y="655.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="28.6217%" y="629" width="0.0121%" height="15" fill="rgb(245,64,37)" fg:x="2359" fg:w="1"/><text x="28.8717%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="28.6217%" y="613" width="0.0121%" height="15" fill="rgb(250,30,36)" fg:x="2359" fg:w="1"/><text x="28.8717%" y="623.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="28.6217%" y="597" width="0.0121%" height="15" fill="rgb(217,86,53)" fg:x="2359" fg:w="1"/><text x="28.8717%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="28.6217%" y="581" width="0.0121%" height="15" fill="rgb(228,157,16)" fg:x="2359" fg:w="1"/><text x="28.8717%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="28.6217%" y="565" width="0.0121%" height="15" fill="rgb(217,59,31)" fg:x="2359" fg:w="1"/><text x="28.8717%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::iter::Iter&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (2 samples, 0.02%)</title><rect x="28.6217%" y="725" width="0.0243%" height="15" fill="rgb(237,138,41)" fg:x="2359" fg:w="2"/><text x="28.8717%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (2 samples, 0.02%)</title><rect x="28.6217%" y="709" width="0.0243%" height="15" fill="rgb(227,91,49)" fg:x="2359" fg:w="2"/><text x="28.8717%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (2 samples, 0.02%)</title><rect x="28.6217%" y="693" width="0.0243%" height="15" fill="rgb(247,21,44)" fg:x="2359" fg:w="2"/><text x="28.8717%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="28.6217%" y="677" width="0.0243%" height="15" fill="rgb(219,210,51)" fg:x="2359" fg:w="2"/><text x="28.8717%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="28.6217%" y="661" width="0.0243%" height="15" fill="rgb(209,140,6)" fg:x="2359" fg:w="2"/><text x="28.8717%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="28.6338%" y="645" width="0.0121%" height="15" fill="rgb(221,188,24)" fg:x="2360" fg:w="1"/><text x="28.8838%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="28.6338%" y="629" width="0.0121%" height="15" fill="rgb(232,154,20)" fg:x="2360" fg:w="1"/><text x="28.8838%" y="639.50"></text></g><g><title>mem_cgroup_handle_over_high (1 samples, 0.01%)</title><rect x="28.6460%" y="581" width="0.0121%" height="15" fill="rgb(244,137,50)" fg:x="2361" fg:w="1"/><text x="28.8960%" y="591.50"></text></g><g><title>asm_sysvec_reschedule_ipi (6 samples, 0.07%)</title><rect x="28.6460%" y="677" width="0.0728%" height="15" fill="rgb(225,185,43)" fg:x="2361" fg:w="6"/><text x="28.8960%" y="687.50"></text></g><g><title>sysvec_reschedule_ipi (6 samples, 0.07%)</title><rect x="28.6460%" y="661" width="0.0728%" height="15" fill="rgb(213,205,38)" fg:x="2361" fg:w="6"/><text x="28.8960%" y="671.50"></text></g><g><title>irqentry_exit (6 samples, 0.07%)</title><rect x="28.6460%" y="645" width="0.0728%" height="15" fill="rgb(236,73,12)" fg:x="2361" fg:w="6"/><text x="28.8960%" y="655.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.07%)</title><rect x="28.6460%" y="629" width="0.0728%" height="15" fill="rgb(235,219,13)" fg:x="2361" fg:w="6"/><text x="28.8960%" y="639.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.07%)</title><rect x="28.6460%" y="613" width="0.0728%" height="15" fill="rgb(218,59,36)" fg:x="2361" fg:w="6"/><text x="28.8960%" y="623.50"></text></g><g><title>exit_to_user_mode_loop (6 samples, 0.07%)</title><rect x="28.6460%" y="597" width="0.0728%" height="15" fill="rgb(205,110,39)" fg:x="2361" fg:w="6"/><text x="28.8960%" y="607.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="28.6581%" y="581" width="0.0607%" height="15" fill="rgb(218,206,42)" fg:x="2362" fg:w="5"/><text x="28.9081%" y="591.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="28.6581%" y="565" width="0.0607%" height="15" fill="rgb(248,125,24)" fg:x="2362" fg:w="5"/><text x="28.9081%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="28.6581%" y="549" width="0.0607%" height="15" fill="rgb(242,28,27)" fg:x="2362" fg:w="5"/><text x="28.9081%" y="559.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="28.6581%" y="533" width="0.0607%" height="15" fill="rgb(216,228,15)" fg:x="2362" fg:w="5"/><text x="28.9081%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::multiple::RefMulti&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (8 samples, 0.10%)</title><rect x="28.6460%" y="725" width="0.0971%" height="15" fill="rgb(235,116,46)" fg:x="2361" fg:w="8"/><text x="28.8960%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="28.6460%" y="709" width="0.0971%" height="15" fill="rgb(224,18,32)" fg:x="2361" fg:w="8"/><text x="28.8960%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="28.6460%" y="693" width="0.0971%" height="15" fill="rgb(252,5,12)" fg:x="2361" fg:w="8"/><text x="28.8960%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="28.7188%" y="677" width="0.0243%" height="15" fill="rgb(251,36,5)" fg:x="2367" fg:w="2"/><text x="28.9688%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="28.7188%" y="661" width="0.0243%" height="15" fill="rgb(217,53,14)" fg:x="2367" fg:w="2"/><text x="28.9688%" y="671.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (1 samples, 0.01%)</title><rect x="28.7430%" y="693" width="0.0121%" height="15" fill="rgb(215,86,45)" fg:x="2369" fg:w="1"/><text x="28.9930%" y="703.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (1 samples, 0.01%)</title><rect x="28.7430%" y="677" width="0.0121%" height="15" fill="rgb(242,169,11)" fg:x="2369" fg:w="1"/><text x="28.9930%" y="687.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (1 samples, 0.01%)</title><rect x="28.7430%" y="661" width="0.0121%" height="15" fill="rgb(211,213,45)" fg:x="2369" fg:w="1"/><text x="28.9930%" y="671.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (1 samples, 0.01%)</title><rect x="28.7430%" y="645" width="0.0121%" height="15" fill="rgb(205,88,11)" fg:x="2369" fg:w="1"/><text x="28.9930%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.01%)</title><rect x="28.7430%" y="629" width="0.0121%" height="15" fill="rgb(252,69,26)" fg:x="2369" fg:w="1"/><text x="28.9930%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="28.7430%" y="613" width="0.0121%" height="15" fill="rgb(246,123,37)" fg:x="2369" fg:w="1"/><text x="28.9930%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="28.7552%" y="629" width="0.0243%" height="15" fill="rgb(212,205,5)" fg:x="2370" fg:w="2"/><text x="29.0052%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="28.7673%" y="613" width="0.0121%" height="15" fill="rgb(253,148,0)" fg:x="2371" fg:w="1"/><text x="29.0173%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="28.7552%" y="677" width="0.0364%" height="15" fill="rgb(239,22,4)" fg:x="2370" fg:w="3"/><text x="29.0052%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="28.7552%" y="661" width="0.0364%" height="15" fill="rgb(226,26,53)" fg:x="2370" fg:w="3"/><text x="29.0052%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="28.7552%" y="645" width="0.0364%" height="15" fill="rgb(225,229,45)" fg:x="2370" fg:w="3"/><text x="29.0052%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="28.7794%" y="629" width="0.0121%" height="15" fill="rgb(220,60,37)" fg:x="2372" fg:w="1"/><text x="29.0294%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="28.7794%" y="613" width="0.0121%" height="15" fill="rgb(217,180,35)" fg:x="2372" fg:w="1"/><text x="29.0294%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="28.9250%" y="645" width="0.0121%" height="15" fill="rgb(229,7,53)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="28.9250%" y="629" width="0.0121%" height="15" fill="rgb(254,137,3)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="639.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="28.9250%" y="613" width="0.0121%" height="15" fill="rgb(215,140,41)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="28.9250%" y="597" width="0.0121%" height="15" fill="rgb(250,80,15)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="607.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="28.9250%" y="581" width="0.0121%" height="15" fill="rgb(252,191,6)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="28.9250%" y="565" width="0.0121%" height="15" fill="rgb(246,217,18)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="28.9250%" y="549" width="0.0121%" height="15" fill="rgb(223,93,7)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="28.9250%" y="533" width="0.0121%" height="15" fill="rgb(225,55,52)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="28.9250%" y="517" width="0.0121%" height="15" fill="rgb(240,31,24)" fg:x="2384" fg:w="1"/><text x="29.1750%" y="527.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (16 samples, 0.19%)</title><rect x="28.7552%" y="693" width="0.1941%" height="15" fill="rgb(205,56,52)" fg:x="2370" fg:w="16"/><text x="29.0052%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13 samples, 0.16%)</title><rect x="28.7916%" y="677" width="0.1577%" height="15" fill="rgb(246,146,12)" fg:x="2373" fg:w="13"/><text x="29.0416%" y="687.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (13 samples, 0.16%)</title><rect x="28.7916%" y="661" width="0.1577%" height="15" fill="rgb(239,84,36)" fg:x="2373" fg:w="13"/><text x="29.0416%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="28.9372%" y="645" width="0.0121%" height="15" fill="rgb(207,41,40)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="655.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="28.9372%" y="629" width="0.0121%" height="15" fill="rgb(241,179,25)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="28.9372%" y="613" width="0.0121%" height="15" fill="rgb(210,0,34)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="28.9372%" y="597" width="0.0121%" height="15" fill="rgb(225,217,29)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="28.9372%" y="581" width="0.0121%" height="15" fill="rgb(216,191,38)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="28.9372%" y="565" width="0.0121%" height="15" fill="rgb(232,140,52)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="28.9372%" y="549" width="0.0121%" height="15" fill="rgb(223,158,51)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="28.9372%" y="533" width="0.0121%" height="15" fill="rgb(235,29,51)" fg:x="2385" fg:w="1"/><text x="29.1872%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="28.9493%" y="629" width="0.0364%" height="15" fill="rgb(215,181,18)" fg:x="2386" fg:w="3"/><text x="29.1993%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="28.9493%" y="613" width="0.0364%" height="15" fill="rgb(227,125,34)" fg:x="2386" fg:w="3"/><text x="29.1993%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="28.9493%" y="597" width="0.0364%" height="15" fill="rgb(230,197,49)" fg:x="2386" fg:w="3"/><text x="29.1993%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="28.9614%" y="581" width="0.0243%" height="15" fill="rgb(239,141,16)" fg:x="2387" fg:w="2"/><text x="29.2114%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="28.9736%" y="565" width="0.0121%" height="15" fill="rgb(225,105,43)" fg:x="2388" fg:w="1"/><text x="29.2236%" y="575.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="28.9493%" y="645" width="0.0607%" height="15" fill="rgb(214,131,14)" fg:x="2386" fg:w="5"/><text x="29.1993%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 0.02%)</title><rect x="28.9857%" y="629" width="0.0243%" height="15" fill="rgb(229,177,11)" fg:x="2389" fg:w="2"/><text x="29.2357%" y="639.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 0.02%)</title><rect x="28.9857%" y="613" width="0.0243%" height="15" fill="rgb(231,180,14)" fg:x="2389" fg:w="2"/><text x="29.2357%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="28.9857%" y="597" width="0.0243%" height="15" fill="rgb(232,88,2)" fg:x="2389" fg:w="2"/><text x="29.2357%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="28.9857%" y="581" width="0.0243%" height="15" fill="rgb(205,220,8)" fg:x="2389" fg:w="2"/><text x="29.2357%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="28.9857%" y="565" width="0.0243%" height="15" fill="rgb(225,23,53)" fg:x="2389" fg:w="2"/><text x="29.2357%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="28.9857%" y="549" width="0.0243%" height="15" fill="rgb(213,62,29)" fg:x="2389" fg:w="2"/><text x="29.2357%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="28.9978%" y="533" width="0.0121%" height="15" fill="rgb(227,75,7)" fg:x="2390" fg:w="1"/><text x="29.2478%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="28.9978%" y="517" width="0.0121%" height="15" fill="rgb(207,105,14)" fg:x="2390" fg:w="1"/><text x="29.2478%" y="527.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (209 samples, 2.54%)</title><rect x="26.4863%" y="741" width="2.5358%" height="15" fill="rgb(245,62,29)" fg:x="2183" fg:w="209"/><text x="26.7363%" y="751.50">bl..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (23 samples, 0.28%)</title><rect x="28.7430%" y="725" width="0.2791%" height="15" fill="rgb(236,202,4)" fg:x="2369" fg:w="23"/><text x="28.9930%" y="735.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (23 samples, 0.28%)</title><rect x="28.7430%" y="709" width="0.2791%" height="15" fill="rgb(250,67,1)" fg:x="2369" fg:w="23"/><text x="28.9930%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (6 samples, 0.07%)</title><rect x="28.9493%" y="693" width="0.0728%" height="15" fill="rgb(253,115,44)" fg:x="2386" fg:w="6"/><text x="29.1993%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.07%)</title><rect x="28.9493%" y="677" width="0.0728%" height="15" fill="rgb(251,139,18)" fg:x="2386" fg:w="6"/><text x="29.1993%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="28.9493%" y="661" width="0.0728%" height="15" fill="rgb(218,22,32)" fg:x="2386" fg:w="6"/><text x="29.1993%" y="671.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="29.0099%" y="645" width="0.0121%" height="15" fill="rgb(243,53,5)" fg:x="2391" fg:w="1"/><text x="29.2599%" y="655.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.01%)</title><rect x="29.0099%" y="629" width="0.0121%" height="15" fill="rgb(227,56,16)" fg:x="2391" fg:w="1"/><text x="29.2599%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.01%)</title><rect x="29.0099%" y="613" width="0.0121%" height="15" fill="rgb(245,53,0)" fg:x="2391" fg:w="1"/><text x="29.2599%" y="623.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.01%)</title><rect x="29.0099%" y="597" width="0.0121%" height="15" fill="rgb(216,170,35)" fg:x="2391" fg:w="1"/><text x="29.2599%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::multiple::RefMulti&lt;block_stm_revm::MemoryLocation,dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="29.0221%" y="741" width="0.0607%" height="15" fill="rgb(211,200,8)" fg:x="2392" fg:w="5"/><text x="29.2721%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="29.0221%" y="725" width="0.0607%" height="15" fill="rgb(228,204,44)" fg:x="2392" fg:w="5"/><text x="29.2721%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="29.0221%" y="709" width="0.0607%" height="15" fill="rgb(214,121,17)" fg:x="2392" fg:w="5"/><text x="29.2721%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="29.0221%" y="693" width="0.0607%" height="15" fill="rgb(233,64,38)" fg:x="2392" fg:w="5"/><text x="29.2721%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="29.0221%" y="677" width="0.0607%" height="15" fill="rgb(253,54,19)" fg:x="2392" fg:w="5"/><text x="29.2721%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="29.0827%" y="645" width="0.0121%" height="15" fill="rgb(253,94,18)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="29.0827%" y="629" width="0.0121%" height="15" fill="rgb(227,57,52)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="639.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="29.0827%" y="613" width="0.0121%" height="15" fill="rgb(230,228,50)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="29.0827%" y="597" width="0.0121%" height="15" fill="rgb(217,205,27)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="607.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="29.0827%" y="581" width="0.0121%" height="15" fill="rgb(252,71,50)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="29.0827%" y="565" width="0.0121%" height="15" fill="rgb(209,86,4)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="29.0827%" y="549" width="0.0121%" height="15" fill="rgb(229,94,0)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="29.0827%" y="533" width="0.0121%" height="15" fill="rgb(252,223,21)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="29.0827%" y="517" width="0.0121%" height="15" fill="rgb(230,210,4)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="29.0827%" y="501" width="0.0121%" height="15" fill="rgb(240,149,38)" fg:x="2397" fg:w="1"/><text x="29.3327%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.07%)</title><rect x="29.0827%" y="709" width="0.0728%" height="15" fill="rgb(254,105,20)" fg:x="2397" fg:w="6"/><text x="29.3327%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.07%)</title><rect x="29.0827%" y="693" width="0.0728%" height="15" fill="rgb(253,87,46)" fg:x="2397" fg:w="6"/><text x="29.3327%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.07%)</title><rect x="29.0827%" y="677" width="0.0728%" height="15" fill="rgb(253,116,33)" fg:x="2397" fg:w="6"/><text x="29.3327%" y="687.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="29.0827%" y="661" width="0.0728%" height="15" fill="rgb(229,198,5)" fg:x="2397" fg:w="6"/><text x="29.3327%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="29.0949%" y="645" width="0.0607%" height="15" fill="rgb(242,38,37)" fg:x="2398" fg:w="5"/><text x="29.3449%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="29.0949%" y="629" width="0.0607%" height="15" fill="rgb(242,69,53)" fg:x="2398" fg:w="5"/><text x="29.3449%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="29.0949%" y="613" width="0.0607%" height="15" fill="rgb(249,80,16)" fg:x="2398" fg:w="5"/><text x="29.3449%" y="623.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="29.1434%" y="597" width="0.0121%" height="15" fill="rgb(206,128,11)" fg:x="2402" fg:w="1"/><text x="29.3934%" y="607.50"></text></g><g><title>down_read_trylock (1 samples, 0.01%)</title><rect x="29.2283%" y="549" width="0.0121%" height="15" fill="rgb(212,35,20)" fg:x="2409" fg:w="1"/><text x="29.4783%" y="559.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="29.2526%" y="517" width="0.0121%" height="15" fill="rgb(236,79,13)" fg:x="2411" fg:w="1"/><text x="29.5026%" y="527.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="29.2647%" y="501" width="0.0121%" height="15" fill="rgb(233,123,3)" fg:x="2412" fg:w="1"/><text x="29.5147%" y="511.50"></text></g><g><title>__folio_throttle_swaprate (2 samples, 0.02%)</title><rect x="29.3011%" y="485" width="0.0243%" height="15" fill="rgb(214,93,52)" fg:x="2415" fg:w="2"/><text x="29.5511%" y="495.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="29.3133%" y="469" width="0.0121%" height="15" fill="rgb(251,37,40)" fg:x="2416" fg:w="1"/><text x="29.5633%" y="479.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="29.3254%" y="453" width="0.0243%" height="15" fill="rgb(227,80,54)" fg:x="2417" fg:w="2"/><text x="29.5754%" y="463.50"></text></g><g><title>memcg_check_events (1 samples, 0.01%)</title><rect x="29.3497%" y="453" width="0.0121%" height="15" fill="rgb(254,48,11)" fg:x="2419" fg:w="1"/><text x="29.5997%" y="463.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="29.3497%" y="437" width="0.0121%" height="15" fill="rgb(235,193,26)" fg:x="2419" fg:w="1"/><text x="29.5997%" y="447.50"></text></g><g><title>charge_memcg (5 samples, 0.06%)</title><rect x="29.3254%" y="469" width="0.0607%" height="15" fill="rgb(229,99,21)" fg:x="2417" fg:w="5"/><text x="29.5754%" y="479.50"></text></g><g><title>try_charge_memcg (2 samples, 0.02%)</title><rect x="29.3618%" y="453" width="0.0243%" height="15" fill="rgb(211,140,41)" fg:x="2420" fg:w="2"/><text x="29.6118%" y="463.50"></text></g><g><title>consume_stock (1 samples, 0.01%)</title><rect x="29.3739%" y="437" width="0.0121%" height="15" fill="rgb(240,227,30)" fg:x="2421" fg:w="1"/><text x="29.6239%" y="447.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="29.3861%" y="469" width="0.0121%" height="15" fill="rgb(215,224,45)" fg:x="2422" fg:w="1"/><text x="29.6361%" y="479.50"></text></g><g><title>__mem_cgroup_charge (7 samples, 0.08%)</title><rect x="29.3254%" y="485" width="0.0849%" height="15" fill="rgb(206,123,31)" fg:x="2417" fg:w="7"/><text x="29.5754%" y="495.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="29.3982%" y="469" width="0.0121%" height="15" fill="rgb(210,138,16)" fg:x="2423" fg:w="1"/><text x="29.6482%" y="479.50"></text></g><g><title>__pte_offset_map (2 samples, 0.02%)</title><rect x="29.4103%" y="485" width="0.0243%" height="15" fill="rgb(228,57,28)" fg:x="2424" fg:w="2"/><text x="29.6603%" y="495.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="29.4346%" y="485" width="0.0121%" height="15" fill="rgb(242,170,10)" fg:x="2426" fg:w="1"/><text x="29.6846%" y="495.50"></text></g><g><title>_raw_spin_lock (5 samples, 0.06%)</title><rect x="29.4467%" y="485" width="0.0607%" height="15" fill="rgb(228,214,39)" fg:x="2427" fg:w="5"/><text x="29.6967%" y="495.50"></text></g><g><title>lru_add_fn (6 samples, 0.07%)</title><rect x="29.5195%" y="437" width="0.0728%" height="15" fill="rgb(218,179,33)" fg:x="2433" fg:w="6"/><text x="29.7695%" y="447.50"></text></g><g><title>lru_gen_add_folio (4 samples, 0.05%)</title><rect x="29.5438%" y="421" width="0.0485%" height="15" fill="rgb(235,193,39)" fg:x="2435" fg:w="4"/><text x="29.7938%" y="431.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="29.5802%" y="405" width="0.0121%" height="15" fill="rgb(219,221,36)" fg:x="2438" fg:w="1"/><text x="29.8302%" y="415.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="29.5802%" y="389" width="0.0121%" height="15" fill="rgb(248,218,19)" fg:x="2438" fg:w="1"/><text x="29.8302%" y="399.50"></text></g><g><title>folio_add_lru_vma (8 samples, 0.10%)</title><rect x="29.5074%" y="485" width="0.0971%" height="15" fill="rgb(205,50,9)" fg:x="2432" fg:w="8"/><text x="29.7574%" y="495.50"></text></g><g><title>folio_add_lru (8 samples, 0.10%)</title><rect x="29.5074%" y="469" width="0.0971%" height="15" fill="rgb(238,81,28)" fg:x="2432" fg:w="8"/><text x="29.7574%" y="479.50"></text></g><g><title>folio_batch_move_lru (7 samples, 0.08%)</title><rect x="29.5195%" y="453" width="0.0849%" height="15" fill="rgb(235,110,19)" fg:x="2433" fg:w="7"/><text x="29.7695%" y="463.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="29.5923%" y="437" width="0.0121%" height="15" fill="rgb(214,7,14)" fg:x="2439" fg:w="1"/><text x="29.8423%" y="447.50"></text></g><g><title>inc_mm_counter (1 samples, 0.01%)</title><rect x="29.6045%" y="485" width="0.0121%" height="15" fill="rgb(211,77,3)" fg:x="2440" fg:w="1"/><text x="29.8545%" y="495.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="29.6045%" y="469" width="0.0121%" height="15" fill="rgb(229,5,9)" fg:x="2440" fg:w="1"/><text x="29.8545%" y="479.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="29.6530%" y="405" width="0.0121%" height="15" fill="rgb(225,90,11)" fg:x="2444" fg:w="1"/><text x="29.9030%" y="415.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="29.6530%" y="389" width="0.0121%" height="15" fill="rgb(242,56,8)" fg:x="2444" fg:w="1"/><text x="29.9030%" y="399.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="29.6651%" y="405" width="0.0121%" height="15" fill="rgb(249,212,39)" fg:x="2445" fg:w="1"/><text x="29.9151%" y="415.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="29.6651%" y="389" width="0.0121%" height="15" fill="rgb(236,90,9)" fg:x="2445" fg:w="1"/><text x="29.9151%" y="399.50"></text></g><g><title>get_page_from_freelist (6 samples, 0.07%)</title><rect x="29.6166%" y="437" width="0.0728%" height="15" fill="rgb(206,88,35)" fg:x="2441" fg:w="6"/><text x="29.8666%" y="447.50"></text></g><g><title>rmqueue (6 samples, 0.07%)</title><rect x="29.6166%" y="421" width="0.0728%" height="15" fill="rgb(205,126,30)" fg:x="2441" fg:w="6"/><text x="29.8666%" y="431.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.01%)</title><rect x="29.6773%" y="405" width="0.0121%" height="15" fill="rgb(230,176,12)" fg:x="2446" fg:w="1"/><text x="29.9273%" y="415.50"></text></g><g><title>do_anonymous_page (35 samples, 0.42%)</title><rect x="29.2769%" y="501" width="0.4247%" height="15" fill="rgb(243,19,9)" fg:x="2413" fg:w="35"/><text x="29.5269%" y="511.50"></text></g><g><title>vma_alloc_folio (7 samples, 0.08%)</title><rect x="29.6166%" y="485" width="0.0849%" height="15" fill="rgb(245,171,17)" fg:x="2441" fg:w="7"/><text x="29.8666%" y="495.50"></text></g><g><title>__folio_alloc (7 samples, 0.08%)</title><rect x="29.6166%" y="469" width="0.0849%" height="15" fill="rgb(227,52,21)" fg:x="2441" fg:w="7"/><text x="29.8666%" y="479.50"></text></g><g><title>__alloc_pages (7 samples, 0.08%)</title><rect x="29.6166%" y="453" width="0.0849%" height="15" fill="rgb(238,69,14)" fg:x="2441" fg:w="7"/><text x="29.8666%" y="463.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="29.6894%" y="437" width="0.0121%" height="15" fill="rgb(241,156,39)" fg:x="2447" fg:w="1"/><text x="29.9394%" y="447.50"></text></g><g><title>handle_mm_fault (41 samples, 0.50%)</title><rect x="29.2405%" y="549" width="0.4975%" height="15" fill="rgb(212,227,28)" fg:x="2410" fg:w="41"/><text x="29.4905%" y="559.50"></text></g><g><title>__handle_mm_fault (40 samples, 0.49%)</title><rect x="29.2526%" y="533" width="0.4853%" height="15" fill="rgb(209,118,27)" fg:x="2411" fg:w="40"/><text x="29.5026%" y="543.50"></text></g><g><title>handle_pte_fault (39 samples, 0.47%)</title><rect x="29.2647%" y="517" width="0.4732%" height="15" fill="rgb(226,102,5)" fg:x="2412" fg:w="39"/><text x="29.5147%" y="527.50"></text></g><g><title>pte_offset_map_nolock (3 samples, 0.04%)</title><rect x="29.7015%" y="501" width="0.0364%" height="15" fill="rgb(223,34,3)" fg:x="2448" fg:w="3"/><text x="29.9515%" y="511.50"></text></g><g><title>lock_vma_under_rcu (3 samples, 0.04%)</title><rect x="29.7379%" y="549" width="0.0364%" height="15" fill="rgb(221,81,38)" fg:x="2451" fg:w="3"/><text x="29.9879%" y="559.50"></text></g><g><title>mas_walk (3 samples, 0.04%)</title><rect x="29.7379%" y="533" width="0.0364%" height="15" fill="rgb(236,219,28)" fg:x="2451" fg:w="3"/><text x="29.9879%" y="543.50"></text></g><g><title>mtree_range_walk (3 samples, 0.04%)</title><rect x="29.7379%" y="517" width="0.0364%" height="15" fill="rgb(213,200,14)" fg:x="2451" fg:w="3"/><text x="29.9879%" y="527.50"></text></g><g><title>asm_exc_page_fault (46 samples, 0.56%)</title><rect x="29.2283%" y="597" width="0.5581%" height="15" fill="rgb(240,33,19)" fg:x="2409" fg:w="46"/><text x="29.4783%" y="607.50"></text></g><g><title>exc_page_fault (46 samples, 0.56%)</title><rect x="29.2283%" y="581" width="0.5581%" height="15" fill="rgb(233,113,27)" fg:x="2409" fg:w="46"/><text x="29.4783%" y="591.50"></text></g><g><title>do_user_addr_fault (46 samples, 0.56%)</title><rect x="29.2283%" y="565" width="0.5581%" height="15" fill="rgb(220,221,18)" fg:x="2409" fg:w="46"/><text x="29.4783%" y="575.50"></text></g><g><title>up_read (1 samples, 0.01%)</title><rect x="29.7743%" y="549" width="0.0121%" height="15" fill="rgb(238,92,8)" fg:x="2454" fg:w="1"/><text x="30.0243%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (59 samples, 0.72%)</title><rect x="29.1555%" y="629" width="0.7158%" height="15" fill="rgb(222,164,16)" fg:x="2403" fg:w="59"/><text x="29.4055%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (59 samples, 0.72%)</title><rect x="29.1555%" y="613" width="0.7158%" height="15" fill="rgb(241,119,3)" fg:x="2403" fg:w="59"/><text x="29.4055%" y="623.50"></text></g><g><title>sync_regs (7 samples, 0.08%)</title><rect x="29.7865%" y="597" width="0.0849%" height="15" fill="rgb(241,44,8)" fg:x="2455" fg:w="7"/><text x="30.0365%" y="607.50"></text></g><g><title>page_remove_rmap (1 samples, 0.01%)</title><rect x="29.8714%" y="309" width="0.0121%" height="15" fill="rgb(230,36,40)" fg:x="2462" fg:w="1"/><text x="30.1214%" y="319.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="29.8714%" y="293" width="0.0121%" height="15" fill="rgb(243,16,36)" fg:x="2462" fg:w="1"/><text x="30.1214%" y="303.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="29.8714%" y="277" width="0.0121%" height="15" fill="rgb(231,4,26)" fg:x="2462" fg:w="1"/><text x="30.1214%" y="287.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="29.8714%" y="261" width="0.0121%" height="15" fill="rgb(240,9,31)" fg:x="2462" fg:w="1"/><text x="30.1214%" y="271.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.01%)</title><rect x="29.8835%" y="309" width="0.0121%" height="15" fill="rgb(207,173,15)" fg:x="2463" fg:w="1"/><text x="30.1335%" y="319.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="29.8835%" y="293" width="0.0121%" height="15" fill="rgb(224,192,53)" fg:x="2463" fg:w="1"/><text x="30.1335%" y="303.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="29.8835%" y="277" width="0.0121%" height="15" fill="rgb(223,67,28)" fg:x="2463" fg:w="1"/><text x="30.1335%" y="287.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="29.8835%" y="261" width="0.0121%" height="15" fill="rgb(211,20,47)" fg:x="2463" fg:w="1"/><text x="30.1335%" y="271.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="29.8835%" y="245" width="0.0121%" height="15" fill="rgb(240,228,2)" fg:x="2463" fg:w="1"/><text x="30.1335%" y="255.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.01%)</title><rect x="29.8835%" y="229" width="0.0121%" height="15" fill="rgb(248,151,12)" fg:x="2463" fg:w="1"/><text x="30.1335%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (3 samples, 0.04%)</title><rect x="29.8714%" y="629" width="0.0364%" height="15" fill="rgb(244,8,39)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="639.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="29.8714%" y="613" width="0.0364%" height="15" fill="rgb(222,26,8)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (3 samples, 0.04%)</title><rect x="29.8714%" y="597" width="0.0364%" height="15" fill="rgb(213,106,44)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.04%)</title><rect x="29.8714%" y="581" width="0.0364%" height="15" fill="rgb(214,129,20)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="29.8714%" y="565" width="0.0364%" height="15" fill="rgb(212,32,13)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="29.8714%" y="549" width="0.0364%" height="15" fill="rgb(208,168,33)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="559.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="29.8714%" y="533" width="0.0364%" height="15" fill="rgb(231,207,8)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="543.50"></text></g><g><title>__GI_munmap (3 samples, 0.04%)</title><rect x="29.8714%" y="517" width="0.0364%" height="15" fill="rgb(235,219,23)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="29.8714%" y="501" width="0.0364%" height="15" fill="rgb(226,216,26)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="511.50"></text></g><g><title>do_syscall_64 (3 samples, 0.04%)</title><rect x="29.8714%" y="485" width="0.0364%" height="15" fill="rgb(239,137,16)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="495.50"></text></g><g><title>__x64_sys_munmap (3 samples, 0.04%)</title><rect x="29.8714%" y="469" width="0.0364%" height="15" fill="rgb(207,12,36)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="479.50"></text></g><g><title>__vm_munmap (3 samples, 0.04%)</title><rect x="29.8714%" y="453" width="0.0364%" height="15" fill="rgb(210,214,24)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="463.50"></text></g><g><title>do_vmi_munmap (3 samples, 0.04%)</title><rect x="29.8714%" y="437" width="0.0364%" height="15" fill="rgb(206,56,30)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="447.50"></text></g><g><title>do_vmi_align_munmap (3 samples, 0.04%)</title><rect x="29.8714%" y="421" width="0.0364%" height="15" fill="rgb(228,143,26)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="431.50"></text></g><g><title>unmap_region (3 samples, 0.04%)</title><rect x="29.8714%" y="405" width="0.0364%" height="15" fill="rgb(216,218,46)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="415.50"></text></g><g><title>unmap_vmas (3 samples, 0.04%)</title><rect x="29.8714%" y="389" width="0.0364%" height="15" fill="rgb(206,6,19)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="399.50"></text></g><g><title>unmap_single_vma (3 samples, 0.04%)</title><rect x="29.8714%" y="373" width="0.0364%" height="15" fill="rgb(239,177,51)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="383.50"></text></g><g><title>unmap_page_range (3 samples, 0.04%)</title><rect x="29.8714%" y="357" width="0.0364%" height="15" fill="rgb(216,55,25)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="367.50"></text></g><g><title>zap_pmd_range.isra.0 (3 samples, 0.04%)</title><rect x="29.8714%" y="341" width="0.0364%" height="15" fill="rgb(231,163,29)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="351.50"></text></g><g><title>zap_pte_range (3 samples, 0.04%)</title><rect x="29.8714%" y="325" width="0.0364%" height="15" fill="rgb(232,149,50)" fg:x="2462" fg:w="3"/><text x="30.1214%" y="335.50"></text></g><g><title>vm_normal_page (1 samples, 0.01%)</title><rect x="29.8957%" y="309" width="0.0121%" height="15" fill="rgb(223,142,48)" fg:x="2464" fg:w="1"/><text x="30.1457%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="29.9078%" y="565" width="0.0364%" height="15" fill="rgb(245,83,23)" fg:x="2465" fg:w="3"/><text x="30.1578%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="29.9078%" y="549" width="0.0364%" height="15" fill="rgb(224,63,2)" fg:x="2465" fg:w="3"/><text x="30.1578%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.04%)</title><rect x="29.9078%" y="533" width="0.0364%" height="15" fill="rgb(218,65,53)" fg:x="2465" fg:w="3"/><text x="30.1578%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.04%)</title><rect x="29.9078%" y="517" width="0.0364%" height="15" fill="rgb(221,84,29)" fg:x="2465" fg:w="3"/><text x="30.1578%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="29.9321%" y="501" width="0.0121%" height="15" fill="rgb(234,0,32)" fg:x="2467" fg:w="1"/><text x="30.1821%" y="511.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="29.9927%" y="533" width="0.0728%" height="15" fill="rgb(206,20,16)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="543.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="29.9927%" y="517" width="0.0728%" height="15" fill="rgb(244,172,18)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="527.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.07%)</title><rect x="29.9927%" y="501" width="0.0728%" height="15" fill="rgb(254,133,1)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.07%)</title><rect x="29.9927%" y="485" width="0.0728%" height="15" fill="rgb(222,206,41)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="495.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.07%)</title><rect x="29.9927%" y="469" width="0.0728%" height="15" fill="rgb(212,3,42)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="479.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.07%)</title><rect x="29.9927%" y="453" width="0.0728%" height="15" fill="rgb(241,11,4)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="29.9927%" y="437" width="0.0728%" height="15" fill="rgb(205,19,26)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="29.9927%" y="421" width="0.0728%" height="15" fill="rgb(210,179,32)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="29.9927%" y="405" width="0.0728%" height="15" fill="rgb(227,116,49)" fg:x="2472" fg:w="6"/><text x="30.2427%" y="415.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.04%)</title><rect x="30.0291%" y="389" width="0.0364%" height="15" fill="rgb(211,146,6)" fg:x="2475" fg:w="3"/><text x="30.2791%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="30.0655%" y="485" width="0.0121%" height="15" fill="rgb(219,44,39)" fg:x="2478" fg:w="1"/><text x="30.3155%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (16 samples, 0.19%)</title><rect x="29.9078%" y="629" width="0.1941%" height="15" fill="rgb(234,128,11)" fg:x="2465" fg:w="16"/><text x="30.1578%" y="639.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (16 samples, 0.19%)</title><rect x="29.9078%" y="613" width="0.1941%" height="15" fill="rgb(220,183,53)" fg:x="2465" fg:w="16"/><text x="30.1578%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.19%)</title><rect x="29.9078%" y="597" width="0.1941%" height="15" fill="rgb(213,219,32)" fg:x="2465" fg:w="16"/><text x="30.1578%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.19%)</title><rect x="29.9078%" y="581" width="0.1941%" height="15" fill="rgb(232,156,16)" fg:x="2465" fg:w="16"/><text x="30.1578%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13 samples, 0.16%)</title><rect x="29.9442%" y="565" width="0.1577%" height="15" fill="rgb(246,135,34)" fg:x="2468" fg:w="13"/><text x="30.1942%" y="575.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (13 samples, 0.16%)</title><rect x="29.9442%" y="549" width="0.1577%" height="15" fill="rgb(241,99,0)" fg:x="2468" fg:w="13"/><text x="30.1942%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="30.0655%" y="533" width="0.0364%" height="15" fill="rgb(222,103,45)" fg:x="2478" fg:w="3"/><text x="30.3155%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="30.0655%" y="517" width="0.0364%" height="15" fill="rgb(212,57,4)" fg:x="2478" fg:w="3"/><text x="30.3155%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="30.0655%" y="501" width="0.0364%" height="15" fill="rgb(215,68,47)" fg:x="2478" fg:w="3"/><text x="30.3155%" y="511.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="30.0777%" y="485" width="0.0243%" height="15" fill="rgb(230,84,2)" fg:x="2479" fg:w="2"/><text x="30.3277%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (80 samples, 0.97%)</title><rect x="29.1555%" y="693" width="0.9706%" height="15" fill="rgb(220,102,14)" fg:x="2403" fg:w="80"/><text x="29.4055%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (80 samples, 0.97%)</title><rect x="29.1555%" y="677" width="0.9706%" height="15" fill="rgb(240,10,32)" fg:x="2403" fg:w="80"/><text x="29.4055%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (80 samples, 0.97%)</title><rect x="29.1555%" y="661" width="0.9706%" height="15" fill="rgb(215,47,27)" fg:x="2403" fg:w="80"/><text x="29.4055%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (80 samples, 0.97%)</title><rect x="29.1555%" y="645" width="0.9706%" height="15" fill="rgb(233,188,43)" fg:x="2403" fg:w="80"/><text x="29.4055%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (2 samples, 0.02%)</title><rect x="30.1019%" y="629" width="0.0243%" height="15" fill="rgb(253,190,1)" fg:x="2481" fg:w="2"/><text x="30.3519%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.02%)</title><rect x="30.1019%" y="613" width="0.0243%" height="15" fill="rgb(206,114,52)" fg:x="2481" fg:w="2"/><text x="30.3519%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.02%)</title><rect x="30.1019%" y="597" width="0.0243%" height="15" fill="rgb(233,120,37)" fg:x="2481" fg:w="2"/><text x="30.3519%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (5 samples, 0.06%)</title><rect x="30.1262%" y="677" width="0.0607%" height="15" fill="rgb(214,52,39)" fg:x="2483" fg:w="5"/><text x="30.3762%" y="687.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (5 samples, 0.06%)</title><rect x="30.1262%" y="661" width="0.0607%" height="15" fill="rgb(223,80,29)" fg:x="2483" fg:w="5"/><text x="30.3762%" y="671.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.06%)</title><rect x="30.1262%" y="645" width="0.0607%" height="15" fill="rgb(230,101,40)" fg:x="2483" fg:w="5"/><text x="30.3762%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.06%)</title><rect x="30.1262%" y="629" width="0.0607%" height="15" fill="rgb(219,211,8)" fg:x="2483" fg:w="5"/><text x="30.3762%" y="639.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::cmp::PartialEq&gt;::eq (5 samples, 0.06%)</title><rect x="30.1262%" y="613" width="0.0607%" height="15" fill="rgb(252,126,28)" fg:x="2483" fg:w="5"/><text x="30.3762%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (87 samples, 1.06%)</title><rect x="29.1555%" y="709" width="1.0556%" height="15" fill="rgb(215,56,38)" fg:x="2403" fg:w="87"/><text x="29.4055%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.08%)</title><rect x="30.1262%" y="693" width="0.0849%" height="15" fill="rgb(249,55,44)" fg:x="2483" fg:w="7"/><text x="30.3762%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.02%)</title><rect x="30.1868%" y="677" width="0.0243%" height="15" fill="rgb(220,221,32)" fg:x="2488" fg:w="2"/><text x="30.4368%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.02%)</title><rect x="30.1868%" y="661" width="0.0243%" height="15" fill="rgb(212,216,41)" fg:x="2488" fg:w="2"/><text x="30.4368%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="30.1868%" y="645" width="0.0243%" height="15" fill="rgb(228,213,43)" fg:x="2488" fg:w="2"/><text x="30.4368%" y="655.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::snapshot (312 samples, 3.79%)</title><rect x="26.4620%" y="757" width="3.7855%" height="15" fill="rgb(211,31,26)" fg:x="2181" fg:w="312"/><text x="26.7120%" y="767.50">bloc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (96 samples, 1.16%)</title><rect x="29.0827%" y="741" width="1.1648%" height="15" fill="rgb(229,202,19)" fg:x="2397" fg:w="96"/><text x="29.3327%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (96 samples, 1.16%)</title><rect x="29.0827%" y="725" width="1.1648%" height="15" fill="rgb(229,105,46)" fg:x="2397" fg:w="96"/><text x="29.3327%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.04%)</title><rect x="30.2111%" y="709" width="0.0364%" height="15" fill="rgb(235,108,1)" fg:x="2490" fg:w="3"/><text x="30.4611%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.04%)</title><rect x="30.2111%" y="693" width="0.0364%" height="15" fill="rgb(245,111,35)" fg:x="2490" fg:w="3"/><text x="30.4611%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.04%)</title><rect x="30.2111%" y="677" width="0.0364%" height="15" fill="rgb(219,185,31)" fg:x="2490" fg:w="3"/><text x="30.4611%" y="687.50"></text></g><g><title>core::ptr::write (3 samples, 0.04%)</title><rect x="30.2111%" y="661" width="0.0364%" height="15" fill="rgb(214,4,43)" fg:x="2490" fg:w="3"/><text x="30.4611%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="30.2111%" y="645" width="0.0364%" height="15" fill="rgb(235,227,40)" fg:x="2490" fg:w="3"/><text x="30.4611%" y="655.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="30.2839%" y="437" width="0.0121%" height="15" fill="rgb(230,88,30)" fg:x="2496" fg:w="1"/><text x="30.5339%" y="447.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="30.3082%" y="421" width="0.0121%" height="15" fill="rgb(216,217,1)" fg:x="2498" fg:w="1"/><text x="30.5582%" y="431.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="30.3082%" y="405" width="0.0121%" height="15" fill="rgb(248,139,50)" fg:x="2498" fg:w="1"/><text x="30.5582%" y="415.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.05%)</title><rect x="30.2839%" y="533" width="0.0485%" height="15" fill="rgb(233,1,21)" fg:x="2496" fg:w="4"/><text x="30.5339%" y="543.50"></text></g><g><title>exc_page_fault (4 samples, 0.05%)</title><rect x="30.2839%" y="517" width="0.0485%" height="15" fill="rgb(215,183,12)" fg:x="2496" fg:w="4"/><text x="30.5339%" y="527.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.05%)</title><rect x="30.2839%" y="501" width="0.0485%" height="15" fill="rgb(229,104,42)" fg:x="2496" fg:w="4"/><text x="30.5339%" y="511.50"></text></g><g><title>handle_mm_fault (4 samples, 0.05%)</title><rect x="30.2839%" y="485" width="0.0485%" height="15" fill="rgb(243,34,48)" fg:x="2496" fg:w="4"/><text x="30.5339%" y="495.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.05%)</title><rect x="30.2839%" y="469" width="0.0485%" height="15" fill="rgb(239,11,44)" fg:x="2496" fg:w="4"/><text x="30.5339%" y="479.50"></text></g><g><title>handle_pte_fault (4 samples, 0.05%)</title><rect x="30.2839%" y="453" width="0.0485%" height="15" fill="rgb(231,98,35)" fg:x="2496" fg:w="4"/><text x="30.5339%" y="463.50"></text></g><g><title>do_anonymous_page (3 samples, 0.04%)</title><rect x="30.2960%" y="437" width="0.0364%" height="15" fill="rgb(233,28,25)" fg:x="2497" fg:w="3"/><text x="30.5460%" y="447.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="30.3203%" y="421" width="0.0121%" height="15" fill="rgb(234,123,11)" fg:x="2499" fg:w="1"/><text x="30.5703%" y="431.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::new (8 samples, 0.10%)</title><rect x="30.2475%" y="757" width="0.0971%" height="15" fill="rgb(220,69,3)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.10%)</title><rect x="30.2475%" y="741" width="0.0971%" height="15" fill="rgb(214,64,36)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.10%)</title><rect x="30.2475%" y="725" width="0.0971%" height="15" fill="rgb(211,138,32)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.10%)</title><rect x="30.2475%" y="709" width="0.0971%" height="15" fill="rgb(213,118,47)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.10%)</title><rect x="30.2475%" y="693" width="0.0971%" height="15" fill="rgb(243,124,49)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.10%)</title><rect x="30.2475%" y="677" width="0.0971%" height="15" fill="rgb(221,30,28)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8 samples, 0.10%)</title><rect x="30.2475%" y="661" width="0.0971%" height="15" fill="rgb(246,37,13)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.10%)</title><rect x="30.2475%" y="645" width="0.0971%" height="15" fill="rgb(249,66,14)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.10%)</title><rect x="30.2475%" y="629" width="0.0971%" height="15" fill="rgb(213,166,5)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.10%)</title><rect x="30.2475%" y="613" width="0.0971%" height="15" fill="rgb(221,66,24)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8 samples, 0.10%)</title><rect x="30.2475%" y="597" width="0.0971%" height="15" fill="rgb(210,132,17)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.10%)</title><rect x="30.2475%" y="581" width="0.0971%" height="15" fill="rgb(243,202,5)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (8 samples, 0.10%)</title><rect x="30.2475%" y="565" width="0.0971%" height="15" fill="rgb(233,70,48)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="575.50"></text></g><g><title>core::ptr::write (8 samples, 0.10%)</title><rect x="30.2475%" y="549" width="0.0971%" height="15" fill="rgb(238,41,26)" fg:x="2493" fg:w="8"/><text x="30.4975%" y="559.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="30.3324%" y="533" width="0.0121%" height="15" fill="rgb(241,19,31)" fg:x="2500" fg:w="1"/><text x="30.5824%" y="543.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="30.3567%" y="389" width="0.0121%" height="15" fill="rgb(214,76,10)" fg:x="2502" fg:w="1"/><text x="30.6067%" y="399.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="30.3688%" y="389" width="0.0121%" height="15" fill="rgb(254,202,22)" fg:x="2503" fg:w="1"/><text x="30.6188%" y="399.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="30.3810%" y="389" width="0.0243%" height="15" fill="rgb(214,72,24)" fg:x="2504" fg:w="2"/><text x="30.6310%" y="399.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="30.3810%" y="373" width="0.0243%" height="15" fill="rgb(221,92,46)" fg:x="2504" fg:w="2"/><text x="30.6310%" y="383.50"></text></g><g><title>handle_mm_fault (6 samples, 0.07%)</title><rect x="30.3567%" y="453" width="0.0728%" height="15" fill="rgb(246,13,50)" fg:x="2502" fg:w="6"/><text x="30.6067%" y="463.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.07%)</title><rect x="30.3567%" y="437" width="0.0728%" height="15" fill="rgb(240,165,38)" fg:x="2502" fg:w="6"/><text x="30.6067%" y="447.50"></text></g><g><title>handle_pte_fault (6 samples, 0.07%)</title><rect x="30.3567%" y="421" width="0.0728%" height="15" fill="rgb(241,24,51)" fg:x="2502" fg:w="6"/><text x="30.6067%" y="431.50"></text></g><g><title>do_anonymous_page (6 samples, 0.07%)</title><rect x="30.3567%" y="405" width="0.0728%" height="15" fill="rgb(227,51,44)" fg:x="2502" fg:w="6"/><text x="30.6067%" y="415.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.02%)</title><rect x="30.4052%" y="389" width="0.0243%" height="15" fill="rgb(231,121,3)" fg:x="2506" fg:w="2"/><text x="30.6552%" y="399.50"></text></g><g><title>__folio_alloc (2 samples, 0.02%)</title><rect x="30.4052%" y="373" width="0.0243%" height="15" fill="rgb(245,3,41)" fg:x="2506" fg:w="2"/><text x="30.6552%" y="383.50"></text></g><g><title>__alloc_pages (2 samples, 0.02%)</title><rect x="30.4052%" y="357" width="0.0243%" height="15" fill="rgb(214,13,26)" fg:x="2506" fg:w="2"/><text x="30.6552%" y="367.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="30.4052%" y="341" width="0.0243%" height="15" fill="rgb(252,75,11)" fg:x="2506" fg:w="2"/><text x="30.6552%" y="351.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="30.4174%" y="325" width="0.0121%" height="15" fill="rgb(218,226,17)" fg:x="2507" fg:w="1"/><text x="30.6674%" y="335.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.10%)</title><rect x="30.3446%" y="501" width="0.0971%" height="15" fill="rgb(248,89,38)" fg:x="2501" fg:w="8"/><text x="30.5946%" y="511.50"></text></g><g><title>exc_page_fault (7 samples, 0.08%)</title><rect x="30.3567%" y="485" width="0.0849%" height="15" fill="rgb(237,73,46)" fg:x="2502" fg:w="7"/><text x="30.6067%" y="495.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.08%)</title><rect x="30.3567%" y="469" width="0.0849%" height="15" fill="rgb(242,78,33)" fg:x="2502" fg:w="7"/><text x="30.6067%" y="479.50"></text></g><g><title>lock_vma_under_rcu (1 samples, 0.01%)</title><rect x="30.4295%" y="453" width="0.0121%" height="15" fill="rgb(235,60,3)" fg:x="2508" fg:w="1"/><text x="30.6795%" y="463.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="30.4295%" y="437" width="0.0121%" height="15" fill="rgb(216,172,19)" fg:x="2508" fg:w="1"/><text x="30.6795%" y="447.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="30.4295%" y="421" width="0.0121%" height="15" fill="rgb(227,6,42)" fg:x="2508" fg:w="1"/><text x="30.6795%" y="431.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="30.4416%" y="501" width="0.0121%" height="15" fill="rgb(223,207,42)" fg:x="2509" fg:w="1"/><text x="30.6916%" y="511.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (11 samples, 0.13%)</title><rect x="30.3446%" y="565" width="0.1335%" height="15" fill="rgb(246,138,30)" fg:x="2501" fg:w="11"/><text x="30.5946%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (11 samples, 0.13%)</title><rect x="30.3446%" y="549" width="0.1335%" height="15" fill="rgb(251,199,47)" fg:x="2501" fg:w="11"/><text x="30.5946%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (11 samples, 0.13%)</title><rect x="30.3446%" y="533" width="0.1335%" height="15" fill="rgb(228,218,44)" fg:x="2501" fg:w="11"/><text x="30.5946%" y="543.50"></text></g><g><title>core::ptr::write (11 samples, 0.13%)</title><rect x="30.3446%" y="517" width="0.1335%" height="15" fill="rgb(220,68,6)" fg:x="2501" fg:w="11"/><text x="30.5946%" y="527.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="30.4538%" y="501" width="0.0243%" height="15" fill="rgb(240,60,26)" fg:x="2510" fg:w="2"/><text x="30.7038%" y="511.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::clone::Clone&gt;::clone (8 samples, 0.10%)</title><rect x="30.4780%" y="517" width="0.0971%" height="15" fill="rgb(211,200,19)" fg:x="2512" fg:w="8"/><text x="30.7280%" y="527.50"></text></g><g><title>&lt;revm_primitives::result::Output as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="30.5144%" y="501" width="0.0607%" height="15" fill="rgb(242,145,30)" fg:x="2515" fg:w="5"/><text x="30.7644%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="30.5994%" y="437" width="0.0121%" height="15" fill="rgb(225,64,13)" fg:x="2522" fg:w="1"/><text x="30.8494%" y="447.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (36 samples, 0.44%)</title><rect x="30.6115%" y="421" width="0.4368%" height="15" fill="rgb(218,103,35)" fg:x="2523" fg:w="36"/><text x="30.8615%" y="431.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="31.0483%" y="389" width="0.0243%" height="15" fill="rgb(216,93,46)" fg:x="2559" fg:w="2"/><text x="31.2983%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="31.0726%" y="389" width="0.1092%" height="15" fill="rgb(225,159,27)" fg:x="2561" fg:w="9"/><text x="31.3226%" y="399.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="31.0726%" y="373" width="0.1092%" height="15" fill="rgb(225,204,11)" fg:x="2561" fg:w="9"/><text x="31.3226%" y="383.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (8 samples, 0.10%)</title><rect x="31.0847%" y="357" width="0.0971%" height="15" fill="rgb(205,56,4)" fg:x="2562" fg:w="8"/><text x="31.3347%" y="367.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (8 samples, 0.10%)</title><rect x="31.0847%" y="341" width="0.0971%" height="15" fill="rgb(206,6,35)" fg:x="2562" fg:w="8"/><text x="31.3347%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.10%)</title><rect x="31.0847%" y="325" width="0.0971%" height="15" fill="rgb(247,73,52)" fg:x="2562" fg:w="8"/><text x="31.3347%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (8 samples, 0.10%)</title><rect x="31.0847%" y="309" width="0.0971%" height="15" fill="rgb(246,97,4)" fg:x="2562" fg:w="8"/><text x="31.3347%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (8 samples, 0.10%)</title><rect x="31.0847%" y="293" width="0.0971%" height="15" fill="rgb(212,37,15)" fg:x="2562" fg:w="8"/><text x="31.3347%" y="303.50"></text></g><g><title>core::clone::Clone::clone (52 samples, 0.63%)</title><rect x="30.6115%" y="437" width="0.6309%" height="15" fill="rgb(208,130,40)" fg:x="2523" fg:w="52"/><text x="30.8615%" y="447.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (16 samples, 0.19%)</title><rect x="31.0483%" y="421" width="0.1941%" height="15" fill="rgb(236,55,29)" fg:x="2559" fg:w="16"/><text x="31.2983%" y="431.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (16 samples, 0.19%)</title><rect x="31.0483%" y="405" width="0.1941%" height="15" fill="rgb(209,156,45)" fg:x="2559" fg:w="16"/><text x="31.2983%" y="415.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="31.1818%" y="389" width="0.0607%" height="15" fill="rgb(249,107,4)" fg:x="2570" fg:w="5"/><text x="31.4318%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (33 samples, 0.40%)</title><rect x="31.2424%" y="437" width="0.4004%" height="15" fill="rgb(227,7,13)" fg:x="2575" fg:w="33"/><text x="31.4924%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.40%)</title><rect x="31.2424%" y="421" width="0.4004%" height="15" fill="rgb(250,129,14)" fg:x="2575" fg:w="33"/><text x="31.4924%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (33 samples, 0.40%)</title><rect x="31.2424%" y="405" width="0.4004%" height="15" fill="rgb(229,92,13)" fg:x="2575" fg:w="33"/><text x="31.4924%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (90 samples, 1.09%)</title><rect x="30.5994%" y="469" width="1.0920%" height="15" fill="rgb(245,98,39)" fg:x="2522" fg:w="90"/><text x="30.8494%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (90 samples, 1.09%)</title><rect x="30.5994%" y="453" width="1.0920%" height="15" fill="rgb(234,135,48)" fg:x="2522" fg:w="90"/><text x="30.8494%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.05%)</title><rect x="31.6428%" y="437" width="0.0485%" height="15" fill="rgb(230,98,28)" fg:x="2608" fg:w="4"/><text x="31.8928%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.05%)</title><rect x="31.6428%" y="421" width="0.0485%" height="15" fill="rgb(223,121,0)" fg:x="2608" fg:w="4"/><text x="31.8928%" y="431.50"></text></g><g><title>core::ptr::write (4 samples, 0.05%)</title><rect x="31.6428%" y="405" width="0.0485%" height="15" fill="rgb(234,173,33)" fg:x="2608" fg:w="4"/><text x="31.8928%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="31.6671%" y="389" width="0.0243%" height="15" fill="rgb(245,47,8)" fg:x="2610" fg:w="2"/><text x="31.9171%" y="399.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="31.7884%" y="325" width="0.0121%" height="15" fill="rgb(205,17,20)" fg:x="2620" fg:w="1"/><text x="32.0384%" y="335.50"></text></g><g><title>access_error (1 samples, 0.01%)</title><rect x="31.8005%" y="309" width="0.0121%" height="15" fill="rgb(232,151,16)" fg:x="2621" fg:w="1"/><text x="32.0505%" y="319.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="31.8127%" y="293" width="0.0121%" height="15" fill="rgb(208,30,32)" fg:x="2622" fg:w="1"/><text x="32.0627%" y="303.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="31.8612%" y="245" width="0.0243%" height="15" fill="rgb(254,26,3)" fg:x="2626" fg:w="2"/><text x="32.1112%" y="255.50"></text></g><g><title>__folio_throttle_swaprate (2 samples, 0.02%)</title><rect x="31.8855%" y="229" width="0.0243%" height="15" fill="rgb(240,177,30)" fg:x="2628" fg:w="2"/><text x="32.1355%" y="239.50"></text></g><g><title>blk_cgroup_congested (2 samples, 0.02%)</title><rect x="31.8855%" y="213" width="0.0243%" height="15" fill="rgb(248,76,44)" fg:x="2628" fg:w="2"/><text x="32.1355%" y="223.50"></text></g><g><title>kthread_blkcg (1 samples, 0.01%)</title><rect x="31.8976%" y="197" width="0.0121%" height="15" fill="rgb(241,186,54)" fg:x="2629" fg:w="1"/><text x="32.1476%" y="207.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="31.9219%" y="213" width="0.0121%" height="15" fill="rgb(249,171,29)" fg:x="2631" fg:w="1"/><text x="32.1719%" y="223.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="31.9461%" y="197" width="0.0121%" height="15" fill="rgb(237,151,44)" fg:x="2633" fg:w="1"/><text x="32.1961%" y="207.50"></text></g><g><title>cgroup_rstat_updated (5 samples, 0.06%)</title><rect x="31.9583%" y="197" width="0.0607%" height="15" fill="rgb(228,174,30)" fg:x="2634" fg:w="5"/><text x="32.2083%" y="207.50"></text></g><g><title>charge_memcg (8 samples, 0.10%)</title><rect x="31.9340%" y="213" width="0.0971%" height="15" fill="rgb(252,14,37)" fg:x="2632" fg:w="8"/><text x="32.1840%" y="223.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="32.0189%" y="197" width="0.0121%" height="15" fill="rgb(207,111,40)" fg:x="2639" fg:w="1"/><text x="32.2689%" y="207.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.01%)</title><rect x="32.0189%" y="181" width="0.0121%" height="15" fill="rgb(248,171,54)" fg:x="2639" fg:w="1"/><text x="32.2689%" y="191.50"></text></g><g><title>__mem_cgroup_charge (14 samples, 0.17%)</title><rect x="31.9097%" y="229" width="0.1699%" height="15" fill="rgb(211,127,2)" fg:x="2630" fg:w="14"/><text x="32.1597%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (4 samples, 0.05%)</title><rect x="32.0311%" y="213" width="0.0485%" height="15" fill="rgb(236,87,47)" fg:x="2640" fg:w="4"/><text x="32.2811%" y="223.50"></text></g><g><title>__pte_offset_map_lock (4 samples, 0.05%)</title><rect x="32.0796%" y="229" width="0.0485%" height="15" fill="rgb(223,190,45)" fg:x="2644" fg:w="4"/><text x="32.3296%" y="239.50"></text></g><g><title>_raw_spin_lock (9 samples, 0.11%)</title><rect x="32.1281%" y="229" width="0.1092%" height="15" fill="rgb(215,5,16)" fg:x="2648" fg:w="9"/><text x="32.3781%" y="239.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="32.2373%" y="229" width="0.0121%" height="15" fill="rgb(252,82,33)" fg:x="2657" fg:w="1"/><text x="32.4873%" y="239.50"></text></g><g><title>folio_add_lru_vma (4 samples, 0.05%)</title><rect x="32.2495%" y="229" width="0.0485%" height="15" fill="rgb(247,213,44)" fg:x="2658" fg:w="4"/><text x="32.4995%" y="239.50"></text></g><g><title>folio_add_lru (4 samples, 0.05%)</title><rect x="32.2495%" y="213" width="0.0485%" height="15" fill="rgb(205,196,44)" fg:x="2658" fg:w="4"/><text x="32.4995%" y="223.50"></text></g><g><title>folio_batch_move_lru (4 samples, 0.05%)</title><rect x="32.2495%" y="197" width="0.0485%" height="15" fill="rgb(237,96,54)" fg:x="2658" fg:w="4"/><text x="32.4995%" y="207.50"></text></g><g><title>lru_add_fn (4 samples, 0.05%)</title><rect x="32.2495%" y="181" width="0.0485%" height="15" fill="rgb(230,113,34)" fg:x="2658" fg:w="4"/><text x="32.4995%" y="191.50"></text></g><g><title>lru_gen_add_folio (3 samples, 0.04%)</title><rect x="32.2616%" y="165" width="0.0364%" height="15" fill="rgb(221,224,12)" fg:x="2659" fg:w="3"/><text x="32.5116%" y="175.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="32.2859%" y="149" width="0.0121%" height="15" fill="rgb(219,112,44)" fg:x="2661" fg:w="1"/><text x="32.5359%" y="159.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="32.2859%" y="133" width="0.0121%" height="15" fill="rgb(210,31,13)" fg:x="2661" fg:w="1"/><text x="32.5359%" y="143.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="32.2859%" y="117" width="0.0121%" height="15" fill="rgb(230,25,16)" fg:x="2661" fg:w="1"/><text x="32.5359%" y="127.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="32.2980%" y="229" width="0.0121%" height="15" fill="rgb(246,108,53)" fg:x="2662" fg:w="1"/><text x="32.5480%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="32.2980%" y="213" width="0.0121%" height="15" fill="rgb(241,172,50)" fg:x="2662" fg:w="1"/><text x="32.5480%" y="223.50"></text></g><g><title>inc_mm_counter (2 samples, 0.02%)</title><rect x="32.3101%" y="229" width="0.0243%" height="15" fill="rgb(235,141,10)" fg:x="2663" fg:w="2"/><text x="32.5601%" y="239.50"></text></g><g><title>percpu_counter_add_batch (2 samples, 0.02%)</title><rect x="32.3101%" y="213" width="0.0243%" height="15" fill="rgb(220,174,43)" fg:x="2663" fg:w="2"/><text x="32.5601%" y="223.50"></text></g><g><title>_raw_spin_trylock (1 samples, 0.01%)</title><rect x="32.3708%" y="165" width="0.0121%" height="15" fill="rgb(215,181,40)" fg:x="2668" fg:w="1"/><text x="32.6208%" y="175.50"></text></g><g><title>clear_page_erms (1 samples, 0.01%)</title><rect x="32.3829%" y="165" width="0.0121%" height="15" fill="rgb(230,97,2)" fg:x="2669" fg:w="1"/><text x="32.6329%" y="175.50"></text></g><g><title>get_page_from_freelist (13 samples, 0.16%)</title><rect x="32.3465%" y="181" width="0.1577%" height="15" fill="rgb(211,25,27)" fg:x="2666" fg:w="13"/><text x="32.5965%" y="191.50"></text></g><g><title>rmqueue (9 samples, 0.11%)</title><rect x="32.3950%" y="165" width="0.1092%" height="15" fill="rgb(230,87,26)" fg:x="2670" fg:w="9"/><text x="32.6450%" y="175.50"></text></g><g><title>__rmqueue_pcplist (3 samples, 0.04%)</title><rect x="32.4678%" y="149" width="0.0364%" height="15" fill="rgb(227,160,17)" fg:x="2676" fg:w="3"/><text x="32.7178%" y="159.50"></text></g><g><title>rmqueue_bulk (3 samples, 0.04%)</title><rect x="32.4678%" y="133" width="0.0364%" height="15" fill="rgb(244,85,34)" fg:x="2676" fg:w="3"/><text x="32.7178%" y="143.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="32.4800%" y="117" width="0.0243%" height="15" fill="rgb(207,70,0)" fg:x="2677" fg:w="2"/><text x="32.7300%" y="127.50"></text></g><g><title>__raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="32.4800%" y="101" width="0.0243%" height="15" fill="rgb(223,129,7)" fg:x="2677" fg:w="2"/><text x="32.7300%" y="111.50"></text></g><g><title>handle_mm_fault (57 samples, 0.69%)</title><rect x="31.8248%" y="293" width="0.6916%" height="15" fill="rgb(246,105,7)" fg:x="2623" fg:w="57"/><text x="32.0748%" y="303.50"></text></g><g><title>__handle_mm_fault (57 samples, 0.69%)</title><rect x="31.8248%" y="277" width="0.6916%" height="15" fill="rgb(215,154,42)" fg:x="2623" fg:w="57"/><text x="32.0748%" y="287.50"></text></g><g><title>handle_pte_fault (54 samples, 0.66%)</title><rect x="31.8612%" y="261" width="0.6552%" height="15" fill="rgb(220,215,30)" fg:x="2626" fg:w="54"/><text x="32.1112%" y="271.50"></text></g><g><title>do_anonymous_page (52 samples, 0.63%)</title><rect x="31.8855%" y="245" width="0.6309%" height="15" fill="rgb(228,81,51)" fg:x="2628" fg:w="52"/><text x="32.1355%" y="255.50"></text></g><g><title>vma_alloc_folio (15 samples, 0.18%)</title><rect x="32.3344%" y="229" width="0.1820%" height="15" fill="rgb(247,71,54)" fg:x="2665" fg:w="15"/><text x="32.5844%" y="239.50"></text></g><g><title>__folio_alloc (15 samples, 0.18%)</title><rect x="32.3344%" y="213" width="0.1820%" height="15" fill="rgb(234,176,34)" fg:x="2665" fg:w="15"/><text x="32.5844%" y="223.50"></text></g><g><title>__alloc_pages (15 samples, 0.18%)</title><rect x="32.3344%" y="197" width="0.1820%" height="15" fill="rgb(241,103,54)" fg:x="2665" fg:w="15"/><text x="32.5844%" y="207.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="32.5042%" y="181" width="0.0121%" height="15" fill="rgb(228,22,34)" fg:x="2679" fg:w="1"/><text x="32.7542%" y="191.50"></text></g><g><title>asm_exc_page_fault (63 samples, 0.76%)</title><rect x="31.7763%" y="341" width="0.7644%" height="15" fill="rgb(241,179,48)" fg:x="2619" fg:w="63"/><text x="32.0263%" y="351.50"></text></g><g><title>exc_page_fault (61 samples, 0.74%)</title><rect x="31.8005%" y="325" width="0.7401%" height="15" fill="rgb(235,167,37)" fg:x="2621" fg:w="61"/><text x="32.0505%" y="335.50"></text></g><g><title>do_user_addr_fault (60 samples, 0.73%)</title><rect x="31.8127%" y="309" width="0.7280%" height="15" fill="rgb(213,109,30)" fg:x="2622" fg:w="60"/><text x="32.0627%" y="319.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="32.5164%" y="293" width="0.0243%" height="15" fill="rgb(222,172,16)" fg:x="2680" fg:w="2"/><text x="32.7664%" y="303.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="32.5285%" y="277" width="0.0121%" height="15" fill="rgb(233,192,5)" fg:x="2681" fg:w="1"/><text x="32.7785%" y="287.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="32.5285%" y="261" width="0.0121%" height="15" fill="rgb(247,189,41)" fg:x="2681" fg:w="1"/><text x="32.7785%" y="271.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="32.5406%" y="341" width="0.0121%" height="15" fill="rgb(218,134,47)" fg:x="2682" fg:w="1"/><text x="32.7906%" y="351.50"></text></g><g><title>sync_regs (6 samples, 0.07%)</title><rect x="32.5528%" y="341" width="0.0728%" height="15" fill="rgb(216,29,3)" fg:x="2683" fg:w="6"/><text x="32.8028%" y="351.50"></text></g><g><title>__perf_event__output_id_sample (1 samples, 0.01%)</title><rect x="32.6741%" y="117" width="0.0121%" height="15" fill="rgb(246,140,12)" fg:x="2693" fg:w="1"/><text x="32.9241%" y="127.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="32.6741%" y="101" width="0.0121%" height="15" fill="rgb(230,136,11)" fg:x="2693" fg:w="1"/><text x="32.9241%" y="111.50"></text></g><g><title>__output_copy (1 samples, 0.01%)</title><rect x="32.6741%" y="85" width="0.0121%" height="15" fill="rgb(247,22,47)" fg:x="2693" fg:w="1"/><text x="32.9241%" y="95.50"></text></g><g><title>__glibc_morecore (6 samples, 0.07%)</title><rect x="32.6256%" y="325" width="0.0728%" height="15" fill="rgb(218,84,22)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="335.50"></text></g><g><title>__GI___sbrk (6 samples, 0.07%)</title><rect x="32.6256%" y="309" width="0.0728%" height="15" fill="rgb(216,87,39)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="319.50"></text></g><g><title>__brk (6 samples, 0.07%)</title><rect x="32.6256%" y="293" width="0.0728%" height="15" fill="rgb(221,178,8)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="32.6256%" y="277" width="0.0728%" height="15" fill="rgb(230,42,11)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="287.50"></text></g><g><title>do_syscall_64 (6 samples, 0.07%)</title><rect x="32.6256%" y="261" width="0.0728%" height="15" fill="rgb(237,229,4)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="271.50"></text></g><g><title>__x64_sys_brk (6 samples, 0.07%)</title><rect x="32.6256%" y="245" width="0.0728%" height="15" fill="rgb(222,31,33)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="255.50"></text></g><g><title>__do_sys_brk (6 samples, 0.07%)</title><rect x="32.6256%" y="229" width="0.0728%" height="15" fill="rgb(210,17,39)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="239.50"></text></g><g><title>do_brk_flags (6 samples, 0.07%)</title><rect x="32.6256%" y="213" width="0.0728%" height="15" fill="rgb(244,93,20)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="223.50"></text></g><g><title>perf_event_mmap (6 samples, 0.07%)</title><rect x="32.6256%" y="197" width="0.0728%" height="15" fill="rgb(210,40,47)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="207.50"></text></g><g><title>perf_event_mmap_event (6 samples, 0.07%)</title><rect x="32.6256%" y="181" width="0.0728%" height="15" fill="rgb(239,211,47)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="191.50"></text></g><g><title>perf_iterate_sb.constprop.0 (6 samples, 0.07%)</title><rect x="32.6256%" y="165" width="0.0728%" height="15" fill="rgb(251,223,49)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="175.50"></text></g><g><title>perf_iterate_ctx (6 samples, 0.07%)</title><rect x="32.6256%" y="149" width="0.0728%" height="15" fill="rgb(221,149,5)" fg:x="2689" fg:w="6"/><text x="32.8756%" y="159.50"></text></g><g><title>perf_event_mmap_output (3 samples, 0.04%)</title><rect x="32.6620%" y="133" width="0.0364%" height="15" fill="rgb(219,224,51)" fg:x="2692" fg:w="3"/><text x="32.9120%" y="143.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="32.6862%" y="117" width="0.0121%" height="15" fill="rgb(223,7,8)" fg:x="2694" fg:w="1"/><text x="32.9362%" y="127.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="32.6862%" y="101" width="0.0121%" height="15" fill="rgb(241,217,22)" fg:x="2694" fg:w="1"/><text x="32.9362%" y="111.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="32.6984%" y="213" width="0.0121%" height="15" fill="rgb(248,209,0)" fg:x="2695" fg:w="1"/><text x="32.9484%" y="223.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="32.6984%" y="197" width="0.0121%" height="15" fill="rgb(217,205,4)" fg:x="2695" fg:w="1"/><text x="32.9484%" y="207.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.04%)</title><rect x="32.7105%" y="213" width="0.0364%" height="15" fill="rgb(228,124,39)" fg:x="2696" fg:w="3"/><text x="32.9605%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (199 samples, 2.41%)</title><rect x="30.3446%" y="757" width="2.4145%" height="15" fill="rgb(250,116,42)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="767.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (199 samples, 2.41%)</title><rect x="30.3446%" y="741" width="2.4145%" height="15" fill="rgb(223,202,9)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="751.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (199 samples, 2.41%)</title><rect x="30.3446%" y="725" width="2.4145%" height="15" fill="rgb(242,222,40)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="735.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (199 samples, 2.41%)</title><rect x="30.3446%" y="709" width="2.4145%" height="15" fill="rgb(229,99,46)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="719.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (199 samples, 2.41%)</title><rect x="30.3446%" y="693" width="2.4145%" height="15" fill="rgb(225,56,46)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="703.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (199 samples, 2.41%)</title><rect x="30.3446%" y="677" width="2.4145%" height="15" fill="rgb(227,94,5)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="687.50">al..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (199 samples, 2.41%)</title><rect x="30.3446%" y="661" width="2.4145%" height="15" fill="rgb(205,112,38)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="671.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (199 samples, 2.41%)</title><rect x="30.3446%" y="645" width="2.4145%" height="15" fill="rgb(231,133,46)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="655.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (199 samples, 2.41%)</title><rect x="30.3446%" y="629" width="2.4145%" height="15" fill="rgb(217,16,9)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="639.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (199 samples, 2.41%)</title><rect x="30.3446%" y="613" width="2.4145%" height="15" fill="rgb(249,173,9)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="623.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (199 samples, 2.41%)</title><rect x="30.3446%" y="597" width="2.4145%" height="15" fill="rgb(205,163,53)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="607.50">&lt;c..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (199 samples, 2.41%)</title><rect x="30.3446%" y="581" width="2.4145%" height="15" fill="rgb(217,54,41)" fg:x="2501" fg:w="199"/><text x="30.5946%" y="591.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (188 samples, 2.28%)</title><rect x="30.4780%" y="565" width="2.2810%" height="15" fill="rgb(228,216,12)" fg:x="2512" fg:w="188"/><text x="30.7280%" y="575.50">c..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (188 samples, 2.28%)</title><rect x="30.4780%" y="549" width="2.2810%" height="15" fill="rgb(244,228,15)" fg:x="2512" fg:w="188"/><text x="30.7280%" y="559.50">&lt;..</text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (188 samples, 2.28%)</title><rect x="30.4780%" y="533" width="2.2810%" height="15" fill="rgb(221,176,53)" fg:x="2512" fg:w="188"/><text x="30.7280%" y="543.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (180 samples, 2.18%)</title><rect x="30.5751%" y="517" width="2.1839%" height="15" fill="rgb(205,94,34)" fg:x="2520" fg:w="180"/><text x="30.8251%" y="527.50">&lt;..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (180 samples, 2.18%)</title><rect x="30.5751%" y="501" width="2.1839%" height="15" fill="rgb(213,110,48)" fg:x="2520" fg:w="180"/><text x="30.8251%" y="511.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (178 samples, 2.16%)</title><rect x="30.5994%" y="485" width="2.1597%" height="15" fill="rgb(236,142,28)" fg:x="2522" fg:w="178"/><text x="30.8494%" y="495.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (88 samples, 1.07%)</title><rect x="31.6913%" y="469" width="1.0677%" height="15" fill="rgb(225,135,29)" fg:x="2612" fg:w="88"/><text x="31.9413%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (88 samples, 1.07%)</title><rect x="31.6913%" y="453" width="1.0677%" height="15" fill="rgb(252,45,31)" fg:x="2612" fg:w="88"/><text x="31.9413%" y="463.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (88 samples, 1.07%)</title><rect x="31.6913%" y="437" width="1.0677%" height="15" fill="rgb(211,187,50)" fg:x="2612" fg:w="88"/><text x="31.9413%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (88 samples, 1.07%)</title><rect x="31.6913%" y="421" width="1.0677%" height="15" fill="rgb(229,109,7)" fg:x="2612" fg:w="88"/><text x="31.9413%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (88 samples, 1.07%)</title><rect x="31.6913%" y="405" width="1.0677%" height="15" fill="rgb(251,131,51)" fg:x="2612" fg:w="88"/><text x="31.9413%" y="415.50"></text></g><g><title>alloc::alloc::alloc (88 samples, 1.07%)</title><rect x="31.6913%" y="389" width="1.0677%" height="15" fill="rgb(251,180,35)" fg:x="2612" fg:w="88"/><text x="31.9413%" y="399.50"></text></g><g><title>__GI___libc_malloc (88 samples, 1.07%)</title><rect x="31.6913%" y="373" width="1.0677%" height="15" fill="rgb(211,46,32)" fg:x="2612" fg:w="88"/><text x="31.9413%" y="383.50"></text></g><g><title>_int_malloc (86 samples, 1.04%)</title><rect x="31.7156%" y="357" width="1.0434%" height="15" fill="rgb(248,123,17)" fg:x="2614" fg:w="86"/><text x="31.9656%" y="367.50"></text></g><g><title>sysmalloc (11 samples, 0.13%)</title><rect x="32.6256%" y="341" width="0.1335%" height="15" fill="rgb(227,141,18)" fg:x="2689" fg:w="11"/><text x="32.8756%" y="351.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.06%)</title><rect x="32.6984%" y="325" width="0.0607%" height="15" fill="rgb(216,102,9)" fg:x="2695" fg:w="5"/><text x="32.9484%" y="335.50"></text></g><g><title>exc_page_fault (5 samples, 0.06%)</title><rect x="32.6984%" y="309" width="0.0607%" height="15" fill="rgb(253,47,13)" fg:x="2695" fg:w="5"/><text x="32.9484%" y="319.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.06%)</title><rect x="32.6984%" y="293" width="0.0607%" height="15" fill="rgb(226,93,23)" fg:x="2695" fg:w="5"/><text x="32.9484%" y="303.50"></text></g><g><title>handle_mm_fault (5 samples, 0.06%)</title><rect x="32.6984%" y="277" width="0.0607%" height="15" fill="rgb(247,104,17)" fg:x="2695" fg:w="5"/><text x="32.9484%" y="287.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.06%)</title><rect x="32.6984%" y="261" width="0.0607%" height="15" fill="rgb(233,203,26)" fg:x="2695" fg:w="5"/><text x="32.9484%" y="271.50"></text></g><g><title>handle_pte_fault (5 samples, 0.06%)</title><rect x="32.6984%" y="245" width="0.0607%" height="15" fill="rgb(244,98,49)" fg:x="2695" fg:w="5"/><text x="32.9484%" y="255.50"></text></g><g><title>do_anonymous_page (5 samples, 0.06%)</title><rect x="32.6984%" y="229" width="0.0607%" height="15" fill="rgb(235,134,22)" fg:x="2695" fg:w="5"/><text x="32.9484%" y="239.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.01%)</title><rect x="32.7469%" y="213" width="0.0121%" height="15" fill="rgb(221,70,32)" fg:x="2699" fg:w="1"/><text x="32.9969%" y="223.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="32.7469%" y="197" width="0.0121%" height="15" fill="rgb(238,15,50)" fg:x="2699" fg:w="1"/><text x="32.9969%" y="207.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="32.7469%" y="181" width="0.0121%" height="15" fill="rgb(215,221,48)" fg:x="2699" fg:w="1"/><text x="32.9969%" y="191.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.01%)</title><rect x="32.7469%" y="165" width="0.0121%" height="15" fill="rgb(236,73,3)" fg:x="2699" fg:w="1"/><text x="32.9969%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloy_primitives::bits::address::Address,alloc::vec::Vec&lt;ruint::Uint&lt;256_usize,4_usize&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="32.7590%" y="645" width="0.0121%" height="15" fill="rgb(250,107,11)" fg:x="2700" fg:w="1"/><text x="33.0090%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloy_primitives::bits::address::Address,alloc::vec::Vec&lt;ruint::Uint&lt;256_usize,4_usize&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="32.7590%" y="629" width="0.0121%" height="15" fill="rgb(242,39,14)" fg:x="2700" fg:w="1"/><text x="33.0090%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="32.7590%" y="613" width="0.0121%" height="15" fill="rgb(248,164,37)" fg:x="2700" fg:w="1"/><text x="33.0090%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="32.7712%" y="645" width="0.0121%" height="15" fill="rgb(217,60,12)" fg:x="2701" fg:w="1"/><text x="33.0212%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="32.7712%" y="629" width="0.0121%" height="15" fill="rgb(240,125,29)" fg:x="2701" fg:w="1"/><text x="33.0212%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="32.7712%" y="613" width="0.0121%" height="15" fill="rgb(208,207,28)" fg:x="2701" fg:w="1"/><text x="33.0212%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="32.7712%" y="597" width="0.0121%" height="15" fill="rgb(209,159,27)" fg:x="2701" fg:w="1"/><text x="33.0212%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="32.7590%" y="693" width="0.0485%" height="15" fill="rgb(251,176,53)" fg:x="2700" fg:w="4"/><text x="33.0090%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::env::TxEnv]&gt; (4 samples, 0.05%)</title><rect x="32.7590%" y="677" width="0.0485%" height="15" fill="rgb(211,85,7)" fg:x="2700" fg:w="4"/><text x="33.0090%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (4 samples, 0.05%)</title><rect x="32.7590%" y="661" width="0.0485%" height="15" fill="rgb(216,64,54)" fg:x="2700" fg:w="4"/><text x="33.0090%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="32.7833%" y="645" width="0.0243%" height="15" fill="rgb(217,54,24)" fg:x="2702" fg:w="2"/><text x="33.0333%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="32.7833%" y="629" width="0.0243%" height="15" fill="rgb(208,206,53)" fg:x="2702" fg:w="2"/><text x="33.0333%" y="639.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="32.7833%" y="613" width="0.0243%" height="15" fill="rgb(251,74,39)" fg:x="2702" fg:w="2"/><text x="33.0333%" y="623.50"></text></g><g><title>__tlb_remove_page_size (1 samples, 0.01%)</title><rect x="32.8076%" y="421" width="0.0121%" height="15" fill="rgb(226,47,5)" fg:x="2704" fg:w="1"/><text x="33.0576%" y="431.50"></text></g><g><title>_compound_head (1 samples, 0.01%)</title><rect x="32.8197%" y="421" width="0.0121%" height="15" fill="rgb(234,111,33)" fg:x="2705" fg:w="1"/><text x="33.0697%" y="431.50"></text></g><g><title>free_unref_page_list (1 samples, 0.01%)</title><rect x="32.8440%" y="341" width="0.0121%" height="15" fill="rgb(251,14,10)" fg:x="2707" fg:w="1"/><text x="33.0940%" y="351.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.01%)</title><rect x="32.8440%" y="325" width="0.0121%" height="15" fill="rgb(232,43,0)" fg:x="2707" fg:w="1"/><text x="33.0940%" y="335.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.01%)</title><rect x="32.8440%" y="309" width="0.0121%" height="15" fill="rgb(222,68,43)" fg:x="2707" fg:w="1"/><text x="33.0940%" y="319.50"></text></g><g><title>__free_one_page (1 samples, 0.01%)</title><rect x="32.8440%" y="293" width="0.0121%" height="15" fill="rgb(217,24,23)" fg:x="2707" fg:w="1"/><text x="33.0940%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt;&gt; (9 samples, 0.11%)</title><rect x="32.7590%" y="757" width="0.1092%" height="15" fill="rgb(229,209,14)" fg:x="2700" fg:w="9"/><text x="33.0090%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.11%)</title><rect x="32.7590%" y="741" width="0.1092%" height="15" fill="rgb(250,149,48)" fg:x="2700" fg:w="9"/><text x="33.0090%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.11%)</title><rect x="32.7590%" y="725" width="0.1092%" height="15" fill="rgb(210,120,37)" fg:x="2700" fg:w="9"/><text x="33.0090%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt; (9 samples, 0.11%)</title><rect x="32.7590%" y="709" width="0.1092%" height="15" fill="rgb(210,21,8)" fg:x="2700" fg:w="9"/><text x="33.0090%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::env::TxEnv&gt;&gt; (5 samples, 0.06%)</title><rect x="32.8076%" y="693" width="0.0607%" height="15" fill="rgb(243,145,7)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="32.8076%" y="677" width="0.0607%" height="15" fill="rgb(238,178,32)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.06%)</title><rect x="32.8076%" y="661" width="0.0607%" height="15" fill="rgb(222,4,10)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.06%)</title><rect x="32.8076%" y="645" width="0.0607%" height="15" fill="rgb(239,7,37)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="655.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="32.8076%" y="629" width="0.0607%" height="15" fill="rgb(215,31,37)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="639.50"></text></g><g><title>__GI_munmap (5 samples, 0.06%)</title><rect x="32.8076%" y="613" width="0.0607%" height="15" fill="rgb(224,83,33)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="32.8076%" y="597" width="0.0607%" height="15" fill="rgb(239,55,3)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="607.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="32.8076%" y="581" width="0.0607%" height="15" fill="rgb(247,92,11)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="591.50"></text></g><g><title>__x64_sys_munmap (5 samples, 0.06%)</title><rect x="32.8076%" y="565" width="0.0607%" height="15" fill="rgb(239,200,7)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="575.50"></text></g><g><title>__vm_munmap (5 samples, 0.06%)</title><rect x="32.8076%" y="549" width="0.0607%" height="15" fill="rgb(227,115,8)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="559.50"></text></g><g><title>do_vmi_munmap (5 samples, 0.06%)</title><rect x="32.8076%" y="533" width="0.0607%" height="15" fill="rgb(215,189,27)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="543.50"></text></g><g><title>do_vmi_align_munmap (5 samples, 0.06%)</title><rect x="32.8076%" y="517" width="0.0607%" height="15" fill="rgb(251,216,39)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="527.50"></text></g><g><title>unmap_region (5 samples, 0.06%)</title><rect x="32.8076%" y="501" width="0.0607%" height="15" fill="rgb(207,29,47)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="511.50"></text></g><g><title>unmap_vmas (5 samples, 0.06%)</title><rect x="32.8076%" y="485" width="0.0607%" height="15" fill="rgb(210,71,34)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="495.50"></text></g><g><title>unmap_single_vma (5 samples, 0.06%)</title><rect x="32.8076%" y="469" width="0.0607%" height="15" fill="rgb(253,217,51)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="479.50"></text></g><g><title>unmap_page_range (5 samples, 0.06%)</title><rect x="32.8076%" y="453" width="0.0607%" height="15" fill="rgb(222,117,46)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="463.50"></text></g><g><title>zap_pmd_range.isra.0 (5 samples, 0.06%)</title><rect x="32.8076%" y="437" width="0.0607%" height="15" fill="rgb(226,132,6)" fg:x="2704" fg:w="5"/><text x="33.0576%" y="447.50"></text></g><g><title>zap_pte_range (3 samples, 0.04%)</title><rect x="32.8318%" y="421" width="0.0364%" height="15" fill="rgb(254,145,51)" fg:x="2706" fg:w="3"/><text x="33.0818%" y="431.50"></text></g><g><title>tlb_flush_mmu (3 samples, 0.04%)</title><rect x="32.8318%" y="405" width="0.0364%" height="15" fill="rgb(231,199,27)" fg:x="2706" fg:w="3"/><text x="33.0818%" y="415.50"></text></g><g><title>tlb_batch_pages_flush (3 samples, 0.04%)</title><rect x="32.8318%" y="389" width="0.0364%" height="15" fill="rgb(245,158,14)" fg:x="2706" fg:w="3"/><text x="33.0818%" y="399.50"></text></g><g><title>free_pages_and_swap_cache (3 samples, 0.04%)</title><rect x="32.8318%" y="373" width="0.0364%" height="15" fill="rgb(240,113,14)" fg:x="2706" fg:w="3"/><text x="33.0818%" y="383.50"></text></g><g><title>release_pages (3 samples, 0.04%)</title><rect x="32.8318%" y="357" width="0.0364%" height="15" fill="rgb(210,20,13)" fg:x="2706" fg:w="3"/><text x="33.0818%" y="367.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="32.8561%" y="341" width="0.0121%" height="15" fill="rgb(241,144,13)" fg:x="2708" fg:w="1"/><text x="33.1061%" y="351.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="32.8561%" y="325" width="0.0121%" height="15" fill="rgb(235,43,34)" fg:x="2708" fg:w="1"/><text x="33.1061%" y="335.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="32.8561%" y="309" width="0.0121%" height="15" fill="rgb(208,36,20)" fg:x="2708" fg:w="1"/><text x="33.1061%" y="319.50"></text></g><g><title>__GI___libc_free (43 samples, 0.52%)</title><rect x="32.8682%" y="533" width="0.5217%" height="15" fill="rgb(239,204,10)" fg:x="2709" fg:w="43"/><text x="33.1182%" y="543.50"></text></g><g><title>_int_free (41 samples, 0.50%)</title><rect x="32.8925%" y="517" width="0.4975%" height="15" fill="rgb(217,84,43)" fg:x="2711" fg:w="41"/><text x="33.1425%" y="527.50"></text></g><g><title>_int_free_merge_chunk (37 samples, 0.45%)</title><rect x="32.9410%" y="501" width="0.4489%" height="15" fill="rgb(241,170,50)" fg:x="2715" fg:w="37"/><text x="33.1910%" y="511.50"></text></g><g><title>_int_free_create_chunk (32 samples, 0.39%)</title><rect x="33.0017%" y="485" width="0.3883%" height="15" fill="rgb(226,205,29)" fg:x="2720" fg:w="32"/><text x="33.2517%" y="495.50"></text></g><g><title>unlink_chunk (19 samples, 0.23%)</title><rect x="33.1594%" y="469" width="0.2305%" height="15" fill="rgb(233,113,1)" fg:x="2733" fg:w="19"/><text x="33.4094%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt;&gt; (44 samples, 0.53%)</title><rect x="32.8682%" y="693" width="0.5339%" height="15" fill="rgb(253,98,13)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.53%)</title><rect x="32.8682%" y="677" width="0.5339%" height="15" fill="rgb(211,115,12)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;]&gt; (44 samples, 0.53%)</title><rect x="32.8682%" y="661" width="0.5339%" height="15" fill="rgb(208,12,16)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (44 samples, 0.53%)</title><rect x="32.8682%" y="645" width="0.5339%" height="15" fill="rgb(237,193,54)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (44 samples, 0.53%)</title><rect x="32.8682%" y="629" width="0.5339%" height="15" fill="rgb(243,22,42)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (44 samples, 0.53%)</title><rect x="32.8682%" y="613" width="0.5339%" height="15" fill="rgb(233,151,36)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (44 samples, 0.53%)</title><rect x="32.8682%" y="597" width="0.5339%" height="15" fill="rgb(237,57,45)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.53%)</title><rect x="32.8682%" y="581" width="0.5339%" height="15" fill="rgb(221,88,17)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44 samples, 0.53%)</title><rect x="32.8682%" y="565" width="0.5339%" height="15" fill="rgb(230,79,15)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.53%)</title><rect x="32.8682%" y="549" width="0.5339%" height="15" fill="rgb(213,57,13)" fg:x="2709" fg:w="44"/><text x="33.1182%" y="559.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="33.3900%" y="533" width="0.0121%" height="15" fill="rgb(222,116,39)" fg:x="2752" fg:w="1"/><text x="33.6400%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt;&gt; (15 samples, 0.18%)</title><rect x="33.4021%" y="693" width="0.1820%" height="15" fill="rgb(245,107,2)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.18%)</title><rect x="33.4021%" y="677" width="0.1820%" height="15" fill="rgb(238,1,10)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;]&gt; (15 samples, 0.18%)</title><rect x="33.4021%" y="661" width="0.1820%" height="15" fill="rgb(249,4,48)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt; (15 samples, 0.18%)</title><rect x="33.4021%" y="645" width="0.1820%" height="15" fill="rgb(223,151,18)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt; (15 samples, 0.18%)</title><rect x="33.4021%" y="629" width="0.1820%" height="15" fill="rgb(227,65,43)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt; (15 samples, 0.18%)</title><rect x="33.4021%" y="613" width="0.1820%" height="15" fill="rgb(218,40,45)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;block_stm_revm::MemoryLocation&gt;&gt; (15 samples, 0.18%)</title><rect x="33.4021%" y="597" width="0.1820%" height="15" fill="rgb(252,121,31)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.18%)</title><rect x="33.4021%" y="581" width="0.1820%" height="15" fill="rgb(219,158,43)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.18%)</title><rect x="33.4021%" y="565" width="0.1820%" height="15" fill="rgb(231,162,42)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.18%)</title><rect x="33.4021%" y="549" width="0.1820%" height="15" fill="rgb(217,179,25)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="559.50"></text></g><g><title>__GI___libc_free (15 samples, 0.18%)</title><rect x="33.4021%" y="533" width="0.1820%" height="15" fill="rgb(206,212,31)" fg:x="2753" fg:w="15"/><text x="33.6521%" y="543.50"></text></g><g><title>_int_free (7 samples, 0.08%)</title><rect x="33.4992%" y="517" width="0.0849%" height="15" fill="rgb(235,144,12)" fg:x="2761" fg:w="7"/><text x="33.7492%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="33.5841%" y="421" width="0.0243%" height="15" fill="rgb(213,51,10)" fg:x="2768" fg:w="2"/><text x="33.8341%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="33.5841%" y="405" width="0.0243%" height="15" fill="rgb(231,145,14)" fg:x="2768" fg:w="2"/><text x="33.8341%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="33.5841%" y="389" width="0.0243%" height="15" fill="rgb(235,15,28)" fg:x="2768" fg:w="2"/><text x="33.8341%" y="399.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="33.5841%" y="373" width="0.0243%" height="15" fill="rgb(237,206,10)" fg:x="2768" fg:w="2"/><text x="33.8341%" y="383.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="33.5841%" y="357" width="0.0243%" height="15" fill="rgb(236,227,27)" fg:x="2768" fg:w="2"/><text x="33.8341%" y="367.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.01%)</title><rect x="33.7054%" y="277" width="0.0121%" height="15" fill="rgb(246,83,35)" fg:x="2778" fg:w="1"/><text x="33.9554%" y="287.50"></text></g><g><title>__GI___libc_free (12 samples, 0.15%)</title><rect x="33.6083%" y="325" width="0.1456%" height="15" fill="rgb(220,136,24)" fg:x="2770" fg:w="12"/><text x="33.8583%" y="335.50"></text></g><g><title>_int_free (12 samples, 0.15%)</title><rect x="33.6083%" y="309" width="0.1456%" height="15" fill="rgb(217,3,25)" fg:x="2770" fg:w="12"/><text x="33.8583%" y="319.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.06%)</title><rect x="33.6933%" y="293" width="0.0607%" height="15" fill="rgb(239,24,14)" fg:x="2777" fg:w="5"/><text x="33.9433%" y="303.50"></text></g><g><title>unlink_chunk (3 samples, 0.04%)</title><rect x="33.7175%" y="277" width="0.0364%" height="15" fill="rgb(244,16,53)" fg:x="2779" fg:w="3"/><text x="33.9675%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (3 samples, 0.04%)</title><rect x="34.0209%" y="117" width="0.0364%" height="15" fill="rgb(208,175,44)" fg:x="2804" fg:w="3"/><text x="34.2709%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.04%)</title><rect x="34.0209%" y="101" width="0.0364%" height="15" fill="rgb(252,18,48)" fg:x="2804" fg:w="3"/><text x="34.2709%" y="111.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="34.0209%" y="85" width="0.0364%" height="15" fill="rgb(234,199,32)" fg:x="2804" fg:w="3"/><text x="34.2709%" y="95.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (56 samples, 0.68%)</title><rect x="33.7903%" y="293" width="0.6794%" height="15" fill="rgb(225,77,54)" fg:x="2785" fg:w="56"/><text x="34.0403%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (56 samples, 0.68%)</title><rect x="33.7903%" y="277" width="0.6794%" height="15" fill="rgb(225,42,25)" fg:x="2785" fg:w="56"/><text x="34.0403%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;)&gt; (56 samples, 0.68%)</title><rect x="33.7903%" y="261" width="0.6794%" height="15" fill="rgb(242,227,46)" fg:x="2785" fg:w="56"/><text x="34.0403%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (56 samples, 0.68%)</title><rect x="33.7903%" y="245" width="0.6794%" height="15" fill="rgb(246,197,35)" fg:x="2785" fg:w="56"/><text x="34.0403%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (56 samples, 0.68%)</title><rect x="33.7903%" y="229" width="0.6794%" height="15" fill="rgb(215,159,26)" fg:x="2785" fg:w="56"/><text x="34.0403%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::mv_memory::MemoryEntry&gt; (56 samples, 0.68%)</title><rect x="33.7903%" y="213" width="0.6794%" height="15" fill="rgb(212,194,50)" fg:x="2785" fg:w="56"/><text x="34.0403%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::MemoryValue&gt; (37 samples, 0.45%)</title><rect x="34.0209%" y="197" width="0.4489%" height="15" fill="rgb(246,132,1)" fg:x="2804" fg:w="37"/><text x="34.2709%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::state::AccountInfo&gt;&gt; (37 samples, 0.45%)</title><rect x="34.0209%" y="181" width="0.4489%" height="15" fill="rgb(217,71,7)" fg:x="2804" fg:w="37"/><text x="34.2709%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (37 samples, 0.45%)</title><rect x="34.0209%" y="165" width="0.4489%" height="15" fill="rgb(252,59,32)" fg:x="2804" fg:w="37"/><text x="34.2709%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (37 samples, 0.45%)</title><rect x="34.0209%" y="149" width="0.4489%" height="15" fill="rgb(253,204,25)" fg:x="2804" fg:w="37"/><text x="34.2709%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (37 samples, 0.45%)</title><rect x="34.0209%" y="133" width="0.4489%" height="15" fill="rgb(232,21,16)" fg:x="2804" fg:w="37"/><text x="34.2709%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (34 samples, 0.41%)</title><rect x="34.0573%" y="117" width="0.4125%" height="15" fill="rgb(248,90,29)" fg:x="2807" fg:w="34"/><text x="34.3073%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (34 samples, 0.41%)</title><rect x="34.0573%" y="101" width="0.4125%" height="15" fill="rgb(249,223,7)" fg:x="2807" fg:w="34"/><text x="34.3073%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (34 samples, 0.41%)</title><rect x="34.0573%" y="85" width="0.4125%" height="15" fill="rgb(231,119,42)" fg:x="2807" fg:w="34"/><text x="34.3073%" y="95.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.41%)</title><rect x="34.0573%" y="69" width="0.4125%" height="15" fill="rgb(215,41,35)" fg:x="2807" fg:w="34"/><text x="34.3073%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (34 samples, 0.41%)</title><rect x="34.0573%" y="53" width="0.4125%" height="15" fill="rgb(220,44,45)" fg:x="2807" fg:w="34"/><text x="34.3073%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.41%)</title><rect x="34.0573%" y="37" width="0.4125%" height="15" fill="rgb(253,197,36)" fg:x="2807" fg:w="34"/><text x="34.3073%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (77 samples, 0.93%)</title><rect x="33.7782%" y="309" width="0.9342%" height="15" fill="rgb(245,225,54)" fg:x="2784" fg:w="77"/><text x="34.0282%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (20 samples, 0.24%)</title><rect x="34.4698%" y="293" width="0.2427%" height="15" fill="rgb(239,94,37)" fg:x="2841" fg:w="20"/><text x="34.7198%" y="303.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (20 samples, 0.24%)</title><rect x="34.4698%" y="277" width="0.2427%" height="15" fill="rgb(242,217,10)" fg:x="2841" fg:w="20"/><text x="34.7198%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (20 samples, 0.24%)</title><rect x="34.4698%" y="261" width="0.2427%" height="15" fill="rgb(250,193,7)" fg:x="2841" fg:w="20"/><text x="34.7198%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (20 samples, 0.24%)</title><rect x="34.4698%" y="245" width="0.2427%" height="15" fill="rgb(230,104,19)" fg:x="2841" fg:w="20"/><text x="34.7198%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (105 samples, 1.27%)</title><rect x="33.5841%" y="549" width="1.2740%" height="15" fill="rgb(230,181,4)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (105 samples, 1.27%)</title><rect x="33.5841%" y="533" width="1.2740%" height="15" fill="rgb(216,219,49)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (105 samples, 1.27%)</title><rect x="33.5841%" y="517" width="1.2740%" height="15" fill="rgb(254,144,0)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (105 samples, 1.27%)</title><rect x="33.5841%" y="501" width="1.2740%" height="15" fill="rgb(205,209,38)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (105 samples, 1.27%)</title><rect x="33.5841%" y="485" width="1.2740%" height="15" fill="rgb(240,21,42)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (105 samples, 1.27%)</title><rect x="33.5841%" y="469" width="1.2740%" height="15" fill="rgb(241,132,3)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (105 samples, 1.27%)</title><rect x="33.5841%" y="453" width="1.2740%" height="15" fill="rgb(225,14,2)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;]&gt;&gt; (105 samples, 1.27%)</title><rect x="33.5841%" y="437" width="1.2740%" height="15" fill="rgb(210,141,35)" fg:x="2768" fg:w="105"/><text x="33.8341%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;]&gt; (103 samples, 1.25%)</title><rect x="33.6083%" y="421" width="1.2497%" height="15" fill="rgb(251,14,44)" fg:x="2770" fg:w="103"/><text x="33.8583%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (103 samples, 1.25%)</title><rect x="33.6083%" y="405" width="1.2497%" height="15" fill="rgb(247,48,18)" fg:x="2770" fg:w="103"/><text x="33.8583%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt; (103 samples, 1.25%)</title><rect x="33.6083%" y="389" width="1.2497%" height="15" fill="rgb(225,0,40)" fg:x="2770" fg:w="103"/><text x="33.8583%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt; (103 samples, 1.25%)</title><rect x="33.6083%" y="373" width="1.2497%" height="15" fill="rgb(221,31,33)" fg:x="2770" fg:w="103"/><text x="33.8583%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;)&gt;&gt; (103 samples, 1.25%)</title><rect x="33.6083%" y="357" width="1.2497%" height="15" fill="rgb(237,42,40)" fg:x="2770" fg:w="103"/><text x="33.8583%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (103 samples, 1.25%)</title><rect x="33.6083%" y="341" width="1.2497%" height="15" fill="rgb(233,51,29)" fg:x="2770" fg:w="103"/><text x="33.8583%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (91 samples, 1.10%)</title><rect x="33.7539%" y="325" width="1.1041%" height="15" fill="rgb(226,58,20)" fg:x="2782" fg:w="91"/><text x="34.0039%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (12 samples, 0.15%)</title><rect x="34.7124%" y="309" width="0.1456%" height="15" fill="rgb(208,98,7)" fg:x="2861" fg:w="12"/><text x="34.9624%" y="319.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.01%)</title><rect x="34.8580%" y="357" width="0.0121%" height="15" fill="rgb(228,143,44)" fg:x="2873" fg:w="1"/><text x="35.1080%" y="367.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="34.8580%" y="341" width="0.0121%" height="15" fill="rgb(246,55,38)" fg:x="2873" fg:w="1"/><text x="35.1080%" y="351.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="34.8580%" y="325" width="0.0121%" height="15" fill="rgb(247,87,16)" fg:x="2873" fg:w="1"/><text x="35.1080%" y="335.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="34.8580%" y="309" width="0.0121%" height="15" fill="rgb(234,129,42)" fg:x="2873" fg:w="1"/><text x="35.1080%" y="319.50"></text></g><g><title>_compound_head (1 samples, 0.01%)</title><rect x="34.8702%" y="293" width="0.0121%" height="15" fill="rgb(220,82,16)" fg:x="2874" fg:w="1"/><text x="35.1202%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::mv_memory::MvMemory&gt;&gt; (167 samples, 2.03%)</title><rect x="32.8682%" y="757" width="2.0262%" height="15" fill="rgb(211,88,4)" fg:x="2709" fg:w="167"/><text x="33.1182%" y="767.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (167 samples, 2.03%)</title><rect x="32.8682%" y="741" width="2.0262%" height="15" fill="rgb(248,151,21)" fg:x="2709" fg:w="167"/><text x="33.1182%" y="751.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (167 samples, 2.03%)</title><rect x="32.8682%" y="725" width="2.0262%" height="15" fill="rgb(238,163,6)" fg:x="2709" fg:w="167"/><text x="33.1182%" y="735.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::mv_memory::MvMemory&gt; (167 samples, 2.03%)</title><rect x="32.8682%" y="709" width="2.0262%" height="15" fill="rgb(209,183,11)" fg:x="2709" fg:w="167"/><text x="33.1182%" y="719.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;dashmap::DashMap&lt;block_stm_revm::MemoryLocation,dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (108 samples, 1.31%)</title><rect x="33.5841%" y="693" width="1.3104%" height="15" fill="rgb(219,37,20)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt;&gt; (108 samples, 1.31%)</title><rect x="33.5841%" y="677" width="1.3104%" height="15" fill="rgb(210,158,4)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt; (108 samples, 1.31%)</title><rect x="33.5841%" y="661" width="1.3104%" height="15" fill="rgb(221,167,53)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (108 samples, 1.31%)</title><rect x="33.5841%" y="645" width="1.3104%" height="15" fill="rgb(237,151,45)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (108 samples, 1.31%)</title><rect x="33.5841%" y="629" width="1.3104%" height="15" fill="rgb(231,39,3)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt; (108 samples, 1.31%)</title><rect x="33.5841%" y="613" width="1.3104%" height="15" fill="rgb(212,167,28)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (108 samples, 1.31%)</title><rect x="33.5841%" y="597" width="1.3104%" height="15" fill="rgb(232,178,8)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 1.31%)</title><rect x="33.5841%" y="581" width="1.3104%" height="15" fill="rgb(225,151,20)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (108 samples, 1.31%)</title><rect x="33.5841%" y="565" width="1.3104%" height="15" fill="rgb(238,3,37)" fg:x="2768" fg:w="108"/><text x="33.8341%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.04%)</title><rect x="34.8580%" y="549" width="0.0364%" height="15" fill="rgb(251,147,42)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="559.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="34.8580%" y="533" width="0.0364%" height="15" fill="rgb(208,173,10)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="34.8580%" y="517" width="0.0364%" height="15" fill="rgb(246,225,4)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="527.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="34.8580%" y="501" width="0.0364%" height="15" fill="rgb(248,102,6)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="511.50"></text></g><g><title>__GI_munmap (3 samples, 0.04%)</title><rect x="34.8580%" y="485" width="0.0364%" height="15" fill="rgb(232,6,21)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="34.8580%" y="469" width="0.0364%" height="15" fill="rgb(221,179,22)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="479.50"></text></g><g><title>do_syscall_64 (3 samples, 0.04%)</title><rect x="34.8580%" y="453" width="0.0364%" height="15" fill="rgb(252,50,20)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="463.50"></text></g><g><title>__x64_sys_munmap (3 samples, 0.04%)</title><rect x="34.8580%" y="437" width="0.0364%" height="15" fill="rgb(222,56,38)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="447.50"></text></g><g><title>__vm_munmap (3 samples, 0.04%)</title><rect x="34.8580%" y="421" width="0.0364%" height="15" fill="rgb(206,193,29)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="431.50"></text></g><g><title>do_vmi_munmap (3 samples, 0.04%)</title><rect x="34.8580%" y="405" width="0.0364%" height="15" fill="rgb(239,192,45)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="415.50"></text></g><g><title>do_vmi_align_munmap (3 samples, 0.04%)</title><rect x="34.8580%" y="389" width="0.0364%" height="15" fill="rgb(254,18,36)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="399.50"></text></g><g><title>unmap_region (3 samples, 0.04%)</title><rect x="34.8580%" y="373" width="0.0364%" height="15" fill="rgb(221,127,11)" fg:x="2873" fg:w="3"/><text x="35.1080%" y="383.50"></text></g><g><title>unmap_vmas (2 samples, 0.02%)</title><rect x="34.8702%" y="357" width="0.0243%" height="15" fill="rgb(234,146,35)" fg:x="2874" fg:w="2"/><text x="35.1202%" y="367.50"></text></g><g><title>unmap_single_vma (2 samples, 0.02%)</title><rect x="34.8702%" y="341" width="0.0243%" height="15" fill="rgb(254,201,37)" fg:x="2874" fg:w="2"/><text x="35.1202%" y="351.50"></text></g><g><title>unmap_page_range (2 samples, 0.02%)</title><rect x="34.8702%" y="325" width="0.0243%" height="15" fill="rgb(211,202,23)" fg:x="2874" fg:w="2"/><text x="35.1202%" y="335.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.02%)</title><rect x="34.8702%" y="309" width="0.0243%" height="15" fill="rgb(237,91,2)" fg:x="2874" fg:w="2"/><text x="35.1202%" y="319.50"></text></g><g><title>zap_pte_range (1 samples, 0.01%)</title><rect x="34.8823%" y="293" width="0.0121%" height="15" fill="rgb(226,228,36)" fg:x="2875" fg:w="1"/><text x="35.1323%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::scheduler::Scheduler&gt; (1 samples, 0.01%)</title><rect x="34.8944%" y="757" width="0.0121%" height="15" fill="rgb(213,63,50)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="34.8944%" y="741" width="0.0121%" height="15" fill="rgb(235,194,19)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="34.8944%" y="725" width="0.0121%" height="15" fill="rgb(207,204,18)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;usize&gt;&gt;]&gt; (1 samples, 0.01%)</title><rect x="34.8944%" y="709" width="0.0121%" height="15" fill="rgb(248,8,7)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="34.8944%" y="693" width="0.0121%" height="15" fill="rgb(223,145,47)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="34.8944%" y="677" width="0.0121%" height="15" fill="rgb(228,84,11)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.01%)</title><rect x="34.8944%" y="661" width="0.0121%" height="15" fill="rgb(218,76,45)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.01%)</title><rect x="34.8944%" y="645" width="0.0121%" height="15" fill="rgb(223,80,15)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="34.8944%" y="629" width="0.0121%" height="15" fill="rgb(219,218,33)" fg:x="2876" fg:w="1"/><text x="35.1444%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.15%)</title><rect x="34.9066%" y="709" width="0.1456%" height="15" fill="rgb(208,51,11)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (12 samples, 0.15%)</title><rect x="34.9066%" y="693" width="0.1456%" height="15" fill="rgb(229,165,39)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (12 samples, 0.15%)</title><rect x="34.9066%" y="677" width="0.1456%" height="15" fill="rgb(241,100,24)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (12 samples, 0.15%)</title><rect x="34.9066%" y="661" width="0.1456%" height="15" fill="rgb(228,14,23)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (12 samples, 0.15%)</title><rect x="34.9066%" y="645" width="0.1456%" height="15" fill="rgb(247,116,52)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="629" width="0.1456%" height="15" fill="rgb(216,149,33)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::MemoryValue&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="613" width="0.1456%" height="15" fill="rgb(238,142,29)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::state::AccountInfo&gt;&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="597" width="0.1456%" height="15" fill="rgb(224,83,40)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="581" width="0.1456%" height="15" fill="rgb(234,165,11)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="565" width="0.1456%" height="15" fill="rgb(215,96,23)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="549" width="0.1456%" height="15" fill="rgb(233,179,26)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="533" width="0.1456%" height="15" fill="rgb(225,129,33)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="517" width="0.1456%" height="15" fill="rgb(237,49,13)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (12 samples, 0.15%)</title><rect x="34.9066%" y="501" width="0.1456%" height="15" fill="rgb(211,3,31)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.15%)</title><rect x="34.9066%" y="485" width="0.1456%" height="15" fill="rgb(216,152,19)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.15%)</title><rect x="34.9066%" y="469" width="0.1456%" height="15" fill="rgb(251,121,35)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.15%)</title><rect x="34.9066%" y="453" width="0.1456%" height="15" fill="rgb(210,217,47)" fg:x="2877" fg:w="12"/><text x="35.1566%" y="463.50"></text></g><g><title>page_remove_rmap (1 samples, 0.01%)</title><rect x="35.0643%" y="485" width="0.0121%" height="15" fill="rgb(244,116,22)" fg:x="2890" fg:w="1"/><text x="35.3143%" y="495.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="35.0643%" y="469" width="0.0121%" height="15" fill="rgb(228,17,21)" fg:x="2890" fg:w="1"/><text x="35.3143%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue&gt;&gt; (16 samples, 0.19%)</title><rect x="34.9066%" y="757" width="0.1941%" height="15" fill="rgb(240,149,34)" fg:x="2877" fg:w="16"/><text x="35.1566%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue,std::hash::random::RandomState&gt;&gt; (16 samples, 0.19%)</title><rect x="34.9066%" y="741" width="0.1941%" height="15" fill="rgb(208,125,47)" fg:x="2877" fg:w="16"/><text x="35.1566%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (16 samples, 0.19%)</title><rect x="34.9066%" y="725" width="0.1941%" height="15" fill="rgb(249,186,39)" fg:x="2877" fg:w="16"/><text x="35.1566%" y="735.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="35.0522%" y="709" width="0.0485%" height="15" fill="rgb(240,220,33)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="719.50"></text></g><g><title>__GI_munmap (4 samples, 0.05%)</title><rect x="35.0522%" y="693" width="0.0485%" height="15" fill="rgb(243,110,23)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="35.0522%" y="677" width="0.0485%" height="15" fill="rgb(219,163,46)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="687.50"></text></g><g><title>do_syscall_64 (4 samples, 0.05%)</title><rect x="35.0522%" y="661" width="0.0485%" height="15" fill="rgb(216,126,30)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="671.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.05%)</title><rect x="35.0522%" y="645" width="0.0485%" height="15" fill="rgb(208,139,11)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="655.50"></text></g><g><title>__vm_munmap (4 samples, 0.05%)</title><rect x="35.0522%" y="629" width="0.0485%" height="15" fill="rgb(213,118,36)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="639.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.05%)</title><rect x="35.0522%" y="613" width="0.0485%" height="15" fill="rgb(226,43,17)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="623.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.05%)</title><rect x="35.0522%" y="597" width="0.0485%" height="15" fill="rgb(254,217,4)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="607.50"></text></g><g><title>unmap_region (4 samples, 0.05%)</title><rect x="35.0522%" y="581" width="0.0485%" height="15" fill="rgb(210,134,47)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="591.50"></text></g><g><title>unmap_vmas (4 samples, 0.05%)</title><rect x="35.0522%" y="565" width="0.0485%" height="15" fill="rgb(237,24,49)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="575.50"></text></g><g><title>unmap_single_vma (4 samples, 0.05%)</title><rect x="35.0522%" y="549" width="0.0485%" height="15" fill="rgb(251,39,46)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="559.50"></text></g><g><title>unmap_page_range (4 samples, 0.05%)</title><rect x="35.0522%" y="533" width="0.0485%" height="15" fill="rgb(251,220,3)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="543.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.05%)</title><rect x="35.0522%" y="517" width="0.0485%" height="15" fill="rgb(228,105,12)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="527.50"></text></g><g><title>zap_pte_range (4 samples, 0.05%)</title><rect x="35.0522%" y="501" width="0.0485%" height="15" fill="rgb(215,196,1)" fg:x="2889" fg:w="4"/><text x="35.3022%" y="511.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.02%)</title><rect x="35.0764%" y="485" width="0.0243%" height="15" fill="rgb(214,33,39)" fg:x="2891" fg:w="2"/><text x="35.3264%" y="495.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.02%)</title><rect x="35.0764%" y="469" width="0.0243%" height="15" fill="rgb(220,19,52)" fg:x="2891" fg:w="2"/><text x="35.3264%" y="479.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.02%)</title><rect x="35.0764%" y="453" width="0.0243%" height="15" fill="rgb(221,78,38)" fg:x="2891" fg:w="2"/><text x="35.3264%" y="463.50"></text></g><g><title>release_pages (2 samples, 0.02%)</title><rect x="35.0764%" y="437" width="0.0243%" height="15" fill="rgb(253,30,16)" fg:x="2891" fg:w="2"/><text x="35.3264%" y="447.50"></text></g><g><title>free_unref_page_list (1 samples, 0.01%)</title><rect x="35.0886%" y="421" width="0.0121%" height="15" fill="rgb(242,65,0)" fg:x="2892" fg:w="1"/><text x="35.3386%" y="431.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.01%)</title><rect x="35.0886%" y="405" width="0.0121%" height="15" fill="rgb(235,201,12)" fg:x="2892" fg:w="1"/><text x="35.3386%" y="415.50"></text></g><g><title>__free_one_page (1 samples, 0.01%)</title><rect x="35.0886%" y="389" width="0.0121%" height="15" fill="rgb(233,161,9)" fg:x="2892" fg:w="1"/><text x="35.3386%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="35.1007%" y="613" width="0.0121%" height="15" fill="rgb(241,207,41)" fg:x="2893" fg:w="1"/><text x="35.3507%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloy_primitives::log::Log]&gt; (1 samples, 0.01%)</title><rect x="35.1007%" y="597" width="0.0121%" height="15" fill="rgb(212,69,46)" fg:x="2893" fg:w="1"/><text x="35.3507%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (2 samples, 0.02%)</title><rect x="35.1007%" y="645" width="0.0243%" height="15" fill="rgb(239,69,45)" fg:x="2893" fg:w="2"/><text x="35.3507%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (2 samples, 0.02%)</title><rect x="35.1007%" y="629" width="0.0243%" height="15" fill="rgb(242,117,48)" fg:x="2893" fg:w="2"/><text x="35.3507%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::log::Log&gt;&gt; (1 samples, 0.01%)</title><rect x="35.1128%" y="613" width="0.0121%" height="15" fill="rgb(228,41,36)" fg:x="2894" fg:w="1"/><text x="35.3628%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="35.1128%" y="597" width="0.0121%" height="15" fill="rgb(212,3,32)" fg:x="2894" fg:w="1"/><text x="35.3628%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="35.1128%" y="581" width="0.0121%" height="15" fill="rgb(233,41,49)" fg:x="2894" fg:w="1"/><text x="35.3628%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="35.1250%" y="549" width="0.0121%" height="15" fill="rgb(252,170,49)" fg:x="2895" fg:w="1"/><text x="35.3750%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (5 samples, 0.06%)</title><rect x="35.4283%" y="437" width="0.0607%" height="15" fill="rgb(229,53,26)" fg:x="2920" fg:w="5"/><text x="35.6783%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (5 samples, 0.06%)</title><rect x="35.4283%" y="421" width="0.0607%" height="15" fill="rgb(217,157,12)" fg:x="2920" fg:w="5"/><text x="35.6783%" y="431.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="35.4283%" y="405" width="0.0607%" height="15" fill="rgb(227,17,9)" fg:x="2920" fg:w="5"/><text x="35.6783%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (35 samples, 0.42%)</title><rect x="35.1371%" y="533" width="0.4247%" height="15" fill="rgb(218,84,12)" fg:x="2896" fg:w="35"/><text x="35.3871%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (35 samples, 0.42%)</title><rect x="35.1371%" y="517" width="0.4247%" height="15" fill="rgb(212,79,24)" fg:x="2896" fg:w="35"/><text x="35.3871%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (34 samples, 0.41%)</title><rect x="35.1492%" y="501" width="0.4125%" height="15" fill="rgb(217,222,37)" fg:x="2897" fg:w="34"/><text x="35.3992%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (32 samples, 0.39%)</title><rect x="35.1735%" y="485" width="0.3883%" height="15" fill="rgb(246,208,8)" fg:x="2899" fg:w="32"/><text x="35.4235%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (32 samples, 0.39%)</title><rect x="35.1735%" y="469" width="0.3883%" height="15" fill="rgb(244,133,10)" fg:x="2899" fg:w="32"/><text x="35.4235%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (11 samples, 0.13%)</title><rect x="35.4283%" y="453" width="0.1335%" height="15" fill="rgb(209,219,41)" fg:x="2920" fg:w="11"/><text x="35.6783%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (6 samples, 0.07%)</title><rect x="35.4890%" y="437" width="0.0728%" height="15" fill="rgb(253,175,45)" fg:x="2925" fg:w="6"/><text x="35.7390%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (6 samples, 0.07%)</title><rect x="35.4890%" y="421" width="0.0728%" height="15" fill="rgb(235,100,37)" fg:x="2925" fg:w="6"/><text x="35.7390%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="35.4890%" y="405" width="0.0728%" height="15" fill="rgb(225,87,19)" fg:x="2925" fg:w="6"/><text x="35.7390%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="35.4890%" y="389" width="0.0728%" height="15" fill="rgb(217,152,17)" fg:x="2925" fg:w="6"/><text x="35.7390%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.07%)</title><rect x="35.4890%" y="373" width="0.0728%" height="15" fill="rgb(235,72,13)" fg:x="2925" fg:w="6"/><text x="35.7390%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.07%)</title><rect x="35.4890%" y="357" width="0.0728%" height="15" fill="rgb(233,140,18)" fg:x="2925" fg:w="6"/><text x="35.7390%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (38 samples, 0.46%)</title><rect x="35.1371%" y="549" width="0.4611%" height="15" fill="rgb(207,212,28)" fg:x="2896" fg:w="38"/><text x="35.3871%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.04%)</title><rect x="35.5618%" y="533" width="0.0364%" height="15" fill="rgb(220,130,25)" fg:x="2931" fg:w="3"/><text x="35.8118%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.04%)</title><rect x="35.5618%" y="517" width="0.0364%" height="15" fill="rgb(205,55,34)" fg:x="2931" fg:w="3"/><text x="35.8118%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.04%)</title><rect x="35.5618%" y="501" width="0.0364%" height="15" fill="rgb(237,54,35)" fg:x="2931" fg:w="3"/><text x="35.8118%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (43 samples, 0.52%)</title><rect x="35.1250%" y="565" width="0.5217%" height="15" fill="rgb(208,67,23)" fg:x="2895" fg:w="43"/><text x="35.3750%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (4 samples, 0.05%)</title><rect x="35.5982%" y="549" width="0.0485%" height="15" fill="rgb(206,207,50)" fg:x="2934" fg:w="4"/><text x="35.8482%" y="559.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="35.5982%" y="533" width="0.0485%" height="15" fill="rgb(213,211,42)" fg:x="2934" fg:w="4"/><text x="35.8482%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (4 samples, 0.05%)</title><rect x="35.5982%" y="517" width="0.0485%" height="15" fill="rgb(252,197,50)" fg:x="2934" fg:w="4"/><text x="35.8482%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (4 samples, 0.05%)</title><rect x="35.5982%" y="501" width="0.0485%" height="15" fill="rgb(251,211,41)" fg:x="2934" fg:w="4"/><text x="35.8482%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.66%)</title><rect x="35.1007%" y="709" width="0.6552%" height="15" fill="rgb(229,211,5)" fg:x="2893" fg:w="54"/><text x="35.3507%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;revm_primitives::result::ResultAndState&gt;]&gt; (54 samples, 0.66%)</title><rect x="35.1007%" y="693" width="0.6552%" height="15" fill="rgb(239,36,31)" fg:x="2893" fg:w="54"/><text x="35.3507%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt; (54 samples, 0.66%)</title><rect x="35.1007%" y="677" width="0.6552%" height="15" fill="rgb(248,67,31)" fg:x="2893" fg:w="54"/><text x="35.3507%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (54 samples, 0.66%)</title><rect x="35.1007%" y="661" width="0.6552%" height="15" fill="rgb(249,55,44)" fg:x="2893" fg:w="54"/><text x="35.3507%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (52 samples, 0.63%)</title><rect x="35.1250%" y="645" width="0.6309%" height="15" fill="rgb(216,82,12)" fg:x="2895" fg:w="52"/><text x="35.3750%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (52 samples, 0.63%)</title><rect x="35.1250%" y="629" width="0.6309%" height="15" fill="rgb(242,174,1)" fg:x="2895" fg:w="52"/><text x="35.3750%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (52 samples, 0.63%)</title><rect x="35.1250%" y="613" width="0.6309%" height="15" fill="rgb(208,120,29)" fg:x="2895" fg:w="52"/><text x="35.3750%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.63%)</title><rect x="35.1250%" y="597" width="0.6309%" height="15" fill="rgb(221,105,43)" fg:x="2895" fg:w="52"/><text x="35.3750%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (52 samples, 0.63%)</title><rect x="35.1250%" y="581" width="0.6309%" height="15" fill="rgb(234,124,22)" fg:x="2895" fg:w="52"/><text x="35.3750%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (9 samples, 0.11%)</title><rect x="35.6467%" y="565" width="0.1092%" height="15" fill="rgb(212,23,30)" fg:x="2938" fg:w="9"/><text x="35.8967%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.11%)</title><rect x="35.6467%" y="549" width="0.1092%" height="15" fill="rgb(219,122,53)" fg:x="2938" fg:w="9"/><text x="35.8967%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.10%)</title><rect x="35.6588%" y="533" width="0.0971%" height="15" fill="rgb(248,84,24)" fg:x="2939" fg:w="8"/><text x="35.9088%" y="543.50"></text></g><g><title>__GI___libc_free (8 samples, 0.10%)</title><rect x="35.6588%" y="517" width="0.0971%" height="15" fill="rgb(245,115,18)" fg:x="2939" fg:w="8"/><text x="35.9088%" y="527.50"></text></g><g><title>_int_free (8 samples, 0.10%)</title><rect x="35.6588%" y="501" width="0.0971%" height="15" fill="rgb(227,176,51)" fg:x="2939" fg:w="8"/><text x="35.9088%" y="511.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.05%)</title><rect x="35.7074%" y="485" width="0.0485%" height="15" fill="rgb(229,63,42)" fg:x="2943" fg:w="4"/><text x="35.9574%" y="495.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.05%)</title><rect x="35.7074%" y="469" width="0.0485%" height="15" fill="rgb(247,202,24)" fg:x="2943" fg:w="4"/><text x="35.9574%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (55 samples, 0.67%)</title><rect x="35.1007%" y="757" width="0.6673%" height="15" fill="rgb(244,173,20)" fg:x="2893" fg:w="55"/><text x="35.3507%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (55 samples, 0.67%)</title><rect x="35.1007%" y="741" width="0.6673%" height="15" fill="rgb(242,81,47)" fg:x="2893" fg:w="55"/><text x="35.3507%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt; (55 samples, 0.67%)</title><rect x="35.1007%" y="725" width="0.6673%" height="15" fill="rgb(231,185,54)" fg:x="2893" fg:w="55"/><text x="35.3507%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="35.7559%" y="709" width="0.0121%" height="15" fill="rgb(243,55,32)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="35.7559%" y="693" width="0.0121%" height="15" fill="rgb(208,167,19)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="35.7559%" y="677" width="0.0121%" height="15" fill="rgb(231,72,35)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="35.7559%" y="661" width="0.0121%" height="15" fill="rgb(250,173,51)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="35.7559%" y="645" width="0.0121%" height="15" fill="rgb(209,5,22)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="655.50"></text></g><g><title>__GI_munmap (1 samples, 0.01%)</title><rect x="35.7559%" y="629" width="0.0121%" height="15" fill="rgb(250,174,19)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="35.7559%" y="613" width="0.0121%" height="15" fill="rgb(217,3,49)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="623.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="35.7559%" y="597" width="0.0121%" height="15" fill="rgb(218,225,5)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="607.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.01%)</title><rect x="35.7559%" y="581" width="0.0121%" height="15" fill="rgb(236,89,11)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="591.50"></text></g><g><title>__vm_munmap (1 samples, 0.01%)</title><rect x="35.7559%" y="565" width="0.0121%" height="15" fill="rgb(206,33,28)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="575.50"></text></g><g><title>do_vmi_munmap (1 samples, 0.01%)</title><rect x="35.7559%" y="549" width="0.0121%" height="15" fill="rgb(241,56,42)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="559.50"></text></g><g><title>do_vmi_align_munmap (1 samples, 0.01%)</title><rect x="35.7559%" y="533" width="0.0121%" height="15" fill="rgb(222,44,11)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="543.50"></text></g><g><title>unmap_region (1 samples, 0.01%)</title><rect x="35.7559%" y="517" width="0.0121%" height="15" fill="rgb(234,111,20)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="527.50"></text></g><g><title>unmap_vmas (1 samples, 0.01%)</title><rect x="35.7559%" y="501" width="0.0121%" height="15" fill="rgb(237,77,6)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="511.50"></text></g><g><title>unmap_single_vma (1 samples, 0.01%)</title><rect x="35.7559%" y="485" width="0.0121%" height="15" fill="rgb(235,111,23)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="495.50"></text></g><g><title>unmap_page_range (1 samples, 0.01%)</title><rect x="35.7559%" y="469" width="0.0121%" height="15" fill="rgb(251,135,29)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="479.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.01%)</title><rect x="35.7559%" y="453" width="0.0121%" height="15" fill="rgb(217,57,1)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="463.50"></text></g><g><title>zap_pte_range (1 samples, 0.01%)</title><rect x="35.7559%" y="437" width="0.0121%" height="15" fill="rgb(249,119,31)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="447.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.01%)</title><rect x="35.7559%" y="421" width="0.0121%" height="15" fill="rgb(233,164,33)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="431.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="35.7559%" y="405" width="0.0121%" height="15" fill="rgb(250,217,43)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="415.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="35.7559%" y="389" width="0.0121%" height="15" fill="rgb(232,154,50)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="399.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="35.7559%" y="373" width="0.0121%" height="15" fill="rgb(227,190,8)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="383.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="35.7559%" y="357" width="0.0121%" height="15" fill="rgb(209,217,32)" fg:x="2947" fg:w="1"/><text x="36.0059%" y="367.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run (793 samples, 9.62%)</title><rect x="26.2679%" y="773" width="9.6215%" height="15" fill="rgb(243,203,50)" fg:x="2165" fg:w="793"/><text x="26.5179%" y="783.50">block_stm_revm..</text></g><g><title>std::thread::scoped::scope (10 samples, 0.12%)</title><rect x="35.7680%" y="757" width="0.1213%" height="15" fill="rgb(232,152,27)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="767.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.12%)</title><rect x="35.7680%" y="741" width="0.1213%" height="15" fill="rgb(240,34,29)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="751.50"></text></g><g><title>std::panicking::try (10 samples, 0.12%)</title><rect x="35.7680%" y="725" width="0.1213%" height="15" fill="rgb(215,185,52)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="735.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.12%)</title><rect x="35.7680%" y="709" width="0.1213%" height="15" fill="rgb(240,89,49)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10 samples, 0.12%)</title><rect x="35.7680%" y="693" width="0.1213%" height="15" fill="rgb(225,12,52)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="703.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (10 samples, 0.12%)</title><rect x="35.7680%" y="677" width="0.1213%" height="15" fill="rgb(239,128,45)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="687.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}} (10 samples, 0.12%)</title><rect x="35.7680%" y="661" width="0.1213%" height="15" fill="rgb(211,78,47)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="671.50"></text></g><g><title>std::thread::scoped::Scope::spawn (10 samples, 0.12%)</title><rect x="35.7680%" y="645" width="0.1213%" height="15" fill="rgb(232,31,21)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="655.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (10 samples, 0.12%)</title><rect x="35.7680%" y="629" width="0.1213%" height="15" fill="rgb(222,168,14)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="639.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (10 samples, 0.12%)</title><rect x="35.7680%" y="613" width="0.1213%" height="15" fill="rgb(209,128,24)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="623.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (10 samples, 0.12%)</title><rect x="35.7680%" y="597" width="0.1213%" height="15" fill="rgb(249,35,13)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="607.50"></text></g><g><title>__pthread_create_2_1 (10 samples, 0.12%)</title><rect x="35.7680%" y="581" width="0.1213%" height="15" fill="rgb(218,7,2)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="591.50"></text></g><g><title>allocate_stack (10 samples, 0.12%)</title><rect x="35.7680%" y="565" width="0.1213%" height="15" fill="rgb(238,107,27)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="575.50"></text></g><g><title>asm_exc_page_fault (10 samples, 0.12%)</title><rect x="35.7680%" y="549" width="0.1213%" height="15" fill="rgb(217,88,38)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="559.50"></text></g><g><title>exc_page_fault (10 samples, 0.12%)</title><rect x="35.7680%" y="533" width="0.1213%" height="15" fill="rgb(230,207,0)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="543.50"></text></g><g><title>do_user_addr_fault (10 samples, 0.12%)</title><rect x="35.7680%" y="517" width="0.1213%" height="15" fill="rgb(249,64,54)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="527.50"></text></g><g><title>lock_mm_and_find_vma (10 samples, 0.12%)</title><rect x="35.7680%" y="501" width="0.1213%" height="15" fill="rgb(231,7,11)" fg:x="2948" fg:w="10"/><text x="36.0180%" y="511.50"></text></g><g><title>down_read_killable (9 samples, 0.11%)</title><rect x="35.7802%" y="485" width="0.1092%" height="15" fill="rgb(205,149,21)" fg:x="2949" fg:w="9"/><text x="36.0302%" y="495.50"></text></g><g><title>rwsem_down_read_slowpath (9 samples, 0.11%)</title><rect x="35.7802%" y="469" width="0.1092%" height="15" fill="rgb(215,126,34)" fg:x="2949" fg:w="9"/><text x="36.0302%" y="479.50"></text></g><g><title>schedule_preempt_disabled (9 samples, 0.11%)</title><rect x="35.7802%" y="453" width="0.1092%" height="15" fill="rgb(241,132,45)" fg:x="2949" fg:w="9"/><text x="36.0302%" y="463.50"></text></g><g><title>schedule (9 samples, 0.11%)</title><rect x="35.7802%" y="437" width="0.1092%" height="15" fill="rgb(252,69,32)" fg:x="2949" fg:w="9"/><text x="36.0302%" y="447.50"></text></g><g><title>__schedule (9 samples, 0.11%)</title><rect x="35.7802%" y="421" width="0.1092%" height="15" fill="rgb(232,204,19)" fg:x="2949" fg:w="9"/><text x="36.0302%" y="431.50"></text></g><g><title>finish_task_switch.isra.0 (9 samples, 0.11%)</title><rect x="35.7802%" y="405" width="0.1092%" height="15" fill="rgb(249,15,47)" fg:x="2949" fg:w="9"/><text x="36.0302%" y="415.50"></text></g><g><title>__perf_event_task_sched_in (8 samples, 0.10%)</title><rect x="35.7923%" y="389" width="0.0971%" height="15" fill="rgb(209,227,23)" fg:x="2950" fg:w="8"/><text x="36.0423%" y="399.50"></text></g><g><title>perf_ctx_enable (8 samples, 0.10%)</title><rect x="35.7923%" y="373" width="0.0971%" height="15" fill="rgb(248,92,24)" fg:x="2950" fg:w="8"/><text x="36.0423%" y="383.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="35.8893%" y="757" width="0.0121%" height="15" fill="rgb(247,59,2)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="767.50"></text></g><g><title>block_stm_revm::storage::Storage::new (1 samples, 0.01%)</title><rect x="35.8893%" y="741" width="0.0121%" height="15" fill="rgb(221,30,5)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (1 samples, 0.01%)</title><rect x="35.8893%" y="725" width="0.0121%" height="15" fill="rgb(208,108,53)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="35.8893%" y="709" width="0.0121%" height="15" fill="rgb(211,183,26)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="719.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="35.8893%" y="693" width="0.0121%" height="15" fill="rgb(232,132,4)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="703.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="35.8893%" y="677" width="0.0121%" height="15" fill="rgb(253,128,37)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="35.8893%" y="661" width="0.0121%" height="15" fill="rgb(221,58,24)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="35.8893%" y="645" width="0.0121%" height="15" fill="rgb(230,54,45)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="655.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="35.8893%" y="629" width="0.0121%" height="15" fill="rgb(254,21,18)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="639.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="35.8893%" y="613" width="0.0121%" height="15" fill="rgb(221,108,0)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="623.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.01%)</title><rect x="35.8893%" y="597" width="0.0121%" height="15" fill="rgb(206,95,1)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="607.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="581" width="0.0121%" height="15" fill="rgb(237,52,5)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="591.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="565" width="0.0121%" height="15" fill="rgb(218,150,34)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="575.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="549" width="0.0121%" height="15" fill="rgb(235,194,28)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="559.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="533" width="0.0121%" height="15" fill="rgb(245,92,18)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="543.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="517" width="0.0121%" height="15" fill="rgb(253,203,53)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="527.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="501" width="0.0121%" height="15" fill="rgb(249,185,47)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="511.50"></text></g><g><title>do_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="485" width="0.0121%" height="15" fill="rgb(252,194,52)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="495.50"></text></g><g><title>do_read_fault (1 samples, 0.01%)</title><rect x="35.8893%" y="469" width="0.0121%" height="15" fill="rgb(210,53,36)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="479.50"></text></g><g><title>filemap_map_pages (1 samples, 0.01%)</title><rect x="35.8893%" y="453" width="0.0121%" height="15" fill="rgb(237,37,25)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="463.50"></text></g><g><title>next_uptodate_page (1 samples, 0.01%)</title><rect x="35.8893%" y="437" width="0.0121%" height="15" fill="rgb(242,116,27)" fg:x="2958" fg:w="1"/><text x="36.1393%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="35.9136%" y="565" width="0.0121%" height="15" fill="rgb(213,185,26)" fg:x="2960" fg:w="1"/><text x="36.1636%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.01%)</title><rect x="35.9136%" y="549" width="0.0121%" height="15" fill="rgb(225,204,8)" fg:x="2960" fg:w="1"/><text x="36.1636%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="35.9136%" y="533" width="0.0121%" height="15" fill="rgb(254,111,37)" fg:x="2960" fg:w="1"/><text x="36.1636%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.01%)</title><rect x="35.9136%" y="517" width="0.0121%" height="15" fill="rgb(242,35,9)" fg:x="2960" fg:w="1"/><text x="36.1636%" y="527.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="35.9257%" y="565" width="0.0121%" height="15" fill="rgb(232,138,49)" fg:x="2961" fg:w="1"/><text x="36.1757%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="35.9379%" y="565" width="0.0121%" height="15" fill="rgb(247,56,4)" fg:x="2962" fg:w="1"/><text x="36.1879%" y="575.50"></text></g><g><title>&lt;revm_primitives::env::TxEnv as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="35.9015%" y="581" width="0.0607%" height="15" fill="rgb(226,179,17)" fg:x="2959" fg:w="5"/><text x="36.1515%" y="591.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (1 samples, 0.01%)</title><rect x="35.9500%" y="565" width="0.0121%" height="15" fill="rgb(216,163,45)" fg:x="2963" fg:w="1"/><text x="36.2000%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="35.9621%" y="581" width="0.0121%" height="15" fill="rgb(211,157,3)" fg:x="2964" fg:w="1"/><text x="36.2121%" y="591.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="35.9743%" y="565" width="0.0121%" height="15" fill="rgb(234,44,20)" fg:x="2965" fg:w="1"/><text x="36.2243%" y="575.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="35.9743%" y="549" width="0.0121%" height="15" fill="rgb(254,138,23)" fg:x="2965" fg:w="1"/><text x="36.2243%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="35.9864%" y="565" width="0.0121%" height="15" fill="rgb(206,119,39)" fg:x="2966" fg:w="1"/><text x="36.2364%" y="575.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="35.9864%" y="549" width="0.0121%" height="15" fill="rgb(231,105,52)" fg:x="2966" fg:w="1"/><text x="36.2364%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="35.9864%" y="533" width="0.0121%" height="15" fill="rgb(250,20,5)" fg:x="2966" fg:w="1"/><text x="36.2364%" y="543.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="35.9864%" y="517" width="0.0121%" height="15" fill="rgb(215,198,30)" fg:x="2966" fg:w="1"/><text x="36.2364%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="35.9864%" y="501" width="0.0121%" height="15" fill="rgb(246,142,8)" fg:x="2966" fg:w="1"/><text x="36.2364%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="35.9864%" y="485" width="0.0121%" height="15" fill="rgb(243,26,38)" fg:x="2966" fg:w="1"/><text x="36.2364%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="35.9985%" y="533" width="0.0121%" height="15" fill="rgb(205,133,28)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="35.9985%" y="517" width="0.0121%" height="15" fill="rgb(212,34,0)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 0.01%)</title><rect x="35.9985%" y="501" width="0.0121%" height="15" fill="rgb(251,226,22)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;)&gt;&gt; (1 samples, 0.01%)</title><rect x="35.9985%" y="485" width="0.0121%" height="15" fill="rgb(252,119,9)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="35.9985%" y="469" width="0.0121%" height="15" fill="rgb(213,150,50)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.01%)</title><rect x="35.9985%" y="453" width="0.0121%" height="15" fill="rgb(212,24,39)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.01%)</title><rect x="35.9985%" y="437" width="0.0121%" height="15" fill="rgb(213,46,39)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.01%)</title><rect x="35.9985%" y="421" width="0.0121%" height="15" fill="rgb(239,106,12)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.01%)</title><rect x="35.9985%" y="405" width="0.0121%" height="15" fill="rgb(249,229,21)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;)&gt; (1 samples, 0.01%)</title><rect x="35.9985%" y="389" width="0.0121%" height="15" fill="rgb(212,158,3)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="35.9985%" y="373" width="0.0121%" height="15" fill="rgb(253,26,48)" fg:x="2967" fg:w="1"/><text x="36.2485%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="36.0107%" y="517" width="0.0121%" height="15" fill="rgb(238,178,20)" fg:x="2968" fg:w="1"/><text x="36.2607%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="36.0228%" y="501" width="0.0121%" height="15" fill="rgb(208,86,15)" fg:x="2969" fg:w="1"/><text x="36.2728%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="36.0228%" y="485" width="0.0121%" height="15" fill="rgb(239,42,53)" fg:x="2969" fg:w="1"/><text x="36.2728%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="36.0228%" y="469" width="0.0121%" height="15" fill="rgb(245,226,8)" fg:x="2969" fg:w="1"/><text x="36.2728%" y="479.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="36.0228%" y="453" width="0.0121%" height="15" fill="rgb(216,176,32)" fg:x="2969" fg:w="1"/><text x="36.2728%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="35.9985%" y="565" width="0.0485%" height="15" fill="rgb(231,186,21)" fg:x="2967" fg:w="4"/><text x="36.2485%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="35.9985%" y="549" width="0.0485%" height="15" fill="rgb(205,95,49)" fg:x="2967" fg:w="4"/><text x="36.2485%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="36.0107%" y="533" width="0.0364%" height="15" fill="rgb(217,145,8)" fg:x="2968" fg:w="3"/><text x="36.2607%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (2 samples, 0.02%)</title><rect x="36.0228%" y="517" width="0.0243%" height="15" fill="rgb(239,144,48)" fg:x="2969" fg:w="2"/><text x="36.2728%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::Env&gt; (1 samples, 0.01%)</title><rect x="36.0349%" y="501" width="0.0121%" height="15" fill="rgb(214,189,23)" fg:x="2970" fg:w="1"/><text x="36.2849%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::CfgEnv&gt; (1 samples, 0.01%)</title><rect x="36.0349%" y="485" width="0.0121%" height="15" fill="rgb(229,157,17)" fg:x="2970" fg:w="1"/><text x="36.2849%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::kzg::env_settings::EnvKzgSettings&gt; (1 samples, 0.01%)</title><rect x="36.0349%" y="469" width="0.0121%" height="15" fill="rgb(230,5,48)" fg:x="2970" fg:w="1"/><text x="36.2849%" y="479.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="36.0471%" y="549" width="0.0485%" height="15" fill="rgb(224,156,48)" fg:x="2971" fg:w="4"/><text x="36.2971%" y="559.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="36.0471%" y="533" width="0.0485%" height="15" fill="rgb(223,14,29)" fg:x="2971" fg:w="4"/><text x="36.2971%" y="543.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="36.0956%" y="549" width="0.0121%" height="15" fill="rgb(229,96,36)" fg:x="2975" fg:w="1"/><text x="36.3456%" y="559.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="36.0956%" y="533" width="0.0121%" height="15" fill="rgb(231,102,53)" fg:x="2975" fg:w="1"/><text x="36.3456%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (2 samples, 0.02%)</title><rect x="36.1077%" y="485" width="0.0243%" height="15" fill="rgb(210,77,38)" fg:x="2976" fg:w="2"/><text x="36.3577%" y="495.50"></text></g><g><title>core::mem::size_of_val_raw (2 samples, 0.02%)</title><rect x="36.1077%" y="469" width="0.0243%" height="15" fill="rgb(235,131,6)" fg:x="2976" fg:w="2"/><text x="36.3577%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.07%)</title><rect x="36.1077%" y="549" width="0.0728%" height="15" fill="rgb(252,55,38)" fg:x="2976" fg:w="6"/><text x="36.3577%" y="559.50"></text></g><g><title>core::mem::drop (6 samples, 0.07%)</title><rect x="36.1077%" y="533" width="0.0728%" height="15" fill="rgb(246,38,14)" fg:x="2976" fg:w="6"/><text x="36.3577%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (6 samples, 0.07%)</title><rect x="36.1077%" y="517" width="0.0728%" height="15" fill="rgb(242,27,5)" fg:x="2976" fg:w="6"/><text x="36.3577%" y="527.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="36.1077%" y="501" width="0.0728%" height="15" fill="rgb(228,65,35)" fg:x="2976" fg:w="6"/><text x="36.3577%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="36.1320%" y="485" width="0.0485%" height="15" fill="rgb(245,93,11)" fg:x="2978" fg:w="4"/><text x="36.3820%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="36.1320%" y="469" width="0.0485%" height="15" fill="rgb(213,1,31)" fg:x="2978" fg:w="4"/><text x="36.3820%" y="479.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="36.1805%" y="501" width="0.0485%" height="15" fill="rgb(237,205,14)" fg:x="2982" fg:w="4"/><text x="36.4305%" y="511.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="36.2048%" y="485" width="0.0243%" height="15" fill="rgb(232,118,45)" fg:x="2984" fg:w="2"/><text x="36.4548%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="36.2291%" y="501" width="0.0485%" height="15" fill="rgb(218,5,6)" fg:x="2986" fg:w="4"/><text x="36.4791%" y="511.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="36.2533%" y="485" width="0.0243%" height="15" fill="rgb(251,87,51)" fg:x="2988" fg:w="2"/><text x="36.5033%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="36.2533%" y="469" width="0.0243%" height="15" fill="rgb(207,225,20)" fg:x="2988" fg:w="2"/><text x="36.5033%" y="479.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="36.2533%" y="453" width="0.0243%" height="15" fill="rgb(222,78,54)" fg:x="2988" fg:w="2"/><text x="36.5033%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.2533%" y="437" width="0.0243%" height="15" fill="rgb(232,85,16)" fg:x="2988" fg:w="2"/><text x="36.5033%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.2533%" y="421" width="0.0243%" height="15" fill="rgb(244,25,33)" fg:x="2988" fg:w="2"/><text x="36.5033%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (13 samples, 0.16%)</title><rect x="36.1805%" y="533" width="0.1577%" height="15" fill="rgb(233,24,36)" fg:x="2982" fg:w="13"/><text x="36.4305%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.16%)</title><rect x="36.1805%" y="517" width="0.1577%" height="15" fill="rgb(253,49,54)" fg:x="2982" fg:w="13"/><text x="36.4305%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="36.2776%" y="501" width="0.0607%" height="15" fill="rgb(245,12,22)" fg:x="2990" fg:w="5"/><text x="36.5276%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="36.2776%" y="485" width="0.0607%" height="15" fill="rgb(253,141,28)" fg:x="2990" fg:w="5"/><text x="36.5276%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="36.3383%" y="533" width="0.0243%" height="15" fill="rgb(225,207,27)" fg:x="2995" fg:w="2"/><text x="36.5883%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="36.3383%" y="517" width="0.0243%" height="15" fill="rgb(220,84,2)" fg:x="2995" fg:w="2"/><text x="36.5883%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.3383%" y="501" width="0.0243%" height="15" fill="rgb(224,37,37)" fg:x="2995" fg:w="2"/><text x="36.5883%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.3383%" y="485" width="0.0243%" height="15" fill="rgb(220,143,18)" fg:x="2995" fg:w="2"/><text x="36.5883%" y="495.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="36.3747%" y="437" width="0.0121%" height="15" fill="rgb(210,88,33)" fg:x="2998" fg:w="1"/><text x="36.6247%" y="447.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="36.3747%" y="421" width="0.0121%" height="15" fill="rgb(219,87,51)" fg:x="2998" fg:w="1"/><text x="36.6247%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="36.3625%" y="501" width="0.0485%" height="15" fill="rgb(211,7,35)" fg:x="2997" fg:w="4"/><text x="36.6125%" y="511.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="36.3747%" y="485" width="0.0364%" height="15" fill="rgb(232,77,2)" fg:x="2998" fg:w="3"/><text x="36.6247%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="36.3747%" y="469" width="0.0364%" height="15" fill="rgb(249,94,25)" fg:x="2998" fg:w="3"/><text x="36.6247%" y="479.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="36.3747%" y="453" width="0.0364%" height="15" fill="rgb(215,112,2)" fg:x="2998" fg:w="3"/><text x="36.6247%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.3868%" y="437" width="0.0243%" height="15" fill="rgb(226,115,48)" fg:x="2999" fg:w="2"/><text x="36.6368%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.3868%" y="421" width="0.0243%" height="15" fill="rgb(249,196,10)" fg:x="2999" fg:w="2"/><text x="36.6368%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (20 samples, 0.24%)</title><rect x="36.1805%" y="549" width="0.2427%" height="15" fill="rgb(237,109,14)" fg:x="2982" fg:w="20"/><text x="36.4305%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="36.3625%" y="533" width="0.0607%" height="15" fill="rgb(217,103,53)" fg:x="2997" fg:w="5"/><text x="36.6125%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="36.3625%" y="517" width="0.0607%" height="15" fill="rgb(244,137,9)" fg:x="2997" fg:w="5"/><text x="36.6125%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="36.4111%" y="501" width="0.0121%" height="15" fill="rgb(227,201,3)" fg:x="3001" fg:w="1"/><text x="36.6611%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="36.4111%" y="485" width="0.0121%" height="15" fill="rgb(243,94,6)" fg:x="3001" fg:w="1"/><text x="36.6611%" y="495.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="36.4232%" y="501" width="0.0121%" height="15" fill="rgb(235,118,5)" fg:x="3002" fg:w="1"/><text x="36.6732%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="36.4232%" y="485" width="0.0121%" height="15" fill="rgb(247,10,30)" fg:x="3002" fg:w="1"/><text x="36.6732%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="36.4353%" y="485" width="0.0121%" height="15" fill="rgb(205,26,28)" fg:x="3003" fg:w="1"/><text x="36.6853%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="36.4353%" y="501" width="0.0364%" height="15" fill="rgb(206,99,35)" fg:x="3003" fg:w="3"/><text x="36.6853%" y="511.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="36.4475%" y="485" width="0.0243%" height="15" fill="rgb(238,130,40)" fg:x="3004" fg:w="2"/><text x="36.6975%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="36.4475%" y="469" width="0.0243%" height="15" fill="rgb(224,126,31)" fg:x="3004" fg:w="2"/><text x="36.6975%" y="479.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="36.4475%" y="453" width="0.0243%" height="15" fill="rgb(254,105,17)" fg:x="3004" fg:w="2"/><text x="36.6975%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.4475%" y="437" width="0.0243%" height="15" fill="rgb(216,87,36)" fg:x="3004" fg:w="2"/><text x="36.6975%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.4475%" y="421" width="0.0243%" height="15" fill="rgb(240,21,12)" fg:x="3004" fg:w="2"/><text x="36.6975%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="36.4232%" y="533" width="0.0728%" height="15" fill="rgb(245,192,34)" fg:x="3002" fg:w="6"/><text x="36.6732%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="36.4232%" y="517" width="0.0728%" height="15" fill="rgb(226,100,49)" fg:x="3002" fg:w="6"/><text x="36.6732%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.4717%" y="501" width="0.0243%" height="15" fill="rgb(245,188,27)" fg:x="3006" fg:w="2"/><text x="36.7217%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.4717%" y="485" width="0.0243%" height="15" fill="rgb(212,170,8)" fg:x="3006" fg:w="2"/><text x="36.7217%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="36.4232%" y="549" width="0.0971%" height="15" fill="rgb(217,113,29)" fg:x="3002" fg:w="8"/><text x="36.6732%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="36.4960%" y="533" width="0.0243%" height="15" fill="rgb(237,30,3)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="36.4960%" y="517" width="0.0243%" height="15" fill="rgb(227,19,28)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="36.4960%" y="501" width="0.0243%" height="15" fill="rgb(239,172,45)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="511.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="36.4960%" y="485" width="0.0243%" height="15" fill="rgb(254,55,39)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="36.4960%" y="469" width="0.0243%" height="15" fill="rgb(249,208,12)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="479.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="36.4960%" y="453" width="0.0243%" height="15" fill="rgb(240,52,13)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.4960%" y="437" width="0.0243%" height="15" fill="rgb(252,149,13)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.4960%" y="421" width="0.0243%" height="15" fill="rgb(232,81,48)" fg:x="3008" fg:w="2"/><text x="36.7460%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="36.5203%" y="501" width="0.0121%" height="15" fill="rgb(222,144,2)" fg:x="3010" fg:w="1"/><text x="36.7703%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="36.5203%" y="485" width="0.0121%" height="15" fill="rgb(216,81,32)" fg:x="3010" fg:w="1"/><text x="36.7703%" y="495.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="36.5324%" y="501" width="0.0121%" height="15" fill="rgb(244,78,51)" fg:x="3011" fg:w="1"/><text x="36.7824%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="36.5203%" y="533" width="0.0607%" height="15" fill="rgb(217,66,21)" fg:x="3010" fg:w="5"/><text x="36.7703%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="36.5203%" y="517" width="0.0607%" height="15" fill="rgb(247,101,42)" fg:x="3010" fg:w="5"/><text x="36.7703%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="36.5445%" y="501" width="0.0364%" height="15" fill="rgb(227,81,39)" fg:x="3012" fg:w="3"/><text x="36.7945%" y="511.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="36.5445%" y="485" width="0.0364%" height="15" fill="rgb(220,223,44)" fg:x="3012" fg:w="3"/><text x="36.7945%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="36.5445%" y="469" width="0.0364%" height="15" fill="rgb(205,218,2)" fg:x="3012" fg:w="3"/><text x="36.7945%" y="479.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="36.5445%" y="453" width="0.0364%" height="15" fill="rgb(212,207,28)" fg:x="3012" fg:w="3"/><text x="36.7945%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="36.5445%" y="437" width="0.0364%" height="15" fill="rgb(224,12,41)" fg:x="3012" fg:w="3"/><text x="36.7945%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="36.5445%" y="421" width="0.0364%" height="15" fill="rgb(216,118,12)" fg:x="3012" fg:w="3"/><text x="36.7945%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="36.5809%" y="533" width="0.0121%" height="15" fill="rgb(252,97,46)" fg:x="3015" fg:w="1"/><text x="36.8309%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="36.5809%" y="517" width="0.0121%" height="15" fill="rgb(244,206,19)" fg:x="3015" fg:w="1"/><text x="36.8309%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="36.5809%" y="501" width="0.0121%" height="15" fill="rgb(231,84,31)" fg:x="3015" fg:w="1"/><text x="36.8309%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="36.5809%" y="485" width="0.0121%" height="15" fill="rgb(244,133,0)" fg:x="3015" fg:w="1"/><text x="36.8309%" y="495.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="36.5931%" y="501" width="0.0121%" height="15" fill="rgb(223,15,50)" fg:x="3016" fg:w="1"/><text x="36.8431%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="36.5931%" y="485" width="0.0121%" height="15" fill="rgb(250,118,49)" fg:x="3016" fg:w="1"/><text x="36.8431%" y="495.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="36.5931%" y="469" width="0.0121%" height="15" fill="rgb(248,25,38)" fg:x="3016" fg:w="1"/><text x="36.8431%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (47 samples, 0.57%)</title><rect x="36.0471%" y="565" width="0.5702%" height="15" fill="rgb(215,70,14)" fg:x="2971" fg:w="47"/><text x="36.2971%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="36.5203%" y="549" width="0.0971%" height="15" fill="rgb(215,28,15)" fg:x="3010" fg:w="8"/><text x="36.7703%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="36.5931%" y="533" width="0.0243%" height="15" fill="rgb(243,6,28)" fg:x="3016" fg:w="2"/><text x="36.8431%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="36.5931%" y="517" width="0.0243%" height="15" fill="rgb(222,130,1)" fg:x="3016" fg:w="2"/><text x="36.8431%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="36.6052%" y="501" width="0.0121%" height="15" fill="rgb(236,166,44)" fg:x="3017" fg:w="1"/><text x="36.8552%" y="511.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="36.6052%" y="485" width="0.0121%" height="15" fill="rgb(221,108,14)" fg:x="3017" fg:w="1"/><text x="36.8552%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="36.6052%" y="469" width="0.0121%" height="15" fill="rgb(252,3,45)" fg:x="3017" fg:w="1"/><text x="36.8552%" y="479.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="36.6052%" y="453" width="0.0121%" height="15" fill="rgb(237,68,30)" fg:x="3017" fg:w="1"/><text x="36.8552%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="36.6052%" y="437" width="0.0121%" height="15" fill="rgb(211,79,22)" fg:x="3017" fg:w="1"/><text x="36.8552%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="36.6052%" y="421" width="0.0121%" height="15" fill="rgb(252,185,21)" fg:x="3017" fg:w="1"/><text x="36.8552%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="36.6173%" y="517" width="0.0485%" height="15" fill="rgb(225,189,26)" fg:x="3018" fg:w="4"/><text x="36.8673%" y="527.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="36.6295%" y="501" width="0.0364%" height="15" fill="rgb(241,30,40)" fg:x="3019" fg:w="3"/><text x="36.8795%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="36.6295%" y="485" width="0.0364%" height="15" fill="rgb(235,215,44)" fg:x="3019" fg:w="3"/><text x="36.8795%" y="495.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="36.6295%" y="469" width="0.0364%" height="15" fill="rgb(205,8,29)" fg:x="3019" fg:w="3"/><text x="36.8795%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="36.6295%" y="453" width="0.0364%" height="15" fill="rgb(241,137,42)" fg:x="3019" fg:w="3"/><text x="36.8795%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="36.6295%" y="437" width="0.0364%" height="15" fill="rgb(237,155,2)" fg:x="3019" fg:w="3"/><text x="36.8795%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (9 samples, 0.11%)</title><rect x="36.6173%" y="549" width="0.1092%" height="15" fill="rgb(245,29,42)" fg:x="3018" fg:w="9"/><text x="36.8673%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.11%)</title><rect x="36.6173%" y="533" width="0.1092%" height="15" fill="rgb(234,101,35)" fg:x="3018" fg:w="9"/><text x="36.8673%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="36.6659%" y="517" width="0.0607%" height="15" fill="rgb(228,64,37)" fg:x="3022" fg:w="5"/><text x="36.9159%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="36.6659%" y="501" width="0.0607%" height="15" fill="rgb(217,214,36)" fg:x="3022" fg:w="5"/><text x="36.9159%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="36.7265%" y="517" width="0.0121%" height="15" fill="rgb(243,70,3)" fg:x="3027" fg:w="1"/><text x="36.9765%" y="527.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="36.7265%" y="501" width="0.0121%" height="15" fill="rgb(253,158,52)" fg:x="3027" fg:w="1"/><text x="36.9765%" y="511.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="36.7387%" y="453" width="0.0121%" height="15" fill="rgb(234,111,54)" fg:x="3028" fg:w="1"/><text x="36.9887%" y="463.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="36.7387%" y="437" width="0.0121%" height="15" fill="rgb(217,70,32)" fg:x="3028" fg:w="1"/><text x="36.9887%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="36.7387%" y="517" width="0.0364%" height="15" fill="rgb(234,18,33)" fg:x="3028" fg:w="3"/><text x="36.9887%" y="527.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="36.7387%" y="501" width="0.0364%" height="15" fill="rgb(234,12,49)" fg:x="3028" fg:w="3"/><text x="36.9887%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="36.7387%" y="485" width="0.0364%" height="15" fill="rgb(236,10,21)" fg:x="3028" fg:w="3"/><text x="36.9887%" y="495.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="36.7387%" y="469" width="0.0364%" height="15" fill="rgb(248,182,45)" fg:x="3028" fg:w="3"/><text x="36.9887%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.7508%" y="453" width="0.0243%" height="15" fill="rgb(217,95,36)" fg:x="3029" fg:w="2"/><text x="37.0008%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.7508%" y="437" width="0.0243%" height="15" fill="rgb(212,110,31)" fg:x="3029" fg:w="2"/><text x="37.0008%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="36.7265%" y="549" width="0.0728%" height="15" fill="rgb(206,32,53)" fg:x="3027" fg:w="6"/><text x="36.9765%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="36.7265%" y="533" width="0.0728%" height="15" fill="rgb(246,141,37)" fg:x="3027" fg:w="6"/><text x="36.9765%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.7751%" y="517" width="0.0243%" height="15" fill="rgb(219,16,7)" fg:x="3031" fg:w="2"/><text x="37.0251%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.7751%" y="501" width="0.0243%" height="15" fill="rgb(230,205,45)" fg:x="3031" fg:w="2"/><text x="37.0251%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="36.7993%" y="517" width="0.0121%" height="15" fill="rgb(231,43,49)" fg:x="3033" fg:w="1"/><text x="37.0493%" y="527.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="36.7993%" y="501" width="0.0121%" height="15" fill="rgb(212,106,34)" fg:x="3033" fg:w="1"/><text x="37.0493%" y="511.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="36.8115%" y="453" width="0.0121%" height="15" fill="rgb(206,83,17)" fg:x="3034" fg:w="1"/><text x="37.0615%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="36.8115%" y="437" width="0.0121%" height="15" fill="rgb(244,154,49)" fg:x="3034" fg:w="1"/><text x="37.0615%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="36.8115%" y="421" width="0.0121%" height="15" fill="rgb(244,149,49)" fg:x="3034" fg:w="1"/><text x="37.0615%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="36.8236%" y="453" width="0.0121%" height="15" fill="rgb(227,134,18)" fg:x="3035" fg:w="1"/><text x="37.0736%" y="463.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="36.8236%" y="437" width="0.0121%" height="15" fill="rgb(237,116,36)" fg:x="3035" fg:w="1"/><text x="37.0736%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="36.8115%" y="517" width="0.0485%" height="15" fill="rgb(205,129,40)" fg:x="3034" fg:w="4"/><text x="37.0615%" y="527.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="36.8115%" y="501" width="0.0485%" height="15" fill="rgb(236,178,4)" fg:x="3034" fg:w="4"/><text x="37.0615%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="36.8115%" y="485" width="0.0485%" height="15" fill="rgb(251,76,53)" fg:x="3034" fg:w="4"/><text x="37.0615%" y="495.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="36.8115%" y="469" width="0.0485%" height="15" fill="rgb(242,92,40)" fg:x="3034" fg:w="4"/><text x="37.0615%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.8357%" y="453" width="0.0243%" height="15" fill="rgb(209,45,30)" fg:x="3036" fg:w="2"/><text x="37.0857%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.8357%" y="437" width="0.0243%" height="15" fill="rgb(218,157,36)" fg:x="3036" fg:w="2"/><text x="37.0857%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="36.7993%" y="549" width="0.0849%" height="15" fill="rgb(222,186,16)" fg:x="3033" fg:w="7"/><text x="37.0493%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="36.7993%" y="533" width="0.0849%" height="15" fill="rgb(254,72,35)" fg:x="3033" fg:w="7"/><text x="37.0493%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.8600%" y="517" width="0.0243%" height="15" fill="rgb(224,25,35)" fg:x="3038" fg:w="2"/><text x="37.1100%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.8600%" y="501" width="0.0243%" height="15" fill="rgb(206,135,52)" fg:x="3038" fg:w="2"/><text x="37.1100%" y="511.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="36.8843%" y="517" width="0.0364%" height="15" fill="rgb(229,174,47)" fg:x="3040" fg:w="3"/><text x="37.1343%" y="527.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="36.8964%" y="501" width="0.0243%" height="15" fill="rgb(242,184,21)" fg:x="3041" fg:w="2"/><text x="37.1464%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="36.8843%" y="549" width="0.0607%" height="15" fill="rgb(213,22,45)" fg:x="3040" fg:w="5"/><text x="37.1343%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="36.8843%" y="533" width="0.0607%" height="15" fill="rgb(237,81,54)" fg:x="3040" fg:w="5"/><text x="37.1343%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="36.9207%" y="517" width="0.0243%" height="15" fill="rgb(248,177,18)" fg:x="3043" fg:w="2"/><text x="37.1707%" y="527.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="36.9207%" y="501" width="0.0243%" height="15" fill="rgb(254,31,16)" fg:x="3043" fg:w="2"/><text x="37.1707%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="36.9207%" y="485" width="0.0243%" height="15" fill="rgb(235,20,31)" fg:x="3043" fg:w="2"/><text x="37.1707%" y="495.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="36.9207%" y="469" width="0.0243%" height="15" fill="rgb(240,56,43)" fg:x="3043" fg:w="2"/><text x="37.1707%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="36.9207%" y="453" width="0.0243%" height="15" fill="rgb(237,197,51)" fg:x="3043" fg:w="2"/><text x="37.1707%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="36.9207%" y="437" width="0.0243%" height="15" fill="rgb(241,162,44)" fg:x="3043" fg:w="2"/><text x="37.1707%" y="447.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="36.9449%" y="517" width="0.0121%" height="15" fill="rgb(224,23,20)" fg:x="3045" fg:w="1"/><text x="37.1949%" y="527.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="36.9449%" y="501" width="0.0121%" height="15" fill="rgb(250,109,34)" fg:x="3045" fg:w="1"/><text x="37.1949%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.05%)</title><rect x="36.9570%" y="517" width="0.0485%" height="15" fill="rgb(214,175,50)" fg:x="3046" fg:w="4"/><text x="37.2070%" y="527.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="36.9692%" y="501" width="0.0364%" height="15" fill="rgb(213,182,5)" fg:x="3047" fg:w="3"/><text x="37.2192%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="36.9692%" y="485" width="0.0364%" height="15" fill="rgb(209,199,19)" fg:x="3047" fg:w="3"/><text x="37.2192%" y="495.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="36.9692%" y="469" width="0.0364%" height="15" fill="rgb(236,224,42)" fg:x="3047" fg:w="3"/><text x="37.2192%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="36.9692%" y="453" width="0.0364%" height="15" fill="rgb(246,226,29)" fg:x="3047" fg:w="3"/><text x="37.2192%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="36.9692%" y="437" width="0.0364%" height="15" fill="rgb(227,223,11)" fg:x="3047" fg:w="3"/><text x="37.2192%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="36.9449%" y="549" width="0.0849%" height="15" fill="rgb(219,7,51)" fg:x="3045" fg:w="7"/><text x="37.1949%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="36.9449%" y="533" width="0.0849%" height="15" fill="rgb(245,167,10)" fg:x="3045" fg:w="7"/><text x="37.1949%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="37.0056%" y="517" width="0.0243%" height="15" fill="rgb(237,224,16)" fg:x="3050" fg:w="2"/><text x="37.2556%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="37.0056%" y="501" width="0.0243%" height="15" fill="rgb(226,132,13)" fg:x="3050" fg:w="2"/><text x="37.2556%" y="511.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="37.0420%" y="517" width="0.0243%" height="15" fill="rgb(214,140,3)" fg:x="3053" fg:w="2"/><text x="37.2920%" y="527.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="37.0420%" y="501" width="0.0243%" height="15" fill="rgb(221,177,4)" fg:x="3053" fg:w="2"/><text x="37.2920%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="37.0662%" y="517" width="0.0243%" height="15" fill="rgb(238,139,3)" fg:x="3055" fg:w="2"/><text x="37.3162%" y="527.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="37.0662%" y="501" width="0.0243%" height="15" fill="rgb(216,17,39)" fg:x="3055" fg:w="2"/><text x="37.3162%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="37.0662%" y="485" width="0.0243%" height="15" fill="rgb(238,120,9)" fg:x="3055" fg:w="2"/><text x="37.3162%" y="495.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="37.0662%" y="469" width="0.0243%" height="15" fill="rgb(244,92,53)" fg:x="3055" fg:w="2"/><text x="37.3162%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="37.0784%" y="453" width="0.0121%" height="15" fill="rgb(224,148,33)" fg:x="3056" fg:w="1"/><text x="37.3284%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="37.0784%" y="437" width="0.0121%" height="15" fill="rgb(243,6,36)" fg:x="3056" fg:w="1"/><text x="37.3284%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (94 samples, 1.14%)</title><rect x="35.9743%" y="581" width="1.1405%" height="15" fill="rgb(230,102,11)" fg:x="2965" fg:w="94"/><text x="36.2243%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (41 samples, 0.50%)</title><rect x="36.6173%" y="565" width="0.4975%" height="15" fill="rgb(234,148,36)" fg:x="3018" fg:w="41"/><text x="36.8673%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="37.0298%" y="549" width="0.0849%" height="15" fill="rgb(251,153,25)" fg:x="3052" fg:w="7"/><text x="37.2798%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="37.0298%" y="533" width="0.0849%" height="15" fill="rgb(215,129,8)" fg:x="3052" fg:w="7"/><text x="37.2798%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="37.0905%" y="517" width="0.0243%" height="15" fill="rgb(224,128,35)" fg:x="3057" fg:w="2"/><text x="37.3405%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="37.0905%" y="501" width="0.0243%" height="15" fill="rgb(237,56,52)" fg:x="3057" fg:w="2"/><text x="37.3405%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.01%)</title><rect x="37.1148%" y="581" width="0.0121%" height="15" fill="rgb(234,213,19)" fg:x="3059" fg:w="1"/><text x="37.3648%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="37.1148%" y="565" width="0.0121%" height="15" fill="rgb(252,82,23)" fg:x="3059" fg:w="1"/><text x="37.3648%" y="575.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::build (4 samples, 0.05%)</title><rect x="37.1269%" y="581" width="0.0485%" height="15" fill="rgb(254,201,21)" fg:x="3060" fg:w="4"/><text x="37.3769%" y="591.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::with_tx_env (8 samples, 0.10%)</title><rect x="37.1754%" y="581" width="0.0971%" height="15" fill="rgb(250,186,11)" fg:x="3064" fg:w="8"/><text x="37.4254%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.08%)</title><rect x="37.1876%" y="565" width="0.0849%" height="15" fill="rgb(211,174,5)" fg:x="3065" fg:w="7"/><text x="37.4376%" y="575.50"></text></g><g><title>revm_primitives::env::Env::validate_block_env (1 samples, 0.01%)</title><rect x="37.3453%" y="517" width="0.0121%" height="15" fill="rgb(214,121,10)" fg:x="3078" fg:w="1"/><text x="37.5953%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.01%)</title><rect x="37.3453%" y="501" width="0.0121%" height="15" fill="rgb(241,66,2)" fg:x="3078" fg:w="1"/><text x="37.5953%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="37.3453%" y="485" width="0.0121%" height="15" fill="rgb(220,167,19)" fg:x="3078" fg:w="1"/><text x="37.5953%" y="495.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.01%)</title><rect x="37.3574%" y="501" width="0.0121%" height="15" fill="rgb(231,54,50)" fg:x="3079" fg:w="1"/><text x="37.6074%" y="511.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (1 samples, 0.01%)</title><rect x="37.3574%" y="485" width="0.0121%" height="15" fill="rgb(239,217,53)" fg:x="3079" fg:w="1"/><text x="37.6074%" y="495.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (1 samples, 0.01%)</title><rect x="37.3574%" y="469" width="0.0121%" height="15" fill="rgb(248,8,0)" fg:x="3079" fg:w="1"/><text x="37.6074%" y="479.50"></text></g><g><title>ruint::algorithms::cmp (1 samples, 0.01%)</title><rect x="37.3574%" y="453" width="0.0121%" height="15" fill="rgb(229,118,37)" fg:x="3079" fg:w="1"/><text x="37.6074%" y="463.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::env (3 samples, 0.04%)</title><rect x="37.3453%" y="565" width="0.0364%" height="15" fill="rgb(253,223,43)" fg:x="3078" fg:w="3"/><text x="37.5953%" y="575.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.04%)</title><rect x="37.3453%" y="549" width="0.0364%" height="15" fill="rgb(211,77,36)" fg:x="3078" fg:w="3"/><text x="37.5953%" y="559.50"></text></g><g><title>revm::handler::mainnet::validation::validate_env (3 samples, 0.04%)</title><rect x="37.3453%" y="533" width="0.0364%" height="15" fill="rgb(219,3,53)" fg:x="3078" fg:w="3"/><text x="37.5953%" y="543.50"></text></g><g><title>revm_primitives::env::Env::validate_tx (2 samples, 0.02%)</title><rect x="37.3574%" y="517" width="0.0243%" height="15" fill="rgb(244,45,42)" fg:x="3079" fg:w="2"/><text x="37.6074%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::lt (1 samples, 0.01%)</title><rect x="37.3696%" y="501" width="0.0121%" height="15" fill="rgb(225,95,27)" fg:x="3080" fg:w="1"/><text x="37.6196%" y="511.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (1 samples, 0.01%)</title><rect x="37.3696%" y="485" width="0.0121%" height="15" fill="rgb(207,74,8)" fg:x="3080" fg:w="1"/><text x="37.6196%" y="495.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (1 samples, 0.01%)</title><rect x="37.3696%" y="469" width="0.0121%" height="15" fill="rgb(243,63,36)" fg:x="3080" fg:w="1"/><text x="37.6196%" y="479.50"></text></g><g><title>ruint::algorithms::cmp (1 samples, 0.01%)</title><rect x="37.3696%" y="453" width="0.0121%" height="15" fill="rgb(211,180,12)" fg:x="3080" fg:w="1"/><text x="37.6196%" y="463.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::initial_tx_gas (1 samples, 0.01%)</title><rect x="37.3817%" y="565" width="0.0121%" height="15" fill="rgb(254,166,49)" fg:x="3081" fg:w="1"/><text x="37.6317%" y="575.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="37.3817%" y="549" width="0.0121%" height="15" fill="rgb(205,19,0)" fg:x="3081" fg:w="1"/><text x="37.6317%" y="559.50"></text></g><g><title>revm::handler::mainnet::validation::validate_initial_tx_gas (1 samples, 0.01%)</title><rect x="37.3817%" y="533" width="0.0121%" height="15" fill="rgb(224,172,32)" fg:x="3081" fg:w="1"/><text x="37.6317%" y="543.50"></text></g><g><title>revm_interpreter::gas::calc::validate_initial_tx_gas (1 samples, 0.01%)</title><rect x="37.3817%" y="517" width="0.0121%" height="15" fill="rgb(254,136,30)" fg:x="3081" fg:w="1"/><text x="37.6317%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="37.3817%" y="501" width="0.0121%" height="15" fill="rgb(246,19,35)" fg:x="3081" fg:w="1"/><text x="37.6317%" y="511.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="37.3938%" y="549" width="0.0121%" height="15" fill="rgb(219,24,36)" fg:x="3082" fg:w="1"/><text x="37.6438%" y="559.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="37.3938%" y="533" width="0.0121%" height="15" fill="rgb(251,55,1)" fg:x="3082" fg:w="1"/><text x="37.6438%" y="543.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.01%)</title><rect x="37.4302%" y="501" width="0.0121%" height="15" fill="rgb(218,117,39)" fg:x="3085" fg:w="1"/><text x="37.6802%" y="511.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="37.4302%" y="485" width="0.0121%" height="15" fill="rgb(248,169,11)" fg:x="3085" fg:w="1"/><text x="37.6802%" y="495.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.01%)</title><rect x="37.4302%" y="469" width="0.0121%" height="15" fill="rgb(244,40,44)" fg:x="3085" fg:w="1"/><text x="37.6802%" y="479.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.01%)</title><rect x="37.4302%" y="453" width="0.0121%" height="15" fill="rgb(234,62,37)" fg:x="3085" fg:w="1"/><text x="37.6802%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.01%)</title><rect x="37.4424%" y="501" width="0.0121%" height="15" fill="rgb(207,117,42)" fg:x="3086" fg:w="1"/><text x="37.6924%" y="511.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state::_{{closure}} (1 samples, 0.01%)</title><rect x="37.4424%" y="485" width="0.0121%" height="15" fill="rgb(213,43,2)" fg:x="3086" fg:w="1"/><text x="37.6924%" y="495.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_add (1 samples, 0.01%)</title><rect x="37.4424%" y="469" width="0.0121%" height="15" fill="rgb(244,202,51)" fg:x="3086" fg:w="1"/><text x="37.6924%" y="479.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_add (1 samples, 0.01%)</title><rect x="37.4424%" y="453" width="0.0121%" height="15" fill="rgb(253,174,46)" fg:x="3086" fg:w="1"/><text x="37.6924%" y="463.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (129 samples, 1.57%)</title><rect x="35.9015%" y="597" width="1.5652%" height="15" fill="rgb(251,23,1)" fg:x="2959" fg:w="129"/><text x="36.1515%" y="607.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (16 samples, 0.19%)</title><rect x="37.2725%" y="581" width="0.1941%" height="15" fill="rgb(253,26,1)" fg:x="3072" fg:w="16"/><text x="37.5225%" y="591.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (6 samples, 0.07%)</title><rect x="37.3938%" y="565" width="0.0728%" height="15" fill="rgb(216,89,31)" fg:x="3082" fg:w="6"/><text x="37.6438%" y="575.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.06%)</title><rect x="37.4060%" y="549" width="0.0607%" height="15" fill="rgb(209,109,5)" fg:x="3083" fg:w="5"/><text x="37.6560%" y="559.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (5 samples, 0.06%)</title><rect x="37.4060%" y="533" width="0.0607%" height="15" fill="rgb(229,63,13)" fg:x="3083" fg:w="5"/><text x="37.6560%" y="543.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (4 samples, 0.05%)</title><rect x="37.4181%" y="517" width="0.0485%" height="15" fill="rgb(238,137,54)" fg:x="3084" fg:w="4"/><text x="37.6681%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.01%)</title><rect x="37.4545%" y="501" width="0.0121%" height="15" fill="rgb(228,1,9)" fg:x="3087" fg:w="1"/><text x="37.7045%" y="511.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="37.4909%" y="437" width="0.0121%" height="15" fill="rgb(249,120,48)" fg:x="3090" fg:w="1"/><text x="37.7409%" y="447.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="37.5152%" y="421" width="0.0121%" height="15" fill="rgb(209,72,36)" fg:x="3092" fg:w="1"/><text x="37.7652%" y="431.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="37.5152%" y="405" width="0.0121%" height="15" fill="rgb(247,98,49)" fg:x="3092" fg:w="1"/><text x="37.7652%" y="415.50"></text></g><g><title>__mem_cgroup_charge (3 samples, 0.04%)</title><rect x="37.5273%" y="421" width="0.0364%" height="15" fill="rgb(233,75,36)" fg:x="3093" fg:w="3"/><text x="37.7773%" y="431.50"></text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.04%)</title><rect x="37.5273%" y="405" width="0.0364%" height="15" fill="rgb(225,14,24)" fg:x="3093" fg:w="3"/><text x="37.7773%" y="415.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.01%)</title><rect x="37.5637%" y="421" width="0.0121%" height="15" fill="rgb(237,193,20)" fg:x="3096" fg:w="1"/><text x="37.8137%" y="431.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="37.5758%" y="421" width="0.0121%" height="15" fill="rgb(239,122,19)" fg:x="3097" fg:w="1"/><text x="37.8258%" y="431.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="37.5880%" y="421" width="0.0121%" height="15" fill="rgb(231,220,10)" fg:x="3098" fg:w="1"/><text x="37.8380%" y="431.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="37.5880%" y="405" width="0.0121%" height="15" fill="rgb(220,66,15)" fg:x="3098" fg:w="1"/><text x="37.8380%" y="415.50"></text></g><g><title>_raw_spin_trylock (1 samples, 0.01%)</title><rect x="37.6001%" y="357" width="0.0121%" height="15" fill="rgb(215,171,52)" fg:x="3099" fg:w="1"/><text x="37.8501%" y="367.50"></text></g><g><title>clear_page_erms (1 samples, 0.01%)</title><rect x="37.6122%" y="357" width="0.0121%" height="15" fill="rgb(241,169,50)" fg:x="3100" fg:w="1"/><text x="37.8622%" y="367.50"></text></g><g><title>block_stm_revm::execute_sequential (144 samples, 1.75%)</title><rect x="35.8893%" y="773" width="1.7471%" height="15" fill="rgb(236,189,0)" fg:x="2958" fg:w="144"/><text x="36.1393%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (143 samples, 1.74%)</title><rect x="35.9015%" y="757" width="1.7350%" height="15" fill="rgb(217,147,20)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (143 samples, 1.74%)</title><rect x="35.9015%" y="741" width="1.7350%" height="15" fill="rgb(206,188,39)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (143 samples, 1.74%)</title><rect x="35.9015%" y="725" width="1.7350%" height="15" fill="rgb(227,118,25)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (143 samples, 1.74%)</title><rect x="35.9015%" y="709" width="1.7350%" height="15" fill="rgb(248,171,40)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (143 samples, 1.74%)</title><rect x="35.9015%" y="693" width="1.7350%" height="15" fill="rgb(251,90,54)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (143 samples, 1.74%)</title><rect x="35.9015%" y="677" width="1.7350%" height="15" fill="rgb(234,11,46)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (143 samples, 1.74%)</title><rect x="35.9015%" y="661" width="1.7350%" height="15" fill="rgb(229,134,13)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (143 samples, 1.74%)</title><rect x="35.9015%" y="645" width="1.7350%" height="15" fill="rgb(223,129,3)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (143 samples, 1.74%)</title><rect x="35.9015%" y="629" width="1.7350%" height="15" fill="rgb(221,124,13)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (143 samples, 1.74%)</title><rect x="35.9015%" y="613" width="1.7350%" height="15" fill="rgb(234,3,18)" fg:x="2959" fg:w="143"/><text x="36.1515%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (14 samples, 0.17%)</title><rect x="37.4666%" y="597" width="0.1699%" height="15" fill="rgb(249,199,20)" fg:x="3088" fg:w="14"/><text x="37.7166%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (14 samples, 0.17%)</title><rect x="37.4666%" y="581" width="0.1699%" height="15" fill="rgb(224,134,6)" fg:x="3088" fg:w="14"/><text x="37.7166%" y="591.50"></text></g><g><title>core::ptr::write (14 samples, 0.17%)</title><rect x="37.4666%" y="565" width="0.1699%" height="15" fill="rgb(254,83,26)" fg:x="3088" fg:w="14"/><text x="37.7166%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.17%)</title><rect x="37.4666%" y="549" width="0.1699%" height="15" fill="rgb(217,88,9)" fg:x="3088" fg:w="14"/><text x="37.7166%" y="559.50"></text></g><g><title>asm_exc_page_fault (12 samples, 0.15%)</title><rect x="37.4909%" y="533" width="0.1456%" height="15" fill="rgb(225,73,2)" fg:x="3090" fg:w="12"/><text x="37.7409%" y="543.50"></text></g><g><title>exc_page_fault (12 samples, 0.15%)</title><rect x="37.4909%" y="517" width="0.1456%" height="15" fill="rgb(226,44,39)" fg:x="3090" fg:w="12"/><text x="37.7409%" y="527.50"></text></g><g><title>do_user_addr_fault (12 samples, 0.15%)</title><rect x="37.4909%" y="501" width="0.1456%" height="15" fill="rgb(228,53,17)" fg:x="3090" fg:w="12"/><text x="37.7409%" y="511.50"></text></g><g><title>handle_mm_fault (12 samples, 0.15%)</title><rect x="37.4909%" y="485" width="0.1456%" height="15" fill="rgb(212,27,27)" fg:x="3090" fg:w="12"/><text x="37.7409%" y="495.50"></text></g><g><title>__handle_mm_fault (12 samples, 0.15%)</title><rect x="37.4909%" y="469" width="0.1456%" height="15" fill="rgb(241,50,6)" fg:x="3090" fg:w="12"/><text x="37.7409%" y="479.50"></text></g><g><title>handle_pte_fault (12 samples, 0.15%)</title><rect x="37.4909%" y="453" width="0.1456%" height="15" fill="rgb(225,28,51)" fg:x="3090" fg:w="12"/><text x="37.7409%" y="463.50"></text></g><g><title>do_anonymous_page (11 samples, 0.13%)</title><rect x="37.5030%" y="437" width="0.1335%" height="15" fill="rgb(215,33,16)" fg:x="3091" fg:w="11"/><text x="37.7530%" y="447.50"></text></g><g><title>vma_alloc_folio (3 samples, 0.04%)</title><rect x="37.6001%" y="421" width="0.0364%" height="15" fill="rgb(243,40,39)" fg:x="3099" fg:w="3"/><text x="37.8501%" y="431.50"></text></g><g><title>__folio_alloc (3 samples, 0.04%)</title><rect x="37.6001%" y="405" width="0.0364%" height="15" fill="rgb(225,11,42)" fg:x="3099" fg:w="3"/><text x="37.8501%" y="415.50"></text></g><g><title>__alloc_pages (3 samples, 0.04%)</title><rect x="37.6001%" y="389" width="0.0364%" height="15" fill="rgb(241,220,38)" fg:x="3099" fg:w="3"/><text x="37.8501%" y="399.50"></text></g><g><title>get_page_from_freelist (3 samples, 0.04%)</title><rect x="37.6001%" y="373" width="0.0364%" height="15" fill="rgb(244,52,35)" fg:x="3099" fg:w="3"/><text x="37.8501%" y="383.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="37.6244%" y="357" width="0.0121%" height="15" fill="rgb(246,42,46)" fg:x="3101" fg:w="1"/><text x="37.8744%" y="367.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="37.6244%" y="341" width="0.0121%" height="15" fill="rgb(205,184,13)" fg:x="3101" fg:w="1"/><text x="37.8744%" y="351.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="37.6486%" y="469" width="0.0121%" height="15" fill="rgb(209,48,36)" fg:x="3103" fg:w="1"/><text x="37.8986%" y="479.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="37.6608%" y="453" width="0.0121%" height="15" fill="rgb(244,34,51)" fg:x="3104" fg:w="1"/><text x="37.9108%" y="463.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.01%)</title><rect x="37.6729%" y="453" width="0.0121%" height="15" fill="rgb(221,107,33)" fg:x="3105" fg:w="1"/><text x="37.9229%" y="463.50"></text></g><g><title>folio_add_lru (1 samples, 0.01%)</title><rect x="37.6729%" y="437" width="0.0121%" height="15" fill="rgb(224,203,12)" fg:x="3105" fg:w="1"/><text x="37.9229%" y="447.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.01%)</title><rect x="37.6729%" y="421" width="0.0121%" height="15" fill="rgb(230,215,18)" fg:x="3105" fg:w="1"/><text x="37.9229%" y="431.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="37.6729%" y="405" width="0.0121%" height="15" fill="rgb(206,185,35)" fg:x="3105" fg:w="1"/><text x="37.9229%" y="415.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="37.6729%" y="389" width="0.0121%" height="15" fill="rgb(228,140,34)" fg:x="3105" fg:w="1"/><text x="37.9229%" y="399.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="37.6850%" y="421" width="0.0121%" height="15" fill="rgb(208,93,13)" fg:x="3106" fg:w="1"/><text x="37.9350%" y="431.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="37.6850%" y="405" width="0.0121%" height="15" fill="rgb(221,193,39)" fg:x="3106" fg:w="1"/><text x="37.9350%" y="415.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="37.6850%" y="389" width="0.0121%" height="15" fill="rgb(241,132,34)" fg:x="3106" fg:w="1"/><text x="37.9350%" y="399.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.06%)</title><rect x="37.6486%" y="501" width="0.0607%" height="15" fill="rgb(221,141,10)" fg:x="3103" fg:w="5"/><text x="37.8986%" y="511.50"></text></g><g><title>handle_pte_fault (5 samples, 0.06%)</title><rect x="37.6486%" y="485" width="0.0607%" height="15" fill="rgb(226,90,31)" fg:x="3103" fg:w="5"/><text x="37.8986%" y="495.50"></text></g><g><title>do_anonymous_page (4 samples, 0.05%)</title><rect x="37.6608%" y="469" width="0.0485%" height="15" fill="rgb(243,75,5)" fg:x="3104" fg:w="4"/><text x="37.9108%" y="479.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.02%)</title><rect x="37.6850%" y="453" width="0.0243%" height="15" fill="rgb(227,156,21)" fg:x="3106" fg:w="2"/><text x="37.9350%" y="463.50"></text></g><g><title>__folio_alloc (2 samples, 0.02%)</title><rect x="37.6850%" y="437" width="0.0243%" height="15" fill="rgb(250,195,8)" fg:x="3106" fg:w="2"/><text x="37.9350%" y="447.50"></text></g><g><title>__cond_resched (1 samples, 0.01%)</title><rect x="37.6972%" y="421" width="0.0121%" height="15" fill="rgb(220,134,5)" fg:x="3107" fg:w="1"/><text x="37.9472%" y="431.50"></text></g><g><title>handle_mm_fault (6 samples, 0.07%)</title><rect x="37.6486%" y="517" width="0.0728%" height="15" fill="rgb(246,106,34)" fg:x="3103" fg:w="6"/><text x="37.8986%" y="527.50"></text></g><g><title>pmd_val (1 samples, 0.01%)</title><rect x="37.7093%" y="501" width="0.0121%" height="15" fill="rgb(205,1,4)" fg:x="3108" fg:w="1"/><text x="37.9593%" y="511.50"></text></g><g><title>do_user_addr_fault (8 samples, 0.10%)</title><rect x="37.6486%" y="533" width="0.0971%" height="15" fill="rgb(224,151,29)" fg:x="3103" fg:w="8"/><text x="37.8986%" y="543.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="37.7214%" y="517" width="0.0243%" height="15" fill="rgb(251,196,0)" fg:x="3109" fg:w="2"/><text x="37.9714%" y="527.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="37.7214%" y="501" width="0.0243%" height="15" fill="rgb(212,127,0)" fg:x="3109" fg:w="2"/><text x="37.9714%" y="511.50"></text></g><g><title>mtree_range_walk (2 samples, 0.02%)</title><rect x="37.7214%" y="485" width="0.0243%" height="15" fill="rgb(236,71,53)" fg:x="3109" fg:w="2"/><text x="37.9714%" y="495.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="37.7457%" y="469" width="0.0121%" height="15" fill="rgb(227,99,0)" fg:x="3111" fg:w="1"/><text x="37.9957%" y="479.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="37.7457%" y="453" width="0.0121%" height="15" fill="rgb(239,89,21)" fg:x="3111" fg:w="1"/><text x="37.9957%" y="463.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="37.7457%" y="437" width="0.0121%" height="15" fill="rgb(243,122,19)" fg:x="3111" fg:w="1"/><text x="37.9957%" y="447.50"></text></g><g><title>asm_exc_page_fault (13 samples, 0.16%)</title><rect x="37.6486%" y="565" width="0.1577%" height="15" fill="rgb(229,192,45)" fg:x="3103" fg:w="13"/><text x="37.8986%" y="575.50"></text></g><g><title>exc_page_fault (13 samples, 0.16%)</title><rect x="37.6486%" y="549" width="0.1577%" height="15" fill="rgb(235,165,35)" fg:x="3103" fg:w="13"/><text x="37.8986%" y="559.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="37.7457%" y="533" width="0.0607%" height="15" fill="rgb(253,202,0)" fg:x="3111" fg:w="5"/><text x="37.9957%" y="543.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="37.7457%" y="517" width="0.0607%" height="15" fill="rgb(235,51,20)" fg:x="3111" fg:w="5"/><text x="37.9957%" y="527.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="37.7457%" y="501" width="0.0607%" height="15" fill="rgb(218,95,46)" fg:x="3111" fg:w="5"/><text x="37.9957%" y="511.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="37.7457%" y="485" width="0.0607%" height="15" fill="rgb(212,81,10)" fg:x="3111" fg:w="5"/><text x="37.9957%" y="495.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="37.7578%" y="469" width="0.0485%" height="15" fill="rgb(240,59,0)" fg:x="3112" fg:w="4"/><text x="38.0078%" y="479.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="37.7578%" y="453" width="0.0485%" height="15" fill="rgb(212,191,42)" fg:x="3112" fg:w="4"/><text x="38.0078%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="37.7578%" y="437" width="0.0485%" height="15" fill="rgb(233,140,3)" fg:x="3112" fg:w="4"/><text x="38.0078%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="37.7578%" y="421" width="0.0485%" height="15" fill="rgb(215,69,23)" fg:x="3112" fg:w="4"/><text x="38.0078%" y="431.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="37.7578%" y="405" width="0.0485%" height="15" fill="rgb(240,202,20)" fg:x="3112" fg:w="4"/><text x="38.0078%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.18%)</title><rect x="37.6365%" y="773" width="0.1820%" height="15" fill="rgb(209,146,50)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 0.18%)</title><rect x="37.6365%" y="757" width="0.1820%" height="15" fill="rgb(253,102,54)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 0.18%)</title><rect x="37.6365%" y="741" width="0.1820%" height="15" fill="rgb(250,173,47)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15 samples, 0.18%)</title><rect x="37.6365%" y="725" width="0.1820%" height="15" fill="rgb(232,142,7)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.18%)</title><rect x="37.6365%" y="709" width="0.1820%" height="15" fill="rgb(230,157,47)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (15 samples, 0.18%)</title><rect x="37.6365%" y="693" width="0.1820%" height="15" fill="rgb(214,177,35)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.18%)</title><rect x="37.6365%" y="677" width="0.1820%" height="15" fill="rgb(234,119,46)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.18%)</title><rect x="37.6365%" y="661" width="0.1820%" height="15" fill="rgb(241,180,50)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.18%)</title><rect x="37.6365%" y="645" width="0.1820%" height="15" fill="rgb(221,54,25)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (15 samples, 0.18%)</title><rect x="37.6365%" y="629" width="0.1820%" height="15" fill="rgb(209,157,44)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (15 samples, 0.18%)</title><rect x="37.6365%" y="613" width="0.1820%" height="15" fill="rgb(246,115,41)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (15 samples, 0.18%)</title><rect x="37.6365%" y="597" width="0.1820%" height="15" fill="rgb(229,86,1)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="607.50"></text></g><g><title>core::ptr::write (15 samples, 0.18%)</title><rect x="37.6365%" y="581" width="0.1820%" height="15" fill="rgb(240,108,53)" fg:x="3102" fg:w="15"/><text x="37.8865%" y="591.50"></text></g><g><title>sync_regs (1 samples, 0.01%)</title><rect x="37.8064%" y="565" width="0.0121%" height="15" fill="rgb(227,134,2)" fg:x="3116" fg:w="1"/><text x="38.0564%" y="575.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.02%)</title><rect x="37.9034%" y="693" width="0.0243%" height="15" fill="rgb(213,129,25)" fg:x="3124" fg:w="2"/><text x="38.1534%" y="703.50"></text></g><g><title>_int_free_merge_chunk (5 samples, 0.06%)</title><rect x="37.9277%" y="693" width="0.0607%" height="15" fill="rgb(226,35,21)" fg:x="3126" fg:w="5"/><text x="38.1777%" y="703.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.02%)</title><rect x="37.9641%" y="677" width="0.0243%" height="15" fill="rgb(208,129,26)" fg:x="3129" fg:w="2"/><text x="38.2141%" y="687.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.01%)</title><rect x="37.9884%" y="533" width="0.0121%" height="15" fill="rgb(224,83,6)" fg:x="3131" fg:w="1"/><text x="38.2384%" y="543.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="37.9884%" y="517" width="0.0121%" height="15" fill="rgb(227,52,39)" fg:x="3131" fg:w="1"/><text x="38.2384%" y="527.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="37.9884%" y="501" width="0.0121%" height="15" fill="rgb(241,30,17)" fg:x="3131" fg:w="1"/><text x="38.2384%" y="511.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="37.9884%" y="485" width="0.0121%" height="15" fill="rgb(246,186,42)" fg:x="3131" fg:w="1"/><text x="38.2384%" y="495.50"></text></g><g><title>vm_normal_page (1 samples, 0.01%)</title><rect x="38.0005%" y="469" width="0.0121%" height="15" fill="rgb(221,169,15)" fg:x="3132" fg:w="1"/><text x="38.2505%" y="479.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="38.0126%" y="437" width="0.0121%" height="15" fill="rgb(235,108,21)" fg:x="3133" fg:w="1"/><text x="38.2626%" y="447.50"></text></g><g><title>page_remove_rmap (2 samples, 0.02%)</title><rect x="38.0126%" y="453" width="0.0243%" height="15" fill="rgb(219,148,30)" fg:x="3133" fg:w="2"/><text x="38.2626%" y="463.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="38.0248%" y="437" width="0.0121%" height="15" fill="rgb(220,109,5)" fg:x="3134" fg:w="1"/><text x="38.2748%" y="447.50"></text></g><g><title>free_unref_page_list (1 samples, 0.01%)</title><rect x="38.0490%" y="389" width="0.0121%" height="15" fill="rgb(213,203,48)" fg:x="3136" fg:w="1"/><text x="38.2990%" y="399.50"></text></g><g><title>free_unref_page_prepare (1 samples, 0.01%)</title><rect x="38.0490%" y="373" width="0.0121%" height="15" fill="rgb(244,71,33)" fg:x="3136" fg:w="1"/><text x="38.2990%" y="383.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="38.0612%" y="389" width="0.0121%" height="15" fill="rgb(209,23,2)" fg:x="3137" fg:w="1"/><text x="38.3112%" y="399.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="38.0612%" y="373" width="0.0121%" height="15" fill="rgb(219,97,7)" fg:x="3137" fg:w="1"/><text x="38.3112%" y="383.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="38.0612%" y="357" width="0.0121%" height="15" fill="rgb(216,161,23)" fg:x="3137" fg:w="1"/><text x="38.3112%" y="367.50"></text></g><g><title>__GI___libc_free (22 samples, 0.27%)</title><rect x="37.8185%" y="725" width="0.2669%" height="15" fill="rgb(207,45,42)" fg:x="3117" fg:w="22"/><text x="38.0685%" y="735.50"></text></g><g><title>_int_free (22 samples, 0.27%)</title><rect x="37.8185%" y="709" width="0.2669%" height="15" fill="rgb(241,61,4)" fg:x="3117" fg:w="22"/><text x="38.0685%" y="719.50"></text></g><g><title>systrim (8 samples, 0.10%)</title><rect x="37.9884%" y="693" width="0.0971%" height="15" fill="rgb(236,170,1)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="703.50"></text></g><g><title>__glibc_morecore (8 samples, 0.10%)</title><rect x="37.9884%" y="677" width="0.0971%" height="15" fill="rgb(239,72,5)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="687.50"></text></g><g><title>__GI___sbrk (8 samples, 0.10%)</title><rect x="37.9884%" y="661" width="0.0971%" height="15" fill="rgb(214,13,50)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="671.50"></text></g><g><title>__brk (8 samples, 0.10%)</title><rect x="37.9884%" y="645" width="0.0971%" height="15" fill="rgb(224,88,9)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.10%)</title><rect x="37.9884%" y="629" width="0.0971%" height="15" fill="rgb(238,192,34)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="639.50"></text></g><g><title>do_syscall_64 (8 samples, 0.10%)</title><rect x="37.9884%" y="613" width="0.0971%" height="15" fill="rgb(217,203,50)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="623.50"></text></g><g><title>__x64_sys_brk (8 samples, 0.10%)</title><rect x="37.9884%" y="597" width="0.0971%" height="15" fill="rgb(241,123,32)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="607.50"></text></g><g><title>__do_sys_brk (8 samples, 0.10%)</title><rect x="37.9884%" y="581" width="0.0971%" height="15" fill="rgb(248,151,39)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="591.50"></text></g><g><title>do_vmi_align_munmap (8 samples, 0.10%)</title><rect x="37.9884%" y="565" width="0.0971%" height="15" fill="rgb(208,89,6)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="575.50"></text></g><g><title>unmap_region (8 samples, 0.10%)</title><rect x="37.9884%" y="549" width="0.0971%" height="15" fill="rgb(254,43,26)" fg:x="3131" fg:w="8"/><text x="38.2384%" y="559.50"></text></g><g><title>unmap_vmas (7 samples, 0.08%)</title><rect x="38.0005%" y="533" width="0.0849%" height="15" fill="rgb(216,158,13)" fg:x="3132" fg:w="7"/><text x="38.2505%" y="543.50"></text></g><g><title>unmap_single_vma (7 samples, 0.08%)</title><rect x="38.0005%" y="517" width="0.0849%" height="15" fill="rgb(212,47,37)" fg:x="3132" fg:w="7"/><text x="38.2505%" y="527.50"></text></g><g><title>unmap_page_range (7 samples, 0.08%)</title><rect x="38.0005%" y="501" width="0.0849%" height="15" fill="rgb(254,16,10)" fg:x="3132" fg:w="7"/><text x="38.2505%" y="511.50"></text></g><g><title>zap_pmd_range.isra.0 (7 samples, 0.08%)</title><rect x="38.0005%" y="485" width="0.0849%" height="15" fill="rgb(223,228,16)" fg:x="3132" fg:w="7"/><text x="38.2505%" y="495.50"></text></g><g><title>zap_pte_range (6 samples, 0.07%)</title><rect x="38.0126%" y="469" width="0.0728%" height="15" fill="rgb(249,108,50)" fg:x="3133" fg:w="6"/><text x="38.2626%" y="479.50"></text></g><g><title>tlb_flush_mmu (4 samples, 0.05%)</title><rect x="38.0369%" y="453" width="0.0485%" height="15" fill="rgb(208,220,5)" fg:x="3135" fg:w="4"/><text x="38.2869%" y="463.50"></text></g><g><title>tlb_batch_pages_flush (4 samples, 0.05%)</title><rect x="38.0369%" y="437" width="0.0485%" height="15" fill="rgb(217,89,48)" fg:x="3135" fg:w="4"/><text x="38.2869%" y="447.50"></text></g><g><title>free_pages_and_swap_cache (4 samples, 0.05%)</title><rect x="38.0369%" y="421" width="0.0485%" height="15" fill="rgb(212,113,41)" fg:x="3135" fg:w="4"/><text x="38.2869%" y="431.50"></text></g><g><title>release_pages (4 samples, 0.05%)</title><rect x="38.0369%" y="405" width="0.0485%" height="15" fill="rgb(231,127,5)" fg:x="3135" fg:w="4"/><text x="38.2869%" y="415.50"></text></g><g><title>uncharge_folio (1 samples, 0.01%)</title><rect x="38.0733%" y="389" width="0.0121%" height="15" fill="rgb(217,141,17)" fg:x="3138" fg:w="1"/><text x="38.3233%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="38.0975%" y="613" width="0.0121%" height="15" fill="rgb(245,125,54)" fg:x="3140" fg:w="1"/><text x="38.3475%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (3 samples, 0.04%)</title><rect x="38.4251%" y="501" width="0.0364%" height="15" fill="rgb(248,125,3)" fg:x="3167" fg:w="3"/><text x="38.6751%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.04%)</title><rect x="38.4251%" y="485" width="0.0364%" height="15" fill="rgb(236,119,51)" fg:x="3167" fg:w="3"/><text x="38.6751%" y="495.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="38.4251%" y="469" width="0.0364%" height="15" fill="rgb(239,99,8)" fg:x="3167" fg:w="3"/><text x="38.6751%" y="479.50"></text></g><g><title>__GI___libc_free (19 samples, 0.23%)</title><rect x="38.4737%" y="437" width="0.2305%" height="15" fill="rgb(224,228,4)" fg:x="3171" fg:w="19"/><text x="38.7237%" y="447.50"></text></g><g><title>_int_free (18 samples, 0.22%)</title><rect x="38.4858%" y="421" width="0.2184%" height="15" fill="rgb(220,131,45)" fg:x="3172" fg:w="18"/><text x="38.7358%" y="431.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="38.7042%" y="437" width="0.0121%" height="15" fill="rgb(215,62,5)" fg:x="3190" fg:w="1"/><text x="38.9542%" y="447.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="38.7042%" y="421" width="0.0121%" height="15" fill="rgb(253,12,24)" fg:x="3190" fg:w="1"/><text x="38.9542%" y="431.50"></text></g><g><title>core::mem::drop (7 samples, 0.08%)</title><rect x="38.7163%" y="421" width="0.0849%" height="15" fill="rgb(248,120,50)" fg:x="3191" fg:w="7"/><text x="38.9663%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;bitvec::vec::BitVec&lt;u8&gt;,&amp;alloc::alloc::Global&gt;&gt; (7 samples, 0.08%)</title><rect x="38.7163%" y="405" width="0.0849%" height="15" fill="rgb(245,194,10)" fg:x="3191" fg:w="7"/><text x="38.9663%" y="415.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.08%)</title><rect x="38.7163%" y="389" width="0.0849%" height="15" fill="rgb(241,149,38)" fg:x="3191" fg:w="7"/><text x="38.9663%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (7 samples, 0.08%)</title><rect x="38.7163%" y="373" width="0.0849%" height="15" fill="rgb(219,215,7)" fg:x="3191" fg:w="7"/><text x="38.9663%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (7 samples, 0.08%)</title><rect x="38.7163%" y="357" width="0.0849%" height="15" fill="rgb(208,120,31)" fg:x="3191" fg:w="7"/><text x="38.9663%" y="367.50"></text></g><g><title>_int_free (11 samples, 0.13%)</title><rect x="39.0197%" y="245" width="0.1335%" height="15" fill="rgb(244,30,8)" fg:x="3216" fg:w="11"/><text x="39.2697%" y="255.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (30 samples, 0.36%)</title><rect x="38.8013%" y="389" width="0.3640%" height="15" fill="rgb(238,35,44)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="399.50"></text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (30 samples, 0.36%)</title><rect x="38.8013%" y="373" width="0.3640%" height="15" fill="rgb(243,218,37)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="383.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (30 samples, 0.36%)</title><rect x="38.8013%" y="357" width="0.3640%" height="15" fill="rgb(218,169,10)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (30 samples, 0.36%)</title><rect x="38.8013%" y="341" width="0.3640%" height="15" fill="rgb(221,144,10)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (30 samples, 0.36%)</title><rect x="38.8013%" y="325" width="0.3640%" height="15" fill="rgb(226,41,38)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.36%)</title><rect x="38.8013%" y="309" width="0.3640%" height="15" fill="rgb(228,3,1)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.36%)</title><rect x="38.8013%" y="293" width="0.3640%" height="15" fill="rgb(209,129,12)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.36%)</title><rect x="38.8013%" y="277" width="0.3640%" height="15" fill="rgb(213,136,33)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="287.50"></text></g><g><title>__GI___libc_free (30 samples, 0.36%)</title><rect x="38.8013%" y="261" width="0.3640%" height="15" fill="rgb(209,181,29)" fg:x="3198" fg:w="30"/><text x="39.0513%" y="271.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="39.1531%" y="245" width="0.0121%" height="15" fill="rgb(234,173,18)" fg:x="3227" fg:w="1"/><text x="39.4031%" y="255.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="39.1531%" y="229" width="0.0121%" height="15" fill="rgb(227,73,47)" fg:x="3227" fg:w="1"/><text x="39.4031%" y="239.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="39.1531%" y="213" width="0.0121%" height="15" fill="rgb(234,9,34)" fg:x="3227" fg:w="1"/><text x="39.4031%" y="223.50"></text></g><g><title>heap_max_size (1 samples, 0.01%)</title><rect x="39.1531%" y="197" width="0.0121%" height="15" fill="rgb(235,172,15)" fg:x="3227" fg:w="1"/><text x="39.4031%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (39 samples, 0.47%)</title><rect x="38.7163%" y="437" width="0.4732%" height="15" fill="rgb(245,61,2)" fg:x="3191" fg:w="39"/><text x="38.9663%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&lt;u8&gt;&gt; (32 samples, 0.39%)</title><rect x="38.8013%" y="421" width="0.3883%" height="15" fill="rgb(238,39,47)" fg:x="3198" fg:w="32"/><text x="39.0513%" y="431.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (32 samples, 0.39%)</title><rect x="38.8013%" y="405" width="0.3883%" height="15" fill="rgb(234,37,24)" fg:x="3198" fg:w="32"/><text x="39.0513%" y="415.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.02%)</title><rect x="39.1653%" y="389" width="0.0243%" height="15" fill="rgb(248,223,24)" fg:x="3228" fg:w="2"/><text x="39.4153%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="39.1895%" y="437" width="0.0121%" height="15" fill="rgb(223,12,15)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="39.1895%" y="421" width="0.0121%" height="15" fill="rgb(249,6,3)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="431.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="39.1895%" y="405" width="0.0121%" height="15" fill="rgb(237,105,33)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="415.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="39.1895%" y="389" width="0.0121%" height="15" fill="rgb(252,208,35)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="399.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="39.1895%" y="373" width="0.0121%" height="15" fill="rgb(215,181,35)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="383.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="39.1895%" y="357" width="0.0121%" height="15" fill="rgb(246,212,3)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="367.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="39.1895%" y="341" width="0.0121%" height="15" fill="rgb(247,156,24)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="351.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="39.1895%" y="325" width="0.0121%" height="15" fill="rgb(248,9,31)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="335.50"></text></g><g><title>scheduler_tick (1 samples, 0.01%)</title><rect x="39.1895%" y="309" width="0.0121%" height="15" fill="rgb(234,26,45)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="319.50"></text></g><g><title>trigger_load_balance (1 samples, 0.01%)</title><rect x="39.1895%" y="293" width="0.0121%" height="15" fill="rgb(249,11,32)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="303.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.01%)</title><rect x="39.1895%" y="277" width="0.0121%" height="15" fill="rgb(249,162,33)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="287.50"></text></g><g><title>sched_use_asym_prio (1 samples, 0.01%)</title><rect x="39.1895%" y="261" width="0.0121%" height="15" fill="rgb(232,4,32)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="271.50"></text></g><g><title>idle_cpu (1 samples, 0.01%)</title><rect x="39.1895%" y="245" width="0.0121%" height="15" fill="rgb(212,5,45)" fg:x="3230" fg:w="1"/><text x="39.4395%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (124 samples, 1.50%)</title><rect x="38.1097%" y="613" width="1.5045%" height="15" fill="rgb(227,95,13)" fg:x="3141" fg:w="124"/><text x="38.3597%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (124 samples, 1.50%)</title><rect x="38.1097%" y="597" width="1.5045%" height="15" fill="rgb(223,205,10)" fg:x="3141" fg:w="124"/><text x="38.3597%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (124 samples, 1.50%)</title><rect x="38.1097%" y="581" width="1.5045%" height="15" fill="rgb(222,178,8)" fg:x="3141" fg:w="124"/><text x="38.3597%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (124 samples, 1.50%)</title><rect x="38.1097%" y="565" width="1.5045%" height="15" fill="rgb(216,13,22)" fg:x="3141" fg:w="124"/><text x="38.3597%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (122 samples, 1.48%)</title><rect x="38.1339%" y="549" width="1.4802%" height="15" fill="rgb(240,167,12)" fg:x="3143" fg:w="122"/><text x="38.3839%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (122 samples, 1.48%)</title><rect x="38.1339%" y="533" width="1.4802%" height="15" fill="rgb(235,68,35)" fg:x="3143" fg:w="122"/><text x="38.3839%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (98 samples, 1.19%)</title><rect x="38.4251%" y="517" width="1.1890%" height="15" fill="rgb(253,40,27)" fg:x="3167" fg:w="98"/><text x="38.6751%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (95 samples, 1.15%)</title><rect x="38.4615%" y="501" width="1.1526%" height="15" fill="rgb(214,19,28)" fg:x="3170" fg:w="95"/><text x="38.7115%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (95 samples, 1.15%)</title><rect x="38.4615%" y="485" width="1.1526%" height="15" fill="rgb(210,167,45)" fg:x="3170" fg:w="95"/><text x="38.7115%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (95 samples, 1.15%)</title><rect x="38.4615%" y="469" width="1.1526%" height="15" fill="rgb(232,97,40)" fg:x="3170" fg:w="95"/><text x="38.7115%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 1.15%)</title><rect x="38.4615%" y="453" width="1.1526%" height="15" fill="rgb(250,35,23)" fg:x="3170" fg:w="95"/><text x="38.7115%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (34 samples, 0.41%)</title><rect x="39.2017%" y="437" width="0.4125%" height="15" fill="rgb(248,47,53)" fg:x="3231" fg:w="34"/><text x="39.4517%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.41%)</title><rect x="39.2017%" y="421" width="0.4125%" height="15" fill="rgb(226,58,50)" fg:x="3231" fg:w="34"/><text x="39.4517%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (149 samples, 1.81%)</title><rect x="37.8185%" y="757" width="1.8078%" height="15" fill="rgb(217,105,26)" fg:x="3117" fg:w="149"/><text x="38.0685%" y="767.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::result::ResultAndState]&gt; (149 samples, 1.81%)</title><rect x="37.8185%" y="741" width="1.8078%" height="15" fill="rgb(208,64,1)" fg:x="3117" fg:w="149"/><text x="38.0685%" y="751.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (127 samples, 1.54%)</title><rect x="38.0854%" y="725" width="1.5409%" height="15" fill="rgb(214,80,1)" fg:x="3139" fg:w="127"/><text x="38.3354%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (127 samples, 1.54%)</title><rect x="38.0854%" y="709" width="1.5409%" height="15" fill="rgb(206,175,26)" fg:x="3139" fg:w="127"/><text x="38.3354%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (127 samples, 1.54%)</title><rect x="38.0854%" y="693" width="1.5409%" height="15" fill="rgb(235,156,37)" fg:x="3139" fg:w="127"/><text x="38.3354%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (127 samples, 1.54%)</title><rect x="38.0854%" y="677" width="1.5409%" height="15" fill="rgb(213,100,9)" fg:x="3139" fg:w="127"/><text x="38.3354%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 1.54%)</title><rect x="38.0854%" y="661" width="1.5409%" height="15" fill="rgb(241,15,13)" fg:x="3139" fg:w="127"/><text x="38.3354%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (127 samples, 1.54%)</title><rect x="38.0854%" y="645" width="1.5409%" height="15" fill="rgb(205,97,43)" fg:x="3139" fg:w="127"/><text x="38.3354%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (127 samples, 1.54%)</title><rect x="38.0854%" y="629" width="1.5409%" height="15" fill="rgb(216,106,32)" fg:x="3139" fg:w="127"/><text x="38.3354%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.01%)</title><rect x="39.6142%" y="613" width="0.0121%" height="15" fill="rgb(226,200,8)" fg:x="3265" fg:w="1"/><text x="39.8642%" y="623.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="39.6142%" y="597" width="0.0121%" height="15" fill="rgb(244,54,29)" fg:x="3265" fg:w="1"/><text x="39.8642%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (1 samples, 0.01%)</title><rect x="39.6142%" y="581" width="0.0121%" height="15" fill="rgb(252,169,12)" fg:x="3265" fg:w="1"/><text x="39.8642%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.01%)</title><rect x="39.6142%" y="565" width="0.0121%" height="15" fill="rgb(231,199,11)" fg:x="3265" fg:w="1"/><text x="39.8642%" y="575.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.01%)</title><rect x="39.6263%" y="549" width="0.0121%" height="15" fill="rgb(233,191,18)" fg:x="3266" fg:w="1"/><text x="39.8763%" y="559.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="39.6263%" y="533" width="0.0121%" height="15" fill="rgb(215,83,47)" fg:x="3266" fg:w="1"/><text x="39.8763%" y="543.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="39.6263%" y="517" width="0.0121%" height="15" fill="rgb(251,67,19)" fg:x="3266" fg:w="1"/><text x="39.8763%" y="527.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="39.6263%" y="501" width="0.0121%" height="15" fill="rgb(240,7,20)" fg:x="3266" fg:w="1"/><text x="39.8763%" y="511.50"></text></g><g><title>page_remove_rmap (1 samples, 0.01%)</title><rect x="39.6506%" y="469" width="0.0121%" height="15" fill="rgb(210,150,26)" fg:x="3268" fg:w="1"/><text x="39.9006%" y="479.50"></text></g><g><title>_start (1,185 samples, 14.38%)</title><rect x="25.2973%" y="1045" width="14.3776%" height="15" fill="rgb(228,75,42)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="1055.50">_start</text></g><g><title>__libc_start_main_impl (1,185 samples, 14.38%)</title><rect x="25.2973%" y="1029" width="14.3776%" height="15" fill="rgb(237,134,48)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="1039.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,185 samples, 14.38%)</title><rect x="25.2973%" y="1013" width="14.3776%" height="15" fill="rgb(205,80,50)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="1023.50">__libc_start_call_main</text></g><g><title>main (1,185 samples, 14.38%)</title><rect x="25.2973%" y="997" width="14.3776%" height="15" fill="rgb(217,74,48)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,185 samples, 14.38%)</title><rect x="25.2973%" y="981" width="14.3776%" height="15" fill="rgb(205,82,50)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="991.50">std::rt::lang_start_in..</text></g><g><title>std::panic::catch_unwind (1,185 samples, 14.38%)</title><rect x="25.2973%" y="965" width="14.3776%" height="15" fill="rgb(228,1,33)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="975.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (1,185 samples, 14.38%)</title><rect x="25.2973%" y="949" width="14.3776%" height="15" fill="rgb(214,50,23)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,185 samples, 14.38%)</title><rect x="25.2973%" y="933" width="14.3776%" height="15" fill="rgb(210,62,9)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="943.50">std::panicking::try::d..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,185 samples, 14.38%)</title><rect x="25.2973%" y="917" width="14.3776%" height="15" fill="rgb(210,104,37)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="927.50">std::rt::lang_start_in..</text></g><g><title>std::panic::catch_unwind (1,185 samples, 14.38%)</title><rect x="25.2973%" y="901" width="14.3776%" height="15" fill="rgb(232,104,43)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="911.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (1,185 samples, 14.38%)</title><rect x="25.2973%" y="885" width="14.3776%" height="15" fill="rgb(244,52,6)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,185 samples, 14.38%)</title><rect x="25.2973%" y="869" width="14.3776%" height="15" fill="rgb(211,174,52)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="879.50">std::panicking::try::d..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,185 samples, 14.38%)</title><rect x="25.2973%" y="853" width="14.3776%" height="15" fill="rgb(229,48,4)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="863.50">core::ops::function::i..</text></g><g><title>std::rt::lang_start::_{{closure}} (1,185 samples, 14.38%)</title><rect x="25.2973%" y="837" width="14.3776%" height="15" fill="rgb(205,155,16)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="847.50">std::rt::lang_start::_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,185 samples, 14.38%)</title><rect x="25.2973%" y="821" width="14.3776%" height="15" fill="rgb(211,141,53)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="831.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (1,185 samples, 14.38%)</title><rect x="25.2973%" y="805" width="14.3776%" height="15" fill="rgb(240,148,11)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="815.50">core::ops::function::F..</text></g><g><title>block_stm_revm::main (1,185 samples, 14.38%)</title><rect x="25.2973%" y="789" width="14.3776%" height="15" fill="rgb(214,45,23)" fg:x="2085" fg:w="1185"/><text x="25.5473%" y="799.50">block_stm_revm::main</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::result::ResultAndState&gt;&gt; (153 samples, 1.86%)</title><rect x="37.8185%" y="773" width="1.8563%" height="15" fill="rgb(248,74,26)" fg:x="3117" fg:w="153"/><text x="38.0685%" y="783.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::result::ResultAndState&gt;&gt; (4 samples, 0.05%)</title><rect x="39.6263%" y="757" width="0.0485%" height="15" fill="rgb(218,121,16)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="39.6263%" y="741" width="0.0485%" height="15" fill="rgb(218,10,47)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.05%)</title><rect x="39.6263%" y="725" width="0.0485%" height="15" fill="rgb(227,99,14)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.05%)</title><rect x="39.6263%" y="709" width="0.0485%" height="15" fill="rgb(229,83,46)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="719.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="39.6263%" y="693" width="0.0485%" height="15" fill="rgb(228,25,1)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="703.50"></text></g><g><title>__GI_munmap (4 samples, 0.05%)</title><rect x="39.6263%" y="677" width="0.0485%" height="15" fill="rgb(252,190,15)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="39.6263%" y="661" width="0.0485%" height="15" fill="rgb(213,103,51)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="671.50"></text></g><g><title>do_syscall_64 (4 samples, 0.05%)</title><rect x="39.6263%" y="645" width="0.0485%" height="15" fill="rgb(220,38,44)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="655.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.05%)</title><rect x="39.6263%" y="629" width="0.0485%" height="15" fill="rgb(210,45,26)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="639.50"></text></g><g><title>__vm_munmap (4 samples, 0.05%)</title><rect x="39.6263%" y="613" width="0.0485%" height="15" fill="rgb(205,95,48)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="623.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.05%)</title><rect x="39.6263%" y="597" width="0.0485%" height="15" fill="rgb(225,179,37)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="607.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.05%)</title><rect x="39.6263%" y="581" width="0.0485%" height="15" fill="rgb(230,209,3)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="591.50"></text></g><g><title>unmap_region (4 samples, 0.05%)</title><rect x="39.6263%" y="565" width="0.0485%" height="15" fill="rgb(248,12,46)" fg:x="3266" fg:w="4"/><text x="39.8763%" y="575.50"></text></g><g><title>unmap_vmas (3 samples, 0.04%)</title><rect x="39.6384%" y="549" width="0.0364%" height="15" fill="rgb(234,18,0)" fg:x="3267" fg:w="3"/><text x="39.8884%" y="559.50"></text></g><g><title>unmap_single_vma (3 samples, 0.04%)</title><rect x="39.6384%" y="533" width="0.0364%" height="15" fill="rgb(238,197,14)" fg:x="3267" fg:w="3"/><text x="39.8884%" y="543.50"></text></g><g><title>unmap_page_range (3 samples, 0.04%)</title><rect x="39.6384%" y="517" width="0.0364%" height="15" fill="rgb(251,162,48)" fg:x="3267" fg:w="3"/><text x="39.8884%" y="527.50"></text></g><g><title>zap_pmd_range.isra.0 (3 samples, 0.04%)</title><rect x="39.6384%" y="501" width="0.0364%" height="15" fill="rgb(237,73,42)" fg:x="3267" fg:w="3"/><text x="39.8884%" y="511.50"></text></g><g><title>zap_pte_range (3 samples, 0.04%)</title><rect x="39.6384%" y="485" width="0.0364%" height="15" fill="rgb(211,108,8)" fg:x="3267" fg:w="3"/><text x="39.8884%" y="495.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.01%)</title><rect x="39.6627%" y="469" width="0.0121%" height="15" fill="rgb(213,45,22)" fg:x="3269" fg:w="1"/><text x="39.9127%" y="479.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="39.6627%" y="453" width="0.0121%" height="15" fill="rgb(252,154,5)" fg:x="3269" fg:w="1"/><text x="39.9127%" y="463.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="39.6627%" y="437" width="0.0121%" height="15" fill="rgb(221,79,52)" fg:x="3269" fg:w="1"/><text x="39.9127%" y="447.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="39.6627%" y="421" width="0.0121%" height="15" fill="rgb(229,220,36)" fg:x="3269" fg:w="1"/><text x="39.9127%" y="431.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (1 samples, 0.01%)</title><rect x="39.6627%" y="405" width="0.0121%" height="15" fill="rgb(211,17,16)" fg:x="3269" fg:w="1"/><text x="39.9127%" y="415.50"></text></g><g><title>anon.100952876e9f67d855149daa18729317.120.llvm.13661558732031722612 (1 samples, 0.01%)</title><rect x="39.6748%" y="1045" width="0.0121%" height="15" fill="rgb(222,55,31)" fg:x="3270" fg:w="1"/><text x="39.9248%" y="1055.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="39.6748%" y="1029" width="0.0121%" height="15" fill="rgb(221,221,31)" fg:x="3270" fg:w="1"/><text x="39.9248%" y="1039.50"></text></g><g><title>anon.100952876e9f67d855149daa18729317.87.llvm.13661558732031722612 (1 samples, 0.01%)</title><rect x="39.6870%" y="1045" width="0.0121%" height="15" fill="rgb(227,168,26)" fg:x="3271" fg:w="1"/><text x="39.9370%" y="1055.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.01%)</title><rect x="39.6870%" y="1029" width="0.0121%" height="15" fill="rgb(224,139,9)" fg:x="3271" fg:w="1"/><text x="39.9370%" y="1039.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="40.5727%" y="997" width="0.0121%" height="15" fill="rgb(254,172,0)" fg:x="3344" fg:w="1"/><text x="40.8227%" y="1007.50"></text></g><g><title>asm_exc_page_fault (74 samples, 0.90%)</title><rect x="39.6991%" y="1045" width="0.8978%" height="15" fill="rgb(235,203,1)" fg:x="3272" fg:w="74"/><text x="39.9491%" y="1055.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="40.5727%" y="1029" width="0.0243%" height="15" fill="rgb(216,205,24)" fg:x="3344" fg:w="2"/><text x="40.8227%" y="1039.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="40.5727%" y="1013" width="0.0243%" height="15" fill="rgb(233,24,6)" fg:x="3344" fg:w="2"/><text x="40.8227%" y="1023.50"></text></g><g><title>lock_vma_under_rcu (1 samples, 0.01%)</title><rect x="40.5848%" y="997" width="0.0121%" height="15" fill="rgb(244,110,9)" fg:x="3345" fg:w="1"/><text x="40.8348%" y="1007.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="40.5848%" y="981" width="0.0121%" height="15" fill="rgb(239,222,42)" fg:x="3345" fg:w="1"/><text x="40.8348%" y="991.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="40.5969%" y="1045" width="0.0121%" height="15" fill="rgb(218,145,13)" fg:x="3346" fg:w="1"/><text x="40.8469%" y="1055.50"></text></g><g><title>asm_sysvec_reschedule_ipi (1 samples, 0.01%)</title><rect x="40.6091%" y="1045" width="0.0121%" height="15" fill="rgb(207,69,11)" fg:x="3347" fg:w="1"/><text x="40.8591%" y="1055.50"></text></g><g><title>bytes::bytes::static_drop (1 samples, 0.01%)</title><rect x="40.6212%" y="1045" width="0.0121%" height="15" fill="rgb(220,223,22)" fg:x="3348" fg:w="1"/><text x="40.8712%" y="1055.50"></text></g><g><title>find_get_pmu_context (1 samples, 0.01%)</title><rect x="40.6333%" y="869" width="0.0121%" height="15" fill="rgb(245,102,5)" fg:x="3349" fg:w="1"/><text x="40.8833%" y="879.50"></text></g><g><title>kmalloc_trace (1 samples, 0.01%)</title><rect x="40.6333%" y="853" width="0.0121%" height="15" fill="rgb(211,148,2)" fg:x="3349" fg:w="1"/><text x="40.8833%" y="863.50"></text></g><g><title>__kmem_cache_alloc_node (1 samples, 0.01%)</title><rect x="40.6333%" y="837" width="0.0121%" height="15" fill="rgb(241,13,44)" fg:x="3349" fg:w="1"/><text x="40.8833%" y="847.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="40.6333%" y="1029" width="0.0243%" height="15" fill="rgb(219,137,21)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="1039.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="40.6333%" y="1013" width="0.0243%" height="15" fill="rgb(242,206,5)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="1023.50"></text></g><g><title>__x64_sys_clone3 (2 samples, 0.02%)</title><rect x="40.6333%" y="997" width="0.0243%" height="15" fill="rgb(217,114,22)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="1007.50"></text></g><g><title>__do_sys_clone3 (2 samples, 0.02%)</title><rect x="40.6333%" y="981" width="0.0243%" height="15" fill="rgb(253,206,42)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="991.50"></text></g><g><title>kernel_clone (2 samples, 0.02%)</title><rect x="40.6333%" y="965" width="0.0243%" height="15" fill="rgb(236,102,18)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="975.50"></text></g><g><title>copy_process (2 samples, 0.02%)</title><rect x="40.6333%" y="949" width="0.0243%" height="15" fill="rgb(208,59,49)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="959.50"></text></g><g><title>perf_event_init_task (2 samples, 0.02%)</title><rect x="40.6333%" y="933" width="0.0243%" height="15" fill="rgb(215,194,28)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="943.50"></text></g><g><title>perf_event_init_context (2 samples, 0.02%)</title><rect x="40.6333%" y="917" width="0.0243%" height="15" fill="rgb(243,207,11)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="927.50"></text></g><g><title>inherit_task_group.isra.0 (2 samples, 0.02%)</title><rect x="40.6333%" y="901" width="0.0243%" height="15" fill="rgb(254,179,35)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="911.50"></text></g><g><title>inherit_event.isra.0 (2 samples, 0.02%)</title><rect x="40.6333%" y="885" width="0.0243%" height="15" fill="rgb(235,97,3)" fg:x="3349" fg:w="2"/><text x="40.8833%" y="895.50"></text></g><g><title>perf_event_alloc (1 samples, 0.01%)</title><rect x="40.6455%" y="869" width="0.0121%" height="15" fill="rgb(215,155,33)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="879.50"></text></g><g><title>perf_init_event (1 samples, 0.01%)</title><rect x="40.6455%" y="853" width="0.0121%" height="15" fill="rgb(223,128,12)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="863.50"></text></g><g><title>perf_try_init_event (1 samples, 0.01%)</title><rect x="40.6455%" y="837" width="0.0121%" height="15" fill="rgb(208,157,18)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="847.50"></text></g><g><title>x86_pmu_event_init (1 samples, 0.01%)</title><rect x="40.6455%" y="821" width="0.0121%" height="15" fill="rgb(249,70,54)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="831.50"></text></g><g><title>allocate_fake_cpuc (1 samples, 0.01%)</title><rect x="40.6455%" y="805" width="0.0121%" height="15" fill="rgb(244,118,24)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="815.50"></text></g><g><title>intel_cpuc_prepare (1 samples, 0.01%)</title><rect x="40.6455%" y="789" width="0.0121%" height="15" fill="rgb(211,54,0)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="799.50"></text></g><g><title>kmalloc_node_trace (1 samples, 0.01%)</title><rect x="40.6455%" y="773" width="0.0121%" height="15" fill="rgb(245,137,45)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="783.50"></text></g><g><title>__kmem_cache_alloc_node (1 samples, 0.01%)</title><rect x="40.6455%" y="757" width="0.0121%" height="15" fill="rgb(232,154,31)" fg:x="3350" fg:w="1"/><text x="40.8955%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="40.6819%" y="805" width="0.0364%" height="15" fill="rgb(253,6,39)" fg:x="3353" fg:w="3"/><text x="40.9319%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3 samples, 0.04%)</title><rect x="40.6819%" y="789" width="0.0364%" height="15" fill="rgb(234,183,24)" fg:x="3353" fg:w="3"/><text x="40.9319%" y="799.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.04%)</title><rect x="40.6819%" y="773" width="0.0364%" height="15" fill="rgb(252,84,40)" fg:x="3353" fg:w="3"/><text x="40.9319%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="40.7183%" y="805" width="0.0243%" height="15" fill="rgb(224,65,2)" fg:x="3356" fg:w="2"/><text x="40.9683%" y="815.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="40.8032%" y="597" width="0.0121%" height="15" fill="rgb(229,38,24)" fg:x="3363" fg:w="1"/><text x="41.0532%" y="607.50"></text></g><g><title>_int_malloc (7 samples, 0.08%)</title><rect x="40.7911%" y="613" width="0.0849%" height="15" fill="rgb(218,131,50)" fg:x="3362" fg:w="7"/><text x="41.0411%" y="623.50"></text></g><g><title>malloc_consolidate (5 samples, 0.06%)</title><rect x="40.8153%" y="597" width="0.0607%" height="15" fill="rgb(233,106,18)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="607.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="40.8153%" y="581" width="0.0607%" height="15" fill="rgb(220,216,11)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="40.8153%" y="565" width="0.0607%" height="15" fill="rgb(251,100,45)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="575.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="40.8153%" y="549" width="0.0607%" height="15" fill="rgb(235,143,32)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="40.8153%" y="533" width="0.0607%" height="15" fill="rgb(248,124,34)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="40.8153%" y="517" width="0.0607%" height="15" fill="rgb(225,221,4)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="40.8153%" y="501" width="0.0607%" height="15" fill="rgb(242,27,43)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="511.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="40.8153%" y="485" width="0.0607%" height="15" fill="rgb(227,54,8)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="495.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="40.8153%" y="469" width="0.0607%" height="15" fill="rgb(253,139,49)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="40.8153%" y="453" width="0.0607%" height="15" fill="rgb(231,26,43)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="40.8153%" y="437" width="0.0607%" height="15" fill="rgb(207,121,39)" fg:x="3364" fg:w="5"/><text x="41.0653%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.12%)</title><rect x="40.7668%" y="725" width="0.1213%" height="15" fill="rgb(223,101,35)" fg:x="3360" fg:w="10"/><text x="41.0168%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.12%)</title><rect x="40.7668%" y="709" width="0.1213%" height="15" fill="rgb(232,87,23)" fg:x="3360" fg:w="10"/><text x="41.0168%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.12%)</title><rect x="40.7668%" y="693" width="0.1213%" height="15" fill="rgb(225,180,29)" fg:x="3360" fg:w="10"/><text x="41.0168%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.11%)</title><rect x="40.7789%" y="677" width="0.1092%" height="15" fill="rgb(225,25,17)" fg:x="3361" fg:w="9"/><text x="41.0289%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.11%)</title><rect x="40.7789%" y="661" width="0.1092%" height="15" fill="rgb(223,8,52)" fg:x="3361" fg:w="9"/><text x="41.0289%" y="671.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.11%)</title><rect x="40.7789%" y="645" width="0.1092%" height="15" fill="rgb(246,42,21)" fg:x="3361" fg:w="9"/><text x="41.0289%" y="655.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.11%)</title><rect x="40.7789%" y="629" width="0.1092%" height="15" fill="rgb(205,64,43)" fg:x="3361" fg:w="9"/><text x="41.0289%" y="639.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="40.8760%" y="613" width="0.0121%" height="15" fill="rgb(221,160,13)" fg:x="3369" fg:w="1"/><text x="41.1260%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.18%)</title><rect x="40.7668%" y="789" width="0.1820%" height="15" fill="rgb(239,58,35)" fg:x="3360" fg:w="15"/><text x="41.0168%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.18%)</title><rect x="40.7668%" y="773" width="0.1820%" height="15" fill="rgb(251,26,40)" fg:x="3360" fg:w="15"/><text x="41.0168%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.18%)</title><rect x="40.7668%" y="757" width="0.1820%" height="15" fill="rgb(247,0,4)" fg:x="3360" fg:w="15"/><text x="41.0168%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.18%)</title><rect x="40.7668%" y="741" width="0.1820%" height="15" fill="rgb(218,130,10)" fg:x="3360" fg:w="15"/><text x="41.0168%" y="751.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5 samples, 0.06%)</title><rect x="40.8881%" y="725" width="0.0607%" height="15" fill="rgb(239,32,7)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="735.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="40.8881%" y="709" width="0.0607%" height="15" fill="rgb(210,192,24)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="719.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="40.8881%" y="693" width="0.0607%" height="15" fill="rgb(226,212,17)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="703.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="40.8881%" y="677" width="0.0607%" height="15" fill="rgb(219,201,28)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="40.8881%" y="661" width="0.0607%" height="15" fill="rgb(235,207,41)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="40.8881%" y="645" width="0.0607%" height="15" fill="rgb(241,95,54)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="655.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="40.8881%" y="629" width="0.0607%" height="15" fill="rgb(248,12,23)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="639.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="40.8881%" y="613" width="0.0607%" height="15" fill="rgb(228,173,4)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="623.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="40.8881%" y="597" width="0.0607%" height="15" fill="rgb(254,99,5)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="607.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="40.8881%" y="581" width="0.0607%" height="15" fill="rgb(212,184,17)" fg:x="3370" fg:w="5"/><text x="41.1381%" y="591.50"></text></g><g><title>&lt;block_stm_revm::MemoryValue as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="40.9488%" y="789" width="0.0121%" height="15" fill="rgb(252,174,1)" fg:x="3375" fg:w="1"/><text x="41.1988%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="40.9609%" y="789" width="0.0121%" height="15" fill="rgb(241,118,51)" fg:x="3376" fg:w="1"/><text x="41.2109%" y="799.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::record::_{{closure}} (1 samples, 0.01%)</title><rect x="40.9852%" y="629" width="0.0121%" height="15" fill="rgb(227,94,47)" fg:x="3378" fg:w="1"/><text x="41.2352%" y="639.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="40.9852%" y="613" width="0.0121%" height="15" fill="rgb(229,104,2)" fg:x="3378" fg:w="1"/><text x="41.2352%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.04%)</title><rect x="40.9731%" y="789" width="0.0364%" height="15" fill="rgb(219,28,31)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.04%)</title><rect x="40.9731%" y="773" width="0.0364%" height="15" fill="rgb(233,109,36)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.04%)</title><rect x="40.9731%" y="757" width="0.0364%" height="15" fill="rgb(246,88,11)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.04%)</title><rect x="40.9731%" y="741" width="0.0364%" height="15" fill="rgb(209,212,17)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.04%)</title><rect x="40.9731%" y="725" width="0.0364%" height="15" fill="rgb(243,59,29)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.04%)</title><rect x="40.9731%" y="709" width="0.0364%" height="15" fill="rgb(244,205,48)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.04%)</title><rect x="40.9731%" y="693" width="0.0364%" height="15" fill="rgb(227,30,6)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.04%)</title><rect x="40.9731%" y="677" width="0.0364%" height="15" fill="rgb(220,205,48)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.04%)</title><rect x="40.9731%" y="661" width="0.0364%" height="15" fill="rgb(250,94,14)" fg:x="3377" fg:w="3"/><text x="41.2231%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="40.9852%" y="645" width="0.0243%" height="15" fill="rgb(216,119,42)" fg:x="3378" fg:w="2"/><text x="41.2352%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="40.9973%" y="629" width="0.0121%" height="15" fill="rgb(232,155,0)" fg:x="3379" fg:w="1"/><text x="41.2473%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.01%)</title><rect x="40.9973%" y="613" width="0.0121%" height="15" fill="rgb(212,24,32)" fg:x="3379" fg:w="1"/><text x="41.2473%" y="623.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="40.9973%" y="597" width="0.0121%" height="15" fill="rgb(216,69,20)" fg:x="3379" fg:w="1"/><text x="41.2473%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="41.0095%" y="773" width="0.0728%" height="15" fill="rgb(229,73,31)" fg:x="3380" fg:w="6"/><text x="41.2595%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)]&gt; (5 samples, 0.06%)</title><rect x="41.0216%" y="757" width="0.0607%" height="15" fill="rgb(224,219,20)" fg:x="3381" fg:w="5"/><text x="41.2716%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt; (4 samples, 0.05%)</title><rect x="41.0337%" y="741" width="0.0485%" height="15" fill="rgb(215,146,41)" fg:x="3382" fg:w="4"/><text x="41.2837%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::MemoryValue&gt; (4 samples, 0.05%)</title><rect x="41.0337%" y="725" width="0.0485%" height="15" fill="rgb(244,71,31)" fg:x="3382" fg:w="4"/><text x="41.2837%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::state::AccountInfo&gt;&gt; (3 samples, 0.04%)</title><rect x="41.0459%" y="709" width="0.0364%" height="15" fill="rgb(224,24,11)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (3 samples, 0.04%)</title><rect x="41.0459%" y="693" width="0.0364%" height="15" fill="rgb(229,76,15)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (3 samples, 0.04%)</title><rect x="41.0459%" y="677" width="0.0364%" height="15" fill="rgb(209,93,2)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (3 samples, 0.04%)</title><rect x="41.0459%" y="661" width="0.0364%" height="15" fill="rgb(216,200,50)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (3 samples, 0.04%)</title><rect x="41.0459%" y="645" width="0.0364%" height="15" fill="rgb(211,67,34)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (3 samples, 0.04%)</title><rect x="41.0459%" y="629" width="0.0364%" height="15" fill="rgb(225,87,47)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="41.0459%" y="613" width="0.0364%" height="15" fill="rgb(217,185,16)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="41.0459%" y="597" width="0.0364%" height="15" fill="rgb(205,0,0)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="41.0459%" y="581" width="0.0364%" height="15" fill="rgb(207,116,45)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="41.0459%" y="565" width="0.0364%" height="15" fill="rgb(221,156,26)" fg:x="3383" fg:w="3"/><text x="41.2959%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (7 samples, 0.08%)</title><rect x="41.0095%" y="789" width="0.0849%" height="15" fill="rgb(213,140,4)" fg:x="3380" fg:w="7"/><text x="41.2595%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (1 samples, 0.01%)</title><rect x="41.0823%" y="773" width="0.0121%" height="15" fill="rgb(231,224,15)" fg:x="3386" fg:w="1"/><text x="41.3323%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="41.0823%" y="757" width="0.0121%" height="15" fill="rgb(244,76,20)" fg:x="3386" fg:w="1"/><text x="41.3323%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="41.0823%" y="741" width="0.0121%" height="15" fill="rgb(238,117,7)" fg:x="3386" fg:w="1"/><text x="41.3323%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="41.0823%" y="725" width="0.0121%" height="15" fill="rgb(235,1,10)" fg:x="3386" fg:w="1"/><text x="41.3323%" y="735.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="41.0823%" y="709" width="0.0121%" height="15" fill="rgb(216,165,6)" fg:x="3386" fg:w="1"/><text x="41.3323%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="41.0823%" y="693" width="0.0121%" height="15" fill="rgb(246,91,35)" fg:x="3386" fg:w="1"/><text x="41.3323%" y="703.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="41.0823%" y="677" width="0.0121%" height="15" fill="rgb(228,96,24)" fg:x="3386" fg:w="1"/><text x="41.3323%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt; (1 samples, 0.01%)</title><rect x="41.0944%" y="789" width="0.0121%" height="15" fill="rgb(254,217,53)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;block_stm_revm::MemoryLocation&gt;&gt; (1 samples, 0.01%)</title><rect x="41.0944%" y="773" width="0.0121%" height="15" fill="rgb(209,60,0)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="41.0944%" y="757" width="0.0121%" height="15" fill="rgb(250,93,26)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="41.0944%" y="741" width="0.0121%" height="15" fill="rgb(211,9,40)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="41.0944%" y="725" width="0.0121%" height="15" fill="rgb(242,57,20)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="735.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="41.0944%" y="709" width="0.0121%" height="15" fill="rgb(248,85,48)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="41.0944%" y="693" width="0.0121%" height="15" fill="rgb(212,117,2)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="703.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="41.0944%" y="677" width="0.0121%" height="15" fill="rgb(243,19,3)" fg:x="3387" fg:w="1"/><text x="41.3444%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="41.1065%" y="789" width="0.0243%" height="15" fill="rgb(232,217,24)" fg:x="3388" fg:w="2"/><text x="41.3565%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="41.1065%" y="773" width="0.0243%" height="15" fill="rgb(224,175,40)" fg:x="3388" fg:w="2"/><text x="41.3565%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.02%)</title><rect x="41.1065%" y="757" width="0.0243%" height="15" fill="rgb(212,162,32)" fg:x="3388" fg:w="2"/><text x="41.3565%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.02%)</title><rect x="41.1065%" y="741" width="0.0243%" height="15" fill="rgb(215,9,4)" fg:x="3388" fg:w="2"/><text x="41.3565%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="41.1065%" y="725" width="0.0243%" height="15" fill="rgb(242,42,7)" fg:x="3388" fg:w="2"/><text x="41.3565%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="41.1308%" y="789" width="0.0243%" height="15" fill="rgb(242,184,45)" fg:x="3390" fg:w="2"/><text x="41.3808%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="41.1308%" y="773" width="0.0243%" height="15" fill="rgb(228,111,51)" fg:x="3390" fg:w="2"/><text x="41.3808%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.02%)</title><rect x="41.1308%" y="757" width="0.0243%" height="15" fill="rgb(236,147,17)" fg:x="3390" fg:w="2"/><text x="41.3808%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.02%)</title><rect x="41.1308%" y="741" width="0.0243%" height="15" fill="rgb(210,75,22)" fg:x="3390" fg:w="2"/><text x="41.3808%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="41.1308%" y="725" width="0.0243%" height="15" fill="rgb(217,159,45)" fg:x="3390" fg:w="2"/><text x="41.3808%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8 samples, 0.10%)</title><rect x="41.1793%" y="709" width="0.0971%" height="15" fill="rgb(245,165,53)" fg:x="3394" fg:w="8"/><text x="41.4293%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.10%)</title><rect x="41.1793%" y="693" width="0.0971%" height="15" fill="rgb(251,190,50)" fg:x="3394" fg:w="8"/><text x="41.4293%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.02%)</title><rect x="41.2764%" y="693" width="0.0243%" height="15" fill="rgb(208,203,29)" fg:x="3402" fg:w="2"/><text x="41.5264%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="41.2764%" y="677" width="0.0243%" height="15" fill="rgb(207,209,35)" fg:x="3402" fg:w="2"/><text x="41.5264%" y="687.50"></text></g><g><title>perf_ctx_enable (1 samples, 0.01%)</title><rect x="41.3007%" y="437" width="0.0121%" height="15" fill="rgb(230,144,49)" fg:x="3404" fg:w="1"/><text x="41.5507%" y="447.50"></text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 0.06%)</title><rect x="41.3007%" y="693" width="0.0607%" height="15" fill="rgb(229,31,6)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 0.06%)</title><rect x="41.3007%" y="677" width="0.0607%" height="15" fill="rgb(251,129,24)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (5 samples, 0.06%)</title><rect x="41.3007%" y="661" width="0.0607%" height="15" fill="rgb(235,105,15)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="671.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 0.06%)</title><rect x="41.3007%" y="645" width="0.0607%" height="15" fill="rgb(216,52,43)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="655.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (5 samples, 0.06%)</title><rect x="41.3007%" y="629" width="0.0607%" height="15" fill="rgb(238,144,41)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="639.50"></text></g><g><title>syscall (5 samples, 0.06%)</title><rect x="41.3007%" y="613" width="0.0607%" height="15" fill="rgb(243,63,9)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="41.3007%" y="597" width="0.0607%" height="15" fill="rgb(246,208,1)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="607.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="41.3007%" y="581" width="0.0607%" height="15" fill="rgb(233,182,18)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="591.50"></text></g><g><title>__x64_sys_futex (5 samples, 0.06%)</title><rect x="41.3007%" y="565" width="0.0607%" height="15" fill="rgb(242,224,8)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="575.50"></text></g><g><title>do_futex (5 samples, 0.06%)</title><rect x="41.3007%" y="549" width="0.0607%" height="15" fill="rgb(243,54,37)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="559.50"></text></g><g><title>futex_wait (5 samples, 0.06%)</title><rect x="41.3007%" y="533" width="0.0607%" height="15" fill="rgb(233,192,12)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="543.50"></text></g><g><title>futex_wait_queue (5 samples, 0.06%)</title><rect x="41.3007%" y="517" width="0.0607%" height="15" fill="rgb(251,192,53)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="527.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.3007%" y="501" width="0.0607%" height="15" fill="rgb(246,141,26)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="511.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.3007%" y="485" width="0.0607%" height="15" fill="rgb(239,195,19)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="495.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="41.3007%" y="469" width="0.0607%" height="15" fill="rgb(241,16,39)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="41.3007%" y="453" width="0.0607%" height="15" fill="rgb(223,13,53)" fg:x="3404" fg:w="5"/><text x="41.5507%" y="463.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="41.3128%" y="437" width="0.0485%" height="15" fill="rgb(214,227,0)" fg:x="3405" fg:w="4"/><text x="41.5628%" y="447.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="41.3735%" y="549" width="0.0485%" height="15" fill="rgb(228,103,26)" fg:x="3410" fg:w="4"/><text x="41.6235%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="41.3735%" y="533" width="0.0485%" height="15" fill="rgb(254,177,53)" fg:x="3410" fg:w="4"/><text x="41.6235%" y="543.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="41.3735%" y="517" width="0.0485%" height="15" fill="rgb(208,201,34)" fg:x="3410" fg:w="4"/><text x="41.6235%" y="527.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="41.3735%" y="501" width="0.0485%" height="15" fill="rgb(212,39,5)" fg:x="3410" fg:w="4"/><text x="41.6235%" y="511.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (21 samples, 0.25%)</title><rect x="41.1793%" y="757" width="0.2548%" height="15" fill="rgb(246,117,3)" fg:x="3394" fg:w="21"/><text x="41.4293%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (21 samples, 0.25%)</title><rect x="41.1793%" y="741" width="0.2548%" height="15" fill="rgb(244,118,39)" fg:x="3394" fg:w="21"/><text x="41.4293%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (21 samples, 0.25%)</title><rect x="41.1793%" y="725" width="0.2548%" height="15" fill="rgb(241,64,10)" fg:x="3394" fg:w="21"/><text x="41.4293%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (13 samples, 0.16%)</title><rect x="41.2764%" y="709" width="0.1577%" height="15" fill="rgb(229,39,44)" fg:x="3402" fg:w="13"/><text x="41.5264%" y="719.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (6 samples, 0.07%)</title><rect x="41.3613%" y="693" width="0.0728%" height="15" fill="rgb(230,226,3)" fg:x="3409" fg:w="6"/><text x="41.6113%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (6 samples, 0.07%)</title><rect x="41.3613%" y="677" width="0.0728%" height="15" fill="rgb(222,13,42)" fg:x="3409" fg:w="6"/><text x="41.6113%" y="687.50"></text></g><g><title>__GI_sched_yield (6 samples, 0.07%)</title><rect x="41.3613%" y="661" width="0.0728%" height="15" fill="rgb(247,180,54)" fg:x="3409" fg:w="6"/><text x="41.6113%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="41.3613%" y="645" width="0.0728%" height="15" fill="rgb(205,96,16)" fg:x="3409" fg:w="6"/><text x="41.6113%" y="655.50"></text></g><g><title>do_syscall_64 (6 samples, 0.07%)</title><rect x="41.3613%" y="629" width="0.0728%" height="15" fill="rgb(205,100,21)" fg:x="3409" fg:w="6"/><text x="41.6113%" y="639.50"></text></g><g><title>__x64_sys_sched_yield (6 samples, 0.07%)</title><rect x="41.3613%" y="613" width="0.0728%" height="15" fill="rgb(248,51,4)" fg:x="3409" fg:w="6"/><text x="41.6113%" y="623.50"></text></g><g><title>do_sched_yield (6 samples, 0.07%)</title><rect x="41.3613%" y="597" width="0.0728%" height="15" fill="rgb(217,197,30)" fg:x="3409" fg:w="6"/><text x="41.6113%" y="607.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.3735%" y="581" width="0.0607%" height="15" fill="rgb(240,179,40)" fg:x="3410" fg:w="5"/><text x="41.6235%" y="591.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.3735%" y="565" width="0.0607%" height="15" fill="rgb(212,185,35)" fg:x="3410" fg:w="5"/><text x="41.6235%" y="575.50"></text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="41.4220%" y="549" width="0.0121%" height="15" fill="rgb(251,222,31)" fg:x="3414" fg:w="1"/><text x="41.6720%" y="559.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="41.4220%" y="533" width="0.0121%" height="15" fill="rgb(208,140,36)" fg:x="3414" fg:w="1"/><text x="41.6720%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="41.4341%" y="741" width="0.0121%" height="15" fill="rgb(220,148,1)" fg:x="3415" fg:w="1"/><text x="41.6841%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="41.4341%" y="725" width="0.0121%" height="15" fill="rgb(254,4,28)" fg:x="3415" fg:w="1"/><text x="41.6841%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="41.4341%" y="709" width="0.0121%" height="15" fill="rgb(222,185,44)" fg:x="3415" fg:w="1"/><text x="41.6841%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="41.4463%" y="709" width="0.0243%" height="15" fill="rgb(215,74,39)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="41.4463%" y="693" width="0.0243%" height="15" fill="rgb(247,86,4)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="41.4463%" y="677" width="0.0243%" height="15" fill="rgb(231,105,32)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="41.4463%" y="661" width="0.0243%" height="15" fill="rgb(222,65,35)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="41.4463%" y="645" width="0.0243%" height="15" fill="rgb(218,145,35)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="41.4463%" y="629" width="0.0243%" height="15" fill="rgb(208,7,15)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.4463%" y="613" width="0.0243%" height="15" fill="rgb(209,83,13)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.4463%" y="597" width="0.0243%" height="15" fill="rgb(218,3,10)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.4463%" y="581" width="0.0243%" height="15" fill="rgb(211,219,4)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="591.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="41.4463%" y="565" width="0.0243%" height="15" fill="rgb(228,194,12)" fg:x="3416" fg:w="2"/><text x="41.6963%" y="575.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (4 samples, 0.05%)</title><rect x="41.4341%" y="757" width="0.0485%" height="15" fill="rgb(210,175,7)" fg:x="3415" fg:w="4"/><text x="41.6841%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="41.4463%" y="741" width="0.0364%" height="15" fill="rgb(243,132,6)" fg:x="3416" fg:w="3"/><text x="41.6963%" y="751.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="41.4463%" y="725" width="0.0364%" height="15" fill="rgb(207,72,18)" fg:x="3416" fg:w="3"/><text x="41.6963%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="41.4705%" y="709" width="0.0121%" height="15" fill="rgb(236,1,18)" fg:x="3418" fg:w="1"/><text x="41.7205%" y="719.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="41.4705%" y="693" width="0.0121%" height="15" fill="rgb(227,0,18)" fg:x="3418" fg:w="1"/><text x="41.7205%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="41.4705%" y="677" width="0.0121%" height="15" fill="rgb(247,37,5)" fg:x="3418" fg:w="1"/><text x="41.7205%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="41.4705%" y="661" width="0.0121%" height="15" fill="rgb(237,179,24)" fg:x="3418" fg:w="1"/><text x="41.7205%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="41.4705%" y="645" width="0.0121%" height="15" fill="rgb(226,53,20)" fg:x="3418" fg:w="1"/><text x="41.7205%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="41.4705%" y="629" width="0.0121%" height="15" fill="rgb(247,75,7)" fg:x="3418" fg:w="1"/><text x="41.7205%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="41.4705%" y="613" width="0.0121%" height="15" fill="rgb(233,96,12)" fg:x="3418" fg:w="1"/><text x="41.7205%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="41.4826%" y="693" width="0.0243%" height="15" fill="rgb(224,125,0)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="41.4826%" y="677" width="0.0243%" height="15" fill="rgb(224,92,25)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="41.4826%" y="661" width="0.0243%" height="15" fill="rgb(224,42,24)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="41.4826%" y="645" width="0.0243%" height="15" fill="rgb(234,132,49)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="655.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="41.4826%" y="629" width="0.0243%" height="15" fill="rgb(248,100,35)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="41.4826%" y="613" width="0.0243%" height="15" fill="rgb(239,94,40)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.4826%" y="597" width="0.0243%" height="15" fill="rgb(235,139,28)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.4826%" y="581" width="0.0243%" height="15" fill="rgb(217,144,7)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.4826%" y="565" width="0.0243%" height="15" fill="rgb(227,55,4)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="41.4826%" y="549" width="0.0243%" height="15" fill="rgb(252,82,54)" fg:x="3419" fg:w="2"/><text x="41.7326%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.5069%" y="693" width="0.0243%" height="15" fill="rgb(245,172,4)" fg:x="3421" fg:w="2"/><text x="41.7569%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.5069%" y="677" width="0.0243%" height="15" fill="rgb(207,26,27)" fg:x="3421" fg:w="2"/><text x="41.7569%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="41.5069%" y="661" width="0.0243%" height="15" fill="rgb(252,98,18)" fg:x="3421" fg:w="2"/><text x="41.7569%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="41.5190%" y="645" width="0.0121%" height="15" fill="rgb(244,8,26)" fg:x="3422" fg:w="1"/><text x="41.7690%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="41.5190%" y="629" width="0.0121%" height="15" fill="rgb(237,173,45)" fg:x="3422" fg:w="1"/><text x="41.7690%" y="639.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="41.4826%" y="709" width="0.0607%" height="15" fill="rgb(208,213,49)" fg:x="3419" fg:w="5"/><text x="41.7326%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="41.5312%" y="693" width="0.0121%" height="15" fill="rgb(212,122,37)" fg:x="3423" fg:w="1"/><text x="41.7812%" y="703.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="41.5312%" y="677" width="0.0121%" height="15" fill="rgb(213,80,17)" fg:x="3423" fg:w="1"/><text x="41.7812%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="41.5312%" y="661" width="0.0121%" height="15" fill="rgb(206,210,43)" fg:x="3423" fg:w="1"/><text x="41.7812%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="41.5312%" y="645" width="0.0121%" height="15" fill="rgb(229,214,3)" fg:x="3423" fg:w="1"/><text x="41.7812%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="41.5312%" y="629" width="0.0121%" height="15" fill="rgb(235,213,29)" fg:x="3423" fg:w="1"/><text x="41.7812%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="41.5312%" y="613" width="0.0121%" height="15" fill="rgb(248,135,26)" fg:x="3423" fg:w="1"/><text x="41.7812%" y="623.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get_mut (34 samples, 0.41%)</title><rect x="41.1551%" y="789" width="0.4125%" height="15" fill="rgb(242,188,12)" fg:x="3392" fg:w="34"/><text x="41.4051%" y="799.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (34 samples, 0.41%)</title><rect x="41.1551%" y="773" width="0.4125%" height="15" fill="rgb(245,38,12)" fg:x="3392" fg:w="34"/><text x="41.4051%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (7 samples, 0.08%)</title><rect x="41.4826%" y="757" width="0.0849%" height="15" fill="rgb(218,42,13)" fg:x="3419" fg:w="7"/><text x="41.7326%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.08%)</title><rect x="41.4826%" y="741" width="0.0849%" height="15" fill="rgb(238,132,49)" fg:x="3419" fg:w="7"/><text x="41.7326%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.08%)</title><rect x="41.4826%" y="725" width="0.0849%" height="15" fill="rgb(209,196,19)" fg:x="3419" fg:w="7"/><text x="41.7326%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="41.5433%" y="709" width="0.0243%" height="15" fill="rgb(244,131,22)" fg:x="3424" fg:w="2"/><text x="41.7933%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="41.5433%" y="693" width="0.0243%" height="15" fill="rgb(223,18,34)" fg:x="3424" fg:w="2"/><text x="41.7933%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="41.5433%" y="677" width="0.0243%" height="15" fill="rgb(252,124,54)" fg:x="3424" fg:w="2"/><text x="41.7933%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="41.5433%" y="661" width="0.0243%" height="15" fill="rgb(229,106,42)" fg:x="3424" fg:w="2"/><text x="41.7933%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="41.5554%" y="645" width="0.0121%" height="15" fill="rgb(221,129,1)" fg:x="3425" fg:w="1"/><text x="41.8054%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.01%)</title><rect x="41.5797%" y="709" width="0.0121%" height="15" fill="rgb(229,74,15)" fg:x="3427" fg:w="1"/><text x="41.8297%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="41.5797%" y="693" width="0.0121%" height="15" fill="rgb(210,206,50)" fg:x="3427" fg:w="1"/><text x="41.8297%" y="703.50"></text></g><g><title>perf_ctx_enable (1 samples, 0.01%)</title><rect x="41.5918%" y="437" width="0.0121%" height="15" fill="rgb(251,114,31)" fg:x="3428" fg:w="1"/><text x="41.8418%" y="447.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="41.5918%" y="421" width="0.0121%" height="15" fill="rgb(215,225,28)" fg:x="3428" fg:w="1"/><text x="41.8418%" y="431.50"></text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 0.06%)</title><rect x="41.5918%" y="693" width="0.0607%" height="15" fill="rgb(237,109,14)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 0.06%)</title><rect x="41.5918%" y="677" width="0.0607%" height="15" fill="rgb(230,13,37)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (5 samples, 0.06%)</title><rect x="41.5918%" y="661" width="0.0607%" height="15" fill="rgb(231,40,28)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="671.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 0.06%)</title><rect x="41.5918%" y="645" width="0.0607%" height="15" fill="rgb(231,202,18)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="655.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (5 samples, 0.06%)</title><rect x="41.5918%" y="629" width="0.0607%" height="15" fill="rgb(225,33,18)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="639.50"></text></g><g><title>syscall (5 samples, 0.06%)</title><rect x="41.5918%" y="613" width="0.0607%" height="15" fill="rgb(223,64,47)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="41.5918%" y="597" width="0.0607%" height="15" fill="rgb(234,114,13)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="607.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="41.5918%" y="581" width="0.0607%" height="15" fill="rgb(248,56,40)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="591.50"></text></g><g><title>__x64_sys_futex (5 samples, 0.06%)</title><rect x="41.5918%" y="565" width="0.0607%" height="15" fill="rgb(221,194,21)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="575.50"></text></g><g><title>do_futex (5 samples, 0.06%)</title><rect x="41.5918%" y="549" width="0.0607%" height="15" fill="rgb(242,108,46)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="559.50"></text></g><g><title>futex_wait (5 samples, 0.06%)</title><rect x="41.5918%" y="533" width="0.0607%" height="15" fill="rgb(220,106,10)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="543.50"></text></g><g><title>futex_wait_queue (5 samples, 0.06%)</title><rect x="41.5918%" y="517" width="0.0607%" height="15" fill="rgb(211,88,4)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="527.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.5918%" y="501" width="0.0607%" height="15" fill="rgb(214,95,34)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="511.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.5918%" y="485" width="0.0607%" height="15" fill="rgb(250,160,33)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="495.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="41.5918%" y="469" width="0.0607%" height="15" fill="rgb(225,29,10)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="41.5918%" y="453" width="0.0607%" height="15" fill="rgb(224,28,30)" fg:x="3428" fg:w="5"/><text x="41.8418%" y="463.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="41.6040%" y="437" width="0.0485%" height="15" fill="rgb(231,77,4)" fg:x="3429" fg:w="4"/><text x="41.8540%" y="447.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.01%)</title><rect x="41.6525%" y="677" width="0.0121%" height="15" fill="rgb(209,63,21)" fg:x="3433" fg:w="1"/><text x="41.9025%" y="687.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.01%)</title><rect x="41.6525%" y="661" width="0.0121%" height="15" fill="rgb(226,22,11)" fg:x="3433" fg:w="1"/><text x="41.9025%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.01%)</title><rect x="41.6525%" y="645" width="0.0121%" height="15" fill="rgb(216,82,30)" fg:x="3433" fg:w="1"/><text x="41.9025%" y="655.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (12 samples, 0.15%)</title><rect x="41.5797%" y="757" width="0.1456%" height="15" fill="rgb(246,227,38)" fg:x="3427" fg:w="12"/><text x="41.8297%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (12 samples, 0.15%)</title><rect x="41.5797%" y="741" width="0.1456%" height="15" fill="rgb(251,203,53)" fg:x="3427" fg:w="12"/><text x="41.8297%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (12 samples, 0.15%)</title><rect x="41.5797%" y="725" width="0.1456%" height="15" fill="rgb(254,101,1)" fg:x="3427" fg:w="12"/><text x="41.8297%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (11 samples, 0.13%)</title><rect x="41.5918%" y="709" width="0.1335%" height="15" fill="rgb(241,180,5)" fg:x="3428" fg:w="11"/><text x="41.8418%" y="719.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (6 samples, 0.07%)</title><rect x="41.6525%" y="693" width="0.0728%" height="15" fill="rgb(218,168,4)" fg:x="3433" fg:w="6"/><text x="41.9025%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (5 samples, 0.06%)</title><rect x="41.6646%" y="677" width="0.0607%" height="15" fill="rgb(224,223,32)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="687.50"></text></g><g><title>__GI_sched_yield (5 samples, 0.06%)</title><rect x="41.6646%" y="661" width="0.0607%" height="15" fill="rgb(236,106,22)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="41.6646%" y="645" width="0.0607%" height="15" fill="rgb(206,121,5)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="655.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="41.6646%" y="629" width="0.0607%" height="15" fill="rgb(233,87,28)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="639.50"></text></g><g><title>__x64_sys_sched_yield (5 samples, 0.06%)</title><rect x="41.6646%" y="613" width="0.0607%" height="15" fill="rgb(236,137,17)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="623.50"></text></g><g><title>do_sched_yield (5 samples, 0.06%)</title><rect x="41.6646%" y="597" width="0.0607%" height="15" fill="rgb(209,183,38)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="607.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.6646%" y="581" width="0.0607%" height="15" fill="rgb(206,162,44)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="591.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.6646%" y="565" width="0.0607%" height="15" fill="rgb(237,70,39)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="41.6646%" y="549" width="0.0607%" height="15" fill="rgb(212,176,5)" fg:x="3434" fg:w="5"/><text x="41.9146%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="41.6768%" y="533" width="0.0485%" height="15" fill="rgb(232,95,16)" fg:x="3435" fg:w="4"/><text x="41.9268%" y="543.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="41.6768%" y="517" width="0.0485%" height="15" fill="rgb(219,115,35)" fg:x="3435" fg:w="4"/><text x="41.9268%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="41.7253%" y="757" width="0.0121%" height="15" fill="rgb(251,67,27)" fg:x="3439" fg:w="1"/><text x="41.9753%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="41.7374%" y="709" width="0.0607%" height="15" fill="rgb(222,95,40)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="719.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="41.7374%" y="693" width="0.0607%" height="15" fill="rgb(250,35,16)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="703.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="41.7374%" y="677" width="0.0607%" height="15" fill="rgb(224,86,44)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="41.7374%" y="661" width="0.0607%" height="15" fill="rgb(237,53,53)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="41.7374%" y="645" width="0.0607%" height="15" fill="rgb(208,171,33)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="655.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="41.7374%" y="629" width="0.0607%" height="15" fill="rgb(222,64,27)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="639.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.7374%" y="613" width="0.0607%" height="15" fill="rgb(221,121,35)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="623.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.7374%" y="597" width="0.0607%" height="15" fill="rgb(228,137,42)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="41.7374%" y="581" width="0.0607%" height="15" fill="rgb(227,54,21)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="41.7374%" y="565" width="0.0607%" height="15" fill="rgb(240,168,33)" fg:x="3440" fg:w="5"/><text x="41.9874%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (9 samples, 0.11%)</title><rect x="41.7981%" y="709" width="0.1092%" height="15" fill="rgb(243,159,6)" fg:x="3445" fg:w="9"/><text x="42.0481%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.11%)</title><rect x="41.7981%" y="693" width="0.1092%" height="15" fill="rgb(205,211,41)" fg:x="3445" fg:w="9"/><text x="42.0481%" y="703.50"></text></g><g><title>__x64_sys_futex (1 samples, 0.01%)</title><rect x="41.9194%" y="613" width="0.0121%" height="15" fill="rgb(253,30,1)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="623.50"></text></g><g><title>do_futex (1 samples, 0.01%)</title><rect x="41.9194%" y="597" width="0.0121%" height="15" fill="rgb(226,80,18)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="607.50"></text></g><g><title>futex_wake (1 samples, 0.01%)</title><rect x="41.9194%" y="581" width="0.0121%" height="15" fill="rgb(253,156,46)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="591.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="41.9194%" y="565" width="0.0121%" height="15" fill="rgb(248,87,27)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="575.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="41.9194%" y="549" width="0.0121%" height="15" fill="rgb(227,122,2)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="559.50"></text></g><g><title>raw_spin_rq_lock_nested (1 samples, 0.01%)</title><rect x="41.9194%" y="533" width="0.0121%" height="15" fill="rgb(229,94,39)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="543.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="41.9194%" y="517" width="0.0121%" height="15" fill="rgb(225,173,31)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="527.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="41.9194%" y="501" width="0.0121%" height="15" fill="rgb(239,176,30)" fg:x="3455" fg:w="1"/><text x="42.1694%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (21 samples, 0.25%)</title><rect x="41.7374%" y="757" width="0.2548%" height="15" fill="rgb(212,104,21)" fg:x="3440" fg:w="21"/><text x="41.9874%" y="767.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.25%)</title><rect x="41.7374%" y="741" width="0.2548%" height="15" fill="rgb(240,209,40)" fg:x="3440" fg:w="21"/><text x="41.9874%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (21 samples, 0.25%)</title><rect x="41.7374%" y="725" width="0.2548%" height="15" fill="rgb(234,195,5)" fg:x="3440" fg:w="21"/><text x="41.9874%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::unlock_exclusive_slow (7 samples, 0.08%)</title><rect x="41.9073%" y="709" width="0.0849%" height="15" fill="rgb(238,213,1)" fg:x="3454" fg:w="7"/><text x="42.1573%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_all (7 samples, 0.08%)</title><rect x="41.9073%" y="693" width="0.0849%" height="15" fill="rgb(235,182,54)" fg:x="3454" fg:w="7"/><text x="42.1573%" y="703.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (7 samples, 0.08%)</title><rect x="41.9073%" y="677" width="0.0849%" height="15" fill="rgb(229,50,46)" fg:x="3454" fg:w="7"/><text x="42.1573%" y="687.50"></text></g><g><title>syscall (7 samples, 0.08%)</title><rect x="41.9073%" y="661" width="0.0849%" height="15" fill="rgb(219,145,13)" fg:x="3454" fg:w="7"/><text x="42.1573%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="41.9073%" y="645" width="0.0849%" height="15" fill="rgb(220,226,10)" fg:x="3454" fg:w="7"/><text x="42.1573%" y="655.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="41.9073%" y="629" width="0.0849%" height="15" fill="rgb(248,47,30)" fg:x="3454" fg:w="7"/><text x="42.1573%" y="639.50"></text></g><g><title>syscall_exit_to_user_mode (5 samples, 0.06%)</title><rect x="41.9316%" y="613" width="0.0607%" height="15" fill="rgb(231,209,44)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="623.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="41.9316%" y="597" width="0.0607%" height="15" fill="rgb(209,80,30)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="607.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="41.9316%" y="581" width="0.0607%" height="15" fill="rgb(232,9,14)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="591.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="41.9316%" y="565" width="0.0607%" height="15" fill="rgb(243,91,43)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="575.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="41.9316%" y="549" width="0.0607%" height="15" fill="rgb(231,90,52)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="559.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="41.9316%" y="533" width="0.0607%" height="15" fill="rgb(253,192,44)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="41.9316%" y="517" width="0.0607%" height="15" fill="rgb(241,66,31)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="527.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="41.9316%" y="501" width="0.0607%" height="15" fill="rgb(235,81,37)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="511.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="41.9316%" y="485" width="0.0607%" height="15" fill="rgb(223,221,9)" fg:x="3456" fg:w="5"/><text x="42.1816%" y="495.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (1 samples, 0.01%)</title><rect x="41.9922%" y="757" width="0.0121%" height="15" fill="rgb(242,180,7)" fg:x="3461" fg:w="1"/><text x="42.2422%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="42.0044%" y="725" width="0.0243%" height="15" fill="rgb(243,78,19)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="42.0044%" y="709" width="0.0243%" height="15" fill="rgb(233,23,17)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="719.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="42.0044%" y="693" width="0.0243%" height="15" fill="rgb(252,122,45)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="42.0044%" y="677" width="0.0243%" height="15" fill="rgb(247,108,20)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="687.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="42.0044%" y="661" width="0.0243%" height="15" fill="rgb(235,84,21)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="42.0044%" y="645" width="0.0243%" height="15" fill="rgb(247,129,10)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="42.0044%" y="629" width="0.0243%" height="15" fill="rgb(208,173,14)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="42.0044%" y="613" width="0.0243%" height="15" fill="rgb(236,31,38)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="42.0044%" y="597" width="0.0243%" height="15" fill="rgb(232,65,17)" fg:x="3462" fg:w="2"/><text x="42.2544%" y="607.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="42.0165%" y="581" width="0.0121%" height="15" fill="rgb(224,45,49)" fg:x="3463" fg:w="1"/><text x="42.2665%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="42.0286%" y="725" width="0.0728%" height="15" fill="rgb(225,2,53)" fg:x="3464" fg:w="6"/><text x="42.2786%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="42.0286%" y="709" width="0.0728%" height="15" fill="rgb(248,210,53)" fg:x="3464" fg:w="6"/><text x="42.2786%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="42.0286%" y="693" width="0.0728%" height="15" fill="rgb(211,1,30)" fg:x="3464" fg:w="6"/><text x="42.2786%" y="703.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="42.0408%" y="677" width="0.0607%" height="15" fill="rgb(224,96,15)" fg:x="3465" fg:w="5"/><text x="42.2908%" y="687.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="42.0408%" y="661" width="0.0607%" height="15" fill="rgb(252,45,11)" fg:x="3465" fg:w="5"/><text x="42.2908%" y="671.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="42.0408%" y="645" width="0.0607%" height="15" fill="rgb(220,125,38)" fg:x="3465" fg:w="5"/><text x="42.2908%" y="655.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="42.0408%" y="629" width="0.0607%" height="15" fill="rgb(243,161,33)" fg:x="3465" fg:w="5"/><text x="42.2908%" y="639.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="42.0408%" y="613" width="0.0607%" height="15" fill="rgb(248,197,34)" fg:x="3465" fg:w="5"/><text x="42.2908%" y="623.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="42.0408%" y="597" width="0.0607%" height="15" fill="rgb(228,165,23)" fg:x="3465" fg:w="5"/><text x="42.2908%" y="607.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="42.0529%" y="581" width="0.0485%" height="15" fill="rgb(236,94,38)" fg:x="3466" fg:w="4"/><text x="42.3029%" y="591.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="42.0529%" y="565" width="0.0485%" height="15" fill="rgb(220,13,23)" fg:x="3466" fg:w="4"/><text x="42.3029%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="42.0529%" y="549" width="0.0485%" height="15" fill="rgb(234,26,39)" fg:x="3466" fg:w="4"/><text x="42.3029%" y="559.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="42.0529%" y="533" width="0.0485%" height="15" fill="rgb(205,117,44)" fg:x="3466" fg:w="4"/><text x="42.3029%" y="543.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (11 samples, 0.13%)</title><rect x="42.0044%" y="741" width="0.1335%" height="15" fill="rgb(250,42,2)" fg:x="3462" fg:w="11"/><text x="42.2544%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3 samples, 0.04%)</title><rect x="42.1014%" y="725" width="0.0364%" height="15" fill="rgb(223,83,14)" fg:x="3470" fg:w="3"/><text x="42.3514%" y="735.50"></text></g><g><title>core::hash::Hasher::write_isize (3 samples, 0.04%)</title><rect x="42.1014%" y="709" width="0.0364%" height="15" fill="rgb(241,147,50)" fg:x="3470" fg:w="3"/><text x="42.3514%" y="719.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="42.1014%" y="693" width="0.0364%" height="15" fill="rgb(218,90,6)" fg:x="3470" fg:w="3"/><text x="42.3514%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="42.1136%" y="677" width="0.0243%" height="15" fill="rgb(210,191,5)" fg:x="3471" fg:w="2"/><text x="42.3636%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="42.1136%" y="661" width="0.0243%" height="15" fill="rgb(225,139,19)" fg:x="3471" fg:w="2"/><text x="42.3636%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="42.1136%" y="645" width="0.0243%" height="15" fill="rgb(210,1,33)" fg:x="3471" fg:w="2"/><text x="42.3636%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="42.1378%" y="741" width="0.0243%" height="15" fill="rgb(213,50,3)" fg:x="3473" fg:w="2"/><text x="42.3878%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="42.1378%" y="725" width="0.0243%" height="15" fill="rgb(234,227,4)" fg:x="3473" fg:w="2"/><text x="42.3878%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="42.1378%" y="709" width="0.0243%" height="15" fill="rgb(246,63,5)" fg:x="3473" fg:w="2"/><text x="42.3878%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="42.1378%" y="693" width="0.0243%" height="15" fill="rgb(245,136,27)" fg:x="3473" fg:w="2"/><text x="42.3878%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="42.1378%" y="677" width="0.0243%" height="15" fill="rgb(247,199,27)" fg:x="3473" fg:w="2"/><text x="42.3878%" y="687.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (14 samples, 0.17%)</title><rect x="42.0044%" y="757" width="0.1699%" height="15" fill="rgb(252,158,49)" fg:x="3462" fg:w="14"/><text x="42.2544%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.01%)</title><rect x="42.1621%" y="741" width="0.0121%" height="15" fill="rgb(254,73,1)" fg:x="3475" fg:w="1"/><text x="42.4121%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="42.1621%" y="725" width="0.0121%" height="15" fill="rgb(248,93,19)" fg:x="3475" fg:w="1"/><text x="42.4121%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="42.2228%" y="661" width="0.0121%" height="15" fill="rgb(206,67,5)" fg:x="3480" fg:w="1"/><text x="42.4728%" y="671.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="42.1985%" y="725" width="0.0485%" height="15" fill="rgb(209,210,4)" fg:x="3478" fg:w="4"/><text x="42.4485%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="42.1985%" y="709" width="0.0485%" height="15" fill="rgb(214,185,36)" fg:x="3478" fg:w="4"/><text x="42.4485%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="42.1985%" y="693" width="0.0485%" height="15" fill="rgb(233,191,26)" fg:x="3478" fg:w="4"/><text x="42.4485%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="42.1985%" y="677" width="0.0485%" height="15" fill="rgb(248,94,17)" fg:x="3478" fg:w="4"/><text x="42.4485%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="42.2349%" y="661" width="0.0121%" height="15" fill="rgb(250,64,4)" fg:x="3481" fg:w="1"/><text x="42.4849%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="42.2470%" y="661" width="0.0121%" height="15" fill="rgb(218,41,53)" fg:x="3482" fg:w="1"/><text x="42.4970%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="42.2470%" y="725" width="0.0243%" height="15" fill="rgb(251,176,28)" fg:x="3482" fg:w="2"/><text x="42.4970%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="42.2470%" y="709" width="0.0243%" height="15" fill="rgb(247,22,9)" fg:x="3482" fg:w="2"/><text x="42.4970%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="42.2470%" y="693" width="0.0243%" height="15" fill="rgb(218,201,14)" fg:x="3482" fg:w="2"/><text x="42.4970%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="42.2470%" y="677" width="0.0243%" height="15" fill="rgb(218,94,10)" fg:x="3482" fg:w="2"/><text x="42.4970%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="42.2592%" y="661" width="0.0121%" height="15" fill="rgb(222,183,52)" fg:x="3483" fg:w="1"/><text x="42.5092%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.10%)</title><rect x="42.1985%" y="741" width="0.0971%" height="15" fill="rgb(242,140,25)" fg:x="3478" fg:w="8"/><text x="42.4485%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.02%)</title><rect x="42.2713%" y="725" width="0.0243%" height="15" fill="rgb(235,197,38)" fg:x="3484" fg:w="2"/><text x="42.5213%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="42.2713%" y="709" width="0.0243%" height="15" fill="rgb(237,136,15)" fg:x="3484" fg:w="2"/><text x="42.5213%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="42.2834%" y="693" width="0.0121%" height="15" fill="rgb(223,44,49)" fg:x="3485" fg:w="1"/><text x="42.5334%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="42.2834%" y="677" width="0.0121%" height="15" fill="rgb(227,71,15)" fg:x="3485" fg:w="1"/><text x="42.5334%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="42.2834%" y="661" width="0.0121%" height="15" fill="rgb(225,153,20)" fg:x="3485" fg:w="1"/><text x="42.5334%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="42.2834%" y="645" width="0.0121%" height="15" fill="rgb(210,190,26)" fg:x="3485" fg:w="1"/><text x="42.5334%" y="655.50"></text></g><g><title>down_read_trylock (1 samples, 0.01%)</title><rect x="42.3320%" y="597" width="0.0121%" height="15" fill="rgb(223,147,5)" fg:x="3489" fg:w="1"/><text x="42.5820%" y="607.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="42.3684%" y="533" width="0.0121%" height="15" fill="rgb(207,14,23)" fg:x="3492" fg:w="1"/><text x="42.6184%" y="543.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="42.3684%" y="517" width="0.0121%" height="15" fill="rgb(211,195,53)" fg:x="3492" fg:w="1"/><text x="42.6184%" y="527.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="42.3805%" y="517" width="0.0121%" height="15" fill="rgb(237,75,46)" fg:x="3493" fg:w="1"/><text x="42.6305%" y="527.50"></text></g><g><title>consume_stock (1 samples, 0.01%)</title><rect x="42.3926%" y="501" width="0.0121%" height="15" fill="rgb(254,55,14)" fg:x="3494" fg:w="1"/><text x="42.6426%" y="511.50"></text></g><g><title>charge_memcg (2 samples, 0.02%)</title><rect x="42.3926%" y="517" width="0.0243%" height="15" fill="rgb(230,185,30)" fg:x="3494" fg:w="2"/><text x="42.6426%" y="527.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="42.4048%" y="501" width="0.0121%" height="15" fill="rgb(220,14,11)" fg:x="3495" fg:w="1"/><text x="42.6548%" y="511.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.01%)</title><rect x="42.4048%" y="485" width="0.0121%" height="15" fill="rgb(215,169,44)" fg:x="3495" fg:w="1"/><text x="42.6548%" y="495.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="42.4169%" y="517" width="0.0121%" height="15" fill="rgb(253,203,20)" fg:x="3496" fg:w="1"/><text x="42.6669%" y="527.50"></text></g><g><title>memcg_check_events (1 samples, 0.01%)</title><rect x="42.4290%" y="517" width="0.0121%" height="15" fill="rgb(229,225,17)" fg:x="3497" fg:w="1"/><text x="42.6790%" y="527.50"></text></g><g><title>__mem_cgroup_charge (6 samples, 0.07%)</title><rect x="42.3805%" y="533" width="0.0728%" height="15" fill="rgb(236,76,26)" fg:x="3493" fg:w="6"/><text x="42.6305%" y="543.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="42.4412%" y="517" width="0.0121%" height="15" fill="rgb(234,15,30)" fg:x="3498" fg:w="1"/><text x="42.6912%" y="527.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="42.4533%" y="533" width="0.0243%" height="15" fill="rgb(211,113,48)" fg:x="3499" fg:w="2"/><text x="42.7033%" y="543.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="42.4533%" y="517" width="0.0243%" height="15" fill="rgb(221,31,36)" fg:x="3499" fg:w="2"/><text x="42.7033%" y="527.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.01%)</title><rect x="42.4654%" y="501" width="0.0121%" height="15" fill="rgb(215,118,52)" fg:x="3500" fg:w="1"/><text x="42.7154%" y="511.50"></text></g><g><title>lru_add_fn (1 samples, 0.01%)</title><rect x="42.4654%" y="485" width="0.0121%" height="15" fill="rgb(241,151,27)" fg:x="3500" fg:w="1"/><text x="42.7154%" y="495.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.01%)</title><rect x="42.4654%" y="469" width="0.0121%" height="15" fill="rgb(253,51,3)" fg:x="3500" fg:w="1"/><text x="42.7154%" y="479.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="42.4897%" y="485" width="0.0121%" height="15" fill="rgb(216,201,24)" fg:x="3502" fg:w="1"/><text x="42.7397%" y="495.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.01%)</title><rect x="42.4897%" y="469" width="0.0121%" height="15" fill="rgb(231,107,4)" fg:x="3502" fg:w="1"/><text x="42.7397%" y="479.50"></text></g><g><title>folio_add_new_anon_rmap (3 samples, 0.04%)</title><rect x="42.4776%" y="533" width="0.0364%" height="15" fill="rgb(243,97,54)" fg:x="3501" fg:w="3"/><text x="42.7276%" y="543.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.02%)</title><rect x="42.4897%" y="517" width="0.0243%" height="15" fill="rgb(221,32,51)" fg:x="3502" fg:w="2"/><text x="42.7397%" y="527.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.02%)</title><rect x="42.4897%" y="501" width="0.0243%" height="15" fill="rgb(218,171,35)" fg:x="3502" fg:w="2"/><text x="42.7397%" y="511.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="42.5018%" y="485" width="0.0121%" height="15" fill="rgb(214,20,53)" fg:x="3503" fg:w="1"/><text x="42.7518%" y="495.50"></text></g><g><title>inc_mm_counter (1 samples, 0.01%)</title><rect x="42.5140%" y="533" width="0.0121%" height="15" fill="rgb(239,9,52)" fg:x="3504" fg:w="1"/><text x="42.7640%" y="543.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="42.5140%" y="517" width="0.0121%" height="15" fill="rgb(215,114,45)" fg:x="3504" fg:w="1"/><text x="42.7640%" y="527.50"></text></g><g><title>__cond_resched (10 samples, 0.12%)</title><rect x="42.5625%" y="485" width="0.1213%" height="15" fill="rgb(208,118,9)" fg:x="3508" fg:w="10"/><text x="42.8125%" y="495.50"></text></g><g><title>__schedule (10 samples, 0.12%)</title><rect x="42.5625%" y="469" width="0.1213%" height="15" fill="rgb(235,7,39)" fg:x="3508" fg:w="10"/><text x="42.8125%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.12%)</title><rect x="42.5625%" y="453" width="0.1213%" height="15" fill="rgb(243,225,15)" fg:x="3508" fg:w="10"/><text x="42.8125%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 0.12%)</title><rect x="42.5625%" y="437" width="0.1213%" height="15" fill="rgb(225,216,18)" fg:x="3508" fg:w="10"/><text x="42.8125%" y="447.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="42.6231%" y="421" width="0.0607%" height="15" fill="rgb(233,36,38)" fg:x="3513" fg:w="5"/><text x="42.8731%" y="431.50"></text></g><g><title>handle_pte_fault (30 samples, 0.36%)</title><rect x="42.3441%" y="565" width="0.3640%" height="15" fill="rgb(239,88,23)" fg:x="3490" fg:w="30"/><text x="42.5941%" y="575.50"></text></g><g><title>do_anonymous_page (30 samples, 0.36%)</title><rect x="42.3441%" y="549" width="0.3640%" height="15" fill="rgb(219,181,35)" fg:x="3490" fg:w="30"/><text x="42.5941%" y="559.50"></text></g><g><title>vma_alloc_folio (15 samples, 0.18%)</title><rect x="42.5261%" y="533" width="0.1820%" height="15" fill="rgb(215,18,46)" fg:x="3505" fg:w="15"/><text x="42.7761%" y="543.50"></text></g><g><title>__folio_alloc (14 samples, 0.17%)</title><rect x="42.5382%" y="517" width="0.1699%" height="15" fill="rgb(241,38,11)" fg:x="3506" fg:w="14"/><text x="42.7882%" y="527.50"></text></g><g><title>__alloc_pages (14 samples, 0.17%)</title><rect x="42.5382%" y="501" width="0.1699%" height="15" fill="rgb(248,169,45)" fg:x="3506" fg:w="14"/><text x="42.7882%" y="511.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="42.6838%" y="485" width="0.0243%" height="15" fill="rgb(239,50,49)" fg:x="3518" fg:w="2"/><text x="42.9338%" y="495.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="42.6959%" y="469" width="0.0121%" height="15" fill="rgb(231,96,31)" fg:x="3519" fg:w="1"/><text x="42.9459%" y="479.50"></text></g><g><title>__handle_mm_fault (31 samples, 0.38%)</title><rect x="42.3441%" y="581" width="0.3761%" height="15" fill="rgb(224,193,37)" fg:x="3490" fg:w="31"/><text x="42.5941%" y="591.50"></text></g><g><title>pte_offset_map_nolock (1 samples, 0.01%)</title><rect x="42.7081%" y="565" width="0.0121%" height="15" fill="rgb(227,153,50)" fg:x="3520" fg:w="1"/><text x="42.9581%" y="575.50"></text></g><g><title>handle_mm_fault (32 samples, 0.39%)</title><rect x="42.3441%" y="597" width="0.3883%" height="15" fill="rgb(249,228,3)" fg:x="3490" fg:w="32"/><text x="42.5941%" y="607.50"></text></g><g><title>p4d_offset (1 samples, 0.01%)</title><rect x="42.7202%" y="581" width="0.0121%" height="15" fill="rgb(219,164,43)" fg:x="3521" fg:w="1"/><text x="42.9702%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="42.7566%" y="501" width="0.0485%" height="15" fill="rgb(216,45,41)" fg:x="3524" fg:w="4"/><text x="43.0066%" y="511.50"></text></g><g><title>down_read_killable (24 samples, 0.29%)</title><rect x="42.7323%" y="581" width="0.2912%" height="15" fill="rgb(210,226,51)" fg:x="3522" fg:w="24"/><text x="42.9823%" y="591.50"></text></g><g><title>rwsem_down_read_slowpath (24 samples, 0.29%)</title><rect x="42.7323%" y="565" width="0.2912%" height="15" fill="rgb(209,117,49)" fg:x="3522" fg:w="24"/><text x="42.9823%" y="575.50"></text></g><g><title>schedule_preempt_disabled (23 samples, 0.28%)</title><rect x="42.7445%" y="549" width="0.2791%" height="15" fill="rgb(206,196,24)" fg:x="3523" fg:w="23"/><text x="42.9945%" y="559.50"></text></g><g><title>schedule (23 samples, 0.28%)</title><rect x="42.7445%" y="533" width="0.2791%" height="15" fill="rgb(253,218,3)" fg:x="3523" fg:w="23"/><text x="42.9945%" y="543.50"></text></g><g><title>__schedule (23 samples, 0.28%)</title><rect x="42.7445%" y="517" width="0.2791%" height="15" fill="rgb(252,166,2)" fg:x="3523" fg:w="23"/><text x="42.9945%" y="527.50"></text></g><g><title>finish_task_switch.isra.0 (18 samples, 0.22%)</title><rect x="42.8051%" y="501" width="0.2184%" height="15" fill="rgb(236,218,26)" fg:x="3528" fg:w="18"/><text x="43.0551%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (18 samples, 0.22%)</title><rect x="42.8051%" y="485" width="0.2184%" height="15" fill="rgb(254,84,19)" fg:x="3528" fg:w="18"/><text x="43.0551%" y="495.50"></text></g><g><title>perf_ctx_enable (18 samples, 0.22%)</title><rect x="42.8051%" y="469" width="0.2184%" height="15" fill="rgb(219,137,29)" fg:x="3528" fg:w="18"/><text x="43.0551%" y="479.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="42.9750%" y="453" width="0.0485%" height="15" fill="rgb(227,47,52)" fg:x="3542" fg:w="4"/><text x="43.2250%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61 samples, 0.74%)</title><rect x="42.3077%" y="661" width="0.7401%" height="15" fill="rgb(229,167,24)" fg:x="3487" fg:w="61"/><text x="42.5577%" y="671.50"></text></g><g><title>asm_exc_page_fault (60 samples, 0.73%)</title><rect x="42.3198%" y="645" width="0.7280%" height="15" fill="rgb(233,164,1)" fg:x="3488" fg:w="60"/><text x="42.5698%" y="655.50"></text></g><g><title>exc_page_fault (60 samples, 0.73%)</title><rect x="42.3198%" y="629" width="0.7280%" height="15" fill="rgb(218,88,48)" fg:x="3488" fg:w="60"/><text x="42.5698%" y="639.50"></text></g><g><title>do_user_addr_fault (60 samples, 0.73%)</title><rect x="42.3198%" y="613" width="0.7280%" height="15" fill="rgb(226,214,24)" fg:x="3488" fg:w="60"/><text x="42.5698%" y="623.50"></text></g><g><title>lock_mm_and_find_vma (26 samples, 0.32%)</title><rect x="42.7323%" y="597" width="0.3155%" height="15" fill="rgb(233,29,12)" fg:x="3522" fg:w="26"/><text x="42.9823%" y="607.50"></text></g><g><title>find_vma (2 samples, 0.02%)</title><rect x="43.0235%" y="581" width="0.0243%" height="15" fill="rgb(219,120,34)" fg:x="3546" fg:w="2"/><text x="43.2735%" y="591.50"></text></g><g><title>mt_find (2 samples, 0.02%)</title><rect x="43.0235%" y="565" width="0.0243%" height="15" fill="rgb(226,78,44)" fg:x="3546" fg:w="2"/><text x="43.2735%" y="575.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="43.0357%" y="549" width="0.0121%" height="15" fill="rgb(240,15,48)" fg:x="3547" fg:w="1"/><text x="43.2857%" y="559.50"></text></g><g><title>__cond_resched (4 samples, 0.05%)</title><rect x="43.0599%" y="389" width="0.0485%" height="15" fill="rgb(253,176,7)" fg:x="3549" fg:w="4"/><text x="43.3099%" y="399.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="43.0599%" y="373" width="0.0485%" height="15" fill="rgb(206,166,28)" fg:x="3549" fg:w="4"/><text x="43.3099%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="43.0599%" y="357" width="0.0485%" height="15" fill="rgb(241,53,51)" fg:x="3549" fg:w="4"/><text x="43.3099%" y="367.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="43.0599%" y="341" width="0.0485%" height="15" fill="rgb(249,112,30)" fg:x="3549" fg:w="4"/><text x="43.3099%" y="351.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="43.0599%" y="325" width="0.0485%" height="15" fill="rgb(217,85,30)" fg:x="3549" fg:w="4"/><text x="43.3099%" y="335.50"></text></g><g><title>do_vmi_munmap (6 samples, 0.07%)</title><rect x="43.0478%" y="469" width="0.0728%" height="15" fill="rgb(233,49,7)" fg:x="3548" fg:w="6"/><text x="43.2978%" y="479.50"></text></g><g><title>do_vmi_align_munmap (6 samples, 0.07%)</title><rect x="43.0478%" y="453" width="0.0728%" height="15" fill="rgb(234,109,9)" fg:x="3548" fg:w="6"/><text x="43.2978%" y="463.50"></text></g><g><title>unmap_region (6 samples, 0.07%)</title><rect x="43.0478%" y="437" width="0.0728%" height="15" fill="rgb(253,95,22)" fg:x="3548" fg:w="6"/><text x="43.2978%" y="447.50"></text></g><g><title>tlb_finish_mmu (6 samples, 0.07%)</title><rect x="43.0478%" y="421" width="0.0728%" height="15" fill="rgb(233,176,25)" fg:x="3548" fg:w="6"/><text x="43.2978%" y="431.50"></text></g><g><title>tlb_batch_pages_flush (6 samples, 0.07%)</title><rect x="43.0478%" y="405" width="0.0728%" height="15" fill="rgb(236,33,39)" fg:x="3548" fg:w="6"/><text x="43.2978%" y="415.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="43.1085%" y="389" width="0.0121%" height="15" fill="rgb(223,226,42)" fg:x="3553" fg:w="1"/><text x="43.3585%" y="399.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="43.1085%" y="373" width="0.0121%" height="15" fill="rgb(216,99,33)" fg:x="3553" fg:w="1"/><text x="43.3585%" y="383.50"></text></g><g><title>free_unref_page_list (1 samples, 0.01%)</title><rect x="43.1085%" y="357" width="0.0121%" height="15" fill="rgb(235,84,23)" fg:x="3553" fg:w="1"/><text x="43.3585%" y="367.50"></text></g><g><title>osq_lock (1 samples, 0.01%)</title><rect x="43.1206%" y="421" width="0.0121%" height="15" fill="rgb(232,2,27)" fg:x="3554" fg:w="1"/><text x="43.3706%" y="431.50"></text></g><g><title>__GI_munmap (8 samples, 0.10%)</title><rect x="43.0478%" y="549" width="0.0971%" height="15" fill="rgb(241,23,22)" fg:x="3548" fg:w="8"/><text x="43.2978%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.10%)</title><rect x="43.0478%" y="533" width="0.0971%" height="15" fill="rgb(211,73,27)" fg:x="3548" fg:w="8"/><text x="43.2978%" y="543.50"></text></g><g><title>do_syscall_64 (8 samples, 0.10%)</title><rect x="43.0478%" y="517" width="0.0971%" height="15" fill="rgb(235,109,49)" fg:x="3548" fg:w="8"/><text x="43.2978%" y="527.50"></text></g><g><title>__x64_sys_munmap (8 samples, 0.10%)</title><rect x="43.0478%" y="501" width="0.0971%" height="15" fill="rgb(230,99,29)" fg:x="3548" fg:w="8"/><text x="43.2978%" y="511.50"></text></g><g><title>__vm_munmap (8 samples, 0.10%)</title><rect x="43.0478%" y="485" width="0.0971%" height="15" fill="rgb(245,199,7)" fg:x="3548" fg:w="8"/><text x="43.2978%" y="495.50"></text></g><g><title>down_write_killable (2 samples, 0.02%)</title><rect x="43.1206%" y="469" width="0.0243%" height="15" fill="rgb(217,179,10)" fg:x="3554" fg:w="2"/><text x="43.3706%" y="479.50"></text></g><g><title>rwsem_down_write_slowpath (2 samples, 0.02%)</title><rect x="43.1206%" y="453" width="0.0243%" height="15" fill="rgb(254,99,47)" fg:x="3554" fg:w="2"/><text x="43.3706%" y="463.50"></text></g><g><title>rwsem_optimistic_spin (2 samples, 0.02%)</title><rect x="43.1206%" y="437" width="0.0243%" height="15" fill="rgb(251,121,7)" fg:x="3554" fg:w="2"/><text x="43.3706%" y="447.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="43.1327%" y="421" width="0.0121%" height="15" fill="rgb(250,177,26)" fg:x="3555" fg:w="1"/><text x="43.3827%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="43.1449%" y="373" width="0.0121%" height="15" fill="rgb(232,88,15)" fg:x="3556" fg:w="1"/><text x="43.3949%" y="383.50"></text></g><g><title>asm_sysvec_irq_work (3 samples, 0.04%)</title><rect x="43.1570%" y="373" width="0.0364%" height="15" fill="rgb(251,54,54)" fg:x="3557" fg:w="3"/><text x="43.4070%" y="383.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="43.1934%" y="373" width="0.0121%" height="15" fill="rgb(208,177,15)" fg:x="3560" fg:w="1"/><text x="43.4434%" y="383.50"></text></g><g><title>_raw_spin_unlock (8 samples, 0.10%)</title><rect x="43.2298%" y="341" width="0.0971%" height="15" fill="rgb(205,97,32)" fg:x="3563" fg:w="8"/><text x="43.4798%" y="351.50"></text></g><g><title>perf_ctx_enable (17 samples, 0.21%)</title><rect x="43.3269%" y="341" width="0.2063%" height="15" fill="rgb(217,192,13)" fg:x="3571" fg:w="17"/><text x="43.5769%" y="351.50"></text></g><g><title>x86_pmu_enable (12 samples, 0.15%)</title><rect x="43.3875%" y="325" width="0.1456%" height="15" fill="rgb(215,163,41)" fg:x="3576" fg:w="12"/><text x="43.6375%" y="335.50"></text></g><g><title>perf_pmu_nop_void (13 samples, 0.16%)</title><rect x="43.5331%" y="341" width="0.1577%" height="15" fill="rgb(246,83,29)" fg:x="3588" fg:w="13"/><text x="43.7831%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (42 samples, 0.51%)</title><rect x="43.2298%" y="357" width="0.5096%" height="15" fill="rgb(219,2,45)" fg:x="3563" fg:w="42"/><text x="43.4798%" y="367.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="43.6909%" y="341" width="0.0485%" height="15" fill="rgb(242,215,33)" fg:x="3601" fg:w="4"/><text x="43.9409%" y="351.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.01%)</title><rect x="43.7394%" y="357" width="0.0121%" height="15" fill="rgb(217,1,6)" fg:x="3605" fg:w="1"/><text x="43.9894%" y="367.50"></text></g><g><title>__x64_sys_futex (58 samples, 0.70%)</title><rect x="43.1449%" y="469" width="0.7037%" height="15" fill="rgb(207,85,52)" fg:x="3556" fg:w="58"/><text x="43.3949%" y="479.50"></text></g><g><title>do_futex (58 samples, 0.70%)</title><rect x="43.1449%" y="453" width="0.7037%" height="15" fill="rgb(231,171,19)" fg:x="3556" fg:w="58"/><text x="43.3949%" y="463.50"></text></g><g><title>futex_wait (58 samples, 0.70%)</title><rect x="43.1449%" y="437" width="0.7037%" height="15" fill="rgb(207,128,4)" fg:x="3556" fg:w="58"/><text x="43.3949%" y="447.50"></text></g><g><title>futex_wait_queue (58 samples, 0.70%)</title><rect x="43.1449%" y="421" width="0.7037%" height="15" fill="rgb(219,208,4)" fg:x="3556" fg:w="58"/><text x="43.3949%" y="431.50"></text></g><g><title>schedule (58 samples, 0.70%)</title><rect x="43.1449%" y="405" width="0.7037%" height="15" fill="rgb(235,161,42)" fg:x="3556" fg:w="58"/><text x="43.3949%" y="415.50"></text></g><g><title>__schedule (58 samples, 0.70%)</title><rect x="43.1449%" y="389" width="0.7037%" height="15" fill="rgb(247,218,18)" fg:x="3556" fg:w="58"/><text x="43.3949%" y="399.50"></text></g><g><title>finish_task_switch.isra.0 (53 samples, 0.64%)</title><rect x="43.2055%" y="373" width="0.6430%" height="15" fill="rgb(232,114,51)" fg:x="3561" fg:w="53"/><text x="43.4555%" y="383.50"></text></g><g><title>perf_ctx_enable (8 samples, 0.10%)</title><rect x="43.7515%" y="357" width="0.0971%" height="15" fill="rgb(222,95,3)" fg:x="3606" fg:w="8"/><text x="44.0015%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;allocator_api2::stable::alloc::global::Global&gt;::{{closure}}&gt;&gt; (68 samples, 0.83%)</title><rect x="43.0478%" y="661" width="0.8250%" height="15" fill="rgb(240,65,29)" fg:x="3548" fg:w="68"/><text x="43.2978%" y="671.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.83%)</title><rect x="43.0478%" y="645" width="0.8250%" height="15" fill="rgb(249,209,20)" fg:x="3548" fg:w="68"/><text x="43.2978%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (68 samples, 0.83%)</title><rect x="43.0478%" y="629" width="0.8250%" height="15" fill="rgb(241,48,37)" fg:x="3548" fg:w="68"/><text x="43.2978%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (68 samples, 0.83%)</title><rect x="43.0478%" y="613" width="0.8250%" height="15" fill="rgb(230,140,42)" fg:x="3548" fg:w="68"/><text x="43.2978%" y="623.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::deallocate (68 samples, 0.83%)</title><rect x="43.0478%" y="597" width="0.8250%" height="15" fill="rgb(230,176,45)" fg:x="3548" fg:w="68"/><text x="43.2978%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (68 samples, 0.83%)</title><rect x="43.0478%" y="581" width="0.8250%" height="15" fill="rgb(245,112,21)" fg:x="3548" fg:w="68"/><text x="43.2978%" y="591.50"></text></g><g><title>__GI___libc_free (68 samples, 0.83%)</title><rect x="43.0478%" y="565" width="0.8250%" height="15" fill="rgb(207,183,35)" fg:x="3548" fg:w="68"/><text x="43.2978%" y="575.50"></text></g><g><title>_int_free (60 samples, 0.73%)</title><rect x="43.1449%" y="549" width="0.7280%" height="15" fill="rgb(227,44,33)" fg:x="3556" fg:w="60"/><text x="43.3949%" y="559.50"></text></g><g><title>__GI___lll_lock_wait_private (60 samples, 0.73%)</title><rect x="43.1449%" y="533" width="0.7280%" height="15" fill="rgb(246,120,21)" fg:x="3556" fg:w="60"/><text x="43.3949%" y="543.50"></text></g><g><title>futex_wait (60 samples, 0.73%)</title><rect x="43.1449%" y="517" width="0.7280%" height="15" fill="rgb(235,57,52)" fg:x="3556" fg:w="60"/><text x="43.3949%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (60 samples, 0.73%)</title><rect x="43.1449%" y="501" width="0.7280%" height="15" fill="rgb(238,84,10)" fg:x="3556" fg:w="60"/><text x="43.3949%" y="511.50"></text></g><g><title>do_syscall_64 (60 samples, 0.73%)</title><rect x="43.1449%" y="485" width="0.7280%" height="15" fill="rgb(251,200,32)" fg:x="3556" fg:w="60"/><text x="43.3949%" y="495.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.02%)</title><rect x="43.8486%" y="469" width="0.0243%" height="15" fill="rgb(247,159,13)" fg:x="3614" fg:w="2"/><text x="44.0986%" y="479.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.02%)</title><rect x="43.8486%" y="453" width="0.0243%" height="15" fill="rgb(238,64,4)" fg:x="3614" fg:w="2"/><text x="44.0986%" y="463.50"></text></g><g><title>exit_to_user_mode_loop (2 samples, 0.02%)</title><rect x="43.8486%" y="437" width="0.0243%" height="15" fill="rgb(221,131,51)" fg:x="3614" fg:w="2"/><text x="44.0986%" y="447.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="43.8607%" y="421" width="0.0121%" height="15" fill="rgb(242,5,29)" fg:x="3615" fg:w="1"/><text x="44.1107%" y="431.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="43.8607%" y="405" width="0.0121%" height="15" fill="rgb(214,130,32)" fg:x="3615" fg:w="1"/><text x="44.1107%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="43.9214%" y="501" width="0.0243%" height="15" fill="rgb(244,210,16)" fg:x="3620" fg:w="2"/><text x="44.1714%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="43.9214%" y="485" width="0.0243%" height="15" fill="rgb(234,48,26)" fg:x="3620" fg:w="2"/><text x="44.1714%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="43.9214%" y="469" width="0.0243%" height="15" fill="rgb(231,82,38)" fg:x="3620" fg:w="2"/><text x="44.1714%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="43.9335%" y="453" width="0.0121%" height="15" fill="rgb(254,128,41)" fg:x="3621" fg:w="1"/><text x="44.1835%" y="463.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="43.9214%" y="597" width="0.0364%" height="15" fill="rgb(212,73,49)" fg:x="3620" fg:w="3"/><text x="44.1714%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="43.9214%" y="581" width="0.0364%" height="15" fill="rgb(205,62,54)" fg:x="3620" fg:w="3"/><text x="44.1714%" y="591.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.04%)</title><rect x="43.9214%" y="565" width="0.0364%" height="15" fill="rgb(228,0,8)" fg:x="3620" fg:w="3"/><text x="44.1714%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="43.9214%" y="549" width="0.0364%" height="15" fill="rgb(251,28,17)" fg:x="3620" fg:w="3"/><text x="44.1714%" y="559.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.04%)</title><rect x="43.9214%" y="533" width="0.0364%" height="15" fill="rgb(238,105,27)" fg:x="3620" fg:w="3"/><text x="44.1714%" y="543.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="43.9214%" y="517" width="0.0364%" height="15" fill="rgb(237,216,33)" fg:x="3620" fg:w="3"/><text x="44.1714%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="43.9456%" y="501" width="0.0121%" height="15" fill="rgb(229,228,25)" fg:x="3622" fg:w="1"/><text x="44.1956%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="43.9578%" y="597" width="0.0485%" height="15" fill="rgb(233,75,23)" fg:x="3623" fg:w="4"/><text x="44.2078%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="43.9578%" y="581" width="0.0485%" height="15" fill="rgb(231,207,16)" fg:x="3623" fg:w="4"/><text x="44.2078%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="43.9578%" y="565" width="0.0485%" height="15" fill="rgb(231,191,45)" fg:x="3623" fg:w="4"/><text x="44.2078%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="43.9699%" y="549" width="0.0364%" height="15" fill="rgb(224,133,17)" fg:x="3624" fg:w="3"/><text x="44.2199%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="43.9820%" y="533" width="0.0243%" height="15" fill="rgb(209,178,27)" fg:x="3625" fg:w="2"/><text x="44.2320%" y="543.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (15 samples, 0.18%)</title><rect x="43.8850%" y="613" width="0.1820%" height="15" fill="rgb(218,37,11)" fg:x="3617" fg:w="15"/><text x="44.1350%" y="623.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="44.0063%" y="597" width="0.0607%" height="15" fill="rgb(251,226,25)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="607.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="44.0063%" y="581" width="0.0607%" height="15" fill="rgb(209,222,27)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="591.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="44.0063%" y="565" width="0.0607%" height="15" fill="rgb(238,22,21)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="575.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="44.0063%" y="549" width="0.0607%" height="15" fill="rgb(233,161,25)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="559.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="44.0063%" y="533" width="0.0607%" height="15" fill="rgb(226,122,53)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="543.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="44.0063%" y="517" width="0.0607%" height="15" fill="rgb(220,123,17)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="527.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="44.0063%" y="501" width="0.0607%" height="15" fill="rgb(230,224,35)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="511.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="44.0063%" y="485" width="0.0607%" height="15" fill="rgb(246,83,8)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="495.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="44.0063%" y="469" width="0.0607%" height="15" fill="rgb(230,214,17)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="44.0063%" y="453" width="0.0607%" height="15" fill="rgb(222,97,18)" fg:x="3627" fg:w="5"/><text x="44.2563%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (20 samples, 0.24%)</title><rect x="43.8728%" y="661" width="0.2427%" height="15" fill="rgb(206,79,1)" fg:x="3616" fg:w="20"/><text x="44.1228%" y="671.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (19 samples, 0.23%)</title><rect x="43.8850%" y="645" width="0.2305%" height="15" fill="rgb(214,121,34)" fg:x="3617" fg:w="19"/><text x="44.1350%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.23%)</title><rect x="43.8850%" y="629" width="0.2305%" height="15" fill="rgb(249,199,46)" fg:x="3617" fg:w="19"/><text x="44.1350%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.05%)</title><rect x="44.0670%" y="613" width="0.0485%" height="15" fill="rgb(214,222,46)" fg:x="3632" fg:w="4"/><text x="44.3170%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.05%)</title><rect x="44.0670%" y="597" width="0.0485%" height="15" fill="rgb(248,168,30)" fg:x="3632" fg:w="4"/><text x="44.3170%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.05%)</title><rect x="44.0670%" y="581" width="0.0485%" height="15" fill="rgb(226,14,28)" fg:x="3632" fg:w="4"/><text x="44.3170%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.05%)</title><rect x="44.0670%" y="565" width="0.0485%" height="15" fill="rgb(253,123,1)" fg:x="3632" fg:w="4"/><text x="44.3170%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="44.1034%" y="549" width="0.0121%" height="15" fill="rgb(225,24,42)" fg:x="3635" fg:w="1"/><text x="44.3534%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.01%)</title><rect x="44.1155%" y="629" width="0.0121%" height="15" fill="rgb(216,161,37)" fg:x="3636" fg:w="1"/><text x="44.3655%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="44.1155%" y="613" width="0.0121%" height="15" fill="rgb(251,164,26)" fg:x="3636" fg:w="1"/><text x="44.3655%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2 samples, 0.02%)</title><rect x="44.1155%" y="661" width="0.0243%" height="15" fill="rgb(219,177,3)" fg:x="3636" fg:w="2"/><text x="44.3655%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (2 samples, 0.02%)</title><rect x="44.1155%" y="645" width="0.0243%" height="15" fill="rgb(222,65,0)" fg:x="3636" fg:w="2"/><text x="44.3655%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.01%)</title><rect x="44.1276%" y="629" width="0.0121%" height="15" fill="rgb(223,69,54)" fg:x="3637" fg:w="1"/><text x="44.3776%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="44.1398%" y="421" width="0.0485%" height="15" fill="rgb(235,30,27)" fg:x="3638" fg:w="4"/><text x="44.3898%" y="431.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="44.1398%" y="405" width="0.0485%" height="15" fill="rgb(220,183,50)" fg:x="3638" fg:w="4"/><text x="44.3898%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (5 samples, 0.06%)</title><rect x="44.1398%" y="629" width="0.0607%" height="15" fill="rgb(248,198,15)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="639.50"></text></g><g><title>core::intrinsics::write_bytes (5 samples, 0.06%)</title><rect x="44.1398%" y="613" width="0.0607%" height="15" fill="rgb(222,211,4)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="623.50"></text></g><g><title>__memset_avx2_unaligned_erms (5 samples, 0.06%)</title><rect x="44.1398%" y="597" width="0.0607%" height="15" fill="rgb(214,102,34)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="607.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.06%)</title><rect x="44.1398%" y="581" width="0.0607%" height="15" fill="rgb(245,92,5)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="591.50"></text></g><g><title>exc_page_fault (5 samples, 0.06%)</title><rect x="44.1398%" y="565" width="0.0607%" height="15" fill="rgb(252,72,51)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="575.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.06%)</title><rect x="44.1398%" y="549" width="0.0607%" height="15" fill="rgb(252,208,19)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="559.50"></text></g><g><title>lock_mm_and_find_vma (5 samples, 0.06%)</title><rect x="44.1398%" y="533" width="0.0607%" height="15" fill="rgb(211,69,7)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="543.50"></text></g><g><title>down_read_killable (5 samples, 0.06%)</title><rect x="44.1398%" y="517" width="0.0607%" height="15" fill="rgb(211,27,16)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="527.50"></text></g><g><title>rwsem_down_read_slowpath (5 samples, 0.06%)</title><rect x="44.1398%" y="501" width="0.0607%" height="15" fill="rgb(219,216,14)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="511.50"></text></g><g><title>schedule_preempt_disabled (5 samples, 0.06%)</title><rect x="44.1398%" y="485" width="0.0607%" height="15" fill="rgb(219,71,8)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="495.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="44.1398%" y="469" width="0.0607%" height="15" fill="rgb(223,170,53)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="479.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="44.1398%" y="453" width="0.0607%" height="15" fill="rgb(246,21,26)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="44.1398%" y="437" width="0.0607%" height="15" fill="rgb(248,20,46)" fg:x="3638" fg:w="5"/><text x="44.3898%" y="447.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="44.1883%" y="421" width="0.0121%" height="15" fill="rgb(252,94,11)" fg:x="3642" fg:w="1"/><text x="44.4383%" y="431.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="44.2975%" y="517" width="0.0243%" height="15" fill="rgb(236,163,8)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="527.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="44.2975%" y="501" width="0.0243%" height="15" fill="rgb(217,221,45)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="511.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="44.2975%" y="485" width="0.0243%" height="15" fill="rgb(238,38,17)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="495.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="44.2975%" y="469" width="0.0243%" height="15" fill="rgb(242,210,23)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="479.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="44.2975%" y="453" width="0.0243%" height="15" fill="rgb(250,86,53)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="463.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="44.2975%" y="437" width="0.0243%" height="15" fill="rgb(223,168,25)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="447.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="44.2975%" y="421" width="0.0243%" height="15" fill="rgb(251,189,4)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="431.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="44.2975%" y="405" width="0.0243%" height="15" fill="rgb(245,19,28)" fg:x="3651" fg:w="2"/><text x="44.5475%" y="415.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="44.3096%" y="389" width="0.0121%" height="15" fill="rgb(207,10,34)" fg:x="3652" fg:w="1"/><text x="44.5596%" y="399.50"></text></g><g><title>malloc_consolidate (9 samples, 0.11%)</title><rect x="44.3218%" y="517" width="0.1092%" height="15" fill="rgb(235,153,31)" fg:x="3653" fg:w="9"/><text x="44.5718%" y="527.50"></text></g><g><title>unlink_chunk (1 samples, 0.01%)</title><rect x="44.4188%" y="501" width="0.0121%" height="15" fill="rgb(228,72,37)" fg:x="3661" fg:w="1"/><text x="44.6688%" y="511.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="44.4916%" y="389" width="0.0121%" height="15" fill="rgb(215,15,16)" fg:x="3667" fg:w="1"/><text x="44.7416%" y="399.50"></text></g><g><title>kthread_blkcg (1 samples, 0.01%)</title><rect x="44.4916%" y="373" width="0.0121%" height="15" fill="rgb(250,119,29)" fg:x="3667" fg:w="1"/><text x="44.7416%" y="383.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="44.5159%" y="373" width="0.0121%" height="15" fill="rgb(214,59,1)" fg:x="3669" fg:w="1"/><text x="44.7659%" y="383.50"></text></g><g><title>consume_stock (1 samples, 0.01%)</title><rect x="44.5644%" y="341" width="0.0121%" height="15" fill="rgb(223,109,25)" fg:x="3673" fg:w="1"/><text x="44.8144%" y="351.50"></text></g><g><title>charge_memcg (5 samples, 0.06%)</title><rect x="44.5280%" y="373" width="0.0607%" height="15" fill="rgb(230,198,22)" fg:x="3670" fg:w="5"/><text x="44.7780%" y="383.50"></text></g><g><title>try_charge_memcg (2 samples, 0.02%)</title><rect x="44.5644%" y="357" width="0.0243%" height="15" fill="rgb(245,184,46)" fg:x="3673" fg:w="2"/><text x="44.8144%" y="367.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.01%)</title><rect x="44.5766%" y="341" width="0.0121%" height="15" fill="rgb(253,73,16)" fg:x="3674" fg:w="1"/><text x="44.8266%" y="351.50"></text></g><g><title>__mem_cgroup_charge (21 samples, 0.25%)</title><rect x="44.5038%" y="389" width="0.2548%" height="15" fill="rgb(206,94,45)" fg:x="3668" fg:w="21"/><text x="44.7538%" y="399.50"></text></g><g><title>get_mem_cgroup_from_mm (14 samples, 0.17%)</title><rect x="44.5887%" y="373" width="0.1699%" height="15" fill="rgb(236,83,27)" fg:x="3675" fg:w="14"/><text x="44.8387%" y="383.50"></text></g><g><title>folio_add_lru_vma (4 samples, 0.05%)</title><rect x="44.7586%" y="389" width="0.0485%" height="15" fill="rgb(220,196,8)" fg:x="3689" fg:w="4"/><text x="45.0086%" y="399.50"></text></g><g><title>folio_add_lru (4 samples, 0.05%)</title><rect x="44.7586%" y="373" width="0.0485%" height="15" fill="rgb(254,185,14)" fg:x="3689" fg:w="4"/><text x="45.0086%" y="383.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="44.7828%" y="357" width="0.0243%" height="15" fill="rgb(226,50,22)" fg:x="3691" fg:w="2"/><text x="45.0328%" y="367.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="44.7828%" y="341" width="0.0243%" height="15" fill="rgb(253,147,0)" fg:x="3691" fg:w="2"/><text x="45.0328%" y="351.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="44.7828%" y="325" width="0.0243%" height="15" fill="rgb(252,46,33)" fg:x="3691" fg:w="2"/><text x="45.0328%" y="335.50"></text></g><g><title>get_mem_cgroup_from_mm (4 samples, 0.05%)</title><rect x="44.8071%" y="389" width="0.0485%" height="15" fill="rgb(242,22,54)" fg:x="3693" fg:w="4"/><text x="45.0571%" y="399.50"></text></g><g><title>inc_mm_counter (1 samples, 0.01%)</title><rect x="44.8556%" y="389" width="0.0121%" height="15" fill="rgb(223,178,32)" fg:x="3697" fg:w="1"/><text x="45.1056%" y="399.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.01%)</title><rect x="44.8556%" y="373" width="0.0121%" height="15" fill="rgb(214,106,53)" fg:x="3697" fg:w="1"/><text x="45.1056%" y="383.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.01%)</title><rect x="44.8799%" y="325" width="0.0121%" height="15" fill="rgb(232,65,50)" fg:x="3699" fg:w="1"/><text x="45.1299%" y="335.50"></text></g><g><title>clear_page_erms (2 samples, 0.02%)</title><rect x="44.8920%" y="325" width="0.0243%" height="15" fill="rgb(231,110,28)" fg:x="3700" fg:w="2"/><text x="45.1420%" y="335.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="44.9284%" y="309" width="0.0243%" height="15" fill="rgb(216,71,40)" fg:x="3703" fg:w="2"/><text x="45.1784%" y="319.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="44.9284%" y="293" width="0.0243%" height="15" fill="rgb(229,89,53)" fg:x="3703" fg:w="2"/><text x="45.1784%" y="303.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="44.9284%" y="277" width="0.0243%" height="15" fill="rgb(210,124,14)" fg:x="3703" fg:w="2"/><text x="45.1784%" y="287.50"></text></g><g><title>__raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="44.9284%" y="261" width="0.0243%" height="15" fill="rgb(236,213,6)" fg:x="3703" fg:w="2"/><text x="45.1784%" y="271.50"></text></g><g><title>do_anonymous_page (39 samples, 0.47%)</title><rect x="44.4916%" y="405" width="0.4732%" height="15" fill="rgb(228,41,5)" fg:x="3667" fg:w="39"/><text x="44.7416%" y="415.50"></text></g><g><title>vma_alloc_folio (8 samples, 0.10%)</title><rect x="44.8678%" y="389" width="0.0971%" height="15" fill="rgb(221,167,25)" fg:x="3698" fg:w="8"/><text x="45.1178%" y="399.50"></text></g><g><title>__folio_alloc (8 samples, 0.10%)</title><rect x="44.8678%" y="373" width="0.0971%" height="15" fill="rgb(228,144,37)" fg:x="3698" fg:w="8"/><text x="45.1178%" y="383.50"></text></g><g><title>__alloc_pages (8 samples, 0.10%)</title><rect x="44.8678%" y="357" width="0.0971%" height="15" fill="rgb(227,189,38)" fg:x="3698" fg:w="8"/><text x="45.1178%" y="367.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.08%)</title><rect x="44.8799%" y="341" width="0.0849%" height="15" fill="rgb(218,8,2)" fg:x="3699" fg:w="7"/><text x="45.1299%" y="351.50"></text></g><g><title>rmqueue (4 samples, 0.05%)</title><rect x="44.9163%" y="325" width="0.0485%" height="15" fill="rgb(209,61,28)" fg:x="3702" fg:w="4"/><text x="45.1663%" y="335.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="44.9527%" y="309" width="0.0121%" height="15" fill="rgb(233,140,39)" fg:x="3705" fg:w="1"/><text x="45.2027%" y="319.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="44.9527%" y="293" width="0.0121%" height="15" fill="rgb(251,66,48)" fg:x="3705" fg:w="1"/><text x="45.2027%" y="303.50"></text></g><g><title>__handle_mm_fault (41 samples, 0.50%)</title><rect x="44.4795%" y="437" width="0.4975%" height="15" fill="rgb(210,44,45)" fg:x="3666" fg:w="41"/><text x="44.7295%" y="447.50"></text></g><g><title>handle_pte_fault (40 samples, 0.49%)</title><rect x="44.4916%" y="421" width="0.4853%" height="15" fill="rgb(214,136,46)" fg:x="3667" fg:w="40"/><text x="44.7416%" y="431.50"></text></g><g><title>pte_offset_map_nolock (1 samples, 0.01%)</title><rect x="44.9648%" y="405" width="0.0121%" height="15" fill="rgb(207,130,50)" fg:x="3706" fg:w="1"/><text x="45.2148%" y="415.50"></text></g><g><title>__pte_offset_map (1 samples, 0.01%)</title><rect x="44.9648%" y="389" width="0.0121%" height="15" fill="rgb(228,102,49)" fg:x="3706" fg:w="1"/><text x="45.2148%" y="399.50"></text></g><g><title>count_memcg_events.constprop.0 (2 samples, 0.02%)</title><rect x="44.9769%" y="437" width="0.0243%" height="15" fill="rgb(253,55,1)" fg:x="3707" fg:w="2"/><text x="45.2269%" y="447.50"></text></g><g><title>__count_memcg_events (2 samples, 0.02%)</title><rect x="44.9769%" y="421" width="0.0243%" height="15" fill="rgb(238,222,9)" fg:x="3707" fg:w="2"/><text x="45.2269%" y="431.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="44.9769%" y="405" width="0.0243%" height="15" fill="rgb(246,99,6)" fg:x="3707" fg:w="2"/><text x="45.2269%" y="415.50"></text></g><g><title>handle_mm_fault (44 samples, 0.53%)</title><rect x="44.4795%" y="453" width="0.5339%" height="15" fill="rgb(219,110,26)" fg:x="3666" fg:w="44"/><text x="44.7295%" y="463.50"></text></g><g><title>p4d_offset (1 samples, 0.01%)</title><rect x="45.0012%" y="437" width="0.0121%" height="15" fill="rgb(239,160,33)" fg:x="3709" fg:w="1"/><text x="45.2512%" y="447.50"></text></g><g><title>asm_exc_page_fault (46 samples, 0.56%)</title><rect x="44.4795%" y="501" width="0.5581%" height="15" fill="rgb(220,202,23)" fg:x="3666" fg:w="46"/><text x="44.7295%" y="511.50"></text></g><g><title>exc_page_fault (46 samples, 0.56%)</title><rect x="44.4795%" y="485" width="0.5581%" height="15" fill="rgb(208,80,26)" fg:x="3666" fg:w="46"/><text x="44.7295%" y="495.50"></text></g><g><title>do_user_addr_fault (46 samples, 0.56%)</title><rect x="44.4795%" y="469" width="0.5581%" height="15" fill="rgb(243,85,7)" fg:x="3666" fg:w="46"/><text x="44.7295%" y="479.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="45.0133%" y="453" width="0.0243%" height="15" fill="rgb(228,77,47)" fg:x="3710" fg:w="2"/><text x="45.2633%" y="463.50"></text></g><g><title>mas_walk (1 samples, 0.01%)</title><rect x="45.0255%" y="437" width="0.0121%" height="15" fill="rgb(212,226,8)" fg:x="3711" fg:w="1"/><text x="45.2755%" y="447.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="45.0255%" y="421" width="0.0121%" height="15" fill="rgb(241,120,54)" fg:x="3711" fg:w="1"/><text x="45.2755%" y="431.50"></text></g><g><title>_nv040310rm (1 samples, 0.01%)</title><rect x="45.0497%" y="469" width="0.0121%" height="15" fill="rgb(226,80,16)" fg:x="3713" fg:w="1"/><text x="45.2997%" y="479.50"></text></g><g><title>_raw_spin_lock_irq (2 samples, 0.02%)</title><rect x="45.1711%" y="373" width="0.0243%" height="15" fill="rgb(240,76,13)" fg:x="3723" fg:w="2"/><text x="45.4211%" y="383.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="45.1832%" y="357" width="0.0121%" height="15" fill="rgb(252,74,8)" fg:x="3724" fg:w="1"/><text x="45.4332%" y="367.50"></text></g><g><title>osq_lock (366 samples, 4.44%)</title><rect x="45.2196%" y="357" width="4.4407%" height="15" fill="rgb(244,155,2)" fg:x="3727" fg:w="366"/><text x="45.4696%" y="367.50">osq_l..</text></g><g><title>rwsem_optimistic_spin (425 samples, 5.16%)</title><rect x="45.1953%" y="373" width="5.1565%" height="15" fill="rgb(215,81,35)" fg:x="3725" fg:w="425"/><text x="45.4453%" y="383.50">rwsem_..</text></g><g><title>rwsem_spin_on_owner (57 samples, 0.69%)</title><rect x="49.6603%" y="357" width="0.6916%" height="15" fill="rgb(206,55,2)" fg:x="4093" fg:w="57"/><text x="49.9103%" y="367.50"></text></g><g><title>rwsem_spin_on_owner (3 samples, 0.04%)</title><rect x="50.3519%" y="373" width="0.0364%" height="15" fill="rgb(231,2,34)" fg:x="4150" fg:w="3"/><text x="50.6019%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="50.4004%" y="325" width="0.0485%" height="15" fill="rgb(242,176,48)" fg:x="4154" fg:w="4"/><text x="50.6504%" y="335.50"></text></g><g><title>asm_sysvec_irq_work (2 samples, 0.02%)</title><rect x="50.4489%" y="325" width="0.0243%" height="15" fill="rgb(249,31,36)" fg:x="4158" fg:w="2"/><text x="50.6989%" y="335.50"></text></g><g><title>dequeue_task (1 samples, 0.01%)</title><rect x="50.4732%" y="325" width="0.0121%" height="15" fill="rgb(205,18,17)" fg:x="4160" fg:w="1"/><text x="50.7232%" y="335.50"></text></g><g><title>set_next_buddy (1 samples, 0.01%)</title><rect x="50.4732%" y="309" width="0.0121%" height="15" fill="rgb(254,130,5)" fg:x="4160" fg:w="1"/><text x="50.7232%" y="319.50"></text></g><g><title>perf_ctx_enable (31 samples, 0.38%)</title><rect x="50.7886%" y="293" width="0.3761%" height="15" fill="rgb(229,42,45)" fg:x="4186" fg:w="31"/><text x="51.0386%" y="303.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="51.1162%" y="277" width="0.0485%" height="15" fill="rgb(245,95,25)" fg:x="4213" fg:w="4"/><text x="51.3662%" y="287.50"></text></g><g><title>perf_pmu_nop_void (16 samples, 0.19%)</title><rect x="51.1648%" y="293" width="0.1941%" height="15" fill="rgb(249,193,38)" fg:x="4217" fg:w="16"/><text x="51.4148%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (73 samples, 0.89%)</title><rect x="50.5824%" y="309" width="0.8857%" height="15" fill="rgb(241,140,43)" fg:x="4169" fg:w="73"/><text x="50.8324%" y="319.50"></text></g><g><title>x86_pmu_enable (9 samples, 0.11%)</title><rect x="51.3589%" y="293" width="0.1092%" height="15" fill="rgb(245,78,48)" fg:x="4233" fg:w="9"/><text x="51.6089%" y="303.50"></text></g><g><title>__rcu_read_unlock (5 samples, 0.06%)</title><rect x="51.4681%" y="309" width="0.0607%" height="15" fill="rgb(214,92,39)" fg:x="4242" fg:w="5"/><text x="51.7181%" y="319.50"></text></g><g><title>_raw_spin_unlock (13 samples, 0.16%)</title><rect x="51.5288%" y="309" width="0.1577%" height="15" fill="rgb(211,189,14)" fg:x="4247" fg:w="13"/><text x="51.7788%" y="319.50"></text></g><g><title>finish_task_switch.isra.0 (101 samples, 1.23%)</title><rect x="50.4853%" y="325" width="1.2254%" height="15" fill="rgb(218,7,24)" fg:x="4161" fg:w="101"/><text x="50.7353%" y="335.50"></text></g><g><title>asm_sysvec_irq_work (2 samples, 0.02%)</title><rect x="51.6865%" y="309" width="0.0243%" height="15" fill="rgb(224,200,49)" fg:x="4260" fg:w="2"/><text x="51.9365%" y="319.50"></text></g><g><title>sysvec_irq_work (2 samples, 0.02%)</title><rect x="51.6865%" y="293" width="0.0243%" height="15" fill="rgb(218,210,14)" fg:x="4260" fg:w="2"/><text x="51.9365%" y="303.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="51.6986%" y="277" width="0.0121%" height="15" fill="rgb(234,142,31)" fg:x="4261" fg:w="1"/><text x="51.9486%" y="287.50"></text></g><g><title>detach_tasks (1 samples, 0.01%)</title><rect x="51.7107%" y="261" width="0.0121%" height="15" fill="rgb(227,165,2)" fg:x="4262" fg:w="1"/><text x="51.9607%" y="271.50"></text></g><g><title>can_migrate_task (1 samples, 0.01%)</title><rect x="51.7107%" y="245" width="0.0121%" height="15" fill="rgb(232,44,46)" fg:x="4262" fg:w="1"/><text x="51.9607%" y="255.50"></text></g><g><title>task_hot (1 samples, 0.01%)</title><rect x="51.7107%" y="229" width="0.0121%" height="15" fill="rgb(236,149,47)" fg:x="4262" fg:w="1"/><text x="51.9607%" y="239.50"></text></g><g><title>_find_next_bit (1 samples, 0.01%)</title><rect x="51.7471%" y="213" width="0.0121%" height="15" fill="rgb(227,45,31)" fg:x="4265" fg:w="1"/><text x="51.9971%" y="223.50"></text></g><g><title>load_balance (5 samples, 0.06%)</title><rect x="51.7107%" y="277" width="0.0607%" height="15" fill="rgb(240,176,51)" fg:x="4262" fg:w="5"/><text x="51.9607%" y="287.50"></text></g><g><title>find_busiest_group (4 samples, 0.05%)</title><rect x="51.7229%" y="261" width="0.0485%" height="15" fill="rgb(249,146,41)" fg:x="4263" fg:w="4"/><text x="51.9729%" y="271.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (4 samples, 0.05%)</title><rect x="51.7229%" y="245" width="0.0485%" height="15" fill="rgb(213,208,4)" fg:x="4263" fg:w="4"/><text x="51.9729%" y="255.50"></text></g><g><title>update_sg_lb_stats (3 samples, 0.04%)</title><rect x="51.7350%" y="229" width="0.0364%" height="15" fill="rgb(245,84,36)" fg:x="4264" fg:w="3"/><text x="51.9850%" y="239.50"></text></g><g><title>cpu_util (1 samples, 0.01%)</title><rect x="51.7593%" y="213" width="0.0121%" height="15" fill="rgb(254,84,18)" fg:x="4266" fg:w="1"/><text x="52.0093%" y="223.50"></text></g><g><title>pick_next_task (6 samples, 0.07%)</title><rect x="51.7107%" y="325" width="0.0728%" height="15" fill="rgb(225,38,54)" fg:x="4262" fg:w="6"/><text x="51.9607%" y="335.50"></text></g><g><title>pick_next_task_fair (6 samples, 0.07%)</title><rect x="51.7107%" y="309" width="0.0728%" height="15" fill="rgb(246,50,30)" fg:x="4262" fg:w="6"/><text x="51.9607%" y="319.50"></text></g><g><title>newidle_balance (6 samples, 0.07%)</title><rect x="51.7107%" y="293" width="0.0728%" height="15" fill="rgb(246,148,9)" fg:x="4262" fg:w="6"/><text x="51.9607%" y="303.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="51.7714%" y="277" width="0.0121%" height="15" fill="rgb(223,75,4)" fg:x="4267" fg:w="1"/><text x="52.0214%" y="287.50"></text></g><g><title>psi_task_switch (2 samples, 0.02%)</title><rect x="51.7835%" y="325" width="0.0243%" height="15" fill="rgb(239,148,41)" fg:x="4268" fg:w="2"/><text x="52.0335%" y="335.50"></text></g><g><title>psi_group_change (2 samples, 0.02%)</title><rect x="51.7835%" y="309" width="0.0243%" height="15" fill="rgb(205,195,3)" fg:x="4268" fg:w="2"/><text x="52.0335%" y="319.50"></text></g><g><title>record_times (1 samples, 0.01%)</title><rect x="51.7957%" y="293" width="0.0121%" height="15" fill="rgb(254,161,1)" fg:x="4269" fg:w="1"/><text x="52.0457%" y="303.50"></text></g><g><title>raw_spin_rq_lock_nested (1 samples, 0.01%)</title><rect x="51.8078%" y="325" width="0.0121%" height="15" fill="rgb(211,229,8)" fg:x="4270" fg:w="1"/><text x="52.0578%" y="335.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="51.8078%" y="309" width="0.0121%" height="15" fill="rgb(220,97,9)" fg:x="4270" fg:w="1"/><text x="52.0578%" y="319.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="51.8078%" y="293" width="0.0121%" height="15" fill="rgb(240,218,8)" fg:x="4270" fg:w="1"/><text x="52.0578%" y="303.50"></text></g><g><title>down_write_killable (556 samples, 6.75%)</title><rect x="45.0861%" y="405" width="6.7459%" height="15" fill="rgb(250,44,0)" fg:x="3716" fg:w="556"/><text x="45.3361%" y="415.50">down_writ..</text></g><g><title>rwsem_down_write_slowpath (554 samples, 6.72%)</title><rect x="45.1104%" y="389" width="6.7217%" height="15" fill="rgb(236,41,53)" fg:x="3718" fg:w="554"/><text x="45.3604%" y="399.50">rwsem_dow..</text></g><g><title>schedule_preempt_disabled (119 samples, 1.44%)</title><rect x="50.3883%" y="373" width="1.4438%" height="15" fill="rgb(218,227,13)" fg:x="4153" fg:w="119"/><text x="50.6383%" y="383.50"></text></g><g><title>schedule (118 samples, 1.43%)</title><rect x="50.4004%" y="357" width="1.4317%" height="15" fill="rgb(217,94,32)" fg:x="4154" fg:w="118"/><text x="50.6504%" y="367.50"></text></g><g><title>__schedule (118 samples, 1.43%)</title><rect x="50.4004%" y="341" width="1.4317%" height="15" fill="rgb(213,217,12)" fg:x="4154" fg:w="118"/><text x="50.6504%" y="351.50"></text></g><g><title>rcu_note_context_switch (1 samples, 0.01%)</title><rect x="51.8199%" y="325" width="0.0121%" height="15" fill="rgb(229,13,46)" fg:x="4271" fg:w="1"/><text x="52.0699%" y="335.50"></text></g><g><title>mas_find (4 samples, 0.05%)</title><rect x="51.8321%" y="405" width="0.0485%" height="15" fill="rgb(243,139,5)" fg:x="4272" fg:w="4"/><text x="52.0821%" y="415.50"></text></g><g><title>mas_walk (4 samples, 0.05%)</title><rect x="51.8321%" y="389" width="0.0485%" height="15" fill="rgb(249,38,45)" fg:x="4272" fg:w="4"/><text x="52.0821%" y="399.50"></text></g><g><title>mtree_range_walk (3 samples, 0.04%)</title><rect x="51.8442%" y="373" width="0.0364%" height="15" fill="rgb(216,70,11)" fg:x="4273" fg:w="3"/><text x="52.0942%" y="383.50"></text></g><g><title>change_protection (3 samples, 0.04%)</title><rect x="51.8806%" y="389" width="0.0364%" height="15" fill="rgb(253,101,25)" fg:x="4276" fg:w="3"/><text x="52.1306%" y="399.50"></text></g><g><title>change_protection_range (3 samples, 0.04%)</title><rect x="51.8806%" y="373" width="0.0364%" height="15" fill="rgb(207,197,30)" fg:x="4276" fg:w="3"/><text x="52.1306%" y="383.50"></text></g><g><title>change_p4d_range (1 samples, 0.01%)</title><rect x="51.9049%" y="357" width="0.0121%" height="15" fill="rgb(238,87,13)" fg:x="4278" fg:w="1"/><text x="52.1549%" y="367.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.01%)</title><rect x="51.9049%" y="341" width="0.0121%" height="15" fill="rgb(215,155,8)" fg:x="4278" fg:w="1"/><text x="52.1549%" y="351.50"></text></g><g><title>flush_tlb_batched_pending (1 samples, 0.01%)</title><rect x="51.9049%" y="325" width="0.0121%" height="15" fill="rgb(239,166,38)" fg:x="4278" fg:w="1"/><text x="52.1549%" y="335.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="51.9291%" y="341" width="0.0121%" height="15" fill="rgb(240,194,35)" fg:x="4280" fg:w="1"/><text x="52.1791%" y="351.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="52.0869%" y="309" width="0.0121%" height="15" fill="rgb(219,10,44)" fg:x="4293" fg:w="1"/><text x="52.3369%" y="319.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.01%)</title><rect x="52.0990%" y="309" width="0.0121%" height="15" fill="rgb(251,220,35)" fg:x="4294" fg:w="1"/><text x="52.3490%" y="319.50"></text></g><g><title>__task_pid_nr_ns (1 samples, 0.01%)</title><rect x="52.0990%" y="293" width="0.0121%" height="15" fill="rgb(218,117,13)" fg:x="4294" fg:w="1"/><text x="52.3490%" y="303.50"></text></g><g><title>perf_output_begin (1 samples, 0.01%)</title><rect x="52.1111%" y="309" width="0.0121%" height="15" fill="rgb(221,213,40)" fg:x="4295" fg:w="1"/><text x="52.3611%" y="319.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="52.1233%" y="293" width="0.0121%" height="15" fill="rgb(251,224,35)" fg:x="4296" fg:w="1"/><text x="52.3733%" y="303.50"></text></g><g><title>perf_event_mmap_output (6 samples, 0.07%)</title><rect x="52.0747%" y="325" width="0.0728%" height="15" fill="rgb(241,33,39)" fg:x="4292" fg:w="6"/><text x="52.3247%" y="335.50"></text></g><g><title>perf_output_copy (2 samples, 0.02%)</title><rect x="52.1233%" y="309" width="0.0243%" height="15" fill="rgb(222,74,17)" fg:x="4296" fg:w="2"/><text x="52.3733%" y="319.50"></text></g><g><title>__output_copy (1 samples, 0.01%)</title><rect x="52.1354%" y="293" width="0.0121%" height="15" fill="rgb(225,103,0)" fg:x="4297" fg:w="1"/><text x="52.3854%" y="303.50"></text></g><g><title>perf_event_mmap (20 samples, 0.24%)</title><rect x="51.9170%" y="389" width="0.2427%" height="15" fill="rgb(240,0,12)" fg:x="4279" fg:w="20"/><text x="52.1670%" y="399.50"></text></g><g><title>perf_event_mmap_event (20 samples, 0.24%)</title><rect x="51.9170%" y="373" width="0.2427%" height="15" fill="rgb(233,213,37)" fg:x="4279" fg:w="20"/><text x="52.1670%" y="383.50"></text></g><g><title>perf_iterate_sb.constprop.0 (19 samples, 0.23%)</title><rect x="51.9291%" y="357" width="0.2305%" height="15" fill="rgb(225,84,52)" fg:x="4280" fg:w="19"/><text x="52.1791%" y="367.50"></text></g><g><title>perf_iterate_ctx (18 samples, 0.22%)</title><rect x="51.9413%" y="341" width="0.2184%" height="15" fill="rgb(247,160,51)" fg:x="4281" fg:w="18"/><text x="52.1913%" y="351.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="52.1475%" y="325" width="0.0121%" height="15" fill="rgb(244,60,51)" fg:x="4298" fg:w="1"/><text x="52.3975%" y="335.50"></text></g><g><title>down_write (1 samples, 0.01%)</title><rect x="52.1718%" y="373" width="0.0121%" height="15" fill="rgb(233,114,7)" fg:x="4300" fg:w="1"/><text x="52.4218%" y="383.50"></text></g><g><title>__memset (1 samples, 0.01%)</title><rect x="52.1961%" y="341" width="0.0121%" height="15" fill="rgb(246,136,16)" fg:x="4302" fg:w="1"/><text x="52.4461%" y="351.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.01%)</title><rect x="52.2082%" y="341" width="0.0121%" height="15" fill="rgb(243,114,45)" fg:x="4303" fg:w="1"/><text x="52.4582%" y="351.50"></text></g><g><title>mas_preallocate (6 samples, 0.07%)</title><rect x="52.1839%" y="373" width="0.0728%" height="15" fill="rgb(247,183,43)" fg:x="4301" fg:w="6"/><text x="52.4339%" y="383.50"></text></g><g><title>mas_alloc_nodes (6 samples, 0.07%)</title><rect x="52.1839%" y="357" width="0.0728%" height="15" fill="rgb(251,210,42)" fg:x="4301" fg:w="6"/><text x="52.4339%" y="367.50"></text></g><g><title>kmem_cache_alloc_bulk (3 samples, 0.04%)</title><rect x="52.2203%" y="341" width="0.0364%" height="15" fill="rgb(221,88,35)" fg:x="4304" fg:w="3"/><text x="52.4703%" y="351.50"></text></g><g><title>__kmem_cache_alloc_bulk (3 samples, 0.04%)</title><rect x="52.2203%" y="325" width="0.0364%" height="15" fill="rgb(242,21,20)" fg:x="4304" fg:w="3"/><text x="52.4703%" y="335.50"></text></g><g><title>___slab_alloc (1 samples, 0.01%)</title><rect x="52.2446%" y="309" width="0.0121%" height="15" fill="rgb(233,226,36)" fg:x="4306" fg:w="1"/><text x="52.4946%" y="319.50"></text></g><g><title>build_detached_freelist (1 samples, 0.01%)</title><rect x="52.2689%" y="309" width="0.0121%" height="15" fill="rgb(243,189,34)" fg:x="4308" fg:w="1"/><text x="52.5189%" y="319.50"></text></g><g><title>mas_destroy (3 samples, 0.04%)</title><rect x="52.2567%" y="357" width="0.0364%" height="15" fill="rgb(207,145,50)" fg:x="4307" fg:w="3"/><text x="52.5067%" y="367.50"></text></g><g><title>kmem_cache_free_bulk (3 samples, 0.04%)</title><rect x="52.2567%" y="341" width="0.0364%" height="15" fill="rgb(242,1,50)" fg:x="4307" fg:w="3"/><text x="52.5067%" y="351.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (3 samples, 0.04%)</title><rect x="52.2567%" y="325" width="0.0364%" height="15" fill="rgb(231,65,32)" fg:x="4307" fg:w="3"/><text x="52.5067%" y="335.50"></text></g><g><title>cache_from_obj (1 samples, 0.01%)</title><rect x="52.2810%" y="309" width="0.0121%" height="15" fill="rgb(208,68,49)" fg:x="4309" fg:w="1"/><text x="52.5310%" y="319.50"></text></g><g><title>mas_store_prealloc (4 samples, 0.05%)</title><rect x="52.2567%" y="373" width="0.0485%" height="15" fill="rgb(253,54,49)" fg:x="4307" fg:w="4"/><text x="52.5067%" y="383.50"></text></g><g><title>mas_wr_walk (1 samples, 0.01%)</title><rect x="52.2931%" y="357" width="0.0121%" height="15" fill="rgb(245,186,24)" fg:x="4310" fg:w="1"/><text x="52.5431%" y="367.50"></text></g><g><title>mt_find (2 samples, 0.02%)</title><rect x="52.3053%" y="373" width="0.0243%" height="15" fill="rgb(209,2,41)" fg:x="4311" fg:w="2"/><text x="52.5553%" y="383.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="52.3174%" y="357" width="0.0121%" height="15" fill="rgb(242,208,54)" fg:x="4312" fg:w="1"/><text x="52.5674%" y="367.50"></text></g><g><title>vma_complete (3 samples, 0.04%)</title><rect x="52.3295%" y="373" width="0.0364%" height="15" fill="rgb(225,9,51)" fg:x="4313" fg:w="3"/><text x="52.5795%" y="383.50"></text></g><g><title>up_write (2 samples, 0.02%)</title><rect x="52.3417%" y="357" width="0.0243%" height="15" fill="rgb(207,207,25)" fg:x="4314" fg:w="2"/><text x="52.5917%" y="367.50"></text></g><g><title>vma_merge (19 samples, 0.23%)</title><rect x="52.1597%" y="389" width="0.2305%" height="15" fill="rgb(253,96,18)" fg:x="4299" fg:w="19"/><text x="52.4097%" y="399.50"></text></g><g><title>vma_prepare (2 samples, 0.02%)</title><rect x="52.3659%" y="373" width="0.0243%" height="15" fill="rgb(252,215,20)" fg:x="4316" fg:w="2"/><text x="52.6159%" y="383.50"></text></g><g><title>mprotect_fixup (43 samples, 0.52%)</title><rect x="51.8806%" y="405" width="0.5217%" height="15" fill="rgb(245,227,26)" fg:x="4276" fg:w="43"/><text x="52.1306%" y="415.50"></text></g><g><title>vma_set_page_prot (1 samples, 0.01%)</title><rect x="52.3902%" y="389" width="0.0121%" height="15" fill="rgb(241,208,0)" fg:x="4318" fg:w="1"/><text x="52.6402%" y="399.50"></text></g><g><title>security_file_mprotect (2 samples, 0.02%)</title><rect x="52.4023%" y="405" width="0.0243%" height="15" fill="rgb(224,130,10)" fg:x="4319" fg:w="2"/><text x="52.6523%" y="415.50"></text></g><g><title>ima_file_mprotect (1 samples, 0.01%)</title><rect x="52.4145%" y="389" width="0.0121%" height="15" fill="rgb(237,29,0)" fg:x="4320" fg:w="1"/><text x="52.6645%" y="399.50"></text></g><g><title>tlb_finish_mmu (2 samples, 0.02%)</title><rect x="52.4266%" y="405" width="0.0243%" height="15" fill="rgb(219,27,41)" fg:x="4321" fg:w="2"/><text x="52.6766%" y="415.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="52.4387%" y="389" width="0.0121%" height="15" fill="rgb(245,101,19)" fg:x="4322" fg:w="1"/><text x="52.6887%" y="399.50"></text></g><g><title>tlb_gather_mmu (1 samples, 0.01%)</title><rect x="52.4509%" y="405" width="0.0121%" height="15" fill="rgb(243,44,37)" fg:x="4323" fg:w="1"/><text x="52.7009%" y="415.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="52.4630%" y="373" width="0.0243%" height="15" fill="rgb(228,213,43)" fg:x="4324" fg:w="2"/><text x="52.7130%" y="383.50"></text></g><g><title>__raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="52.4630%" y="357" width="0.0243%" height="15" fill="rgb(219,163,21)" fg:x="4324" fg:w="2"/><text x="52.7130%" y="367.50"></text></g><g><title>select_task_rq_fair (1 samples, 0.01%)</title><rect x="52.4873%" y="357" width="0.0121%" height="15" fill="rgb(234,86,24)" fg:x="4326" fg:w="1"/><text x="52.7373%" y="367.50"></text></g><g><title>up_write (4 samples, 0.05%)</title><rect x="52.4630%" y="405" width="0.0485%" height="15" fill="rgb(225,10,24)" fg:x="4324" fg:w="4"/><text x="52.7130%" y="415.50"></text></g><g><title>rwsem_wake.isra.0 (4 samples, 0.05%)</title><rect x="52.4630%" y="389" width="0.0485%" height="15" fill="rgb(218,109,7)" fg:x="4324" fg:w="4"/><text x="52.7130%" y="399.50"></text></g><g><title>wake_up_q (2 samples, 0.02%)</title><rect x="52.4873%" y="373" width="0.0243%" height="15" fill="rgb(210,20,26)" fg:x="4326" fg:w="2"/><text x="52.7373%" y="383.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="52.4994%" y="357" width="0.0121%" height="15" fill="rgb(216,18,1)" fg:x="4327" fg:w="1"/><text x="52.7494%" y="367.50"></text></g><g><title>ttwu_queue_wakelist (1 samples, 0.01%)</title><rect x="52.4994%" y="341" width="0.0121%" height="15" fill="rgb(206,163,23)" fg:x="4327" fg:w="1"/><text x="52.7494%" y="351.50"></text></g><g><title>__smp_call_single_queue (1 samples, 0.01%)</title><rect x="52.4994%" y="325" width="0.0121%" height="15" fill="rgb(229,150,31)" fg:x="4327" fg:w="1"/><text x="52.7494%" y="335.50"></text></g><g><title>call_function_single_prep_ipi (1 samples, 0.01%)</title><rect x="52.4994%" y="309" width="0.0121%" height="15" fill="rgb(231,10,5)" fg:x="4327" fg:w="1"/><text x="52.7494%" y="319.50"></text></g><g><title>__x64_sys_mprotect (614 samples, 7.45%)</title><rect x="45.0740%" y="437" width="7.4496%" height="15" fill="rgb(250,40,50)" fg:x="3715" fg:w="614"/><text x="45.3240%" y="447.50">__x64_sys_..</text></g><g><title>do_mprotect_pkey (614 samples, 7.45%)</title><rect x="45.0740%" y="421" width="7.4496%" height="15" fill="rgb(217,119,7)" fg:x="3715" fg:w="614"/><text x="45.3240%" y="431.50">do_mprotec..</text></g><g><title>vm_stat_account (1 samples, 0.01%)</title><rect x="52.5115%" y="405" width="0.0121%" height="15" fill="rgb(245,214,40)" fg:x="4328" fg:w="1"/><text x="52.7615%" y="415.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="52.5237%" y="325" width="0.0485%" height="15" fill="rgb(216,187,1)" fg:x="4329" fg:w="4"/><text x="52.7737%" y="335.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="52.5237%" y="309" width="0.0485%" height="15" fill="rgb(237,146,21)" fg:x="4329" fg:w="4"/><text x="52.7737%" y="319.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.11%)</title><rect x="52.5237%" y="341" width="0.1092%" height="15" fill="rgb(210,174,47)" fg:x="4329" fg:w="9"/><text x="52.7737%" y="351.50"></text></g><g><title>perf_pmu_nop_void (5 samples, 0.06%)</title><rect x="52.5722%" y="325" width="0.0607%" height="15" fill="rgb(218,111,39)" fg:x="4333" fg:w="5"/><text x="52.8222%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (625 samples, 7.58%)</title><rect x="45.0619%" y="469" width="7.5831%" height="15" fill="rgb(224,95,19)" fg:x="3714" fg:w="625"/><text x="45.3119%" y="479.50">entry_SYSC..</text></g><g><title>do_syscall_64 (624 samples, 7.57%)</title><rect x="45.0740%" y="453" width="7.5710%" height="15" fill="rgb(234,15,38)" fg:x="3715" fg:w="624"/><text x="45.3240%" y="463.50">do_syscall..</text></g><g><title>syscall_exit_to_user_mode (10 samples, 0.12%)</title><rect x="52.5237%" y="437" width="0.1213%" height="15" fill="rgb(246,56,12)" fg:x="4329" fg:w="10"/><text x="52.7737%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="52.5237%" y="421" width="0.1213%" height="15" fill="rgb(247,16,17)" fg:x="4329" fg:w="10"/><text x="52.7737%" y="431.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.12%)</title><rect x="52.5237%" y="405" width="0.1213%" height="15" fill="rgb(215,151,11)" fg:x="4329" fg:w="10"/><text x="52.7737%" y="415.50"></text></g><g><title>schedule (10 samples, 0.12%)</title><rect x="52.5237%" y="389" width="0.1213%" height="15" fill="rgb(225,16,24)" fg:x="4329" fg:w="10"/><text x="52.7737%" y="399.50"></text></g><g><title>__schedule (10 samples, 0.12%)</title><rect x="52.5237%" y="373" width="0.1213%" height="15" fill="rgb(217,117,5)" fg:x="4329" fg:w="10"/><text x="52.7737%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.12%)</title><rect x="52.5237%" y="357" width="0.1213%" height="15" fill="rgb(246,187,53)" fg:x="4329" fg:w="10"/><text x="52.7737%" y="367.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.01%)</title><rect x="52.6329%" y="341" width="0.0121%" height="15" fill="rgb(241,71,40)" fg:x="4338" fg:w="1"/><text x="52.8829%" y="351.50"></text></g><g><title>grow_heap (630 samples, 7.64%)</title><rect x="45.0376%" y="501" width="7.6438%" height="15" fill="rgb(231,67,39)" fg:x="3712" fg:w="630"/><text x="45.2876%" y="511.50">grow_heap</text></g><g><title>__GI_mprotect (630 samples, 7.64%)</title><rect x="45.0376%" y="485" width="7.6438%" height="15" fill="rgb(222,120,24)" fg:x="3712" fg:w="630"/><text x="45.2876%" y="495.50">__GI_mprot..</text></g><g><title>error_entry (3 samples, 0.04%)</title><rect x="52.6450%" y="469" width="0.0364%" height="15" fill="rgb(248,3,3)" fg:x="4339" fg:w="3"/><text x="52.8950%" y="479.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="52.6814%" y="501" width="0.0243%" height="15" fill="rgb(228,218,5)" fg:x="4342" fg:w="2"/><text x="52.9314%" y="511.50"></text></g><g><title>do_mmap (1 samples, 0.01%)</title><rect x="52.7057%" y="373" width="0.0121%" height="15" fill="rgb(212,202,43)" fg:x="4344" fg:w="1"/><text x="52.9557%" y="383.50"></text></g><g><title>mmap_region (1 samples, 0.01%)</title><rect x="52.7057%" y="357" width="0.0121%" height="15" fill="rgb(235,183,2)" fg:x="4344" fg:w="1"/><text x="52.9557%" y="367.50"></text></g><g><title>vma_expand (1 samples, 0.01%)</title><rect x="52.7057%" y="341" width="0.0121%" height="15" fill="rgb(230,165,10)" fg:x="4344" fg:w="1"/><text x="52.9557%" y="351.50"></text></g><g><title>vma_adjust_trans_huge (1 samples, 0.01%)</title><rect x="52.7057%" y="325" width="0.0121%" height="15" fill="rgb(219,54,40)" fg:x="4344" fg:w="1"/><text x="52.9557%" y="335.50"></text></g><g><title>rwsem_optimistic_spin (2 samples, 0.02%)</title><rect x="52.7178%" y="341" width="0.0243%" height="15" fill="rgb(244,73,9)" fg:x="4345" fg:w="2"/><text x="52.9678%" y="351.50"></text></g><g><title>osq_lock (2 samples, 0.02%)</title><rect x="52.7178%" y="325" width="0.0243%" height="15" fill="rgb(212,32,45)" fg:x="4345" fg:w="2"/><text x="52.9678%" y="335.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="52.7421%" y="293" width="0.0607%" height="15" fill="rgb(205,58,31)" fg:x="4347" fg:w="5"/><text x="52.9921%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="52.7421%" y="277" width="0.0607%" height="15" fill="rgb(250,120,43)" fg:x="4347" fg:w="5"/><text x="52.9921%" y="287.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="52.7421%" y="261" width="0.0607%" height="15" fill="rgb(235,13,10)" fg:x="4347" fg:w="5"/><text x="52.9921%" y="271.50"></text></g><g><title>_int_malloc (706 samples, 8.57%)</title><rect x="44.2490%" y="533" width="8.5659%" height="15" fill="rgb(232,219,31)" fg:x="3647" fg:w="706"/><text x="44.4990%" y="543.50">_int_malloc</text></g><g><title>sysmalloc (691 samples, 8.38%)</title><rect x="44.4310%" y="517" width="8.3839%" height="15" fill="rgb(218,157,51)" fg:x="3662" fg:w="691"/><text x="44.6810%" y="527.50">sysmalloc</text></g><g><title>sysmalloc_mmap (9 samples, 0.11%)</title><rect x="52.7057%" y="501" width="0.1092%" height="15" fill="rgb(211,91,52)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="511.50"></text></g><g><title>__GI___mmap64 (9 samples, 0.11%)</title><rect x="52.7057%" y="485" width="0.1092%" height="15" fill="rgb(240,173,1)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="495.50"></text></g><g><title>__GI___mmap64 (9 samples, 0.11%)</title><rect x="52.7057%" y="469" width="0.1092%" height="15" fill="rgb(248,20,47)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (9 samples, 0.11%)</title><rect x="52.7057%" y="453" width="0.1092%" height="15" fill="rgb(217,221,40)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="463.50"></text></g><g><title>do_syscall_64 (9 samples, 0.11%)</title><rect x="52.7057%" y="437" width="0.1092%" height="15" fill="rgb(226,149,51)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="447.50"></text></g><g><title>__x64_sys_mmap (9 samples, 0.11%)</title><rect x="52.7057%" y="421" width="0.1092%" height="15" fill="rgb(252,193,7)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="431.50"></text></g><g><title>ksys_mmap_pgoff (9 samples, 0.11%)</title><rect x="52.7057%" y="405" width="0.1092%" height="15" fill="rgb(205,123,0)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="415.50"></text></g><g><title>vm_mmap_pgoff (9 samples, 0.11%)</title><rect x="52.7057%" y="389" width="0.1092%" height="15" fill="rgb(233,173,25)" fg:x="4344" fg:w="9"/><text x="52.9557%" y="399.50"></text></g><g><title>down_write_killable (8 samples, 0.10%)</title><rect x="52.7178%" y="373" width="0.0971%" height="15" fill="rgb(216,63,32)" fg:x="4345" fg:w="8"/><text x="52.9678%" y="383.50"></text></g><g><title>rwsem_down_write_slowpath (8 samples, 0.10%)</title><rect x="52.7178%" y="357" width="0.0971%" height="15" fill="rgb(209,56,45)" fg:x="4345" fg:w="8"/><text x="52.9678%" y="367.50"></text></g><g><title>schedule_preempt_disabled (6 samples, 0.07%)</title><rect x="52.7421%" y="341" width="0.0728%" height="15" fill="rgb(226,111,49)" fg:x="4347" fg:w="6"/><text x="52.9921%" y="351.50"></text></g><g><title>schedule (6 samples, 0.07%)</title><rect x="52.7421%" y="325" width="0.0728%" height="15" fill="rgb(244,181,21)" fg:x="4347" fg:w="6"/><text x="52.9921%" y="335.50"></text></g><g><title>__schedule (6 samples, 0.07%)</title><rect x="52.7421%" y="309" width="0.0728%" height="15" fill="rgb(222,126,15)" fg:x="4347" fg:w="6"/><text x="52.9921%" y="319.50"></text></g><g><title>psi_task_switch (1 samples, 0.01%)</title><rect x="52.8027%" y="293" width="0.0121%" height="15" fill="rgb(222,95,17)" fg:x="4352" fg:w="1"/><text x="53.0527%" y="303.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.01%)</title><rect x="52.8027%" y="277" width="0.0121%" height="15" fill="rgb(254,46,5)" fg:x="4352" fg:w="1"/><text x="53.0527%" y="287.50"></text></g><g><title>sched_clock (1 samples, 0.01%)</title><rect x="52.8027%" y="261" width="0.0121%" height="15" fill="rgb(236,216,35)" fg:x="4352" fg:w="1"/><text x="53.0527%" y="271.50"></text></g><g><title>sched_clock_noinstr (1 samples, 0.01%)</title><rect x="52.8027%" y="245" width="0.0121%" height="15" fill="rgb(217,187,26)" fg:x="4352" fg:w="1"/><text x="53.0527%" y="255.50"></text></g><g><title>native_sched_clock (1 samples, 0.01%)</title><rect x="52.8027%" y="229" width="0.0121%" height="15" fill="rgb(207,192,25)" fg:x="4352" fg:w="1"/><text x="53.0527%" y="239.50"></text></g><g><title>__GI___libc_malloc (710 samples, 8.61%)</title><rect x="44.2126%" y="549" width="8.6144%" height="15" fill="rgb(253,135,27)" fg:x="3644" fg:w="710"/><text x="44.4626%" y="559.50">__GI___libc_..</text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="52.8149%" y="533" width="0.0121%" height="15" fill="rgb(211,122,29)" fg:x="4353" fg:w="1"/><text x="53.0649%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (712 samples, 8.64%)</title><rect x="44.2004%" y="629" width="8.6387%" height="15" fill="rgb(233,162,40)" fg:x="3643" fg:w="712"/><text x="44.4504%" y="639.50">hashbrown::r..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (712 samples, 8.64%)</title><rect x="44.2004%" y="613" width="8.6387%" height="15" fill="rgb(222,184,47)" fg:x="3643" fg:w="712"/><text x="44.4504%" y="623.50">hashbrown::r..</text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::allocate (712 samples, 8.64%)</title><rect x="44.2004%" y="597" width="8.6387%" height="15" fill="rgb(249,99,23)" fg:x="3643" fg:w="712"/><text x="44.4504%" y="607.50">&lt;allocator_a..</text></g><g><title>allocator_api2::stable::alloc::global::Global::alloc_impl (712 samples, 8.64%)</title><rect x="44.2004%" y="581" width="8.6387%" height="15" fill="rgb(214,60,12)" fg:x="3643" fg:w="712"/><text x="44.4504%" y="591.50">allocator_ap..</text></g><g><title>alloc::alloc::alloc (712 samples, 8.64%)</title><rect x="44.2004%" y="565" width="8.6387%" height="15" fill="rgb(250,229,36)" fg:x="3643" fg:w="712"/><text x="44.4504%" y="575.50">alloc::alloc..</text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="52.8270%" y="549" width="0.0121%" height="15" fill="rgb(232,195,10)" fg:x="4354" fg:w="1"/><text x="53.0770%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (870 samples, 10.56%)</title><rect x="42.2956%" y="725" width="10.5557%" height="15" fill="rgb(205,213,31)" fg:x="3486" fg:w="870"/><text x="42.5456%" y="735.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (869 samples, 10.54%)</title><rect x="42.3077%" y="709" width="10.5436%" height="15" fill="rgb(237,43,8)" fg:x="3487" fg:w="869"/><text x="42.5577%" y="719.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (869 samples, 10.54%)</title><rect x="42.3077%" y="693" width="10.5436%" height="15" fill="rgb(216,208,3)" fg:x="3487" fg:w="869"/><text x="42.5577%" y="703.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (869 samples, 10.54%)</title><rect x="42.3077%" y="677" width="10.5436%" height="15" fill="rgb(228,179,44)" fg:x="3487" fg:w="869"/><text x="42.5577%" y="687.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (718 samples, 8.71%)</title><rect x="44.1398%" y="661" width="8.7115%" height="15" fill="rgb(230,192,27)" fg:x="3638" fg:w="718"/><text x="44.3898%" y="671.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (718 samples, 8.71%)</title><rect x="44.1398%" y="645" width="8.7115%" height="15" fill="rgb(251,30,38)" fg:x="3638" fg:w="718"/><text x="44.3898%" y="655.50">hashbrown::r..</text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.01%)</title><rect x="52.8391%" y="629" width="0.0121%" height="15" fill="rgb(246,55,52)" fg:x="4355" fg:w="1"/><text x="53.0891%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (871 samples, 10.57%)</title><rect x="42.2956%" y="741" width="10.5678%" height="15" fill="rgb(249,79,26)" fg:x="3486" fg:w="871"/><text x="42.5456%" y="751.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.01%)</title><rect x="52.8512%" y="725" width="0.0121%" height="15" fill="rgb(220,202,16)" fg:x="4356" fg:w="1"/><text x="53.1012%" y="735.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="52.8512%" y="709" width="0.0121%" height="15" fill="rgb(250,170,23)" fg:x="4356" fg:w="1"/><text x="53.1012%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (5 samples, 0.06%)</title><rect x="52.8634%" y="725" width="0.0607%" height="15" fill="rgb(230,7,37)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (5 samples, 0.06%)</title><rect x="52.8634%" y="709" width="0.0607%" height="15" fill="rgb(213,71,1)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="719.50"></text></g><g><title>core::ptr::write (5 samples, 0.06%)</title><rect x="52.8634%" y="693" width="0.0607%" height="15" fill="rgb(227,87,39)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="703.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="52.8634%" y="677" width="0.0607%" height="15" fill="rgb(210,41,29)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="687.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="52.8634%" y="661" width="0.0607%" height="15" fill="rgb(206,191,31)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="671.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="52.8634%" y="645" width="0.0607%" height="15" fill="rgb(247,75,54)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="655.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="52.8634%" y="629" width="0.0607%" height="15" fill="rgb(208,54,50)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="639.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="52.8634%" y="613" width="0.0607%" height="15" fill="rgb(214,90,37)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="623.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="52.8634%" y="597" width="0.0607%" height="15" fill="rgb(220,132,6)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="607.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="52.8634%" y="581" width="0.0607%" height="15" fill="rgb(213,167,7)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="591.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="52.8634%" y="565" width="0.0607%" height="15" fill="rgb(243,36,27)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="52.8634%" y="549" width="0.0607%" height="15" fill="rgb(235,147,12)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="52.8634%" y="533" width="0.0607%" height="15" fill="rgb(212,198,44)" fg:x="4357" fg:w="5"/><text x="53.1134%" y="543.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (937 samples, 11.37%)</title><rect x="41.5676%" y="789" width="11.3686%" height="15" fill="rgb(218,68,50)" fg:x="3426" fg:w="937"/><text x="41.8176%" y="799.50">dashmap::DashMap&lt;..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (937 samples, 11.37%)</title><rect x="41.5676%" y="773" width="11.3686%" height="15" fill="rgb(224,79,48)" fg:x="3426" fg:w="937"/><text x="41.8176%" y="783.50">&lt;dashmap::DashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (887 samples, 10.76%)</title><rect x="42.1742%" y="757" width="10.7620%" height="15" fill="rgb(213,191,50)" fg:x="3476" fg:w="887"/><text x="42.4242%" y="767.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.07%)</title><rect x="52.8634%" y="741" width="0.0728%" height="15" fill="rgb(254,146,10)" fg:x="4357" fg:w="6"/><text x="53.1134%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.01%)</title><rect x="52.9240%" y="725" width="0.0121%" height="15" fill="rgb(215,175,11)" fg:x="4362" fg:w="1"/><text x="53.1740%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (5 samples, 0.06%)</title><rect x="52.9362%" y="725" width="0.0607%" height="15" fill="rgb(207,49,7)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="735.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="52.9362%" y="709" width="0.0607%" height="15" fill="rgb(234,144,29)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="719.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="52.9362%" y="693" width="0.0607%" height="15" fill="rgb(213,222,48)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="703.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="52.9362%" y="677" width="0.0607%" height="15" fill="rgb(222,8,6)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="52.9362%" y="661" width="0.0607%" height="15" fill="rgb(221,114,49)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="52.9362%" y="645" width="0.0607%" height="15" fill="rgb(250,140,42)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="655.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="52.9362%" y="629" width="0.0607%" height="15" fill="rgb(250,150,27)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="639.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="52.9362%" y="613" width="0.0607%" height="15" fill="rgb(252,159,3)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="623.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="52.9362%" y="597" width="0.0607%" height="15" fill="rgb(241,182,3)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="52.9362%" y="581" width="0.0607%" height="15" fill="rgb(236,3,9)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="591.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="52.9362%" y="565" width="0.0607%" height="15" fill="rgb(223,227,51)" fg:x="4363" fg:w="5"/><text x="53.1862%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="52.9968%" y="565" width="0.0121%" height="15" fill="rgb(232,133,30)" fg:x="4368" fg:w="1"/><text x="53.2468%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.01%)</title><rect x="52.9968%" y="549" width="0.0121%" height="15" fill="rgb(209,93,27)" fg:x="4368" fg:w="1"/><text x="53.2468%" y="559.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="52.9968%" y="533" width="0.0121%" height="15" fill="rgb(208,108,34)" fg:x="4368" fg:w="1"/><text x="53.2468%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.08%)</title><rect x="52.9968%" y="661" width="0.0849%" height="15" fill="rgb(215,189,13)" fg:x="4368" fg:w="7"/><text x="53.2468%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (7 samples, 0.08%)</title><rect x="52.9968%" y="645" width="0.0849%" height="15" fill="rgb(206,88,23)" fg:x="4368" fg:w="7"/><text x="53.2468%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.08%)</title><rect x="52.9968%" y="629" width="0.0849%" height="15" fill="rgb(240,173,0)" fg:x="4368" fg:w="7"/><text x="53.2468%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.08%)</title><rect x="52.9968%" y="613" width="0.0849%" height="15" fill="rgb(223,106,52)" fg:x="4368" fg:w="7"/><text x="53.2468%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.08%)</title><rect x="52.9968%" y="597" width="0.0849%" height="15" fill="rgb(206,130,16)" fg:x="4368" fg:w="7"/><text x="53.2468%" y="607.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7 samples, 0.08%)</title><rect x="52.9968%" y="581" width="0.0849%" height="15" fill="rgb(220,54,25)" fg:x="4368" fg:w="7"/><text x="53.2468%" y="591.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount::_{{closure}} (6 samples, 0.07%)</title><rect x="53.0090%" y="565" width="0.0728%" height="15" fill="rgb(210,4,38)" fg:x="4369" fg:w="6"/><text x="53.2590%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (6 samples, 0.07%)</title><rect x="53.0090%" y="549" width="0.0728%" height="15" fill="rgb(238,94,39)" fg:x="4369" fg:w="6"/><text x="53.2590%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (6 samples, 0.07%)</title><rect x="53.0090%" y="533" width="0.0728%" height="15" fill="rgb(234,124,34)" fg:x="4369" fg:w="6"/><text x="53.2590%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (6 samples, 0.07%)</title><rect x="53.0090%" y="517" width="0.0728%" height="15" fill="rgb(221,91,40)" fg:x="4369" fg:w="6"/><text x="53.2590%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (6 samples, 0.07%)</title><rect x="53.0090%" y="501" width="0.0728%" height="15" fill="rgb(246,53,28)" fg:x="4369" fg:w="6"/><text x="53.2590%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 0.06%)</title><rect x="53.0211%" y="485" width="0.0607%" height="15" fill="rgb(229,109,7)" fg:x="4370" fg:w="5"/><text x="53.2711%" y="495.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.0211%" y="469" width="0.0607%" height="15" fill="rgb(249,117,8)" fg:x="4370" fg:w="5"/><text x="53.2711%" y="479.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.0211%" y="453" width="0.0607%" height="15" fill="rgb(210,181,1)" fg:x="4370" fg:w="5"/><text x="53.2711%" y="463.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="53.0211%" y="437" width="0.0607%" height="15" fill="rgb(211,66,1)" fg:x="4370" fg:w="5"/><text x="53.2711%" y="447.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="53.0211%" y="421" width="0.0607%" height="15" fill="rgb(221,90,14)" fg:x="4370" fg:w="5"/><text x="53.2711%" y="431.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="53.0211%" y="405" width="0.0607%" height="15" fill="rgb(219,222,44)" fg:x="4370" fg:w="5"/><text x="53.2711%" y="415.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="53.0211%" y="389" width="0.0607%" height="15" fill="rgb(246,34,33)" fg:x="4370" fg:w="5"/><text x="53.2711%" y="399.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="53.0332%" y="373" width="0.0485%" height="15" fill="rgb(227,135,41)" fg:x="4371" fg:w="4"/><text x="53.2832%" y="383.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="53.0332%" y="357" width="0.0485%" height="15" fill="rgb(226,15,14)" fg:x="4371" fg:w="4"/><text x="53.2832%" y="367.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="53.0332%" y="341" width="0.0485%" height="15" fill="rgb(236,148,47)" fg:x="4371" fg:w="4"/><text x="53.2832%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="53.0332%" y="325" width="0.0485%" height="15" fill="rgb(233,162,52)" fg:x="4371" fg:w="4"/><text x="53.2832%" y="335.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="53.0332%" y="309" width="0.0485%" height="15" fill="rgb(244,35,28)" fg:x="4371" fg:w="4"/><text x="53.2832%" y="319.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="53.0332%" y="293" width="0.0485%" height="15" fill="rgb(205,121,10)" fg:x="4371" fg:w="4"/><text x="53.2832%" y="303.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="53.1182%" y="517" width="0.0121%" height="15" fill="rgb(250,58,18)" fg:x="4378" fg:w="1"/><text x="53.3682%" y="527.50"></text></g><g><title>malloc_consolidate (4 samples, 0.05%)</title><rect x="53.1303%" y="517" width="0.0485%" height="15" fill="rgb(216,37,13)" fg:x="4379" fg:w="4"/><text x="53.3803%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.25%)</title><rect x="52.9362%" y="757" width="0.2548%" height="15" fill="rgb(221,215,42)" fg:x="4363" fg:w="21"/><text x="53.1862%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[I]&gt; as core::iter::traits::collect::FromIterator&lt;I&gt;&gt;::from_iter (21 samples, 0.25%)</title><rect x="52.9362%" y="741" width="0.2548%" height="15" fill="rgb(217,214,19)" fg:x="4363" fg:w="21"/><text x="53.1862%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.19%)</title><rect x="52.9968%" y="725" width="0.1941%" height="15" fill="rgb(233,139,13)" fg:x="4368" fg:w="16"/><text x="53.2468%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="52.9968%" y="709" width="0.1941%" height="15" fill="rgb(247,168,23)" fg:x="4368" fg:w="16"/><text x="53.2468%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="52.9968%" y="693" width="0.1941%" height="15" fill="rgb(207,202,1)" fg:x="4368" fg:w="16"/><text x="53.2468%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16 samples, 0.19%)</title><rect x="52.9968%" y="677" width="0.1941%" height="15" fill="rgb(220,155,48)" fg:x="4368" fg:w="16"/><text x="53.2468%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.11%)</title><rect x="53.0818%" y="661" width="0.1092%" height="15" fill="rgb(250,43,26)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.11%)</title><rect x="53.0818%" y="645" width="0.1092%" height="15" fill="rgb(212,190,23)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.11%)</title><rect x="53.0818%" y="629" width="0.1092%" height="15" fill="rgb(216,39,24)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.11%)</title><rect x="53.0818%" y="613" width="0.1092%" height="15" fill="rgb(252,113,16)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.11%)</title><rect x="53.0818%" y="597" width="0.1092%" height="15" fill="rgb(208,113,19)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.11%)</title><rect x="53.0818%" y="581" width="0.1092%" height="15" fill="rgb(234,107,25)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="591.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.11%)</title><rect x="53.0818%" y="565" width="0.1092%" height="15" fill="rgb(234,217,51)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="575.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.11%)</title><rect x="53.0818%" y="549" width="0.1092%" height="15" fill="rgb(251,29,42)" fg:x="4375" fg:w="9"/><text x="53.3318%" y="559.50"></text></g><g><title>_int_malloc (6 samples, 0.07%)</title><rect x="53.1182%" y="533" width="0.0728%" height="15" fill="rgb(221,62,51)" fg:x="4378" fg:w="6"/><text x="53.3682%" y="543.50"></text></g><g><title>sysmalloc (1 samples, 0.01%)</title><rect x="53.1788%" y="517" width="0.0121%" height="15" fill="rgb(240,192,43)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="527.50"></text></g><g><title>grow_heap (1 samples, 0.01%)</title><rect x="53.1788%" y="501" width="0.0121%" height="15" fill="rgb(224,157,47)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="511.50"></text></g><g><title>__GI_mprotect (1 samples, 0.01%)</title><rect x="53.1788%" y="485" width="0.0121%" height="15" fill="rgb(226,84,45)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="53.1788%" y="469" width="0.0121%" height="15" fill="rgb(208,207,23)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="479.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="53.1788%" y="453" width="0.0121%" height="15" fill="rgb(253,34,51)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="463.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.01%)</title><rect x="53.1788%" y="437" width="0.0121%" height="15" fill="rgb(227,26,34)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="447.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.01%)</title><rect x="53.1788%" y="421" width="0.0121%" height="15" fill="rgb(245,75,19)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="431.50"></text></g><g><title>down_write_killable (1 samples, 0.01%)</title><rect x="53.1788%" y="405" width="0.0121%" height="15" fill="rgb(250,191,31)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="415.50"></text></g><g><title>rwsem_down_write_slowpath (1 samples, 0.01%)</title><rect x="53.1788%" y="389" width="0.0121%" height="15" fill="rgb(224,11,50)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="399.50"></text></g><g><title>rwsem_optimistic_spin (1 samples, 0.01%)</title><rect x="53.1788%" y="373" width="0.0121%" height="15" fill="rgb(231,171,7)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="383.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="53.1788%" y="357" width="0.0121%" height="15" fill="rgb(252,214,10)" fg:x="4383" fg:w="1"/><text x="53.4288%" y="367.50"></text></g><g><title>dashmap::DashMap&lt;K,V&gt;::with_shard_amount (22 samples, 0.27%)</title><rect x="52.9362%" y="789" width="0.2669%" height="15" fill="rgb(249,45,46)" fg:x="4363" fg:w="22"/><text x="53.1862%" y="799.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount (22 samples, 0.27%)</title><rect x="52.9362%" y="773" width="0.2669%" height="15" fill="rgb(240,173,7)" fg:x="4363" fg:w="22"/><text x="53.1862%" y="783.50"></text></g><g><title>dashmap::ncb (1 samples, 0.01%)</title><rect x="53.1910%" y="757" width="0.0121%" height="15" fill="rgb(235,214,13)" fg:x="4384" fg:w="1"/><text x="53.4410%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::trailing_zeros (1 samples, 0.01%)</title><rect x="53.1910%" y="741" width="0.0121%" height="15" fill="rgb(245,156,8)" fg:x="4384" fg:w="1"/><text x="53.4410%" y="751.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="53.2031%" y="773" width="0.0121%" height="15" fill="rgb(235,46,12)" fg:x="4385" fg:w="1"/><text x="53.4531%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.01%)</title><rect x="53.2031%" y="757" width="0.0121%" height="15" fill="rgb(221,81,14)" fg:x="4385" fg:w="1"/><text x="53.4531%" y="767.50"></text></g><g><title>std::thread::panicking (1 samples, 0.01%)</title><rect x="53.2031%" y="741" width="0.0121%" height="15" fill="rgb(238,207,9)" fg:x="4385" fg:w="1"/><text x="53.4531%" y="751.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.01%)</title><rect x="53.2031%" y="725" width="0.0121%" height="15" fill="rgb(224,129,35)" fg:x="4385" fg:w="1"/><text x="53.4531%" y="735.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.01%)</title><rect x="53.2031%" y="709" width="0.0121%" height="15" fill="rgb(243,218,34)" fg:x="4385" fg:w="1"/><text x="53.4531%" y="719.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="53.2152%" y="629" width="0.0121%" height="15" fill="rgb(220,166,13)" fg:x="4386" fg:w="1"/><text x="53.4652%" y="639.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.2152%" y="757" width="0.0607%" height="15" fill="rgb(227,167,49)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.2152%" y="741" width="0.0607%" height="15" fill="rgb(234,142,12)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="53.2152%" y="725" width="0.0607%" height="15" fill="rgb(207,100,48)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="53.2152%" y="709" width="0.0607%" height="15" fill="rgb(210,25,14)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="53.2152%" y="693" width="0.0607%" height="15" fill="rgb(246,116,27)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="53.2152%" y="677" width="0.0607%" height="15" fill="rgb(214,193,42)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="53.2152%" y="661" width="0.0607%" height="15" fill="rgb(214,122,8)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="53.2152%" y="645" width="0.0607%" height="15" fill="rgb(244,173,18)" fg:x="4386" fg:w="5"/><text x="53.4652%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="53.2274%" y="629" width="0.0485%" height="15" fill="rgb(232,68,19)" fg:x="4387" fg:w="4"/><text x="53.4774%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="53.2274%" y="613" width="0.0485%" height="15" fill="rgb(236,224,1)" fg:x="4387" fg:w="4"/><text x="53.4774%" y="623.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="53.2274%" y="597" width="0.0485%" height="15" fill="rgb(240,11,8)" fg:x="4387" fg:w="4"/><text x="53.4774%" y="607.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="53.2274%" y="581" width="0.0485%" height="15" fill="rgb(244,159,20)" fg:x="4387" fg:w="4"/><text x="53.4774%" y="591.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::record (1,042 samples, 12.64%)</title><rect x="40.7425%" y="805" width="12.6426%" height="15" fill="rgb(240,223,54)" fg:x="3358" fg:w="1042"/><text x="40.9925%" y="815.50">block_stm_revm::mv_..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.18%)</title><rect x="53.2031%" y="789" width="0.1820%" height="15" fill="rgb(237,146,5)" fg:x="4385" fg:w="15"/><text x="53.4531%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (14 samples, 0.17%)</title><rect x="53.2152%" y="773" width="0.1699%" height="15" fill="rgb(218,221,32)" fg:x="4386" fg:w="14"/><text x="53.4652%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (9 samples, 0.11%)</title><rect x="53.2759%" y="757" width="0.1092%" height="15" fill="rgb(244,96,26)" fg:x="4391" fg:w="9"/><text x="53.5259%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.11%)</title><rect x="53.2759%" y="741" width="0.1092%" height="15" fill="rgb(245,184,37)" fg:x="4391" fg:w="9"/><text x="53.5259%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.21%)</title><rect x="53.3972%" y="773" width="0.2063%" height="15" fill="rgb(248,91,47)" fg:x="4401" fg:w="17"/><text x="53.6472%" y="783.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="53.6035%" y="613" width="0.0121%" height="15" fill="rgb(243,199,8)" fg:x="4418" fg:w="1"/><text x="53.8535%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (22 samples, 0.27%)</title><rect x="53.3972%" y="789" width="0.2669%" height="15" fill="rgb(249,12,15)" fg:x="4401" fg:w="22"/><text x="53.6472%" y="799.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.06%)</title><rect x="53.6035%" y="773" width="0.0607%" height="15" fill="rgb(245,97,12)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="783.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.06%)</title><rect x="53.6035%" y="757" width="0.0607%" height="15" fill="rgb(244,61,1)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.6035%" y="741" width="0.0607%" height="15" fill="rgb(222,194,10)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.6035%" y="725" width="0.0607%" height="15" fill="rgb(226,178,8)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="53.6035%" y="709" width="0.0607%" height="15" fill="rgb(241,32,34)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="53.6035%" y="693" width="0.0607%" height="15" fill="rgb(254,26,6)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="53.6035%" y="677" width="0.0607%" height="15" fill="rgb(249,71,11)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="53.6035%" y="661" width="0.0607%" height="15" fill="rgb(232,170,27)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="671.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="53.6035%" y="645" width="0.0607%" height="15" fill="rgb(214,223,17)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="53.6035%" y="629" width="0.0607%" height="15" fill="rgb(250,18,15)" fg:x="4418" fg:w="5"/><text x="53.8535%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="53.6156%" y="613" width="0.0485%" height="15" fill="rgb(212,153,51)" fg:x="4419" fg:w="4"/><text x="53.8656%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="53.6156%" y="597" width="0.0485%" height="15" fill="rgb(219,194,12)" fg:x="4419" fg:w="4"/><text x="53.8656%" y="607.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="53.6156%" y="581" width="0.0485%" height="15" fill="rgb(212,58,17)" fg:x="4419" fg:w="4"/><text x="53.8656%" y="591.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="53.6156%" y="565" width="0.0485%" height="15" fill="rgb(254,5,10)" fg:x="4419" fg:w="4"/><text x="53.8656%" y="575.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="53.6642%" y="645" width="0.0485%" height="15" fill="rgb(246,91,7)" fg:x="4423" fg:w="4"/><text x="53.9142%" y="655.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.6642%" y="789" width="0.0607%" height="15" fill="rgb(218,108,49)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="53.6642%" y="773" width="0.0607%" height="15" fill="rgb(238,123,20)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="53.6642%" y="757" width="0.0607%" height="15" fill="rgb(231,69,23)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="53.6642%" y="741" width="0.0607%" height="15" fill="rgb(230,209,3)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="53.6642%" y="725" width="0.0607%" height="15" fill="rgb(231,19,0)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="53.6642%" y="709" width="0.0607%" height="15" fill="rgb(226,192,25)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="719.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="53.6642%" y="693" width="0.0607%" height="15" fill="rgb(223,175,53)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="703.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="53.6642%" y="677" width="0.0607%" height="15" fill="rgb(248,35,51)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="53.6642%" y="661" width="0.0607%" height="15" fill="rgb(230,37,26)" fg:x="4423" fg:w="5"/><text x="53.9142%" y="671.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="53.7127%" y="645" width="0.0121%" height="15" fill="rgb(206,120,22)" fg:x="4427" fg:w="1"/><text x="53.9627%" y="655.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="53.7127%" y="629" width="0.0121%" height="15" fill="rgb(207,165,28)" fg:x="4427" fg:w="1"/><text x="53.9627%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (13 samples, 0.16%)</title><rect x="53.7248%" y="773" width="0.1577%" height="15" fill="rgb(226,23,46)" fg:x="4428" fg:w="13"/><text x="53.9748%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (13 samples, 0.16%)</title><rect x="53.7248%" y="757" width="0.1577%" height="15" fill="rgb(208,130,44)" fg:x="4428" fg:w="13"/><text x="53.9748%" y="767.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::decrease_validation_idx (27 samples, 0.33%)</title><rect x="53.7248%" y="789" width="0.3276%" height="15" fill="rgb(231,67,8)" fg:x="4428" fg:w="27"/><text x="53.9748%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_min (14 samples, 0.17%)</title><rect x="53.8826%" y="773" width="0.1699%" height="15" fill="rgb(205,183,22)" fg:x="4441" fg:w="14"/><text x="54.1326%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_umin (14 samples, 0.17%)</title><rect x="53.8826%" y="757" width="0.1699%" height="15" fill="rgb(224,47,9)" fg:x="4441" fg:w="14"/><text x="54.1326%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="54.0524%" y="741" width="0.0607%" height="15" fill="rgb(250,183,49)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="54.0524%" y="725" width="0.0607%" height="15" fill="rgb(220,151,39)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="54.0524%" y="709" width="0.0607%" height="15" fill="rgb(220,118,20)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="54.0524%" y="693" width="0.0607%" height="15" fill="rgb(231,65,51)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="54.0524%" y="677" width="0.0607%" height="15" fill="rgb(253,125,37)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="54.0524%" y="661" width="0.0607%" height="15" fill="rgb(232,102,6)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="671.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="54.0524%" y="645" width="0.0607%" height="15" fill="rgb(251,105,13)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="54.0524%" y="629" width="0.0607%" height="15" fill="rgb(222,179,29)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="54.0524%" y="613" width="0.0607%" height="15" fill="rgb(229,180,53)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="54.0524%" y="597" width="0.0607%" height="15" fill="rgb(238,104,13)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="607.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="54.0524%" y="581" width="0.0607%" height="15" fill="rgb(210,130,5)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="591.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="54.0524%" y="565" width="0.0607%" height="15" fill="rgb(233,87,49)" fg:x="4455" fg:w="5"/><text x="54.3024%" y="575.50"></text></g><g><title>std::sync::poison::Flag::done (6 samples, 0.07%)</title><rect x="54.0524%" y="757" width="0.0728%" height="15" fill="rgb(243,34,9)" fg:x="4455" fg:w="6"/><text x="54.3024%" y="767.50"></text></g><g><title>std::thread::panicking (1 samples, 0.01%)</title><rect x="54.1131%" y="741" width="0.0121%" height="15" fill="rgb(235,225,10)" fg:x="4460" fg:w="1"/><text x="54.3631%" y="751.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.01%)</title><rect x="54.1131%" y="725" width="0.0121%" height="15" fill="rgb(212,0,30)" fg:x="4460" fg:w="1"/><text x="54.3631%" y="735.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.01%)</title><rect x="54.1131%" y="709" width="0.0121%" height="15" fill="rgb(211,177,0)" fg:x="4460" fg:w="1"/><text x="54.3631%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (9 samples, 0.11%)</title><rect x="54.0524%" y="789" width="0.1092%" height="15" fill="rgb(225,220,11)" fg:x="4455" fg:w="9"/><text x="54.3024%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.11%)</title><rect x="54.0524%" y="773" width="0.1092%" height="15" fill="rgb(215,10,13)" fg:x="4455" fg:w="9"/><text x="54.3024%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (3 samples, 0.04%)</title><rect x="54.1252%" y="757" width="0.0364%" height="15" fill="rgb(240,177,14)" fg:x="4461" fg:w="3"/><text x="54.3752%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (3 samples, 0.04%)</title><rect x="54.1252%" y="741" width="0.0364%" height="15" fill="rgb(243,7,39)" fg:x="4461" fg:w="3"/><text x="54.3752%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (3 samples, 0.04%)</title><rect x="54.1252%" y="725" width="0.0364%" height="15" fill="rgb(212,99,0)" fg:x="4461" fg:w="3"/><text x="54.3752%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (5 samples, 0.06%)</title><rect x="54.1616%" y="741" width="0.0607%" height="15" fill="rgb(225,162,48)" fg:x="4464" fg:w="5"/><text x="54.4116%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.06%)</title><rect x="54.1616%" y="725" width="0.0607%" height="15" fill="rgb(246,16,25)" fg:x="4464" fg:w="5"/><text x="54.4116%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (10 samples, 0.12%)</title><rect x="54.1616%" y="789" width="0.1213%" height="15" fill="rgb(220,150,2)" fg:x="4464" fg:w="10"/><text x="54.4116%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="54.1616%" y="773" width="0.1213%" height="15" fill="rgb(237,113,11)" fg:x="4464" fg:w="10"/><text x="54.4116%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (10 samples, 0.12%)</title><rect x="54.1616%" y="757" width="0.1213%" height="15" fill="rgb(236,70,20)" fg:x="4464" fg:w="10"/><text x="54.4116%" y="767.50"></text></g><g><title>syscall (5 samples, 0.06%)</title><rect x="54.2223%" y="741" width="0.0607%" height="15" fill="rgb(234,94,7)" fg:x="4469" fg:w="5"/><text x="54.4723%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="54.2223%" y="725" width="0.0607%" height="15" fill="rgb(250,221,0)" fg:x="4469" fg:w="5"/><text x="54.4723%" y="735.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="54.2223%" y="709" width="0.0607%" height="15" fill="rgb(245,149,46)" fg:x="4469" fg:w="5"/><text x="54.4723%" y="719.50"></text></g><g><title>syscall_exit_to_user_mode (5 samples, 0.06%)</title><rect x="54.2223%" y="693" width="0.0607%" height="15" fill="rgb(215,37,27)" fg:x="4469" fg:w="5"/><text x="54.4723%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="54.2223%" y="677" width="0.0607%" height="15" fill="rgb(232,65,3)" fg:x="4469" fg:w="5"/><text x="54.4723%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (4 samples, 0.05%)</title><rect x="54.2344%" y="661" width="0.0485%" height="15" fill="rgb(214,2,16)" fg:x="4470" fg:w="4"/><text x="54.4844%" y="671.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="54.2344%" y="645" width="0.0485%" height="15" fill="rgb(227,131,50)" fg:x="4470" fg:w="4"/><text x="54.4844%" y="655.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="54.2344%" y="629" width="0.0485%" height="15" fill="rgb(247,131,45)" fg:x="4470" fg:w="4"/><text x="54.4844%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="54.2344%" y="613" width="0.0485%" height="15" fill="rgb(215,97,47)" fg:x="4470" fg:w="4"/><text x="54.4844%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="54.2344%" y="597" width="0.0485%" height="15" fill="rgb(233,143,12)" fg:x="4470" fg:w="4"/><text x="54.4844%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.19%)</title><rect x="54.2829%" y="789" width="0.1941%" height="15" fill="rgb(222,57,17)" fg:x="4474" fg:w="16"/><text x="54.5329%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.19%)</title><rect x="54.2829%" y="773" width="0.1941%" height="15" fill="rgb(214,119,38)" fg:x="4474" fg:w="16"/><text x="54.5329%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.08%)</title><rect x="54.4771%" y="789" width="0.0849%" height="15" fill="rgb(217,28,47)" fg:x="4490" fg:w="7"/><text x="54.7271%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.08%)</title><rect x="54.4771%" y="773" width="0.0849%" height="15" fill="rgb(231,14,52)" fg:x="4490" fg:w="7"/><text x="54.7271%" y="783.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="54.5620%" y="773" width="0.0121%" height="15" fill="rgb(220,158,18)" fg:x="4497" fg:w="1"/><text x="54.8120%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.01%)</title><rect x="54.5620%" y="757" width="0.0121%" height="15" fill="rgb(222,143,46)" fg:x="4497" fg:w="1"/><text x="54.8120%" y="767.50"></text></g><g><title>std::thread::panicking (1 samples, 0.01%)</title><rect x="54.5620%" y="741" width="0.0121%" height="15" fill="rgb(227,165,5)" fg:x="4497" fg:w="1"/><text x="54.8120%" y="751.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.01%)</title><rect x="54.5620%" y="725" width="0.0121%" height="15" fill="rgb(216,222,49)" fg:x="4497" fg:w="1"/><text x="54.8120%" y="735.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.01%)</title><rect x="54.5620%" y="709" width="0.0121%" height="15" fill="rgb(238,73,39)" fg:x="4497" fg:w="1"/><text x="54.8120%" y="719.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::finish_execution (110 samples, 1.33%)</title><rect x="53.3851%" y="805" width="1.3346%" height="15" fill="rgb(252,115,9)" fg:x="4400" fg:w="110"/><text x="53.6351%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.16%)</title><rect x="54.5620%" y="789" width="0.1577%" height="15" fill="rgb(238,202,4)" fg:x="4497" fg:w="13"/><text x="54.8120%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (12 samples, 0.15%)</title><rect x="54.5741%" y="773" width="0.1456%" height="15" fill="rgb(252,153,44)" fg:x="4498" fg:w="12"/><text x="54.8241%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.15%)</title><rect x="54.5741%" y="757" width="0.1456%" height="15" fill="rgb(235,128,27)" fg:x="4498" fg:w="12"/><text x="54.8241%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.15%)</title><rect x="54.5741%" y="741" width="0.1456%" height="15" fill="rgb(221,121,47)" fg:x="4498" fg:w="12"/><text x="54.8241%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (4 samples, 0.05%)</title><rect x="54.7197%" y="709" width="0.0485%" height="15" fill="rgb(247,211,47)" fg:x="4510" fg:w="4"/><text x="54.9697%" y="719.50"></text></g><g><title>exit_to_user_mode_loop (4 samples, 0.05%)</title><rect x="54.7197%" y="693" width="0.0485%" height="15" fill="rgb(252,47,49)" fg:x="4510" fg:w="4"/><text x="54.9697%" y="703.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="54.7197%" y="677" width="0.0485%" height="15" fill="rgb(219,119,53)" fg:x="4510" fg:w="4"/><text x="54.9697%" y="687.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="54.7197%" y="661" width="0.0485%" height="15" fill="rgb(243,165,53)" fg:x="4510" fg:w="4"/><text x="54.9697%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="54.7197%" y="645" width="0.0485%" height="15" fill="rgb(230,12,35)" fg:x="4510" fg:w="4"/><text x="54.9697%" y="655.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="54.7197%" y="629" width="0.0485%" height="15" fill="rgb(239,57,49)" fg:x="4510" fg:w="4"/><text x="54.9697%" y="639.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="54.7197%" y="613" width="0.0485%" height="15" fill="rgb(231,154,7)" fg:x="4510" fg:w="4"/><text x="54.9697%" y="623.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="54.7197%" y="773" width="0.0607%" height="15" fill="rgb(248,81,34)" fg:x="4510" fg:w="5"/><text x="54.9697%" y="783.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="54.7197%" y="757" width="0.0607%" height="15" fill="rgb(247,9,5)" fg:x="4510" fg:w="5"/><text x="54.9697%" y="767.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="54.7197%" y="741" width="0.0607%" height="15" fill="rgb(228,172,27)" fg:x="4510" fg:w="5"/><text x="54.9697%" y="751.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="54.7197%" y="725" width="0.0607%" height="15" fill="rgb(230,57,44)" fg:x="4510" fg:w="5"/><text x="54.9697%" y="735.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.01%)</title><rect x="54.7683%" y="709" width="0.0121%" height="15" fill="rgb(249,35,22)" fg:x="4514" fg:w="1"/><text x="55.0183%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.30%)</title><rect x="54.7197%" y="789" width="0.3033%" height="15" fill="rgb(250,137,27)" fg:x="4510" fg:w="25"/><text x="54.9697%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (20 samples, 0.24%)</title><rect x="54.7804%" y="773" width="0.2427%" height="15" fill="rgb(251,57,31)" fg:x="4515" fg:w="20"/><text x="55.0304%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (20 samples, 0.24%)</title><rect x="54.7804%" y="757" width="0.2427%" height="15" fill="rgb(238,60,0)" fg:x="4515" fg:w="20"/><text x="55.0304%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (12 samples, 0.15%)</title><rect x="55.0473%" y="773" width="0.1456%" height="15" fill="rgb(242,185,39)" fg:x="4537" fg:w="12"/><text x="55.2973%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.1929%" y="773" width="0.0243%" height="15" fill="rgb(240,63,43)" fg:x="4549" fg:w="2"/><text x="55.4429%" y="783.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.1929%" y="757" width="0.0243%" height="15" fill="rgb(236,155,6)" fg:x="4549" fg:w="2"/><text x="55.4429%" y="767.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="55.2172%" y="597" width="0.0485%" height="15" fill="rgb(215,11,29)" fg:x="4551" fg:w="4"/><text x="55.4672%" y="607.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="55.2172%" y="773" width="0.0607%" height="15" fill="rgb(228,180,48)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="783.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="55.2172%" y="757" width="0.0607%" height="15" fill="rgb(241,102,12)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="55.2172%" y="741" width="0.0607%" height="15" fill="rgb(246,213,4)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="55.2172%" y="725" width="0.0607%" height="15" fill="rgb(218,134,35)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="55.2172%" y="709" width="0.0607%" height="15" fill="rgb(251,117,35)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="55.2172%" y="693" width="0.0607%" height="15" fill="rgb(206,156,45)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="55.2172%" y="677" width="0.0607%" height="15" fill="rgb(218,52,27)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="55.2172%" y="661" width="0.0607%" height="15" fill="rgb(238,83,36)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="55.2172%" y="645" width="0.0607%" height="15" fill="rgb(218,53,43)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="55.2172%" y="629" width="0.0607%" height="15" fill="rgb(239,54,39)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="55.2172%" y="613" width="0.0607%" height="15" fill="rgb(212,198,13)" fg:x="4551" fg:w="5"/><text x="55.4672%" y="623.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="55.2657%" y="597" width="0.0121%" height="15" fill="rgb(234,54,46)" fg:x="4555" fg:w="1"/><text x="55.5157%" y="607.50"></text></g><g><title>&lt;revm_primitives::env::TransactTo as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.2778%" y="773" width="0.0243%" height="15" fill="rgb(217,120,7)" fg:x="4556" fg:w="2"/><text x="55.5278%" y="783.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.3021%" y="773" width="0.0243%" height="15" fill="rgb(246,39,15)" fg:x="4558" fg:w="2"/><text x="55.5521%" y="783.50"></text></g><g><title>&lt;revm_primitives::env::TxEnv as core::clone::Clone&gt;::clone (26 samples, 0.32%)</title><rect x="55.0231%" y="789" width="0.3155%" height="15" fill="rgb(242,143,31)" fg:x="4535" fg:w="26"/><text x="55.2731%" y="799.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (1 samples, 0.01%)</title><rect x="55.3264%" y="773" width="0.0121%" height="15" fill="rgb(252,60,24)" fg:x="4560" fg:w="1"/><text x="55.5764%" y="783.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="55.3628%" y="613" width="0.0121%" height="15" fill="rgb(249,220,7)" fg:x="4563" fg:w="1"/><text x="55.6128%" y="623.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="55.3385%" y="773" width="0.0849%" height="15" fill="rgb(236,67,13)" fg:x="4561" fg:w="7"/><text x="55.5885%" y="783.50"></text></g><g><title>&lt;revm_primitives::result::Output as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="55.3628%" y="757" width="0.0607%" height="15" fill="rgb(210,62,39)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="55.3628%" y="741" width="0.0607%" height="15" fill="rgb(219,122,53)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="55.3628%" y="725" width="0.0607%" height="15" fill="rgb(218,87,25)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="55.3628%" y="709" width="0.0607%" height="15" fill="rgb(234,179,48)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="55.3628%" y="693" width="0.0607%" height="15" fill="rgb(248,90,0)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="55.3628%" y="677" width="0.0607%" height="15" fill="rgb(207,228,37)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="55.3628%" y="661" width="0.0607%" height="15" fill="rgb(235,214,15)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="671.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="55.3628%" y="645" width="0.0607%" height="15" fill="rgb(210,144,39)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="55.3628%" y="629" width="0.0607%" height="15" fill="rgb(222,67,41)" fg:x="4563" fg:w="5"/><text x="55.6128%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="55.3749%" y="613" width="0.0485%" height="15" fill="rgb(205,35,37)" fg:x="4564" fg:w="4"/><text x="55.6249%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="55.3749%" y="597" width="0.0485%" height="15" fill="rgb(216,125,40)" fg:x="4564" fg:w="4"/><text x="55.6249%" y="607.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="55.3749%" y="581" width="0.0485%" height="15" fill="rgb(228,227,20)" fg:x="4564" fg:w="4"/><text x="55.6249%" y="591.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="55.4720%" y="661" width="0.0485%" height="15" fill="rgb(242,173,45)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="55.4720%" y="645" width="0.0485%" height="15" fill="rgb(215,79,24)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="655.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="55.4720%" y="629" width="0.0485%" height="15" fill="rgb(238,164,38)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="639.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="55.4720%" y="613" width="0.0485%" height="15" fill="rgb(245,196,38)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="623.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="55.4720%" y="597" width="0.0485%" height="15" fill="rgb(231,217,29)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="55.4720%" y="581" width="0.0485%" height="15" fill="rgb(245,6,4)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.05%)</title><rect x="55.4720%" y="565" width="0.0485%" height="15" fill="rgb(214,76,49)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.05%)</title><rect x="55.4720%" y="549" width="0.0485%" height="15" fill="rgb(205,96,12)" fg:x="4572" fg:w="4"/><text x="55.7220%" y="559.50"></text></g><g><title>core::clone::Clone::clone (5 samples, 0.06%)</title><rect x="55.4720%" y="693" width="0.0607%" height="15" fill="rgb(243,131,4)" fg:x="4572" fg:w="5"/><text x="55.7220%" y="703.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="55.4720%" y="677" width="0.0607%" height="15" fill="rgb(214,114,4)" fg:x="4572" fg:w="5"/><text x="55.7220%" y="687.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="55.5205%" y="661" width="0.0121%" height="15" fill="rgb(234,215,15)" fg:x="4576" fg:w="1"/><text x="55.7705%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="55.5205%" y="645" width="0.0121%" height="15" fill="rgb(250,216,45)" fg:x="4576" fg:w="1"/><text x="55.7705%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (1 samples, 0.01%)</title><rect x="55.5326%" y="693" width="0.0121%" height="15" fill="rgb(236,128,4)" fg:x="4577" fg:w="1"/><text x="55.7826%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="55.5326%" y="677" width="0.0121%" height="15" fill="rgb(234,50,33)" fg:x="4577" fg:w="1"/><text x="55.7826%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="55.5326%" y="661" width="0.0121%" height="15" fill="rgb(253,131,37)" fg:x="4577" fg:w="1"/><text x="55.7826%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (9 samples, 0.11%)</title><rect x="55.4720%" y="725" width="0.1092%" height="15" fill="rgb(218,55,27)" fg:x="4572" fg:w="9"/><text x="55.7220%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (9 samples, 0.11%)</title><rect x="55.4720%" y="709" width="0.1092%" height="15" fill="rgb(241,220,28)" fg:x="4572" fg:w="9"/><text x="55.7220%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.04%)</title><rect x="55.5448%" y="693" width="0.0364%" height="15" fill="rgb(241,90,48)" fg:x="4578" fg:w="3"/><text x="55.7948%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.04%)</title><rect x="55.5448%" y="677" width="0.0364%" height="15" fill="rgb(216,43,37)" fg:x="4578" fg:w="3"/><text x="55.7948%" y="687.50"></text></g><g><title>core::ptr::write (3 samples, 0.04%)</title><rect x="55.5448%" y="661" width="0.0364%" height="15" fill="rgb(207,173,9)" fg:x="4578" fg:w="3"/><text x="55.7948%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="55.5448%" y="645" width="0.0364%" height="15" fill="rgb(240,126,30)" fg:x="4578" fg:w="3"/><text x="55.7948%" y="655.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.01%)</title><rect x="55.5812%" y="693" width="0.0121%" height="15" fill="rgb(228,178,53)" fg:x="4581" fg:w="1"/><text x="55.8312%" y="703.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="55.6782%" y="485" width="0.0121%" height="15" fill="rgb(217,33,4)" fg:x="4589" fg:w="1"/><text x="55.9282%" y="495.50"></text></g><g><title>charge_memcg (1 samples, 0.01%)</title><rect x="55.6782%" y="469" width="0.0121%" height="15" fill="rgb(206,124,34)" fg:x="4589" fg:w="1"/><text x="55.9282%" y="479.50"></text></g><g><title>folio_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="55.6904%" y="485" width="0.0121%" height="15" fill="rgb(208,122,53)" fg:x="4590" fg:w="1"/><text x="55.9404%" y="495.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.04%)</title><rect x="55.6782%" y="597" width="0.0364%" height="15" fill="rgb(215,202,26)" fg:x="4589" fg:w="3"/><text x="55.9282%" y="607.50"></text></g><g><title>exc_page_fault (3 samples, 0.04%)</title><rect x="55.6782%" y="581" width="0.0364%" height="15" fill="rgb(232,198,31)" fg:x="4589" fg:w="3"/><text x="55.9282%" y="591.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.04%)</title><rect x="55.6782%" y="565" width="0.0364%" height="15" fill="rgb(222,23,35)" fg:x="4589" fg:w="3"/><text x="55.9282%" y="575.50"></text></g><g><title>handle_mm_fault (3 samples, 0.04%)</title><rect x="55.6782%" y="549" width="0.0364%" height="15" fill="rgb(242,27,53)" fg:x="4589" fg:w="3"/><text x="55.9282%" y="559.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.04%)</title><rect x="55.6782%" y="533" width="0.0364%" height="15" fill="rgb(210,216,42)" fg:x="4589" fg:w="3"/><text x="55.9282%" y="543.50"></text></g><g><title>handle_pte_fault (3 samples, 0.04%)</title><rect x="55.6782%" y="517" width="0.0364%" height="15" fill="rgb(234,39,38)" fg:x="4589" fg:w="3"/><text x="55.9282%" y="527.50"></text></g><g><title>do_anonymous_page (3 samples, 0.04%)</title><rect x="55.6782%" y="501" width="0.0364%" height="15" fill="rgb(235,126,54)" fg:x="4589" fg:w="3"/><text x="55.9282%" y="511.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.01%)</title><rect x="55.7025%" y="485" width="0.0121%" height="15" fill="rgb(235,150,33)" fg:x="4591" fg:w="1"/><text x="55.9525%" y="495.50"></text></g><g><title>__folio_alloc (1 samples, 0.01%)</title><rect x="55.7025%" y="469" width="0.0121%" height="15" fill="rgb(249,49,53)" fg:x="4591" fg:w="1"/><text x="55.9525%" y="479.50"></text></g><g><title>__alloc_pages (1 samples, 0.01%)</title><rect x="55.7025%" y="453" width="0.0121%" height="15" fill="rgb(238,60,50)" fg:x="4591" fg:w="1"/><text x="55.9525%" y="463.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="55.7025%" y="437" width="0.0121%" height="15" fill="rgb(210,5,2)" fg:x="4591" fg:w="1"/><text x="55.9525%" y="447.50"></text></g><g><title>rmqueue (1 samples, 0.01%)</title><rect x="55.7025%" y="421" width="0.0121%" height="15" fill="rgb(214,207,24)" fg:x="4591" fg:w="1"/><text x="55.9525%" y="431.50"></text></g><g><title>malloc_consolidate (11 samples, 0.13%)</title><rect x="55.7146%" y="597" width="0.1335%" height="15" fill="rgb(228,173,2)" fg:x="4592" fg:w="11"/><text x="55.9646%" y="607.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="55.8238%" y="581" width="0.0243%" height="15" fill="rgb(244,26,8)" fg:x="4601" fg:w="2"/><text x="56.0738%" y="591.50"></text></g><g><title>down_read_trylock (1 samples, 0.01%)</title><rect x="55.8724%" y="533" width="0.0121%" height="15" fill="rgb(249,153,35)" fg:x="4605" fg:w="1"/><text x="56.1224%" y="543.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="55.8966%" y="485" width="0.0121%" height="15" fill="rgb(221,215,40)" fg:x="4607" fg:w="1"/><text x="56.1466%" y="495.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.01%)</title><rect x="55.9088%" y="485" width="0.0121%" height="15" fill="rgb(238,106,35)" fg:x="4608" fg:w="1"/><text x="56.1588%" y="495.50"></text></g><g><title>__folio_throttle_swaprate (1 samples, 0.01%)</title><rect x="55.9209%" y="469" width="0.0121%" height="15" fill="rgb(207,195,21)" fg:x="4609" fg:w="1"/><text x="56.1709%" y="479.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.01%)</title><rect x="55.9209%" y="453" width="0.0121%" height="15" fill="rgb(205,43,29)" fg:x="4609" fg:w="1"/><text x="56.1709%" y="463.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="55.9573%" y="453" width="0.0121%" height="15" fill="rgb(236,35,21)" fg:x="4612" fg:w="1"/><text x="56.2073%" y="463.50"></text></g><g><title>__count_memcg_events (1 samples, 0.01%)</title><rect x="55.9816%" y="437" width="0.0121%" height="15" fill="rgb(244,74,8)" fg:x="4614" fg:w="1"/><text x="56.2316%" y="447.50"></text></g><g><title>charge_memcg (3 samples, 0.04%)</title><rect x="55.9694%" y="453" width="0.0364%" height="15" fill="rgb(241,229,7)" fg:x="4613" fg:w="3"/><text x="56.2194%" y="463.50"></text></g><g><title>try_charge_memcg (1 samples, 0.01%)</title><rect x="55.9937%" y="437" width="0.0121%" height="15" fill="rgb(212,223,25)" fg:x="4615" fg:w="1"/><text x="56.2437%" y="447.50"></text></g><g><title>__mem_cgroup_charge (18 samples, 0.22%)</title><rect x="55.9330%" y="469" width="0.2184%" height="15" fill="rgb(234,58,53)" fg:x="4610" fg:w="18"/><text x="56.1830%" y="479.50"></text></g><g><title>get_mem_cgroup_from_mm (12 samples, 0.15%)</title><rect x="56.0058%" y="453" width="0.1456%" height="15" fill="rgb(244,36,1)" fg:x="4616" fg:w="12"/><text x="56.2558%" y="463.50"></text></g><g><title>folio_lruvec_lock_irqsave (1 samples, 0.01%)</title><rect x="56.1636%" y="421" width="0.0121%" height="15" fill="rgb(222,40,54)" fg:x="4629" fg:w="1"/><text x="56.4136%" y="431.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="56.1636%" y="405" width="0.0121%" height="15" fill="rgb(210,207,39)" fg:x="4629" fg:w="1"/><text x="56.4136%" y="415.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="56.1636%" y="389" width="0.0121%" height="15" fill="rgb(234,52,14)" fg:x="4629" fg:w="1"/><text x="56.4136%" y="399.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="56.1636%" y="373" width="0.0121%" height="15" fill="rgb(239,108,46)" fg:x="4629" fg:w="1"/><text x="56.4136%" y="383.50"></text></g><g><title>folio_add_lru_vma (6 samples, 0.07%)</title><rect x="56.1514%" y="469" width="0.0728%" height="15" fill="rgb(252,223,5)" fg:x="4628" fg:w="6"/><text x="56.4014%" y="479.50"></text></g><g><title>folio_add_lru (6 samples, 0.07%)</title><rect x="56.1514%" y="453" width="0.0728%" height="15" fill="rgb(227,181,11)" fg:x="4628" fg:w="6"/><text x="56.4014%" y="463.50"></text></g><g><title>folio_batch_move_lru (6 samples, 0.07%)</title><rect x="56.1514%" y="437" width="0.0728%" height="15" fill="rgb(248,126,40)" fg:x="4628" fg:w="6"/><text x="56.4014%" y="447.50"></text></g><g><title>lru_add_fn (4 samples, 0.05%)</title><rect x="56.1757%" y="421" width="0.0485%" height="15" fill="rgb(243,1,18)" fg:x="4630" fg:w="4"/><text x="56.4257%" y="431.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="56.2000%" y="405" width="0.0243%" height="15" fill="rgb(214,145,23)" fg:x="4632" fg:w="2"/><text x="56.4500%" y="415.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.01%)</title><rect x="56.2121%" y="389" width="0.0121%" height="15" fill="rgb(241,218,11)" fg:x="4633" fg:w="1"/><text x="56.4621%" y="399.50"></text></g><g><title>folio_add_new_anon_rmap (2 samples, 0.02%)</title><rect x="56.2242%" y="469" width="0.0243%" height="15" fill="rgb(214,219,24)" fg:x="4634" fg:w="2"/><text x="56.4742%" y="479.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.01%)</title><rect x="56.2364%" y="453" width="0.0121%" height="15" fill="rgb(235,32,7)" fg:x="4635" fg:w="1"/><text x="56.4864%" y="463.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.02%)</title><rect x="56.2485%" y="469" width="0.0243%" height="15" fill="rgb(227,121,28)" fg:x="4636" fg:w="2"/><text x="56.4985%" y="479.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.02%)</title><rect x="56.2849%" y="421" width="0.0243%" height="15" fill="rgb(216,129,49)" fg:x="4639" fg:w="2"/><text x="56.5349%" y="431.50"></text></g><g><title>clear_page_erms (1 samples, 0.01%)</title><rect x="56.3334%" y="405" width="0.0121%" height="15" fill="rgb(207,194,50)" fg:x="4643" fg:w="1"/><text x="56.5834%" y="415.50"></text></g><g><title>__rmqueue_pcplist (4 samples, 0.05%)</title><rect x="56.3698%" y="389" width="0.0485%" height="15" fill="rgb(207,4,18)" fg:x="4646" fg:w="4"/><text x="56.6198%" y="399.50"></text></g><g><title>rmqueue_bulk (4 samples, 0.05%)</title><rect x="56.3698%" y="373" width="0.0485%" height="15" fill="rgb(213,50,30)" fg:x="4646" fg:w="4"/><text x="56.6198%" y="383.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="56.3941%" y="357" width="0.0243%" height="15" fill="rgb(208,77,22)" fg:x="4648" fg:w="2"/><text x="56.6441%" y="367.50"></text></g><g><title>__raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="56.3941%" y="341" width="0.0243%" height="15" fill="rgb(244,204,34)" fg:x="4648" fg:w="2"/><text x="56.6441%" y="351.50"></text></g><g><title>__alloc_pages (13 samples, 0.16%)</title><rect x="56.2727%" y="437" width="0.1577%" height="15" fill="rgb(230,20,17)" fg:x="4638" fg:w="13"/><text x="56.5227%" y="447.50"></text></g><g><title>get_page_from_freelist (10 samples, 0.12%)</title><rect x="56.3091%" y="421" width="0.1213%" height="15" fill="rgb(237,83,15)" fg:x="4641" fg:w="10"/><text x="56.5591%" y="431.50"></text></g><g><title>rmqueue (7 samples, 0.08%)</title><rect x="56.3455%" y="405" width="0.0849%" height="15" fill="rgb(221,109,25)" fg:x="4644" fg:w="7"/><text x="56.5955%" y="415.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="56.4183%" y="389" width="0.0121%" height="15" fill="rgb(205,194,52)" fg:x="4650" fg:w="1"/><text x="56.6683%" y="399.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="56.4183%" y="373" width="0.0121%" height="15" fill="rgb(244,173,54)" fg:x="4650" fg:w="1"/><text x="56.6683%" y="383.50"></text></g><g><title>handle_mm_fault (46 samples, 0.56%)</title><rect x="55.8845%" y="533" width="0.5581%" height="15" fill="rgb(227,181,18)" fg:x="4606" fg:w="46"/><text x="56.1345%" y="543.50"></text></g><g><title>__handle_mm_fault (46 samples, 0.56%)</title><rect x="55.8845%" y="517" width="0.5581%" height="15" fill="rgb(238,36,30)" fg:x="4606" fg:w="46"/><text x="56.1345%" y="527.50"></text></g><g><title>handle_pte_fault (45 samples, 0.55%)</title><rect x="55.8966%" y="501" width="0.5460%" height="15" fill="rgb(254,85,0)" fg:x="4607" fg:w="45"/><text x="56.1466%" y="511.50"></text></g><g><title>do_anonymous_page (43 samples, 0.52%)</title><rect x="55.9209%" y="485" width="0.5217%" height="15" fill="rgb(247,63,33)" fg:x="4609" fg:w="43"/><text x="56.1709%" y="495.50"></text></g><g><title>vma_alloc_folio (14 samples, 0.17%)</title><rect x="56.2727%" y="469" width="0.1699%" height="15" fill="rgb(220,7,54)" fg:x="4638" fg:w="14"/><text x="56.5227%" y="479.50"></text></g><g><title>__folio_alloc (14 samples, 0.17%)</title><rect x="56.2727%" y="453" width="0.1699%" height="15" fill="rgb(238,227,21)" fg:x="4638" fg:w="14"/><text x="56.5227%" y="463.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.01%)</title><rect x="56.4305%" y="437" width="0.0121%" height="15" fill="rgb(237,29,31)" fg:x="4651" fg:w="1"/><text x="56.6805%" y="447.50"></text></g><g><title>lock_vma_under_rcu (4 samples, 0.05%)</title><rect x="56.4426%" y="533" width="0.0485%" height="15" fill="rgb(211,21,50)" fg:x="4652" fg:w="4"/><text x="56.6926%" y="543.50"></text></g><g><title>mas_walk (3 samples, 0.04%)</title><rect x="56.4547%" y="517" width="0.0364%" height="15" fill="rgb(239,119,2)" fg:x="4653" fg:w="3"/><text x="56.7047%" y="527.50"></text></g><g><title>mtree_range_walk (3 samples, 0.04%)</title><rect x="56.4547%" y="501" width="0.0364%" height="15" fill="rgb(250,2,39)" fg:x="4653" fg:w="3"/><text x="56.7047%" y="511.50"></text></g><g><title>asm_exc_page_fault (52 samples, 0.63%)</title><rect x="55.8724%" y="581" width="0.6309%" height="15" fill="rgb(244,46,53)" fg:x="4605" fg:w="52"/><text x="56.1224%" y="591.50"></text></g><g><title>exc_page_fault (52 samples, 0.63%)</title><rect x="55.8724%" y="565" width="0.6309%" height="15" fill="rgb(209,21,19)" fg:x="4605" fg:w="52"/><text x="56.1224%" y="575.50"></text></g><g><title>do_user_addr_fault (52 samples, 0.63%)</title><rect x="55.8724%" y="549" width="0.6309%" height="15" fill="rgb(236,145,4)" fg:x="4605" fg:w="52"/><text x="56.1224%" y="559.50"></text></g><g><title>up_read (1 samples, 0.01%)</title><rect x="56.4911%" y="533" width="0.0121%" height="15" fill="rgb(220,133,36)" fg:x="4656" fg:w="1"/><text x="56.7411%" y="543.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="56.5033%" y="549" width="0.0121%" height="15" fill="rgb(244,18,3)" fg:x="4657" fg:w="1"/><text x="56.7533%" y="559.50"></text></g><g><title>__cond_resched (4 samples, 0.05%)</title><rect x="56.5639%" y="469" width="0.0485%" height="15" fill="rgb(232,171,48)" fg:x="4662" fg:w="4"/><text x="56.8139%" y="479.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="56.5639%" y="453" width="0.0485%" height="15" fill="rgb(223,223,53)" fg:x="4662" fg:w="4"/><text x="56.8139%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="56.5639%" y="437" width="0.0485%" height="15" fill="rgb(246,92,13)" fg:x="4662" fg:w="4"/><text x="56.8139%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="56.5639%" y="421" width="0.0485%" height="15" fill="rgb(229,171,10)" fg:x="4662" fg:w="4"/><text x="56.8139%" y="431.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="56.5639%" y="405" width="0.0485%" height="15" fill="rgb(213,131,26)" fg:x="4662" fg:w="4"/><text x="56.8139%" y="415.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="56.5639%" y="389" width="0.0485%" height="15" fill="rgb(242,87,54)" fg:x="4662" fg:w="4"/><text x="56.8139%" y="399.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="56.6731%" y="453" width="0.0121%" height="15" fill="rgb(237,21,35)" fg:x="4671" fg:w="1"/><text x="56.9231%" y="463.50"></text></g><g><title>asm_sysvec_reschedule_ipi (1 samples, 0.01%)</title><rect x="56.6853%" y="453" width="0.0121%" height="15" fill="rgb(253,13,47)" fg:x="4672" fg:w="1"/><text x="56.9353%" y="463.50"></text></g><g><title>osq_lock (394 samples, 4.78%)</title><rect x="56.7338%" y="437" width="4.7804%" height="15" fill="rgb(215,122,49)" fg:x="4676" fg:w="394"/><text x="56.9838%" y="447.50">osq_lo..</text></g><g><title>rwsem_optimistic_spin (467 samples, 5.67%)</title><rect x="56.6974%" y="453" width="5.6661%" height="15" fill="rgb(209,179,30)" fg:x="4673" fg:w="467"/><text x="56.9474%" y="463.50">rwsem_o..</text></g><g><title>rwsem_spin_on_owner (70 samples, 0.85%)</title><rect x="61.5142%" y="437" width="0.8493%" height="15" fill="rgb(235,100,24)" fg:x="5070" fg:w="70"/><text x="61.7642%" y="447.50"></text></g><g><title>rwsem_spin_on_owner (5 samples, 0.06%)</title><rect x="62.3635%" y="453" width="0.0607%" height="15" fill="rgb(209,67,24)" fg:x="5140" fg:w="5"/><text x="62.6135%" y="463.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="62.4484%" y="405" width="0.0121%" height="15" fill="rgb(206,74,32)" fg:x="5147" fg:w="1"/><text x="62.6984%" y="415.50"></text></g><g><title>dequeue_entity (1 samples, 0.01%)</title><rect x="62.4606%" y="373" width="0.0121%" height="15" fill="rgb(212,45,25)" fg:x="5148" fg:w="1"/><text x="62.7106%" y="383.50"></text></g><g><title>update_load_avg (1 samples, 0.01%)</title><rect x="62.4606%" y="357" width="0.0121%" height="15" fill="rgb(239,26,3)" fg:x="5148" fg:w="1"/><text x="62.7106%" y="367.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.01%)</title><rect x="62.4606%" y="341" width="0.0121%" height="15" fill="rgb(218,36,15)" fg:x="5148" fg:w="1"/><text x="62.7106%" y="351.50"></text></g><g><title>dequeue_task (2 samples, 0.02%)</title><rect x="62.4606%" y="405" width="0.0243%" height="15" fill="rgb(206,108,24)" fg:x="5148" fg:w="2"/><text x="62.7106%" y="415.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.02%)</title><rect x="62.4606%" y="389" width="0.0243%" height="15" fill="rgb(234,204,42)" fg:x="5148" fg:w="2"/><text x="62.7106%" y="399.50"></text></g><g><title>update_curr (1 samples, 0.01%)</title><rect x="62.4727%" y="373" width="0.0121%" height="15" fill="rgb(229,2,11)" fg:x="5149" fg:w="1"/><text x="62.7227%" y="383.50"></text></g><g><title>perf_ctx_enable (39 samples, 0.47%)</title><rect x="62.6790%" y="373" width="0.4732%" height="15" fill="rgb(221,20,48)" fg:x="5166" fg:w="39"/><text x="62.9290%" y="383.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.07%)</title><rect x="63.0793%" y="357" width="0.0728%" height="15" fill="rgb(244,164,10)" fg:x="5199" fg:w="6"/><text x="63.3293%" y="367.50"></text></g><g><title>perf_pmu_nop_void (41 samples, 0.50%)</title><rect x="63.1521%" y="373" width="0.4975%" height="15" fill="rgb(243,229,2)" fg:x="5205" fg:w="41"/><text x="63.4021%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (86 samples, 1.04%)</title><rect x="62.6183%" y="389" width="1.0434%" height="15" fill="rgb(232,131,37)" fg:x="5161" fg:w="86"/><text x="62.8683%" y="399.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="63.6496%" y="373" width="0.0121%" height="15" fill="rgb(217,156,11)" fg:x="5246" fg:w="1"/><text x="63.8996%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (98 samples, 1.19%)</title><rect x="62.4848%" y="405" width="1.1890%" height="15" fill="rgb(239,99,48)" fg:x="5150" fg:w="98"/><text x="62.7348%" y="415.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="63.6617%" y="389" width="0.0121%" height="15" fill="rgb(231,209,9)" fg:x="5247" fg:w="1"/><text x="63.9117%" y="399.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="63.6617%" y="373" width="0.0121%" height="15" fill="rgb(254,97,27)" fg:x="5247" fg:w="1"/><text x="63.9117%" y="383.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="63.6617%" y="357" width="0.0121%" height="15" fill="rgb(223,151,38)" fg:x="5247" fg:w="1"/><text x="63.9117%" y="367.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="63.6739%" y="389" width="0.0121%" height="15" fill="rgb(219,206,35)" fg:x="5248" fg:w="1"/><text x="63.9239%" y="399.50"></text></g><g><title>newidle_balance (1 samples, 0.01%)</title><rect x="63.6739%" y="373" width="0.0121%" height="15" fill="rgb(216,130,31)" fg:x="5248" fg:w="1"/><text x="63.9239%" y="383.50"></text></g><g><title>load_balance (1 samples, 0.01%)</title><rect x="63.6739%" y="357" width="0.0121%" height="15" fill="rgb(251,97,34)" fg:x="5248" fg:w="1"/><text x="63.9239%" y="367.50"></text></g><g><title>find_busiest_group (1 samples, 0.01%)</title><rect x="63.6739%" y="341" width="0.0121%" height="15" fill="rgb(246,159,47)" fg:x="5248" fg:w="1"/><text x="63.9239%" y="351.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (1 samples, 0.01%)</title><rect x="63.6739%" y="325" width="0.0121%" height="15" fill="rgb(232,87,10)" fg:x="5248" fg:w="1"/><text x="63.9239%" y="335.50"></text></g><g><title>_find_next_and_bit (1 samples, 0.01%)</title><rect x="63.6739%" y="309" width="0.0121%" height="15" fill="rgb(249,1,37)" fg:x="5248" fg:w="1"/><text x="63.9239%" y="319.50"></text></g><g><title>pick_next_task (2 samples, 0.02%)</title><rect x="63.6739%" y="405" width="0.0243%" height="15" fill="rgb(239,135,14)" fg:x="5248" fg:w="2"/><text x="63.9239%" y="415.50"></text></g><g><title>put_prev_task_fair (1 samples, 0.01%)</title><rect x="63.6860%" y="389" width="0.0121%" height="15" fill="rgb(253,116,46)" fg:x="5249" fg:w="1"/><text x="63.9360%" y="399.50"></text></g><g><title>put_prev_entity (1 samples, 0.01%)</title><rect x="63.6860%" y="373" width="0.0121%" height="15" fill="rgb(222,217,37)" fg:x="5249" fg:w="1"/><text x="63.9360%" y="383.50"></text></g><g><title>__schedule (104 samples, 1.26%)</title><rect x="62.4484%" y="421" width="1.2618%" height="15" fill="rgb(252,96,8)" fg:x="5147" fg:w="104"/><text x="62.6984%" y="431.50"></text></g><g><title>psi_task_switch (1 samples, 0.01%)</title><rect x="63.6981%" y="405" width="0.0121%" height="15" fill="rgb(254,103,41)" fg:x="5250" fg:w="1"/><text x="63.9481%" y="415.50"></text></g><g><title>psi_group_change (1 samples, 0.01%)</title><rect x="63.6981%" y="389" width="0.0121%" height="15" fill="rgb(218,213,19)" fg:x="5250" fg:w="1"/><text x="63.9481%" y="399.50"></text></g><g><title>down_write_killable (594 samples, 7.21%)</title><rect x="56.5154%" y="485" width="7.2070%" height="15" fill="rgb(253,95,21)" fg:x="4658" fg:w="594"/><text x="56.7654%" y="495.50">down_write..</text></g><g><title>rwsem_down_write_slowpath (586 samples, 7.11%)</title><rect x="56.6125%" y="469" width="7.1099%" height="15" fill="rgb(229,26,28)" fg:x="4666" fg:w="586"/><text x="56.8625%" y="479.50">rwsem_down..</text></g><g><title>schedule_preempt_disabled (107 samples, 1.30%)</title><rect x="62.4242%" y="453" width="1.2982%" height="15" fill="rgb(230,129,16)" fg:x="5145" fg:w="107"/><text x="62.6742%" y="463.50"></text></g><g><title>schedule (107 samples, 1.30%)</title><rect x="62.4242%" y="437" width="1.2982%" height="15" fill="rgb(236,126,17)" fg:x="5145" fg:w="107"/><text x="62.6742%" y="447.50"></text></g><g><title>finish_task_switch.isra.0 (1 samples, 0.01%)</title><rect x="63.7103%" y="421" width="0.0121%" height="15" fill="rgb(209,33,33)" fg:x="5251" fg:w="1"/><text x="63.9603%" y="431.50"></text></g><g><title>mas_find (3 samples, 0.04%)</title><rect x="63.7224%" y="485" width="0.0364%" height="15" fill="rgb(227,85,29)" fg:x="5252" fg:w="3"/><text x="63.9724%" y="495.50"></text></g><g><title>mas_walk (3 samples, 0.04%)</title><rect x="63.7224%" y="469" width="0.0364%" height="15" fill="rgb(241,53,46)" fg:x="5252" fg:w="3"/><text x="63.9724%" y="479.50"></text></g><g><title>mtree_range_walk (3 samples, 0.04%)</title><rect x="63.7224%" y="453" width="0.0364%" height="15" fill="rgb(228,167,53)" fg:x="5252" fg:w="3"/><text x="63.9724%" y="463.50"></text></g><g><title>__cond_resched (5 samples, 0.06%)</title><rect x="63.7709%" y="405" width="0.0607%" height="15" fill="rgb(238,195,45)" fg:x="5256" fg:w="5"/><text x="64.0209%" y="415.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="63.7709%" y="389" width="0.0607%" height="15" fill="rgb(252,124,45)" fg:x="5256" fg:w="5"/><text x="64.0209%" y="399.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="63.7709%" y="373" width="0.0607%" height="15" fill="rgb(251,38,35)" fg:x="5256" fg:w="5"/><text x="64.0209%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="63.7709%" y="357" width="0.0607%" height="15" fill="rgb(227,33,2)" fg:x="5256" fg:w="5"/><text x="64.0209%" y="367.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="63.7831%" y="341" width="0.0485%" height="15" fill="rgb(223,157,46)" fg:x="5257" fg:w="4"/><text x="64.0331%" y="351.50"></text></g><g><title>change_protection (7 samples, 0.08%)</title><rect x="63.7588%" y="469" width="0.0849%" height="15" fill="rgb(222,78,41)" fg:x="5255" fg:w="7"/><text x="64.0088%" y="479.50"></text></g><g><title>change_protection_range (7 samples, 0.08%)</title><rect x="63.7588%" y="453" width="0.0849%" height="15" fill="rgb(248,176,11)" fg:x="5255" fg:w="7"/><text x="64.0088%" y="463.50"></text></g><g><title>change_p4d_range (7 samples, 0.08%)</title><rect x="63.7588%" y="437" width="0.0849%" height="15" fill="rgb(241,221,18)" fg:x="5255" fg:w="7"/><text x="64.0088%" y="447.50"></text></g><g><title>change_pmd_range.isra.0 (7 samples, 0.08%)</title><rect x="63.7588%" y="421" width="0.0849%" height="15" fill="rgb(218,85,22)" fg:x="5255" fg:w="7"/><text x="64.0088%" y="431.50"></text></g><g><title>change_pte_range (1 samples, 0.01%)</title><rect x="63.8316%" y="405" width="0.0121%" height="15" fill="rgb(222,223,7)" fg:x="5261" fg:w="1"/><text x="64.0816%" y="415.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.01%)</title><rect x="63.8923%" y="421" width="0.0121%" height="15" fill="rgb(254,59,39)" fg:x="5266" fg:w="1"/><text x="64.1423%" y="431.50"></text></g><g><title>__perf_event__output_id_sample (2 samples, 0.02%)</title><rect x="64.0257%" y="389" width="0.0243%" height="15" fill="rgb(247,100,27)" fg:x="5277" fg:w="2"/><text x="64.2757%" y="399.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="64.0379%" y="373" width="0.0121%" height="15" fill="rgb(237,207,10)" fg:x="5278" fg:w="1"/><text x="64.2879%" y="383.50"></text></g><g><title>__output_copy (1 samples, 0.01%)</title><rect x="64.0379%" y="357" width="0.0121%" height="15" fill="rgb(220,121,28)" fg:x="5278" fg:w="1"/><text x="64.2879%" y="367.50"></text></g><g><title>perf_output_begin (1 samples, 0.01%)</title><rect x="64.0500%" y="389" width="0.0121%" height="15" fill="rgb(213,223,20)" fg:x="5279" fg:w="1"/><text x="64.3000%" y="399.50"></text></g><g><title>perf_event_mmap (19 samples, 0.23%)</title><rect x="63.8437%" y="469" width="0.2305%" height="15" fill="rgb(205,121,27)" fg:x="5262" fg:w="19"/><text x="64.0937%" y="479.50"></text></g><g><title>perf_event_mmap_event (19 samples, 0.23%)</title><rect x="63.8437%" y="453" width="0.2305%" height="15" fill="rgb(253,24,53)" fg:x="5262" fg:w="19"/><text x="64.0937%" y="463.50"></text></g><g><title>perf_iterate_sb.constprop.0 (15 samples, 0.18%)</title><rect x="63.8923%" y="437" width="0.1820%" height="15" fill="rgb(224,224,47)" fg:x="5266" fg:w="15"/><text x="64.1423%" y="447.50"></text></g><g><title>perf_iterate_ctx (14 samples, 0.17%)</title><rect x="63.9044%" y="421" width="0.1699%" height="15" fill="rgb(250,125,36)" fg:x="5267" fg:w="14"/><text x="64.1544%" y="431.50"></text></g><g><title>perf_event_mmap_output (6 samples, 0.07%)</title><rect x="64.0015%" y="405" width="0.0728%" height="15" fill="rgb(240,144,38)" fg:x="5275" fg:w="6"/><text x="64.2515%" y="415.50"></text></g><g><title>perf_output_copy (1 samples, 0.01%)</title><rect x="64.0621%" y="389" width="0.0121%" height="15" fill="rgb(250,15,50)" fg:x="5280" fg:w="1"/><text x="64.3121%" y="399.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="64.0621%" y="373" width="0.0121%" height="15" fill="rgb(210,24,26)" fg:x="5280" fg:w="1"/><text x="64.3121%" y="383.50"></text></g><g><title>security_vm_enough_memory_mm (1 samples, 0.01%)</title><rect x="64.0743%" y="469" width="0.0121%" height="15" fill="rgb(234,53,53)" fg:x="5281" fg:w="1"/><text x="64.3243%" y="479.50"></text></g><g><title>__vm_enough_memory (1 samples, 0.01%)</title><rect x="64.0743%" y="453" width="0.0121%" height="15" fill="rgb(208,108,28)" fg:x="5281" fg:w="1"/><text x="64.3243%" y="463.50"></text></g><g><title>can_vma_merge_after (1 samples, 0.01%)</title><rect x="64.0864%" y="453" width="0.0121%" height="15" fill="rgb(227,143,7)" fg:x="5282" fg:w="1"/><text x="64.3364%" y="463.50"></text></g><g><title>__memset (1 samples, 0.01%)</title><rect x="64.1107%" y="421" width="0.0121%" height="15" fill="rgb(238,189,38)" fg:x="5284" fg:w="1"/><text x="64.3607%" y="431.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.01%)</title><rect x="64.1228%" y="421" width="0.0121%" height="15" fill="rgb(222,69,15)" fg:x="5285" fg:w="1"/><text x="64.3728%" y="431.50"></text></g><g><title>mas_preallocate (10 samples, 0.12%)</title><rect x="64.0985%" y="453" width="0.1213%" height="15" fill="rgb(213,169,7)" fg:x="5283" fg:w="10"/><text x="64.3485%" y="463.50"></text></g><g><title>mas_alloc_nodes (10 samples, 0.12%)</title><rect x="64.0985%" y="437" width="0.1213%" height="15" fill="rgb(251,219,4)" fg:x="5283" fg:w="10"/><text x="64.3485%" y="447.50"></text></g><g><title>kmem_cache_alloc_bulk (7 samples, 0.08%)</title><rect x="64.1349%" y="421" width="0.0849%" height="15" fill="rgb(241,55,40)" fg:x="5286" fg:w="7"/><text x="64.3849%" y="431.50"></text></g><g><title>__kmem_cache_alloc_bulk (6 samples, 0.07%)</title><rect x="64.1471%" y="405" width="0.0728%" height="15" fill="rgb(243,57,30)" fg:x="5287" fg:w="6"/><text x="64.3971%" y="415.50"></text></g><g><title>___slab_alloc (2 samples, 0.02%)</title><rect x="64.1956%" y="389" width="0.0243%" height="15" fill="rgb(234,50,30)" fg:x="5291" fg:w="2"/><text x="64.4456%" y="399.50"></text></g><g><title>__slab_free (1 samples, 0.01%)</title><rect x="64.2320%" y="405" width="0.0121%" height="15" fill="rgb(239,23,42)" fg:x="5294" fg:w="1"/><text x="64.4820%" y="415.50"></text></g><g><title>kmem_cache_free (3 samples, 0.04%)</title><rect x="64.2198%" y="421" width="0.0364%" height="15" fill="rgb(217,38,19)" fg:x="5293" fg:w="3"/><text x="64.4698%" y="431.50"></text></g><g><title>cache_from_obj (1 samples, 0.01%)</title><rect x="64.2441%" y="405" width="0.0121%" height="15" fill="rgb(215,179,16)" fg:x="5295" fg:w="1"/><text x="64.4941%" y="415.50"></text></g><g><title>__slab_free (1 samples, 0.01%)</title><rect x="64.2562%" y="389" width="0.0121%" height="15" fill="rgb(254,21,37)" fg:x="5296" fg:w="1"/><text x="64.5062%" y="399.50"></text></g><g><title>put_cpu_partial (1 samples, 0.01%)</title><rect x="64.2562%" y="373" width="0.0121%" height="15" fill="rgb(219,207,48)" fg:x="5296" fg:w="1"/><text x="64.5062%" y="383.50"></text></g><g><title>build_detached_freelist (2 samples, 0.02%)</title><rect x="64.2684%" y="389" width="0.0243%" height="15" fill="rgb(227,225,41)" fg:x="5297" fg:w="2"/><text x="64.5184%" y="399.50"></text></g><g><title>mas_destroy (7 samples, 0.08%)</title><rect x="64.2198%" y="437" width="0.0849%" height="15" fill="rgb(223,130,1)" fg:x="5293" fg:w="7"/><text x="64.4698%" y="447.50"></text></g><g><title>kmem_cache_free_bulk (4 samples, 0.05%)</title><rect x="64.2562%" y="421" width="0.0485%" height="15" fill="rgb(249,54,42)" fg:x="5296" fg:w="4"/><text x="64.5062%" y="431.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (4 samples, 0.05%)</title><rect x="64.2562%" y="405" width="0.0485%" height="15" fill="rgb(248,69,25)" fg:x="5296" fg:w="4"/><text x="64.5062%" y="415.50"></text></g><g><title>cache_from_obj (1 samples, 0.01%)</title><rect x="64.2926%" y="389" width="0.0121%" height="15" fill="rgb(234,21,32)" fg:x="5299" fg:w="1"/><text x="64.5426%" y="399.50"></text></g><g><title>mas_store_prealloc (8 samples, 0.10%)</title><rect x="64.2198%" y="453" width="0.0971%" height="15" fill="rgb(252,136,6)" fg:x="5293" fg:w="8"/><text x="64.4698%" y="463.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="64.3048%" y="437" width="0.0121%" height="15" fill="rgb(245,87,12)" fg:x="5300" fg:w="1"/><text x="64.5548%" y="447.50"></text></g><g><title>mas_wr_spanning_store.isra.0 (1 samples, 0.01%)</title><rect x="64.3048%" y="421" width="0.0121%" height="15" fill="rgb(208,12,15)" fg:x="5300" fg:w="1"/><text x="64.5548%" y="431.50"></text></g><g><title>mas_spanning_rebalance.isra.0 (1 samples, 0.01%)</title><rect x="64.3048%" y="405" width="0.0121%" height="15" fill="rgb(250,98,2)" fg:x="5300" fg:w="1"/><text x="64.5548%" y="415.50"></text></g><g><title>mas_wmb_replace (1 samples, 0.01%)</title><rect x="64.3048%" y="389" width="0.0121%" height="15" fill="rgb(205,213,15)" fg:x="5300" fg:w="1"/><text x="64.5548%" y="399.50"></text></g><g><title>call_rcu (1 samples, 0.01%)</title><rect x="64.3048%" y="373" width="0.0121%" height="15" fill="rgb(248,192,44)" fg:x="5300" fg:w="1"/><text x="64.5548%" y="383.50"></text></g><g><title>__call_rcu_common.constprop.0 (1 samples, 0.01%)</title><rect x="64.3048%" y="357" width="0.0121%" height="15" fill="rgb(221,89,17)" fg:x="5300" fg:w="1"/><text x="64.5548%" y="367.50"></text></g><g><title>rcu_segcblist_enqueue (1 samples, 0.01%)</title><rect x="64.3048%" y="341" width="0.0121%" height="15" fill="rgb(209,55,3)" fg:x="5300" fg:w="1"/><text x="64.5548%" y="351.50"></text></g><g><title>vma_adjust_trans_huge (2 samples, 0.02%)</title><rect x="64.3169%" y="453" width="0.0243%" height="15" fill="rgb(247,23,45)" fg:x="5301" fg:w="2"/><text x="64.5669%" y="463.50"></text></g><g><title>mprotect_fixup (51 samples, 0.62%)</title><rect x="63.7588%" y="485" width="0.6188%" height="15" fill="rgb(235,152,23)" fg:x="5255" fg:w="51"/><text x="64.0088%" y="495.50"></text></g><g><title>vma_merge (24 samples, 0.29%)</title><rect x="64.0864%" y="469" width="0.2912%" height="15" fill="rgb(244,63,13)" fg:x="5282" fg:w="24"/><text x="64.3364%" y="479.50"></text></g><g><title>vma_prepare (3 samples, 0.04%)</title><rect x="64.3412%" y="453" width="0.0364%" height="15" fill="rgb(227,30,37)" fg:x="5303" fg:w="3"/><text x="64.5912%" y="463.50"></text></g><g><title>up_write (1 samples, 0.01%)</title><rect x="64.3654%" y="437" width="0.0121%" height="15" fill="rgb(224,49,42)" fg:x="5305" fg:w="1"/><text x="64.6154%" y="447.50"></text></g><g><title>security_file_mprotect (1 samples, 0.01%)</title><rect x="64.3776%" y="485" width="0.0121%" height="15" fill="rgb(218,129,5)" fg:x="5306" fg:w="1"/><text x="64.6276%" y="495.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="64.3897%" y="485" width="0.0121%" height="15" fill="rgb(240,199,54)" fg:x="5307" fg:w="1"/><text x="64.6397%" y="495.50"></text></g><g><title>tlb_gather_mmu (2 samples, 0.02%)</title><rect x="64.4018%" y="485" width="0.0243%" height="15" fill="rgb(234,31,13)" fg:x="5308" fg:w="2"/><text x="64.6518%" y="495.50"></text></g><g><title>wake_q_add (2 samples, 0.02%)</title><rect x="64.4261%" y="453" width="0.0243%" height="15" fill="rgb(219,73,54)" fg:x="5310" fg:w="2"/><text x="64.6761%" y="463.50"></text></g><g><title>__x64_sys_mprotect (655 samples, 7.95%)</title><rect x="56.5154%" y="517" width="7.9471%" height="15" fill="rgb(251,162,10)" fg:x="4658" fg:w="655"/><text x="56.7654%" y="527.50">__x64_sys_m..</text></g><g><title>do_mprotect_pkey (655 samples, 7.95%)</title><rect x="56.5154%" y="501" width="7.9471%" height="15" fill="rgb(240,138,47)" fg:x="4658" fg:w="655"/><text x="56.7654%" y="511.50">do_mprotect..</text></g><g><title>up_write (3 samples, 0.04%)</title><rect x="64.4261%" y="485" width="0.0364%" height="15" fill="rgb(216,138,26)" fg:x="5310" fg:w="3"/><text x="64.6761%" y="495.50"></text></g><g><title>rwsem_wake.isra.0 (3 samples, 0.04%)</title><rect x="64.4261%" y="469" width="0.0364%" height="15" fill="rgb(243,17,35)" fg:x="5310" fg:w="3"/><text x="64.6761%" y="479.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="64.4504%" y="453" width="0.0121%" height="15" fill="rgb(241,60,18)" fg:x="5312" fg:w="1"/><text x="64.7004%" y="463.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="64.4504%" y="437" width="0.0121%" height="15" fill="rgb(234,2,44)" fg:x="5312" fg:w="1"/><text x="64.7004%" y="447.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="64.4625%" y="485" width="0.0607%" height="15" fill="rgb(225,225,33)" fg:x="5313" fg:w="5"/><text x="64.7125%" y="495.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="64.4625%" y="469" width="0.0607%" height="15" fill="rgb(234,50,31)" fg:x="5313" fg:w="5"/><text x="64.7125%" y="479.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="64.4625%" y="453" width="0.0607%" height="15" fill="rgb(249,6,25)" fg:x="5313" fg:w="5"/><text x="64.7125%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="64.4625%" y="437" width="0.0607%" height="15" fill="rgb(241,5,17)" fg:x="5313" fg:w="5"/><text x="64.7125%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="64.4625%" y="421" width="0.0607%" height="15" fill="rgb(207,116,10)" fg:x="5313" fg:w="5"/><text x="64.7125%" y="431.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="64.4625%" y="405" width="0.0607%" height="15" fill="rgb(222,128,18)" fg:x="5313" fg:w="5"/><text x="64.7125%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (661 samples, 8.02%)</title><rect x="56.5154%" y="549" width="8.0199%" height="15" fill="rgb(229,109,25)" fg:x="4658" fg:w="661"/><text x="56.7654%" y="559.50">entry_SYSCA..</text></g><g><title>do_syscall_64 (661 samples, 8.02%)</title><rect x="56.5154%" y="533" width="8.0199%" height="15" fill="rgb(222,102,25)" fg:x="4658" fg:w="661"/><text x="56.7654%" y="543.50">do_syscall_..</text></g><g><title>syscall_exit_to_user_mode (6 samples, 0.07%)</title><rect x="64.4625%" y="517" width="0.0728%" height="15" fill="rgb(239,211,5)" fg:x="5313" fg:w="6"/><text x="64.7125%" y="527.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.07%)</title><rect x="64.4625%" y="501" width="0.0728%" height="15" fill="rgb(223,136,26)" fg:x="5313" fg:w="6"/><text x="64.7125%" y="511.50"></text></g><g><title>switch_fpu_return (1 samples, 0.01%)</title><rect x="64.5232%" y="485" width="0.0121%" height="15" fill="rgb(227,30,15)" fg:x="5318" fg:w="1"/><text x="64.7732%" y="495.50"></text></g><g><title>grow_heap (663 samples, 8.04%)</title><rect x="56.5033%" y="581" width="8.0442%" height="15" fill="rgb(247,76,4)" fg:x="4657" fg:w="663"/><text x="56.7533%" y="591.50">grow_heap</text></g><g><title>__GI_mprotect (663 samples, 8.04%)</title><rect x="56.5033%" y="565" width="8.0442%" height="15" fill="rgb(245,38,48)" fg:x="4657" fg:w="663"/><text x="56.7533%" y="575.50">__GI_mprote..</text></g><g><title>syscall_return_via_sysret (1 samples, 0.01%)</title><rect x="64.5353%" y="549" width="0.0121%" height="15" fill="rgb(210,220,14)" fg:x="5319" fg:w="1"/><text x="64.7853%" y="559.50"></text></g><g><title>_int_malloc (740 samples, 8.98%)</title><rect x="55.6054%" y="613" width="8.9784%" height="15" fill="rgb(224,60,51)" fg:x="4583" fg:w="740"/><text x="55.8554%" y="623.50">_int_malloc</text></g><g><title>sysmalloc (720 samples, 8.74%)</title><rect x="55.8481%" y="597" width="8.7357%" height="15" fill="rgb(212,133,49)" fg:x="4603" fg:w="720"/><text x="56.0981%" y="607.50">sysmalloc</text></g><g><title>sync_regs (3 samples, 0.04%)</title><rect x="64.5474%" y="581" width="0.0364%" height="15" fill="rgb(231,39,22)" fg:x="5320" fg:w="3"/><text x="64.7974%" y="591.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="64.5838%" y="613" width="0.0121%" height="15" fill="rgb(236,173,22)" fg:x="5323" fg:w="1"/><text x="64.8338%" y="623.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="64.5838%" y="597" width="0.0121%" height="15" fill="rgb(210,70,0)" fg:x="5323" fg:w="1"/><text x="64.8338%" y="607.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="64.5838%" y="581" width="0.0121%" height="15" fill="rgb(215,170,11)" fg:x="5323" fg:w="1"/><text x="64.8338%" y="591.50"></text></g><g><title>__GI___libc_malloc (743 samples, 9.01%)</title><rect x="55.5933%" y="629" width="9.0148%" height="15" fill="rgb(220,154,28)" fg:x="4582" fg:w="743"/><text x="55.8433%" y="639.50">__GI___libc_m..</text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="64.5960%" y="613" width="0.0121%" height="15" fill="rgb(240,160,41)" fg:x="5324" fg:w="1"/><text x="64.8460%" y="623.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (766 samples, 9.29%)</title><rect x="55.3385%" y="789" width="9.2939%" height="15" fill="rgb(243,215,41)" fg:x="4561" fg:w="766"/><text x="55.5885%" y="799.50">&lt;revm_primiti..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (759 samples, 9.21%)</title><rect x="55.4234%" y="773" width="9.2089%" height="15" fill="rgb(214,208,31)" fg:x="4568" fg:w="759"/><text x="55.6734%" y="783.50">&lt;std::collect..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (759 samples, 9.21%)</title><rect x="55.4234%" y="757" width="9.2089%" height="15" fill="rgb(247,57,22)" fg:x="4568" fg:w="759"/><text x="55.6734%" y="767.50">&lt;hashbrown::m..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (755 samples, 9.16%)</title><rect x="55.4720%" y="741" width="9.1604%" height="15" fill="rgb(228,73,52)" fg:x="4572" fg:w="755"/><text x="55.7220%" y="751.50">&lt;hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (746 samples, 9.05%)</title><rect x="55.5812%" y="725" width="9.0512%" height="15" fill="rgb(252,60,9)" fg:x="4581" fg:w="746"/><text x="55.8312%" y="735.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (746 samples, 9.05%)</title><rect x="55.5812%" y="709" width="9.0512%" height="15" fill="rgb(233,9,51)" fg:x="4581" fg:w="746"/><text x="55.8312%" y="719.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (745 samples, 9.04%)</title><rect x="55.5933%" y="693" width="9.0391%" height="15" fill="rgb(223,67,14)" fg:x="4582" fg:w="745"/><text x="55.8433%" y="703.50">hashbrown::ra..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (745 samples, 9.04%)</title><rect x="55.5933%" y="677" width="9.0391%" height="15" fill="rgb(222,86,2)" fg:x="4582" fg:w="745"/><text x="55.8433%" y="687.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (745 samples, 9.04%)</title><rect x="55.5933%" y="661" width="9.0391%" height="15" fill="rgb(243,58,54)" fg:x="4582" fg:w="745"/><text x="55.8433%" y="671.50">alloc::alloc:..</text></g><g><title>alloc::alloc::alloc (745 samples, 9.04%)</title><rect x="55.5933%" y="645" width="9.0391%" height="15" fill="rgb(210,200,39)" fg:x="4582" fg:w="745"/><text x="55.8433%" y="655.50">alloc::alloc:..</text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="64.6081%" y="629" width="0.0243%" height="15" fill="rgb(238,135,9)" fg:x="5325" fg:w="2"/><text x="64.8581%" y="639.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="64.6081%" y="613" width="0.0243%" height="15" fill="rgb(232,179,7)" fg:x="5325" fg:w="2"/><text x="64.8581%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.12%)</title><rect x="64.6324%" y="789" width="0.1213%" height="15" fill="rgb(245,65,41)" fg:x="5327" fg:w="10"/><text x="64.8824%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.01%)</title><rect x="64.7537%" y="661" width="0.0121%" height="15" fill="rgb(227,43,8)" fg:x="5337" fg:w="1"/><text x="65.0037%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="64.7537%" y="645" width="0.0121%" height="15" fill="rgb(235,91,14)" fg:x="5337" fg:w="1"/><text x="65.0037%" y="655.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="64.7658%" y="613" width="0.0121%" height="15" fill="rgb(235,219,31)" fg:x="5338" fg:w="1"/><text x="65.0158%" y="623.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="64.7658%" y="597" width="0.0121%" height="15" fill="rgb(227,121,25)" fg:x="5338" fg:w="1"/><text x="65.0158%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.04%)</title><rect x="64.7537%" y="725" width="0.0364%" height="15" fill="rgb(254,129,24)" fg:x="5337" fg:w="3"/><text x="65.0037%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.04%)</title><rect x="64.7537%" y="709" width="0.0364%" height="15" fill="rgb(226,144,49)" fg:x="5337" fg:w="3"/><text x="65.0037%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="64.7537%" y="693" width="0.0364%" height="15" fill="rgb(214,187,32)" fg:x="5337" fg:w="3"/><text x="65.0037%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="64.7537%" y="677" width="0.0364%" height="15" fill="rgb(243,129,46)" fg:x="5337" fg:w="3"/><text x="65.0037%" y="687.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (2 samples, 0.02%)</title><rect x="64.7658%" y="661" width="0.0243%" height="15" fill="rgb(221,185,35)" fg:x="5338" fg:w="2"/><text x="65.0158%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="64.7658%" y="645" width="0.0243%" height="15" fill="rgb(205,0,32)" fg:x="5338" fg:w="2"/><text x="65.0158%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (2 samples, 0.02%)</title><rect x="64.7658%" y="629" width="0.0243%" height="15" fill="rgb(229,179,12)" fg:x="5338" fg:w="2"/><text x="65.0158%" y="639.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="64.7780%" y="613" width="0.0121%" height="15" fill="rgb(252,107,19)" fg:x="5339" fg:w="1"/><text x="65.0280%" y="623.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="64.7780%" y="597" width="0.0121%" height="15" fill="rgb(220,95,27)" fg:x="5339" fg:w="1"/><text x="65.0280%" y="607.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="64.8386%" y="581" width="0.0364%" height="15" fill="rgb(240,113,40)" fg:x="5344" fg:w="3"/><text x="65.0886%" y="591.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="64.8386%" y="565" width="0.0364%" height="15" fill="rgb(208,4,43)" fg:x="5344" fg:w="3"/><text x="65.0886%" y="575.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="64.8386%" y="549" width="0.0364%" height="15" fill="rgb(247,189,30)" fg:x="5344" fg:w="3"/><text x="65.0886%" y="559.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="64.8386%" y="533" width="0.0364%" height="15" fill="rgb(231,157,17)" fg:x="5344" fg:w="3"/><text x="65.0886%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="64.8386%" y="517" width="0.0364%" height="15" fill="rgb(224,139,6)" fg:x="5344" fg:w="3"/><text x="65.0886%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.04%)</title><rect x="64.8386%" y="501" width="0.0364%" height="15" fill="rgb(223,83,16)" fg:x="5344" fg:w="3"/><text x="65.0886%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.04%)</title><rect x="64.8386%" y="485" width="0.0364%" height="15" fill="rgb(232,211,20)" fg:x="5344" fg:w="3"/><text x="65.0886%" y="495.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="64.8265%" y="597" width="0.0607%" height="15" fill="rgb(225,203,35)" fg:x="5343" fg:w="5"/><text x="65.0765%" y="607.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="64.8750%" y="581" width="0.0121%" height="15" fill="rgb(215,211,44)" fg:x="5347" fg:w="1"/><text x="65.1250%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="64.8872%" y="549" width="0.0121%" height="15" fill="rgb(248,213,26)" fg:x="5348" fg:w="1"/><text x="65.1372%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.12%)</title><rect x="64.7901%" y="693" width="0.1213%" height="15" fill="rgb(214,23,52)" fg:x="5340" fg:w="10"/><text x="65.0401%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (10 samples, 0.12%)</title><rect x="64.7901%" y="677" width="0.1213%" height="15" fill="rgb(225,173,50)" fg:x="5340" fg:w="10"/><text x="65.0401%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.12%)</title><rect x="64.7901%" y="661" width="0.1213%" height="15" fill="rgb(206,150,22)" fg:x="5340" fg:w="10"/><text x="65.0401%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.11%)</title><rect x="64.8022%" y="645" width="0.1092%" height="15" fill="rgb(239,64,23)" fg:x="5341" fg:w="9"/><text x="65.0522%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9 samples, 0.11%)</title><rect x="64.8022%" y="629" width="0.1092%" height="15" fill="rgb(242,50,38)" fg:x="5341" fg:w="9"/><text x="65.0522%" y="639.50"></text></g><g><title>block_stm_revm::vm::Vm::execute::_{{closure}} (9 samples, 0.11%)</title><rect x="64.8022%" y="613" width="0.1092%" height="15" fill="rgb(217,91,15)" fg:x="5341" fg:w="9"/><text x="65.0522%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="64.8872%" y="597" width="0.0243%" height="15" fill="rgb(230,172,6)" fg:x="5348" fg:w="2"/><text x="65.1372%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="64.8872%" y="581" width="0.0243%" height="15" fill="rgb(221,98,26)" fg:x="5348" fg:w="2"/><text x="65.1372%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="64.8872%" y="565" width="0.0243%" height="15" fill="rgb(227,210,45)" fg:x="5348" fg:w="2"/><text x="65.1372%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="64.8993%" y="549" width="0.0121%" height="15" fill="rgb(206,8,30)" fg:x="5349" fg:w="1"/><text x="65.1493%" y="559.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="64.8993%" y="533" width="0.0121%" height="15" fill="rgb(241,219,17)" fg:x="5349" fg:w="1"/><text x="65.1493%" y="543.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="64.8993%" y="517" width="0.0121%" height="15" fill="rgb(247,121,29)" fg:x="5349" fg:w="1"/><text x="65.1493%" y="527.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="64.8993%" y="501" width="0.0121%" height="15" fill="rgb(219,169,49)" fg:x="5349" fg:w="1"/><text x="65.1493%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.15%)</title><rect x="64.7901%" y="725" width="0.1456%" height="15" fill="rgb(253,49,49)" fg:x="5340" fg:w="12"/><text x="65.0401%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.15%)</title><rect x="64.7901%" y="709" width="0.1456%" height="15" fill="rgb(217,178,3)" fg:x="5340" fg:w="12"/><text x="65.0401%" y="719.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (2 samples, 0.02%)</title><rect x="64.9114%" y="693" width="0.0243%" height="15" fill="rgb(234,73,37)" fg:x="5350" fg:w="2"/><text x="65.1614%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="64.9357%" y="725" width="0.0121%" height="15" fill="rgb(250,98,22)" fg:x="5352" fg:w="1"/><text x="65.1857%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="64.9478%" y="613" width="0.0121%" height="15" fill="rgb(220,108,37)" fg:x="5353" fg:w="1"/><text x="65.1978%" y="623.50"></text></g><g><title>tcache_get (1 samples, 0.01%)</title><rect x="64.9478%" y="597" width="0.0121%" height="15" fill="rgb(225,168,10)" fg:x="5353" fg:w="1"/><text x="65.1978%" y="607.50"></text></g><g><title>tcache_get_n (1 samples, 0.01%)</title><rect x="64.9478%" y="581" width="0.0121%" height="15" fill="rgb(247,215,21)" fg:x="5353" fg:w="1"/><text x="65.1978%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="64.9478%" y="725" width="0.0243%" height="15" fill="rgb(253,189,31)" fg:x="5353" fg:w="2"/><text x="65.1978%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="64.9478%" y="709" width="0.0243%" height="15" fill="rgb(241,54,22)" fg:x="5353" fg:w="2"/><text x="65.1978%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="64.9478%" y="693" width="0.0243%" height="15" fill="rgb(211,87,4)" fg:x="5353" fg:w="2"/><text x="65.1978%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="64.9478%" y="677" width="0.0243%" height="15" fill="rgb(245,112,24)" fg:x="5353" fg:w="2"/><text x="65.1978%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="64.9478%" y="661" width="0.0243%" height="15" fill="rgb(235,190,41)" fg:x="5353" fg:w="2"/><text x="65.1978%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="64.9478%" y="645" width="0.0243%" height="15" fill="rgb(214,89,8)" fg:x="5353" fg:w="2"/><text x="65.1978%" y="655.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="64.9478%" y="629" width="0.0243%" height="15" fill="rgb(249,155,35)" fg:x="5353" fg:w="2"/><text x="65.1978%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="64.9600%" y="613" width="0.0121%" height="15" fill="rgb(249,88,26)" fg:x="5354" fg:w="1"/><text x="65.2100%" y="623.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="64.9600%" y="597" width="0.0121%" height="15" fill="rgb(232,56,8)" fg:x="5354" fg:w="1"/><text x="65.2100%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (19 samples, 0.23%)</title><rect x="64.7537%" y="789" width="0.2305%" height="15" fill="rgb(240,95,3)" fg:x="5337" fg:w="19"/><text x="65.0037%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (19 samples, 0.23%)</title><rect x="64.7537%" y="773" width="0.2305%" height="15" fill="rgb(222,44,28)" fg:x="5337" fg:w="19"/><text x="65.0037%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.23%)</title><rect x="64.7537%" y="757" width="0.2305%" height="15" fill="rgb(234,16,30)" fg:x="5337" fg:w="19"/><text x="65.0037%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 0.23%)</title><rect x="64.7537%" y="741" width="0.2305%" height="15" fill="rgb(223,26,17)" fg:x="5337" fg:w="19"/><text x="65.0037%" y="751.50"></text></g><g><title>core::cmp::max (1 samples, 0.01%)</title><rect x="64.9721%" y="725" width="0.0121%" height="15" fill="rgb(239,187,47)" fg:x="5355" fg:w="1"/><text x="65.2221%" y="735.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.01%)</title><rect x="64.9721%" y="709" width="0.0121%" height="15" fill="rgb(247,102,50)" fg:x="5355" fg:w="1"/><text x="65.2221%" y="719.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.01%)</title><rect x="64.9721%" y="693" width="0.0121%" height="15" fill="rgb(231,216,22)" fg:x="5355" fg:w="1"/><text x="65.2221%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="64.9842%" y="757" width="0.0121%" height="15" fill="rgb(216,201,26)" fg:x="5356" fg:w="1"/><text x="65.2342%" y="767.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="64.9842%" y="741" width="0.0121%" height="15" fill="rgb(214,186,23)" fg:x="5356" fg:w="1"/><text x="65.2342%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="64.9842%" y="725" width="0.0121%" height="15" fill="rgb(235,184,4)" fg:x="5356" fg:w="1"/><text x="65.2342%" y="735.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="64.9842%" y="709" width="0.0121%" height="15" fill="rgb(244,46,17)" fg:x="5356" fg:w="1"/><text x="65.2342%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="64.9842%" y="693" width="0.0121%" height="15" fill="rgb(248,74,46)" fg:x="5356" fg:w="1"/><text x="65.2342%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="64.9842%" y="677" width="0.0121%" height="15" fill="rgb(243,79,5)" fg:x="5356" fg:w="1"/><text x="65.2342%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="64.9964%" y="613" width="0.0121%" height="15" fill="rgb(213,148,1)" fg:x="5357" fg:w="1"/><text x="65.2464%" y="623.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="64.9964%" y="597" width="0.0121%" height="15" fill="rgb(221,30,0)" fg:x="5357" fg:w="1"/><text x="65.2464%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.01%)</title><rect x="64.9964%" y="581" width="0.0121%" height="15" fill="rgb(207,85,29)" fg:x="5357" fg:w="1"/><text x="65.2464%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="64.9964%" y="565" width="0.0121%" height="15" fill="rgb(239,31,46)" fg:x="5357" fg:w="1"/><text x="65.2464%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.04%)</title><rect x="64.9964%" y="725" width="0.0364%" height="15" fill="rgb(219,6,1)" fg:x="5357" fg:w="3"/><text x="65.2464%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="64.9964%" y="709" width="0.0364%" height="15" fill="rgb(229,90,29)" fg:x="5357" fg:w="3"/><text x="65.2464%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,std::hash::random::RandomState&gt;&gt; (3 samples, 0.04%)</title><rect x="64.9964%" y="693" width="0.0364%" height="15" fill="rgb(242,201,42)" fg:x="5357" fg:w="3"/><text x="65.2464%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt;&gt; (3 samples, 0.04%)</title><rect x="64.9964%" y="677" width="0.0364%" height="15" fill="rgb(243,80,54)" fg:x="5357" fg:w="3"/><text x="65.2464%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="64.9964%" y="661" width="0.0364%" height="15" fill="rgb(223,166,15)" fg:x="5357" fg:w="3"/><text x="65.2464%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.04%)</title><rect x="64.9964%" y="645" width="0.0364%" height="15" fill="rgb(238,78,27)" fg:x="5357" fg:w="3"/><text x="65.2464%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.04%)</title><rect x="64.9964%" y="629" width="0.0364%" height="15" fill="rgb(235,28,43)" fg:x="5357" fg:w="3"/><text x="65.2464%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.02%)</title><rect x="65.0085%" y="613" width="0.0243%" height="15" fill="rgb(240,210,28)" fg:x="5358" fg:w="2"/><text x="65.2585%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.02%)</title><rect x="65.0085%" y="597" width="0.0243%" height="15" fill="rgb(253,6,46)" fg:x="5358" fg:w="2"/><text x="65.2585%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt; (2 samples, 0.02%)</title><rect x="65.0085%" y="581" width="0.0243%" height="15" fill="rgb(250,159,47)" fg:x="5358" fg:w="2"/><text x="65.2585%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (2 samples, 0.02%)</title><rect x="65.0085%" y="565" width="0.0243%" height="15" fill="rgb(216,139,2)" fg:x="5358" fg:w="2"/><text x="65.2585%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (1 samples, 0.01%)</title><rect x="65.0328%" y="709" width="0.0121%" height="15" fill="rgb(221,124,44)" fg:x="5360" fg:w="1"/><text x="65.2828%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.0328%" y="693" width="0.0121%" height="15" fill="rgb(205,37,22)" fg:x="5360" fg:w="1"/><text x="65.2828%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="65.0328%" y="677" width="0.0121%" height="15" fill="rgb(250,55,8)" fg:x="5360" fg:w="1"/><text x="65.2828%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="65.0328%" y="661" width="0.0121%" height="15" fill="rgb(215,83,48)" fg:x="5360" fg:w="1"/><text x="65.2828%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="65.0328%" y="645" width="0.0121%" height="15" fill="rgb(253,2,32)" fg:x="5360" fg:w="1"/><text x="65.2828%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="65.0328%" y="629" width="0.0121%" height="15" fill="rgb(236,67,28)" fg:x="5360" fg:w="1"/><text x="65.2828%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (6 samples, 0.07%)</title><rect x="64.9964%" y="757" width="0.0728%" height="15" fill="rgb(252,55,15)" fg:x="5357" fg:w="6"/><text x="65.2464%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (6 samples, 0.07%)</title><rect x="64.9964%" y="741" width="0.0728%" height="15" fill="rgb(243,173,17)" fg:x="5357" fg:w="6"/><text x="65.2464%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.04%)</title><rect x="65.0328%" y="725" width="0.0364%" height="15" fill="rgb(215,212,13)" fg:x="5360" fg:w="3"/><text x="65.2828%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::journaled_state::JournaledState&gt; (2 samples, 0.02%)</title><rect x="65.0449%" y="709" width="0.0243%" height="15" fill="rgb(253,176,6)" fg:x="5361" fg:w="2"/><text x="65.2949%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="65.0570%" y="693" width="0.0121%" height="15" fill="rgb(236,105,26)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="65.0570%" y="677" width="0.0121%" height="15" fill="rgb(239,226,32)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.0570%" y="661" width="0.0121%" height="15" fill="rgb(236,104,51)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="65.0570%" y="645" width="0.0121%" height="15" fill="rgb(220,172,33)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="65.0570%" y="629" width="0.0121%" height="15" fill="rgb(224,182,25)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="65.0570%" y="613" width="0.0121%" height="15" fill="rgb(236,184,24)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="623.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="65.0570%" y="597" width="0.0121%" height="15" fill="rgb(241,221,14)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="607.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="65.0570%" y="581" width="0.0121%" height="15" fill="rgb(227,146,5)" fg:x="5362" fg:w="1"/><text x="65.3070%" y="591.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="65.1298%" y="565" width="0.0121%" height="15" fill="rgb(214,15,23)" fg:x="5368" fg:w="1"/><text x="65.3798%" y="575.50"></text></g><g><title>__GI___libc_free (10 samples, 0.12%)</title><rect x="65.0692%" y="741" width="0.1213%" height="15" fill="rgb(233,157,31)" fg:x="5363" fg:w="10"/><text x="65.3192%" y="751.50"></text></g><g><title>_int_free (9 samples, 0.11%)</title><rect x="65.0813%" y="725" width="0.1092%" height="15" fill="rgb(211,27,52)" fg:x="5364" fg:w="9"/><text x="65.3313%" y="735.50"></text></g><g><title>free_perturb (6 samples, 0.07%)</title><rect x="65.1177%" y="709" width="0.0728%" height="15" fill="rgb(212,223,15)" fg:x="5367" fg:w="6"/><text x="65.3677%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="65.1298%" y="693" width="0.0607%" height="15" fill="rgb(254,211,0)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="703.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="65.1298%" y="677" width="0.0607%" height="15" fill="rgb(205,43,38)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="687.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="65.1298%" y="661" width="0.0607%" height="15" fill="rgb(242,206,46)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="671.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="65.1298%" y="645" width="0.0607%" height="15" fill="rgb(220,221,12)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="655.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="65.1298%" y="629" width="0.0607%" height="15" fill="rgb(217,156,35)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="639.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="65.1298%" y="613" width="0.0607%" height="15" fill="rgb(207,181,49)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="623.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="65.1298%" y="597" width="0.0607%" height="15" fill="rgb(235,103,47)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="607.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="65.1298%" y="581" width="0.0607%" height="15" fill="rgb(222,63,28)" fg:x="5368" fg:w="5"/><text x="65.3798%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="65.1420%" y="565" width="0.0485%" height="15" fill="rgb(244,137,21)" fg:x="5369" fg:w="4"/><text x="65.3920%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="65.1420%" y="549" width="0.0485%" height="15" fill="rgb(228,35,27)" fg:x="5369" fg:w="4"/><text x="65.3920%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.04%)</title><rect x="65.1905%" y="741" width="0.0364%" height="15" fill="rgb(226,191,41)" fg:x="5373" fg:w="3"/><text x="65.4405%" y="751.50"></text></g><g><title>core::mem::drop (3 samples, 0.04%)</title><rect x="65.1905%" y="725" width="0.0364%" height="15" fill="rgb(210,154,3)" fg:x="5373" fg:w="3"/><text x="65.4405%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.04%)</title><rect x="65.1905%" y="709" width="0.0364%" height="15" fill="rgb(216,60,49)" fg:x="5373" fg:w="3"/><text x="65.4405%" y="719.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="65.1905%" y="693" width="0.0364%" height="15" fill="rgb(226,17,20)" fg:x="5373" fg:w="3"/><text x="65.4405%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="65.1905%" y="677" width="0.0364%" height="15" fill="rgb(206,115,35)" fg:x="5373" fg:w="3"/><text x="65.4405%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="65.1905%" y="661" width="0.0364%" height="15" fill="rgb(227,88,1)" fg:x="5373" fg:w="3"/><text x="65.4405%" y="671.50"></text></g><g><title>__GI___libc_free (7 samples, 0.08%)</title><rect x="65.2269%" y="693" width="0.0849%" height="15" fill="rgb(230,222,24)" fg:x="5376" fg:w="7"/><text x="65.4769%" y="703.50"></text></g><g><title>_int_free (7 samples, 0.08%)</title><rect x="65.2269%" y="677" width="0.0849%" height="15" fill="rgb(214,124,32)" fg:x="5376" fg:w="7"/><text x="65.4769%" y="687.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="65.2997%" y="661" width="0.0121%" height="15" fill="rgb(240,41,36)" fg:x="5382" fg:w="1"/><text x="65.5497%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="65.3118%" y="693" width="0.0243%" height="15" fill="rgb(221,17,52)" fg:x="5383" fg:w="2"/><text x="65.5618%" y="703.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="65.3118%" y="677" width="0.0243%" height="15" fill="rgb(252,70,16)" fg:x="5383" fg:w="2"/><text x="65.5618%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="65.3118%" y="661" width="0.0243%" height="15" fill="rgb(250,177,4)" fg:x="5383" fg:w="2"/><text x="65.5618%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="65.3118%" y="645" width="0.0243%" height="15" fill="rgb(240,188,47)" fg:x="5383" fg:w="2"/><text x="65.5618%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="65.3118%" y="629" width="0.0243%" height="15" fill="rgb(215,92,12)" fg:x="5383" fg:w="2"/><text x="65.5618%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="65.3118%" y="613" width="0.0243%" height="15" fill="rgb(242,110,29)" fg:x="5383" fg:w="2"/><text x="65.5618%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (10 samples, 0.12%)</title><rect x="65.2269%" y="725" width="0.1213%" height="15" fill="rgb(208,211,26)" fg:x="5376" fg:w="10"/><text x="65.4769%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="65.2269%" y="709" width="0.1213%" height="15" fill="rgb(244,147,6)" fg:x="5376" fg:w="10"/><text x="65.4769%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.3361%" y="693" width="0.0121%" height="15" fill="rgb(211,130,42)" fg:x="5385" fg:w="1"/><text x="65.5861%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.3361%" y="677" width="0.0121%" height="15" fill="rgb(220,63,1)" fg:x="5385" fg:w="1"/><text x="65.5861%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="65.3482%" y="725" width="0.0243%" height="15" fill="rgb(241,212,30)" fg:x="5386" fg:w="2"/><text x="65.5982%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="65.3482%" y="709" width="0.0243%" height="15" fill="rgb(233,153,17)" fg:x="5386" fg:w="2"/><text x="65.5982%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="65.3482%" y="693" width="0.0243%" height="15" fill="rgb(236,3,10)" fg:x="5386" fg:w="2"/><text x="65.5982%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="65.3482%" y="677" width="0.0243%" height="15" fill="rgb(232,41,21)" fg:x="5386" fg:w="2"/><text x="65.5982%" y="687.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="65.3967%" y="677" width="0.0243%" height="15" fill="rgb(206,63,51)" fg:x="5390" fg:w="2"/><text x="65.6467%" y="687.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="65.3846%" y="693" width="0.0485%" height="15" fill="rgb(250,214,3)" fg:x="5389" fg:w="4"/><text x="65.6346%" y="703.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="65.4210%" y="677" width="0.0121%" height="15" fill="rgb(254,89,27)" fg:x="5392" fg:w="1"/><text x="65.6710%" y="687.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="65.4210%" y="661" width="0.0121%" height="15" fill="rgb(249,41,14)" fg:x="5392" fg:w="1"/><text x="65.6710%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (18 samples, 0.22%)</title><rect x="65.2269%" y="741" width="0.2184%" height="15" fill="rgb(221,196,51)" fg:x="5376" fg:w="18"/><text x="65.4769%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="65.3725%" y="725" width="0.0728%" height="15" fill="rgb(214,116,26)" fg:x="5388" fg:w="6"/><text x="65.6225%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="65.3725%" y="709" width="0.0728%" height="15" fill="rgb(236,67,7)" fg:x="5388" fg:w="6"/><text x="65.6225%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="65.4331%" y="693" width="0.0121%" height="15" fill="rgb(253,179,32)" fg:x="5393" fg:w="1"/><text x="65.6831%" y="703.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="65.4331%" y="677" width="0.0121%" height="15" fill="rgb(218,33,15)" fg:x="5393" fg:w="1"/><text x="65.6831%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="65.4331%" y="661" width="0.0121%" height="15" fill="rgb(217,202,41)" fg:x="5393" fg:w="1"/><text x="65.6831%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.4331%" y="645" width="0.0121%" height="15" fill="rgb(234,133,5)" fg:x="5393" fg:w="1"/><text x="65.6831%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.4331%" y="629" width="0.0121%" height="15" fill="rgb(240,47,40)" fg:x="5393" fg:w="1"/><text x="65.6831%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.4331%" y="613" width="0.0121%" height="15" fill="rgb(234,166,26)" fg:x="5393" fg:w="1"/><text x="65.6831%" y="623.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="65.4453%" y="693" width="0.0243%" height="15" fill="rgb(244,125,51)" fg:x="5394" fg:w="2"/><text x="65.6953%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="65.4453%" y="677" width="0.0243%" height="15" fill="rgb(229,171,11)" fg:x="5394" fg:w="2"/><text x="65.6953%" y="687.50"></text></g><g><title>free_perturb (1 samples, 0.01%)</title><rect x="65.4574%" y="661" width="0.0121%" height="15" fill="rgb(224,38,45)" fg:x="5395" fg:w="1"/><text x="65.7074%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="65.4695%" y="693" width="0.0121%" height="15" fill="rgb(237,27,7)" fg:x="5396" fg:w="1"/><text x="65.7195%" y="703.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="65.4695%" y="677" width="0.0121%" height="15" fill="rgb(216,52,7)" fg:x="5396" fg:w="1"/><text x="65.7195%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="65.4695%" y="661" width="0.0121%" height="15" fill="rgb(243,11,11)" fg:x="5396" fg:w="1"/><text x="65.7195%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.4695%" y="645" width="0.0121%" height="15" fill="rgb(253,167,20)" fg:x="5396" fg:w="1"/><text x="65.7195%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.4695%" y="629" width="0.0121%" height="15" fill="rgb(215,207,5)" fg:x="5396" fg:w="1"/><text x="65.7195%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.4695%" y="613" width="0.0121%" height="15" fill="rgb(252,127,31)" fg:x="5396" fg:w="1"/><text x="65.7195%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="65.4453%" y="725" width="0.0607%" height="15" fill="rgb(209,106,27)" fg:x="5394" fg:w="5"/><text x="65.6953%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="65.4453%" y="709" width="0.0607%" height="15" fill="rgb(214,220,18)" fg:x="5394" fg:w="5"/><text x="65.6953%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="65.4817%" y="693" width="0.0243%" height="15" fill="rgb(237,89,12)" fg:x="5397" fg:w="2"/><text x="65.7317%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="65.4817%" y="677" width="0.0243%" height="15" fill="rgb(209,167,36)" fg:x="5397" fg:w="2"/><text x="65.7317%" y="687.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="65.5059%" y="693" width="0.0364%" height="15" fill="rgb(243,45,22)" fg:x="5399" fg:w="3"/><text x="65.7559%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="65.5181%" y="677" width="0.0243%" height="15" fill="rgb(239,2,46)" fg:x="5400" fg:w="2"/><text x="65.7681%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (9 samples, 0.11%)</title><rect x="65.4453%" y="741" width="0.1092%" height="15" fill="rgb(241,101,0)" fg:x="5394" fg:w="9"/><text x="65.6953%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="65.5059%" y="725" width="0.0485%" height="15" fill="rgb(244,34,31)" fg:x="5399" fg:w="4"/><text x="65.7559%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="65.5059%" y="709" width="0.0485%" height="15" fill="rgb(248,23,22)" fg:x="5399" fg:w="4"/><text x="65.7559%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.5423%" y="693" width="0.0121%" height="15" fill="rgb(218,27,48)" fg:x="5402" fg:w="1"/><text x="65.7923%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.5423%" y="677" width="0.0121%" height="15" fill="rgb(232,78,1)" fg:x="5402" fg:w="1"/><text x="65.7923%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="65.5545%" y="693" width="0.0121%" height="15" fill="rgb(233,169,12)" fg:x="5403" fg:w="1"/><text x="65.8045%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="65.5545%" y="677" width="0.0121%" height="15" fill="rgb(225,222,54)" fg:x="5403" fg:w="1"/><text x="65.8045%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="65.5545%" y="725" width="0.0243%" height="15" fill="rgb(245,126,29)" fg:x="5403" fg:w="2"/><text x="65.8045%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="65.5545%" y="709" width="0.0243%" height="15" fill="rgb(241,63,48)" fg:x="5403" fg:w="2"/><text x="65.8045%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.5666%" y="693" width="0.0121%" height="15" fill="rgb(235,126,38)" fg:x="5404" fg:w="1"/><text x="65.8166%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.5666%" y="677" width="0.0121%" height="15" fill="rgb(232,96,49)" fg:x="5404" fg:w="1"/><text x="65.8166%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="65.5787%" y="725" width="0.0243%" height="15" fill="rgb(211,146,40)" fg:x="5405" fg:w="2"/><text x="65.8287%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="65.5787%" y="709" width="0.0243%" height="15" fill="rgb(247,93,44)" fg:x="5405" fg:w="2"/><text x="65.8287%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="65.5787%" y="693" width="0.0243%" height="15" fill="rgb(251,41,49)" fg:x="5405" fg:w="2"/><text x="65.8287%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="65.5787%" y="677" width="0.0243%" height="15" fill="rgb(218,155,12)" fg:x="5405" fg:w="2"/><text x="65.8287%" y="687.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="65.6030%" y="693" width="0.0121%" height="15" fill="rgb(221,161,30)" fg:x="5407" fg:w="1"/><text x="65.8530%" y="703.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="65.6030%" y="677" width="0.0121%" height="15" fill="rgb(221,179,11)" fg:x="5407" fg:w="1"/><text x="65.8530%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="65.6151%" y="693" width="0.0121%" height="15" fill="rgb(224,170,48)" fg:x="5408" fg:w="1"/><text x="65.8651%" y="703.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="65.6151%" y="677" width="0.0121%" height="15" fill="rgb(223,117,5)" fg:x="5408" fg:w="1"/><text x="65.8651%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="65.6151%" y="661" width="0.0121%" height="15" fill="rgb(209,52,20)" fg:x="5408" fg:w="1"/><text x="65.8651%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.6151%" y="645" width="0.0121%" height="15" fill="rgb(209,19,41)" fg:x="5408" fg:w="1"/><text x="65.8651%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.6151%" y="629" width="0.0121%" height="15" fill="rgb(210,177,12)" fg:x="5408" fg:w="1"/><text x="65.8651%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.6151%" y="613" width="0.0121%" height="15" fill="rgb(211,159,37)" fg:x="5408" fg:w="1"/><text x="65.8651%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (47 samples, 0.57%)</title><rect x="65.0692%" y="757" width="0.5702%" height="15" fill="rgb(209,20,2)" fg:x="5363" fg:w="47"/><text x="65.3192%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (7 samples, 0.08%)</title><rect x="65.5545%" y="741" width="0.0849%" height="15" fill="rgb(244,3,46)" fg:x="5403" fg:w="7"/><text x="65.8045%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="65.6030%" y="725" width="0.0364%" height="15" fill="rgb(220,94,38)" fg:x="5407" fg:w="3"/><text x="65.8530%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="65.6030%" y="709" width="0.0364%" height="15" fill="rgb(253,14,31)" fg:x="5407" fg:w="3"/><text x="65.8530%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.6273%" y="693" width="0.0121%" height="15" fill="rgb(234,176,13)" fg:x="5409" fg:w="1"/><text x="65.8773%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.6273%" y="677" width="0.0121%" height="15" fill="rgb(218,62,25)" fg:x="5409" fg:w="1"/><text x="65.8773%" y="687.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="65.6394%" y="693" width="0.0243%" height="15" fill="rgb(216,124,40)" fg:x="5410" fg:w="2"/><text x="65.8894%" y="703.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="65.6394%" y="709" width="0.0364%" height="15" fill="rgb(228,170,12)" fg:x="5410" fg:w="3"/><text x="65.8894%" y="719.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="65.6637%" y="693" width="0.0121%" height="15" fill="rgb(231,226,5)" fg:x="5412" fg:w="1"/><text x="65.9137%" y="703.50"></text></g><g><title>arena_for_chunk (1 samples, 0.01%)</title><rect x="65.6637%" y="677" width="0.0121%" height="15" fill="rgb(237,122,22)" fg:x="5412" fg:w="1"/><text x="65.9137%" y="687.50"></text></g><g><title>heap_for_ptr (1 samples, 0.01%)</title><rect x="65.6637%" y="661" width="0.0121%" height="15" fill="rgb(209,185,25)" fg:x="5412" fg:w="1"/><text x="65.9137%" y="671.50"></text></g><g><title>heap_max_size (1 samples, 0.01%)</title><rect x="65.6637%" y="645" width="0.0121%" height="15" fill="rgb(228,200,32)" fg:x="5412" fg:w="1"/><text x="65.9137%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="65.6394%" y="741" width="0.0485%" height="15" fill="rgb(217,140,10)" fg:x="5410" fg:w="4"/><text x="65.8894%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="65.6394%" y="725" width="0.0485%" height="15" fill="rgb(253,17,24)" fg:x="5410" fg:w="4"/><text x="65.8894%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="65.6758%" y="709" width="0.0121%" height="15" fill="rgb(212,61,6)" fg:x="5413" fg:w="1"/><text x="65.9258%" y="719.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="65.6758%" y="693" width="0.0121%" height="15" fill="rgb(205,14,25)" fg:x="5413" fg:w="1"/><text x="65.9258%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="65.6758%" y="677" width="0.0121%" height="15" fill="rgb(232,69,41)" fg:x="5413" fg:w="1"/><text x="65.9258%" y="687.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.6758%" y="661" width="0.0121%" height="15" fill="rgb(241,106,47)" fg:x="5413" fg:w="1"/><text x="65.9258%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.6758%" y="645" width="0.0121%" height="15" fill="rgb(210,213,53)" fg:x="5413" fg:w="1"/><text x="65.9258%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.6758%" y="629" width="0.0121%" height="15" fill="rgb(253,175,27)" fg:x="5413" fg:w="1"/><text x="65.9258%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="65.6879%" y="741" width="0.0243%" height="15" fill="rgb(211,171,24)" fg:x="5414" fg:w="2"/><text x="65.9379%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="65.6879%" y="725" width="0.0243%" height="15" fill="rgb(229,80,7)" fg:x="5414" fg:w="2"/><text x="65.9379%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="65.6879%" y="709" width="0.0243%" height="15" fill="rgb(212,46,39)" fg:x="5414" fg:w="2"/><text x="65.9379%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="65.6879%" y="693" width="0.0243%" height="15" fill="rgb(240,80,45)" fg:x="5414" fg:w="2"/><text x="65.9379%" y="703.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="65.7122%" y="709" width="0.0121%" height="15" fill="rgb(253,177,40)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="65.7122%" y="693" width="0.0121%" height="15" fill="rgb(249,200,15)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="703.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="65.7122%" y="677" width="0.0121%" height="15" fill="rgb(217,78,26)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="687.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="65.7122%" y="661" width="0.0121%" height="15" fill="rgb(254,151,32)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="671.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.01%)</title><rect x="65.7122%" y="645" width="0.0121%" height="15" fill="rgb(226,165,27)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="655.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.01%)</title><rect x="65.7122%" y="629" width="0.0121%" height="15" fill="rgb(250,206,4)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="639.50"></text></g><g><title>__do_softirq (1 samples, 0.01%)</title><rect x="65.7122%" y="613" width="0.0121%" height="15" fill="rgb(231,229,27)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="623.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="65.7122%" y="597" width="0.0121%" height="15" fill="rgb(239,217,8)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="607.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="65.7122%" y="581" width="0.0121%" height="15" fill="rgb(225,204,27)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="591.50"></text></g><g><title>__update_blocked_fair (1 samples, 0.01%)</title><rect x="65.7122%" y="565" width="0.0121%" height="15" fill="rgb(230,56,32)" fg:x="5416" fg:w="1"/><text x="65.9622%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="65.7122%" y="741" width="0.0607%" height="15" fill="rgb(222,56,27)" fg:x="5416" fg:w="5"/><text x="65.9622%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="65.7122%" y="725" width="0.0607%" height="15" fill="rgb(253,108,27)" fg:x="5416" fg:w="5"/><text x="65.9622%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="65.7243%" y="709" width="0.0485%" height="15" fill="rgb(212,87,36)" fg:x="5417" fg:w="4"/><text x="65.9743%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="65.7243%" y="693" width="0.0485%" height="15" fill="rgb(247,82,36)" fg:x="5417" fg:w="4"/><text x="65.9743%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="65.7729%" y="741" width="0.0121%" height="15" fill="rgb(222,143,9)" fg:x="5421" fg:w="1"/><text x="66.0229%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.7729%" y="725" width="0.0121%" height="15" fill="rgb(238,162,48)" fg:x="5421" fg:w="1"/><text x="66.0229%" y="735.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="65.7729%" y="709" width="0.0121%" height="15" fill="rgb(221,59,43)" fg:x="5421" fg:w="1"/><text x="66.0229%" y="719.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="65.7850%" y="709" width="0.0485%" height="15" fill="rgb(205,166,41)" fg:x="5422" fg:w="4"/><text x="66.0350%" y="719.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="65.7971%" y="693" width="0.0364%" height="15" fill="rgb(241,186,40)" fg:x="5423" fg:w="3"/><text x="66.0471%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="65.8335%" y="709" width="0.0121%" height="15" fill="rgb(216,119,35)" fg:x="5426" fg:w="1"/><text x="66.0835%" y="719.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="65.8335%" y="693" width="0.0121%" height="15" fill="rgb(208,68,38)" fg:x="5426" fg:w="1"/><text x="66.0835%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="65.8335%" y="677" width="0.0121%" height="15" fill="rgb(217,113,1)" fg:x="5426" fg:w="1"/><text x="66.0835%" y="687.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="65.8335%" y="661" width="0.0121%" height="15" fill="rgb(242,153,3)" fg:x="5426" fg:w="1"/><text x="66.0835%" y="671.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.01%)</title><rect x="65.8335%" y="645" width="0.0121%" height="15" fill="rgb(229,76,35)" fg:x="5426" fg:w="1"/><text x="66.0835%" y="655.50"></text></g><g><title>core::mem::size_of_val_raw (1 samples, 0.01%)</title><rect x="65.8335%" y="629" width="0.0121%" height="15" fill="rgb(229,125,34)" fg:x="5426" fg:w="1"/><text x="66.0835%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="65.7850%" y="741" width="0.0971%" height="15" fill="rgb(238,179,36)" fg:x="5422" fg:w="8"/><text x="66.0350%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="65.7850%" y="725" width="0.0971%" height="15" fill="rgb(244,183,19)" fg:x="5422" fg:w="8"/><text x="66.0350%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="65.8457%" y="709" width="0.0364%" height="15" fill="rgb(216,85,49)" fg:x="5427" fg:w="3"/><text x="66.0957%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="65.8457%" y="693" width="0.0364%" height="15" fill="rgb(208,161,47)" fg:x="5427" fg:w="3"/><text x="66.0957%" y="703.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="65.8821%" y="709" width="0.0121%" height="15" fill="rgb(233,210,18)" fg:x="5430" fg:w="1"/><text x="66.1321%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="65.8942%" y="709" width="0.0121%" height="15" fill="rgb(205,104,42)" fg:x="5431" fg:w="1"/><text x="66.1442%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.01%)</title><rect x="65.8942%" y="693" width="0.0121%" height="15" fill="rgb(248,90,43)" fg:x="5431" fg:w="1"/><text x="66.1442%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="65.8821%" y="741" width="0.0364%" height="15" fill="rgb(206,198,11)" fg:x="5430" fg:w="3"/><text x="66.1321%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="65.8821%" y="725" width="0.0364%" height="15" fill="rgb(239,165,27)" fg:x="5430" fg:w="3"/><text x="66.1321%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.9063%" y="709" width="0.0121%" height="15" fill="rgb(246,44,32)" fg:x="5432" fg:w="1"/><text x="66.1563%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.9063%" y="693" width="0.0121%" height="15" fill="rgb(252,65,42)" fg:x="5432" fg:w="1"/><text x="66.1563%" y="703.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="65.9185%" y="709" width="0.0243%" height="15" fill="rgb(246,197,18)" fg:x="5433" fg:w="2"/><text x="66.1685%" y="719.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="65.9185%" y="693" width="0.0243%" height="15" fill="rgb(216,192,4)" fg:x="5433" fg:w="2"/><text x="66.1685%" y="703.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="65.9427%" y="709" width="0.0121%" height="15" fill="rgb(208,117,10)" fg:x="5435" fg:w="1"/><text x="66.1927%" y="719.50"></text></g><g><title>core::mem::drop (81 samples, 0.98%)</title><rect x="64.9842%" y="789" width="0.9828%" height="15" fill="rgb(240,61,47)" fg:x="5356" fg:w="81"/><text x="65.2342%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (81 samples, 0.98%)</title><rect x="64.9842%" y="773" width="0.9828%" height="15" fill="rgb(228,178,21)" fg:x="5356" fg:w="81"/><text x="65.2342%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (27 samples, 0.33%)</title><rect x="65.6394%" y="757" width="0.3276%" height="15" fill="rgb(219,96,54)" fg:x="5410" fg:w="27"/><text x="65.8894%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="65.9185%" y="741" width="0.0485%" height="15" fill="rgb(250,177,24)" fg:x="5433" fg:w="4"/><text x="66.1685%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="65.9185%" y="725" width="0.0485%" height="15" fill="rgb(242,154,46)" fg:x="5433" fg:w="4"/><text x="66.1685%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="65.9549%" y="709" width="0.0121%" height="15" fill="rgb(226,176,29)" fg:x="5436" fg:w="1"/><text x="66.2049%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="65.9549%" y="693" width="0.0121%" height="15" fill="rgb(226,29,2)" fg:x="5436" fg:w="1"/><text x="66.2049%" y="703.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="65.9670%" y="757" width="0.0607%" height="15" fill="rgb(237,104,14)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="65.9670%" y="741" width="0.0607%" height="15" fill="rgb(245,207,31)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="65.9670%" y="725" width="0.0607%" height="15" fill="rgb(229,211,45)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="65.9670%" y="709" width="0.0607%" height="15" fill="rgb(229,113,15)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="65.9670%" y="693" width="0.0607%" height="15" fill="rgb(237,147,15)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="65.9670%" y="677" width="0.0607%" height="15" fill="rgb(244,120,12)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="65.9670%" y="661" width="0.0607%" height="15" fill="rgb(205,120,12)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="65.9670%" y="645" width="0.0607%" height="15" fill="rgb(231,26,45)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="65.9670%" y="629" width="0.0607%" height="15" fill="rgb(246,98,1)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="639.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="65.9670%" y="613" width="0.0607%" height="15" fill="rgb(207,68,45)" fg:x="5437" fg:w="5"/><text x="66.2170%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::mv_memory::MvMemory&gt;&gt; (12 samples, 0.15%)</title><rect x="65.9670%" y="789" width="0.1456%" height="15" fill="rgb(231,27,38)" fg:x="5437" fg:w="12"/><text x="66.2170%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.15%)</title><rect x="65.9670%" y="773" width="0.1456%" height="15" fill="rgb(214,223,3)" fg:x="5437" fg:w="12"/><text x="66.2170%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (7 samples, 0.08%)</title><rect x="66.0277%" y="757" width="0.0849%" height="15" fill="rgb(228,195,46)" fg:x="5442" fg:w="7"/><text x="66.2777%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (7 samples, 0.08%)</title><rect x="66.0277%" y="741" width="0.0849%" height="15" fill="rgb(231,100,42)" fg:x="5442" fg:w="7"/><text x="66.2777%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::storage::Storage&gt;&gt; (5 samples, 0.06%)</title><rect x="66.1126%" y="789" width="0.0607%" height="15" fill="rgb(236,53,4)" fg:x="5449" fg:w="5"/><text x="66.3626%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="66.1126%" y="773" width="0.0607%" height="15" fill="rgb(230,152,12)" fg:x="5449" fg:w="5"/><text x="66.3626%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.06%)</title><rect x="66.1126%" y="757" width="0.0607%" height="15" fill="rgb(226,101,19)" fg:x="5449" fg:w="5"/><text x="66.3626%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.06%)</title><rect x="66.1126%" y="741" width="0.0607%" height="15" fill="rgb(250,149,32)" fg:x="5449" fg:w="5"/><text x="66.3626%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="66.1733%" y="677" width="0.0121%" height="15" fill="rgb(232,178,12)" fg:x="5454" fg:w="1"/><text x="66.4233%" y="687.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="66.1733%" y="661" width="0.0121%" height="15" fill="rgb(246,151,17)" fg:x="5454" fg:w="1"/><text x="66.4233%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="66.1733%" y="645" width="0.0121%" height="15" fill="rgb(252,17,51)" fg:x="5454" fg:w="1"/><text x="66.4233%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.04%)</title><rect x="66.1733%" y="693" width="0.0364%" height="15" fill="rgb(250,207,23)" fg:x="5454" fg:w="3"/><text x="66.4233%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.02%)</title><rect x="66.1854%" y="677" width="0.0243%" height="15" fill="rgb(205,27,5)" fg:x="5455" fg:w="2"/><text x="66.4354%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.02%)</title><rect x="66.1854%" y="661" width="0.0243%" height="15" fill="rgb(224,32,19)" fg:x="5455" fg:w="2"/><text x="66.4354%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (2 samples, 0.02%)</title><rect x="66.1854%" y="645" width="0.0243%" height="15" fill="rgb(247,214,40)" fg:x="5455" fg:w="2"/><text x="66.4354%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (1 samples, 0.01%)</title><rect x="66.1975%" y="629" width="0.0121%" height="15" fill="rgb(239,199,17)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (1 samples, 0.01%)</title><rect x="66.1975%" y="613" width="0.0121%" height="15" fill="rgb(251,159,9)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (1 samples, 0.01%)</title><rect x="66.1975%" y="597" width="0.0121%" height="15" fill="rgb(225,78,32)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (1 samples, 0.01%)</title><rect x="66.1975%" y="581" width="0.0121%" height="15" fill="rgb(206,97,47)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (1 samples, 0.01%)</title><rect x="66.1975%" y="565" width="0.0121%" height="15" fill="rgb(227,107,4)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (1 samples, 0.01%)</title><rect x="66.1975%" y="549" width="0.0121%" height="15" fill="rgb(241,146,50)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="66.1975%" y="533" width="0.0121%" height="15" fill="rgb(232,92,30)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="66.1975%" y="517" width="0.0121%" height="15" fill="rgb(222,0,40)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="66.1975%" y="501" width="0.0121%" height="15" fill="rgb(219,54,33)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="66.1975%" y="485" width="0.0121%" height="15" fill="rgb(226,209,28)" fg:x="5456" fg:w="1"/><text x="66.4475%" y="495.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="66.2097%" y="629" width="0.0243%" height="15" fill="rgb(254,205,35)" fg:x="5457" fg:w="2"/><text x="66.4597%" y="639.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="66.2218%" y="613" width="0.0121%" height="15" fill="rgb(230,159,3)" fg:x="5458" fg:w="1"/><text x="66.4718%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (11 samples, 0.13%)</title><rect x="66.1733%" y="789" width="0.1335%" height="15" fill="rgb(232,190,24)" fg:x="5454" fg:w="11"/><text x="66.4233%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (11 samples, 0.13%)</title><rect x="66.1733%" y="773" width="0.1335%" height="15" fill="rgb(217,227,44)" fg:x="5454" fg:w="11"/><text x="66.4233%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (11 samples, 0.13%)</title><rect x="66.1733%" y="757" width="0.1335%" height="15" fill="rgb(236,211,1)" fg:x="5454" fg:w="11"/><text x="66.4233%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (11 samples, 0.13%)</title><rect x="66.1733%" y="741" width="0.1335%" height="15" fill="rgb(250,127,46)" fg:x="5454" fg:w="11"/><text x="66.4233%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="66.1733%" y="725" width="0.1335%" height="15" fill="rgb(229,213,6)" fg:x="5454" fg:w="11"/><text x="66.4233%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (11 samples, 0.13%)</title><rect x="66.1733%" y="709" width="0.1335%" height="15" fill="rgb(237,15,36)" fg:x="5454" fg:w="11"/><text x="66.4233%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (8 samples, 0.10%)</title><rect x="66.2097%" y="693" width="0.0971%" height="15" fill="rgb(213,131,41)" fg:x="5457" fg:w="8"/><text x="66.4597%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.10%)</title><rect x="66.2097%" y="677" width="0.0971%" height="15" fill="rgb(225,82,44)" fg:x="5457" fg:w="8"/><text x="66.4597%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.10%)</title><rect x="66.2097%" y="661" width="0.0971%" height="15" fill="rgb(249,42,11)" fg:x="5457" fg:w="8"/><text x="66.4597%" y="671.50"></text></g><g><title>__GI___libc_free (8 samples, 0.10%)</title><rect x="66.2097%" y="645" width="0.0971%" height="15" fill="rgb(253,11,29)" fg:x="5457" fg:w="8"/><text x="66.4597%" y="655.50"></text></g><g><title>arena_for_chunk (6 samples, 0.07%)</title><rect x="66.2339%" y="629" width="0.0728%" height="15" fill="rgb(206,8,54)" fg:x="5459" fg:w="6"/><text x="66.4839%" y="639.50"></text></g><g><title>arena_for_chunk (6 samples, 0.07%)</title><rect x="66.2339%" y="613" width="0.0728%" height="15" fill="rgb(222,186,2)" fg:x="5459" fg:w="6"/><text x="66.4839%" y="623.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::build (2 samples, 0.02%)</title><rect x="66.3067%" y="789" width="0.0243%" height="15" fill="rgb(221,206,53)" fg:x="5465" fg:w="2"/><text x="66.5567%" y="799.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::with_tx_env (9 samples, 0.11%)</title><rect x="66.3310%" y="789" width="0.1092%" height="15" fill="rgb(230,150,21)" fg:x="5467" fg:w="9"/><text x="66.5810%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.11%)</title><rect x="66.3310%" y="773" width="0.1092%" height="15" fill="rgb(253,202,10)" fg:x="5467" fg:w="9"/><text x="66.5810%" y="783.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="66.3795%" y="757" width="0.0607%" height="15" fill="rgb(238,109,40)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="66.3795%" y="741" width="0.0607%" height="15" fill="rgb(247,120,22)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="66.3795%" y="725" width="0.0607%" height="15" fill="rgb(207,43,30)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="66.3795%" y="709" width="0.0607%" height="15" fill="rgb(213,211,24)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="66.3795%" y="693" width="0.0607%" height="15" fill="rgb(239,73,39)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="66.3795%" y="677" width="0.0607%" height="15" fill="rgb(245,182,19)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="687.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="66.3795%" y="661" width="0.0607%" height="15" fill="rgb(247,143,26)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="66.3795%" y="645" width="0.0607%" height="15" fill="rgb(228,191,23)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="66.3795%" y="629" width="0.0607%" height="15" fill="rgb(253,165,31)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="639.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="66.3795%" y="613" width="0.0607%" height="15" fill="rgb(234,138,20)" fg:x="5471" fg:w="5"/><text x="66.6295%" y="623.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (5 samples, 0.06%)</title><rect x="66.4402%" y="789" width="0.0607%" height="15" fill="rgb(218,191,29)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="799.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="66.4402%" y="773" width="0.0607%" height="15" fill="rgb(221,157,19)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="783.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="66.4402%" y="757" width="0.0607%" height="15" fill="rgb(237,26,42)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="767.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="66.4402%" y="741" width="0.0607%" height="15" fill="rgb(220,163,24)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="751.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="66.4402%" y="725" width="0.0607%" height="15" fill="rgb(242,115,20)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="735.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="66.4402%" y="709" width="0.0607%" height="15" fill="rgb(210,206,9)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="719.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="66.4402%" y="693" width="0.0607%" height="15" fill="rgb(208,71,17)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="703.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="66.4402%" y="677" width="0.0607%" height="15" fill="rgb(233,7,5)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="687.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="66.4402%" y="661" width="0.0607%" height="15" fill="rgb(207,92,33)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="66.4402%" y="645" width="0.0607%" height="15" fill="rgb(218,87,9)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="655.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="66.4402%" y="629" width="0.0607%" height="15" fill="rgb(219,47,37)" fg:x="5476" fg:w="5"/><text x="66.6902%" y="639.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::end (1 samples, 0.01%)</title><rect x="66.5130%" y="773" width="0.0121%" height="15" fill="rgb(221,152,34)" fg:x="5482" fg:w="1"/><text x="66.7630%" y="783.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.01%)</title><rect x="66.5130%" y="757" width="0.0121%" height="15" fill="rgb(235,176,21)" fg:x="5482" fg:w="1"/><text x="66.7630%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="66.5130%" y="741" width="0.0121%" height="15" fill="rgb(232,212,21)" fg:x="5482" fg:w="1"/><text x="66.7630%" y="751.50"></text></g><g><title>revm_primitives::env::Env::validate_block_env (2 samples, 0.02%)</title><rect x="66.5251%" y="725" width="0.0243%" height="15" fill="rgb(245,82,39)" fg:x="5483" fg:w="2"/><text x="66.7751%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.02%)</title><rect x="66.5251%" y="709" width="0.0243%" height="15" fill="rgb(241,52,51)" fg:x="5483" fg:w="2"/><text x="66.7751%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.02%)</title><rect x="66.5251%" y="693" width="0.0243%" height="15" fill="rgb(219,91,24)" fg:x="5483" fg:w="2"/><text x="66.7751%" y="703.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::env (4 samples, 0.05%)</title><rect x="66.5251%" y="773" width="0.0485%" height="15" fill="rgb(241,142,12)" fg:x="5483" fg:w="4"/><text x="66.7751%" y="783.50"></text></g><g><title>core::ops::function::Fn::call (4 samples, 0.05%)</title><rect x="66.5251%" y="757" width="0.0485%" height="15" fill="rgb(230,27,9)" fg:x="5483" fg:w="4"/><text x="66.7751%" y="767.50"></text></g><g><title>revm::handler::mainnet::validation::validate_env (4 samples, 0.05%)</title><rect x="66.5251%" y="741" width="0.0485%" height="15" fill="rgb(249,181,32)" fg:x="5483" fg:w="4"/><text x="66.7751%" y="751.50"></text></g><g><title>revm_primitives::env::Env::validate_tx (2 samples, 0.02%)</title><rect x="66.5494%" y="725" width="0.0243%" height="15" fill="rgb(230,107,3)" fg:x="5485" fg:w="2"/><text x="66.7994%" y="735.50"></text></g><g><title>core::cmp::PartialOrd::lt (1 samples, 0.01%)</title><rect x="66.5615%" y="709" width="0.0121%" height="15" fill="rgb(246,204,14)" fg:x="5486" fg:w="1"/><text x="66.8115%" y="719.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (1 samples, 0.01%)</title><rect x="66.5615%" y="693" width="0.0121%" height="15" fill="rgb(213,192,47)" fg:x="5486" fg:w="1"/><text x="66.8115%" y="703.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (1 samples, 0.01%)</title><rect x="66.5615%" y="677" width="0.0121%" height="15" fill="rgb(240,44,36)" fg:x="5486" fg:w="1"/><text x="66.8115%" y="687.50"></text></g><g><title>ruint::algorithms::cmp (1 samples, 0.01%)</title><rect x="66.5615%" y="661" width="0.0121%" height="15" fill="rgb(244,209,38)" fg:x="5486" fg:w="1"/><text x="66.8115%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="66.5858%" y="709" width="0.0243%" height="15" fill="rgb(219,34,37)" fg:x="5488" fg:w="2"/><text x="66.8358%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="66.5858%" y="693" width="0.0243%" height="15" fill="rgb(210,28,6)" fg:x="5488" fg:w="2"/><text x="66.8358%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="66.5858%" y="677" width="0.0243%" height="15" fill="rgb(244,110,52)" fg:x="5488" fg:w="2"/><text x="66.8358%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="66.5979%" y="661" width="0.0121%" height="15" fill="rgb(254,124,47)" fg:x="5489" fg:w="1"/><text x="66.8479%" y="671.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="66.5979%" y="645" width="0.0121%" height="15" fill="rgb(254,110,13)" fg:x="5489" fg:w="1"/><text x="66.8479%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.04%)</title><rect x="66.6222%" y="661" width="0.0364%" height="15" fill="rgb(252,57,21)" fg:x="5491" fg:w="3"/><text x="66.8722%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.04%)</title><rect x="66.6222%" y="645" width="0.0364%" height="15" fill="rgb(242,60,45)" fg:x="5491" fg:w="3"/><text x="66.8722%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.04%)</title><rect x="66.6222%" y="629" width="0.0364%" height="15" fill="rgb(234,49,30)" fg:x="5491" fg:w="3"/><text x="66.8722%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.04%)</title><rect x="66.6222%" y="613" width="0.0364%" height="15" fill="rgb(218,98,6)" fg:x="5491" fg:w="3"/><text x="66.8722%" y="623.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="66.6222%" y="597" width="0.0364%" height="15" fill="rgb(220,174,29)" fg:x="5491" fg:w="3"/><text x="66.8722%" y="607.50"></text></g><g><title>checked_request2size (1 samples, 0.01%)</title><rect x="66.6464%" y="581" width="0.0121%" height="15" fill="rgb(236,163,23)" fg:x="5493" fg:w="1"/><text x="66.8964%" y="591.50"></text></g><g><title>asm_sysvec_irq_work (3 samples, 0.04%)</title><rect x="66.7192%" y="325" width="0.0364%" height="15" fill="rgb(242,114,45)" fg:x="5499" fg:w="3"/><text x="66.9692%" y="335.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="66.9134%" y="293" width="0.0485%" height="15" fill="rgb(232,10,53)" fg:x="5515" fg:w="4"/><text x="67.1634%" y="303.50"></text></g><g><title>perf_ctx_enable (43 samples, 0.52%)</title><rect x="66.9619%" y="293" width="0.5217%" height="15" fill="rgb(245,108,29)" fg:x="5519" fg:w="43"/><text x="67.2119%" y="303.50"></text></g><g><title>x86_pmu_enable (22 samples, 0.27%)</title><rect x="67.2167%" y="277" width="0.2669%" height="15" fill="rgb(240,89,53)" fg:x="5540" fg:w="22"/><text x="67.4667%" y="287.50"></text></g><g><title>__perf_event_task_sched_in (84 samples, 1.02%)</title><rect x="66.8042%" y="309" width="1.0192%" height="15" fill="rgb(226,60,45)" fg:x="5506" fg:w="84"/><text x="67.0542%" y="319.50"></text></g><g><title>perf_pmu_nop_void (28 samples, 0.34%)</title><rect x="67.4836%" y="293" width="0.3397%" height="15" fill="rgb(230,41,44)" fg:x="5562" fg:w="28"/><text x="67.7336%" y="303.50"></text></g><g><title>__rcu_read_unlock (9 samples, 0.11%)</title><rect x="67.8233%" y="309" width="0.1092%" height="15" fill="rgb(230,26,20)" fg:x="5590" fg:w="9"/><text x="68.0733%" y="319.50"></text></g><g><title>_raw_spin_unlock (10 samples, 0.12%)</title><rect x="67.9325%" y="309" width="0.1213%" height="15" fill="rgb(237,170,32)" fg:x="5599" fg:w="10"/><text x="68.1825%" y="319.50"></text></g><g><title>finish_task_switch.isra.0 (111 samples, 1.35%)</title><rect x="66.7556%" y="325" width="1.3468%" height="15" fill="rgb(212,35,42)" fg:x="5502" fg:w="111"/><text x="67.0056%" y="335.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="68.0539%" y="309" width="0.0485%" height="15" fill="rgb(227,31,34)" fg:x="5609" fg:w="4"/><text x="68.3039%" y="319.50"></text></g><g><title>__x64_sys_futex (118 samples, 1.43%)</title><rect x="66.6828%" y="421" width="1.4317%" height="15" fill="rgb(216,19,18)" fg:x="5496" fg:w="118"/><text x="66.9328%" y="431.50"></text></g><g><title>do_futex (118 samples, 1.43%)</title><rect x="66.6828%" y="405" width="1.4317%" height="15" fill="rgb(211,133,42)" fg:x="5496" fg:w="118"/><text x="66.9328%" y="415.50"></text></g><g><title>futex_wait (118 samples, 1.43%)</title><rect x="66.6828%" y="389" width="1.4317%" height="15" fill="rgb(244,66,13)" fg:x="5496" fg:w="118"/><text x="66.9328%" y="399.50"></text></g><g><title>futex_wait_queue (117 samples, 1.42%)</title><rect x="66.6950%" y="373" width="1.4196%" height="15" fill="rgb(218,185,50)" fg:x="5497" fg:w="117"/><text x="66.9450%" y="383.50"></text></g><g><title>schedule (116 samples, 1.41%)</title><rect x="66.7071%" y="357" width="1.4074%" height="15" fill="rgb(219,149,13)" fg:x="5498" fg:w="116"/><text x="66.9571%" y="367.50"></text></g><g><title>__schedule (115 samples, 1.40%)</title><rect x="66.7192%" y="341" width="1.3953%" height="15" fill="rgb(221,125,0)" fg:x="5499" fg:w="115"/><text x="66.9692%" y="351.50"></text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="68.1024%" y="325" width="0.0121%" height="15" fill="rgb(247,126,27)" fg:x="5613" fg:w="1"/><text x="68.3524%" y="335.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="68.1024%" y="309" width="0.0121%" height="15" fill="rgb(250,138,30)" fg:x="5613" fg:w="1"/><text x="68.3524%" y="319.50"></text></g><g><title>newidle_balance (1 samples, 0.01%)</title><rect x="68.1024%" y="293" width="0.0121%" height="15" fill="rgb(230,151,9)" fg:x="5613" fg:w="1"/><text x="68.3524%" y="303.50"></text></g><g><title>load_balance (1 samples, 0.01%)</title><rect x="68.1024%" y="277" width="0.0121%" height="15" fill="rgb(233,80,38)" fg:x="5613" fg:w="1"/><text x="68.3524%" y="287.50"></text></g><g><title>find_busiest_group (1 samples, 0.01%)</title><rect x="68.1024%" y="261" width="0.0121%" height="15" fill="rgb(232,68,43)" fg:x="5613" fg:w="1"/><text x="68.3524%" y="271.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (1 samples, 0.01%)</title><rect x="68.1024%" y="245" width="0.0121%" height="15" fill="rgb(254,5,50)" fg:x="5613" fg:w="1"/><text x="68.3524%" y="255.50"></text></g><g><title>update_sg_lb_stats (1 samples, 0.01%)</title><rect x="68.1024%" y="229" width="0.0121%" height="15" fill="rgb(225,45,5)" fg:x="5613" fg:w="1"/><text x="68.3524%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::park (121 samples, 1.47%)</title><rect x="66.6828%" y="549" width="1.4681%" height="15" fill="rgb(239,22,3)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (121 samples, 1.47%)</title><rect x="66.6828%" y="533" width="1.4681%" height="15" fill="rgb(243,129,0)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="543.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (121 samples, 1.47%)</title><rect x="66.6828%" y="517" width="1.4681%" height="15" fill="rgb(223,164,0)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="527.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (121 samples, 1.47%)</title><rect x="66.6828%" y="501" width="1.4681%" height="15" fill="rgb(221,46,29)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="511.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (121 samples, 1.47%)</title><rect x="66.6828%" y="485" width="1.4681%" height="15" fill="rgb(205,97,47)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="495.50"></text></g><g><title>syscall (121 samples, 1.47%)</title><rect x="66.6828%" y="469" width="1.4681%" height="15" fill="rgb(249,14,8)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (121 samples, 1.47%)</title><rect x="66.6828%" y="453" width="1.4681%" height="15" fill="rgb(216,77,3)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="463.50"></text></g><g><title>do_syscall_64 (121 samples, 1.47%)</title><rect x="66.6828%" y="437" width="1.4681%" height="15" fill="rgb(206,168,54)" fg:x="5496" fg:w="121"/><text x="66.9328%" y="447.50"></text></g><g><title>syscall_exit_to_user_mode (3 samples, 0.04%)</title><rect x="68.1145%" y="421" width="0.0364%" height="15" fill="rgb(236,3,41)" fg:x="5614" fg:w="3"/><text x="68.3645%" y="431.50"></text></g><g><title>exit_to_user_mode_prepare (3 samples, 0.04%)</title><rect x="68.1145%" y="405" width="0.0364%" height="15" fill="rgb(231,132,24)" fg:x="5614" fg:w="3"/><text x="68.3645%" y="415.50"></text></g><g><title>exit_to_user_mode_loop (3 samples, 0.04%)</title><rect x="68.1145%" y="389" width="0.0364%" height="15" fill="rgb(227,221,40)" fg:x="5614" fg:w="3"/><text x="68.3645%" y="399.50"></text></g><g><title>__rseq_handle_notify_resume (2 samples, 0.02%)</title><rect x="68.1267%" y="373" width="0.0243%" height="15" fill="rgb(233,151,11)" fg:x="5615" fg:w="2"/><text x="68.3767%" y="383.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="68.1388%" y="357" width="0.0121%" height="15" fill="rgb(247,81,35)" fg:x="5616" fg:w="1"/><text x="68.3888%" y="367.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="68.1388%" y="341" width="0.0121%" height="15" fill="rgb(243,128,48)" fg:x="5616" fg:w="1"/><text x="68.3888%" y="351.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="68.1509%" y="405" width="0.0607%" height="15" fill="rgb(253,16,10)" fg:x="5617" fg:w="5"/><text x="68.4009%" y="415.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="68.1509%" y="389" width="0.0607%" height="15" fill="rgb(228,67,27)" fg:x="5617" fg:w="5"/><text x="68.4009%" y="399.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (127 samples, 1.54%)</title><rect x="66.6828%" y="565" width="1.5409%" height="15" fill="rgb(231,105,25)" fg:x="5496" fg:w="127"/><text x="66.9328%" y="575.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (6 samples, 0.07%)</title><rect x="68.1509%" y="549" width="0.0728%" height="15" fill="rgb(213,166,47)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="559.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (6 samples, 0.07%)</title><rect x="68.1509%" y="533" width="0.0728%" height="15" fill="rgb(209,27,10)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="543.50"></text></g><g><title>__GI_sched_yield (6 samples, 0.07%)</title><rect x="68.1509%" y="517" width="0.0728%" height="15" fill="rgb(241,44,30)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="68.1509%" y="501" width="0.0728%" height="15" fill="rgb(223,216,15)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="511.50"></text></g><g><title>do_syscall_64 (6 samples, 0.07%)</title><rect x="68.1509%" y="485" width="0.0728%" height="15" fill="rgb(227,14,7)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="495.50"></text></g><g><title>__x64_sys_sched_yield (6 samples, 0.07%)</title><rect x="68.1509%" y="469" width="0.0728%" height="15" fill="rgb(237,14,5)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="479.50"></text></g><g><title>do_sched_yield (6 samples, 0.07%)</title><rect x="68.1509%" y="453" width="0.0728%" height="15" fill="rgb(232,14,36)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="463.50"></text></g><g><title>schedule (6 samples, 0.07%)</title><rect x="68.1509%" y="437" width="0.0728%" height="15" fill="rgb(234,0,38)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="447.50"></text></g><g><title>__schedule (6 samples, 0.07%)</title><rect x="68.1509%" y="421" width="0.0728%" height="15" fill="rgb(207,170,14)" fg:x="5617" fg:w="6"/><text x="68.4009%" y="431.50"></text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="68.2116%" y="405" width="0.0121%" height="15" fill="rgb(252,45,13)" fg:x="5622" fg:w="1"/><text x="68.4616%" y="415.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="68.2116%" y="389" width="0.0121%" height="15" fill="rgb(213,142,7)" fg:x="5622" fg:w="1"/><text x="68.4616%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5 samples, 0.06%)</title><rect x="68.2237%" y="549" width="0.0607%" height="15" fill="rgb(216,157,23)" fg:x="5623" fg:w="5"/><text x="68.4737%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.06%)</title><rect x="68.2237%" y="533" width="0.0607%" height="15" fill="rgb(212,145,33)" fg:x="5623" fg:w="5"/><text x="68.4737%" y="543.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (137 samples, 1.66%)</title><rect x="66.6828%" y="613" width="1.6622%" height="15" fill="rgb(233,26,13)" fg:x="5496" fg:w="137"/><text x="66.9328%" y="623.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (137 samples, 1.66%)</title><rect x="66.6828%" y="597" width="1.6622%" height="15" fill="rgb(219,196,19)" fg:x="5496" fg:w="137"/><text x="66.9328%" y="607.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (137 samples, 1.66%)</title><rect x="66.6828%" y="581" width="1.6622%" height="15" fill="rgb(246,56,21)" fg:x="5496" fg:w="137"/><text x="66.9328%" y="591.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (10 samples, 0.12%)</title><rect x="68.2237%" y="565" width="0.1213%" height="15" fill="rgb(222,28,53)" fg:x="5623" fg:w="10"/><text x="68.4737%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.06%)</title><rect x="68.2844%" y="549" width="0.0607%" height="15" fill="rgb(224,5,27)" fg:x="5628" fg:w="5"/><text x="68.5344%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.06%)</title><rect x="68.2844%" y="533" width="0.0607%" height="15" fill="rgb(220,153,33)" fg:x="5628" fg:w="5"/><text x="68.5344%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="68.3451%" y="613" width="0.0243%" height="15" fill="rgb(226,58,19)" fg:x="5633" fg:w="2"/><text x="68.5951%" y="623.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="68.3451%" y="597" width="0.0243%" height="15" fill="rgb(239,112,23)" fg:x="5633" fg:w="2"/><text x="68.5951%" y="607.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (2 samples, 0.02%)</title><rect x="68.3451%" y="581" width="0.0243%" height="15" fill="rgb(251,213,20)" fg:x="5633" fg:w="2"/><text x="68.5951%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="68.3451%" y="565" width="0.0243%" height="15" fill="rgb(215,181,21)" fg:x="5633" fg:w="2"/><text x="68.5951%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="68.3451%" y="549" width="0.0243%" height="15" fill="rgb(240,8,35)" fg:x="5633" fg:w="2"/><text x="68.5951%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="68.3693%" y="565" width="0.0121%" height="15" fill="rgb(232,203,3)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="68.3693%" y="549" width="0.0121%" height="15" fill="rgb(214,202,43)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="559.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="68.3693%" y="533" width="0.0121%" height="15" fill="rgb(254,35,11)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="68.3693%" y="517" width="0.0121%" height="15" fill="rgb(239,173,13)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="527.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="68.3693%" y="501" width="0.0121%" height="15" fill="rgb(220,141,0)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="511.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="68.3693%" y="485" width="0.0121%" height="15" fill="rgb(210,98,12)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.3693%" y="469" width="0.0121%" height="15" fill="rgb(254,153,22)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.3693%" y="453" width="0.0121%" height="15" fill="rgb(247,223,17)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.3693%" y="437" width="0.0121%" height="15" fill="rgb(246,56,7)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="68.3693%" y="421" width="0.0121%" height="15" fill="rgb(240,226,12)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="68.3693%" y="405" width="0.0121%" height="15" fill="rgb(205,87,46)" fg:x="5635" fg:w="1"/><text x="68.6193%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="68.3815%" y="565" width="0.0485%" height="15" fill="rgb(245,214,51)" fg:x="5636" fg:w="4"/><text x="68.6315%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="68.3815%" y="549" width="0.0485%" height="15" fill="rgb(223,172,33)" fg:x="5636" fg:w="4"/><text x="68.6315%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="68.3815%" y="533" width="0.0485%" height="15" fill="rgb(227,203,34)" fg:x="5636" fg:w="4"/><text x="68.6315%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="68.3936%" y="517" width="0.0364%" height="15" fill="rgb(248,143,44)" fg:x="5637" fg:w="3"/><text x="68.6436%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="68.4179%" y="501" width="0.0121%" height="15" fill="rgb(226,162,5)" fg:x="5639" fg:w="1"/><text x="68.6679%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="68.4421%" y="453" width="0.0121%" height="15" fill="rgb(211,143,1)" fg:x="5641" fg:w="1"/><text x="68.6921%" y="463.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (8 samples, 0.10%)</title><rect x="68.3693%" y="613" width="0.0971%" height="15" fill="rgb(224,96,15)" fg:x="5635" fg:w="8"/><text x="68.6193%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.10%)</title><rect x="68.3693%" y="597" width="0.0971%" height="15" fill="rgb(222,4,38)" fg:x="5635" fg:w="8"/><text x="68.6193%" y="607.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="68.3693%" y="581" width="0.0971%" height="15" fill="rgb(253,228,15)" fg:x="5635" fg:w="8"/><text x="68.6193%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3 samples, 0.04%)</title><rect x="68.4300%" y="565" width="0.0364%" height="15" fill="rgb(242,194,12)" fg:x="5640" fg:w="3"/><text x="68.6800%" y="575.50"></text></g><g><title>core::hash::Hasher::write_isize (3 samples, 0.04%)</title><rect x="68.4300%" y="549" width="0.0364%" height="15" fill="rgb(214,177,31)" fg:x="5640" fg:w="3"/><text x="68.6800%" y="559.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="68.4300%" y="533" width="0.0364%" height="15" fill="rgb(226,58,51)" fg:x="5640" fg:w="3"/><text x="68.6800%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="68.4300%" y="517" width="0.0364%" height="15" fill="rgb(250,119,16)" fg:x="5640" fg:w="3"/><text x="68.6800%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="68.4300%" y="501" width="0.0364%" height="15" fill="rgb(223,128,53)" fg:x="5640" fg:w="3"/><text x="68.6800%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="68.4300%" y="485" width="0.0364%" height="15" fill="rgb(251,199,15)" fg:x="5640" fg:w="3"/><text x="68.6800%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="68.4421%" y="469" width="0.0243%" height="15" fill="rgb(235,168,42)" fg:x="5641" fg:w="2"/><text x="68.6921%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="68.4543%" y="453" width="0.0121%" height="15" fill="rgb(250,210,17)" fg:x="5642" fg:w="1"/><text x="68.7043%" y="463.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="68.4664%" y="549" width="0.0121%" height="15" fill="rgb(226,36,41)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="68.4664%" y="533" width="0.0121%" height="15" fill="rgb(225,87,10)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="543.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.01%)</title><rect x="68.4664%" y="517" width="0.0121%" height="15" fill="rgb(228,83,9)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="68.4664%" y="501" width="0.0121%" height="15" fill="rgb(225,16,36)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="511.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="68.4664%" y="485" width="0.0121%" height="15" fill="rgb(242,198,13)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="495.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="68.4664%" y="469" width="0.0121%" height="15" fill="rgb(239,25,51)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.4664%" y="453" width="0.0121%" height="15" fill="rgb(239,28,37)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.4664%" y="437" width="0.0121%" height="15" fill="rgb(234,70,17)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.4664%" y="421" width="0.0121%" height="15" fill="rgb(231,215,53)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="68.4664%" y="405" width="0.0121%" height="15" fill="rgb(218,140,42)" fg:x="5643" fg:w="1"/><text x="68.7164%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="68.4785%" y="549" width="0.0364%" height="15" fill="rgb(233,227,45)" fg:x="5644" fg:w="3"/><text x="68.7285%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="68.4785%" y="533" width="0.0364%" height="15" fill="rgb(225,189,21)" fg:x="5644" fg:w="3"/><text x="68.7285%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="68.4785%" y="517" width="0.0364%" height="15" fill="rgb(237,176,54)" fg:x="5644" fg:w="3"/><text x="68.7285%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="68.5028%" y="501" width="0.0121%" height="15" fill="rgb(215,131,46)" fg:x="5646" fg:w="1"/><text x="68.7528%" y="511.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="68.4664%" y="565" width="0.0607%" height="15" fill="rgb(218,95,20)" fg:x="5643" fg:w="5"/><text x="68.7164%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="68.5149%" y="549" width="0.0121%" height="15" fill="rgb(208,198,12)" fg:x="5647" fg:w="1"/><text x="68.7649%" y="559.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="68.5149%" y="533" width="0.0121%" height="15" fill="rgb(239,107,50)" fg:x="5647" fg:w="1"/><text x="68.7649%" y="543.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="68.5149%" y="517" width="0.0121%" height="15" fill="rgb(240,217,37)" fg:x="5647" fg:w="1"/><text x="68.7649%" y="527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.5149%" y="501" width="0.0121%" height="15" fill="rgb(242,197,49)" fg:x="5647" fg:w="1"/><text x="68.7649%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.5149%" y="485" width="0.0121%" height="15" fill="rgb(219,171,17)" fg:x="5647" fg:w="1"/><text x="68.7649%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="68.5149%" y="469" width="0.0121%" height="15" fill="rgb(209,81,40)" fg:x="5647" fg:w="1"/><text x="68.7649%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="68.5271%" y="517" width="0.0121%" height="15" fill="rgb(237,156,30)" fg:x="5648" fg:w="1"/><text x="68.7771%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="68.5271%" y="501" width="0.0121%" height="15" fill="rgb(212,127,16)" fg:x="5648" fg:w="1"/><text x="68.7771%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.08%)</title><rect x="68.4664%" y="581" width="0.0849%" height="15" fill="rgb(226,66,32)" fg:x="5643" fg:w="7"/><text x="68.7164%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="68.5271%" y="565" width="0.0243%" height="15" fill="rgb(245,22,46)" fg:x="5648" fg:w="2"/><text x="68.7771%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="68.5271%" y="549" width="0.0243%" height="15" fill="rgb(210,112,21)" fg:x="5648" fg:w="2"/><text x="68.7771%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="68.5271%" y="533" width="0.0243%" height="15" fill="rgb(207,118,39)" fg:x="5648" fg:w="2"/><text x="68.7771%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="68.5392%" y="517" width="0.0121%" height="15" fill="rgb(205,206,35)" fg:x="5649" fg:w="1"/><text x="68.7892%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="68.5392%" y="501" width="0.0121%" height="15" fill="rgb(222,120,2)" fg:x="5649" fg:w="1"/><text x="68.7892%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="68.5513%" y="533" width="0.0243%" height="15" fill="rgb(205,38,18)" fg:x="5650" fg:w="2"/><text x="68.8013%" y="543.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.02%)</title><rect x="68.5513%" y="517" width="0.0243%" height="15" fill="rgb(226,61,2)" fg:x="5650" fg:w="2"/><text x="68.8013%" y="527.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.02%)</title><rect x="68.5513%" y="501" width="0.0243%" height="15" fill="rgb(242,161,23)" fg:x="5650" fg:w="2"/><text x="68.8013%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="68.5513%" y="485" width="0.0243%" height="15" fill="rgb(213,13,52)" fg:x="5650" fg:w="2"/><text x="68.8013%" y="495.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="68.5513%" y="469" width="0.0243%" height="15" fill="rgb(246,209,47)" fg:x="5650" fg:w="2"/><text x="68.8013%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.04%)</title><rect x="68.5756%" y="533" width="0.0364%" height="15" fill="rgb(214,41,3)" fg:x="5652" fg:w="3"/><text x="68.8256%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.04%)</title><rect x="68.5756%" y="517" width="0.0364%" height="15" fill="rgb(236,119,38)" fg:x="5652" fg:w="3"/><text x="68.8256%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.04%)</title><rect x="68.5756%" y="501" width="0.0364%" height="15" fill="rgb(218,50,11)" fg:x="5652" fg:w="3"/><text x="68.8256%" y="511.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (162 samples, 1.97%)</title><rect x="66.6586%" y="661" width="1.9655%" height="15" fill="rgb(228,38,11)" fg:x="5494" fg:w="162"/><text x="66.9086%" y="671.50">b..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (161 samples, 1.95%)</title><rect x="66.6707%" y="645" width="1.9534%" height="15" fill="rgb(212,13,9)" fg:x="5495" fg:w="161"/><text x="66.9207%" y="655.50">d..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (161 samples, 1.95%)</title><rect x="66.6707%" y="629" width="1.9534%" height="15" fill="rgb(208,211,9)" fg:x="5495" fg:w="161"/><text x="66.9207%" y="639.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (13 samples, 0.16%)</title><rect x="68.4664%" y="613" width="0.1577%" height="15" fill="rgb(239,39,32)" fg:x="5643" fg:w="13"/><text x="68.7164%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 0.16%)</title><rect x="68.4664%" y="597" width="0.1577%" height="15" fill="rgb(254,179,26)" fg:x="5643" fg:w="13"/><text x="68.7164%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6 samples, 0.07%)</title><rect x="68.5513%" y="581" width="0.0728%" height="15" fill="rgb(249,165,28)" fg:x="5650" fg:w="6"/><text x="68.8013%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.07%)</title><rect x="68.5513%" y="565" width="0.0728%" height="15" fill="rgb(225,59,50)" fg:x="5650" fg:w="6"/><text x="68.8013%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 0.07%)</title><rect x="68.5513%" y="549" width="0.0728%" height="15" fill="rgb(209,122,5)" fg:x="5650" fg:w="6"/><text x="68.8013%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="68.6120%" y="533" width="0.0121%" height="15" fill="rgb(214,65,34)" fg:x="5655" fg:w="1"/><text x="68.8620%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="68.6120%" y="517" width="0.0121%" height="15" fill="rgb(249,183,32)" fg:x="5655" fg:w="1"/><text x="68.8620%" y="527.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (168 samples, 2.04%)</title><rect x="66.6100%" y="709" width="2.0383%" height="15" fill="rgb(218,122,24)" fg:x="5490" fg:w="168"/><text x="66.8600%" y="719.50">r..</text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (168 samples, 2.04%)</title><rect x="66.6100%" y="693" width="2.0383%" height="15" fill="rgb(224,109,18)" fg:x="5490" fg:w="168"/><text x="66.8600%" y="703.50">&lt;..</text></g><g><title>block_stm_revm::vm::VmDb::read (168 samples, 2.04%)</title><rect x="66.6100%" y="677" width="2.0383%" height="15" fill="rgb(210,68,50)" fg:x="5490" fg:w="168"/><text x="66.8600%" y="687.50">b..</text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for alloc::sync::Arc&lt;T&gt;&gt;::basic_ref (2 samples, 0.02%)</title><rect x="68.6241%" y="661" width="0.0243%" height="15" fill="rgb(212,184,34)" fg:x="5656" fg:w="2"/><text x="68.8741%" y="671.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (2 samples, 0.02%)</title><rect x="68.6241%" y="645" width="0.0243%" height="15" fill="rgb(238,105,48)" fg:x="5656" fg:w="2"/><text x="68.8741%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.02%)</title><rect x="68.6241%" y="629" width="0.0243%" height="15" fill="rgb(222,134,54)" fg:x="5656" fg:w="2"/><text x="68.8741%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.02%)</title><rect x="68.6241%" y="613" width="0.0243%" height="15" fill="rgb(246,24,43)" fg:x="5656" fg:w="2"/><text x="68.8741%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.02%)</title><rect x="68.6241%" y="597" width="0.0243%" height="15" fill="rgb(227,169,22)" fg:x="5656" fg:w="2"/><text x="68.8741%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="68.7091%" y="485" width="0.0121%" height="15" fill="rgb(253,152,4)" fg:x="5663" fg:w="1"/><text x="68.9591%" y="495.50"></text></g><g><title>osq_lock (29 samples, 0.35%)</title><rect x="68.7212%" y="373" width="0.3519%" height="15" fill="rgb(219,158,36)" fg:x="5664" fg:w="29"/><text x="68.9712%" y="383.50"></text></g><g><title>osq_unlock (1 samples, 0.01%)</title><rect x="69.0730%" y="373" width="0.0121%" height="15" fill="rgb(251,128,40)" fg:x="5693" fg:w="1"/><text x="69.3230%" y="383.50"></text></g><g><title>rwsem_optimistic_spin (31 samples, 0.38%)</title><rect x="68.7212%" y="389" width="0.3761%" height="15" fill="rgb(254,101,39)" fg:x="5664" fg:w="31"/><text x="68.9712%" y="399.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="69.0852%" y="373" width="0.0121%" height="15" fill="rgb(221,168,40)" fg:x="5694" fg:w="1"/><text x="69.3352%" y="383.50"></text></g><g><title>rwsem_down_write_slowpath (35 samples, 0.42%)</title><rect x="68.7212%" y="405" width="0.4247%" height="15" fill="rgb(221,14,27)" fg:x="5664" fg:w="35"/><text x="68.9712%" y="415.50"></text></g><g><title>schedule_preempt_disabled (4 samples, 0.05%)</title><rect x="69.0973%" y="389" width="0.0485%" height="15" fill="rgb(207,36,43)" fg:x="5695" fg:w="4"/><text x="69.3473%" y="399.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="69.0973%" y="373" width="0.0485%" height="15" fill="rgb(240,172,53)" fg:x="5695" fg:w="4"/><text x="69.3473%" y="383.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="69.0973%" y="357" width="0.0485%" height="15" fill="rgb(241,138,43)" fg:x="5695" fg:w="4"/><text x="69.3473%" y="367.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="69.0973%" y="341" width="0.0485%" height="15" fill="rgb(227,78,19)" fg:x="5695" fg:w="4"/><text x="69.3473%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="69.0973%" y="325" width="0.0485%" height="15" fill="rgb(215,127,44)" fg:x="5695" fg:w="4"/><text x="69.3473%" y="335.50"></text></g><g><title>down_write_killable (36 samples, 0.44%)</title><rect x="68.7212%" y="421" width="0.4368%" height="15" fill="rgb(227,13,10)" fg:x="5664" fg:w="36"/><text x="68.9712%" y="431.50"></text></g><g><title>schedule_preempt_disabled (1 samples, 0.01%)</title><rect x="69.1458%" y="405" width="0.0121%" height="15" fill="rgb(249,177,6)" fg:x="5699" fg:w="1"/><text x="69.3958%" y="415.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="69.1580%" y="405" width="0.0121%" height="15" fill="rgb(215,154,26)" fg:x="5700" fg:w="1"/><text x="69.4080%" y="415.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.01%)</title><rect x="69.1580%" y="389" width="0.0121%" height="15" fill="rgb(250,168,20)" fg:x="5700" fg:w="1"/><text x="69.4080%" y="399.50"></text></g><g><title>perf_iterate_sb.constprop.0 (1 samples, 0.01%)</title><rect x="69.1580%" y="373" width="0.0121%" height="15" fill="rgb(222,53,38)" fg:x="5700" fg:w="1"/><text x="69.4080%" y="383.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="69.1580%" y="357" width="0.0121%" height="15" fill="rgb(245,154,5)" fg:x="5700" fg:w="1"/><text x="69.4080%" y="367.50"></text></g><g><title>__memset (1 samples, 0.01%)</title><rect x="69.1701%" y="357" width="0.0121%" height="15" fill="rgb(214,89,50)" fg:x="5701" fg:w="1"/><text x="69.4201%" y="367.50"></text></g><g><title>mas_preallocate (2 samples, 0.02%)</title><rect x="69.1701%" y="389" width="0.0243%" height="15" fill="rgb(232,73,14)" fg:x="5701" fg:w="2"/><text x="69.4201%" y="399.50"></text></g><g><title>mas_alloc_nodes (2 samples, 0.02%)</title><rect x="69.1701%" y="373" width="0.0243%" height="15" fill="rgb(230,101,20)" fg:x="5701" fg:w="2"/><text x="69.4201%" y="383.50"></text></g><g><title>kmem_cache_alloc_bulk (1 samples, 0.01%)</title><rect x="69.1822%" y="357" width="0.0121%" height="15" fill="rgb(208,56,28)" fg:x="5702" fg:w="1"/><text x="69.4322%" y="367.50"></text></g><g><title>__kmem_cache_alloc_bulk (1 samples, 0.01%)</title><rect x="69.1822%" y="341" width="0.0121%" height="15" fill="rgb(247,205,22)" fg:x="5702" fg:w="1"/><text x="69.4322%" y="351.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.01%)</title><rect x="69.1944%" y="389" width="0.0121%" height="15" fill="rgb(252,109,51)" fg:x="5703" fg:w="1"/><text x="69.4444%" y="399.50"></text></g><g><title>mas_destroy (1 samples, 0.01%)</title><rect x="69.1944%" y="373" width="0.0121%" height="15" fill="rgb(220,40,24)" fg:x="5703" fg:w="1"/><text x="69.4444%" y="383.50"></text></g><g><title>kmem_cache_free_bulk (1 samples, 0.01%)</title><rect x="69.1944%" y="357" width="0.0121%" height="15" fill="rgb(251,108,7)" fg:x="5703" fg:w="1"/><text x="69.4444%" y="367.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.01%)</title><rect x="69.1944%" y="341" width="0.0121%" height="15" fill="rgb(238,102,51)" fg:x="5703" fg:w="1"/><text x="69.4444%" y="351.50"></text></g><g><title>build_detached_freelist (1 samples, 0.01%)</title><rect x="69.1944%" y="325" width="0.0121%" height="15" fill="rgb(219,149,34)" fg:x="5703" fg:w="1"/><text x="69.4444%" y="335.50"></text></g><g><title>mprotect_fixup (5 samples, 0.06%)</title><rect x="69.1580%" y="421" width="0.0607%" height="15" fill="rgb(239,70,0)" fg:x="5700" fg:w="5"/><text x="69.4080%" y="431.50"></text></g><g><title>vma_merge (4 samples, 0.05%)</title><rect x="69.1701%" y="405" width="0.0485%" height="15" fill="rgb(246,214,23)" fg:x="5701" fg:w="4"/><text x="69.4201%" y="415.50"></text></g><g><title>vma_prepare (1 samples, 0.01%)</title><rect x="69.2065%" y="389" width="0.0121%" height="15" fill="rgb(239,221,51)" fg:x="5704" fg:w="1"/><text x="69.4565%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (47 samples, 0.57%)</title><rect x="68.6605%" y="661" width="0.5702%" height="15" fill="rgb(254,62,14)" fg:x="5659" fg:w="47"/><text x="68.9105%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (47 samples, 0.57%)</title><rect x="68.6605%" y="645" width="0.5702%" height="15" fill="rgb(253,57,33)" fg:x="5659" fg:w="47"/><text x="68.9105%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (47 samples, 0.57%)</title><rect x="68.6605%" y="629" width="0.5702%" height="15" fill="rgb(229,34,6)" fg:x="5659" fg:w="47"/><text x="68.9105%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.57%)</title><rect x="68.6605%" y="613" width="0.5702%" height="15" fill="rgb(235,191,23)" fg:x="5659" fg:w="47"/><text x="68.9105%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.57%)</title><rect x="68.6605%" y="597" width="0.5702%" height="15" fill="rgb(217,207,27)" fg:x="5659" fg:w="47"/><text x="68.9105%" y="607.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.57%)</title><rect x="68.6605%" y="581" width="0.5702%" height="15" fill="rgb(232,41,44)" fg:x="5659" fg:w="47"/><text x="68.9105%" y="591.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.57%)</title><rect x="68.6605%" y="565" width="0.5702%" height="15" fill="rgb(221,188,19)" fg:x="5659" fg:w="47"/><text x="68.9105%" y="575.50"></text></g><g><title>_int_malloc (45 samples, 0.55%)</title><rect x="68.6848%" y="549" width="0.5460%" height="15" fill="rgb(245,180,45)" fg:x="5661" fg:w="45"/><text x="68.9348%" y="559.50"></text></g><g><title>sysmalloc (43 samples, 0.52%)</title><rect x="68.7091%" y="533" width="0.5217%" height="15" fill="rgb(250,220,42)" fg:x="5663" fg:w="43"/><text x="68.9591%" y="543.50"></text></g><g><title>grow_heap (43 samples, 0.52%)</title><rect x="68.7091%" y="517" width="0.5217%" height="15" fill="rgb(234,16,34)" fg:x="5663" fg:w="43"/><text x="68.9591%" y="527.50"></text></g><g><title>__GI_mprotect (43 samples, 0.52%)</title><rect x="68.7091%" y="501" width="0.5217%" height="15" fill="rgb(233,217,23)" fg:x="5663" fg:w="43"/><text x="68.9591%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (42 samples, 0.51%)</title><rect x="68.7212%" y="485" width="0.5096%" height="15" fill="rgb(209,22,46)" fg:x="5664" fg:w="42"/><text x="68.9712%" y="495.50"></text></g><g><title>do_syscall_64 (42 samples, 0.51%)</title><rect x="68.7212%" y="469" width="0.5096%" height="15" fill="rgb(213,101,18)" fg:x="5664" fg:w="42"/><text x="68.9712%" y="479.50"></text></g><g><title>__x64_sys_mprotect (42 samples, 0.51%)</title><rect x="68.7212%" y="453" width="0.5096%" height="15" fill="rgb(215,179,52)" fg:x="5664" fg:w="42"/><text x="68.9712%" y="463.50"></text></g><g><title>do_mprotect_pkey (42 samples, 0.51%)</title><rect x="68.7212%" y="437" width="0.5096%" height="15" fill="rgb(223,50,25)" fg:x="5664" fg:w="42"/><text x="68.9712%" y="447.50"></text></g><g><title>security_file_mprotect (1 samples, 0.01%)</title><rect x="69.2186%" y="421" width="0.0121%" height="15" fill="rgb(224,51,44)" fg:x="5705" fg:w="1"/><text x="69.4686%" y="431.50"></text></g><g><title>ima_file_mprotect (1 samples, 0.01%)</title><rect x="69.2186%" y="405" width="0.0121%" height="15" fill="rgb(224,13,54)" fg:x="5705" fg:w="1"/><text x="69.4686%" y="415.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (49 samples, 0.59%)</title><rect x="68.6484%" y="709" width="0.5945%" height="15" fill="rgb(219,58,47)" fg:x="5658" fg:w="49"/><text x="68.8984%" y="719.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (48 samples, 0.58%)</title><rect x="68.6605%" y="693" width="0.5824%" height="15" fill="rgb(246,124,34)" fg:x="5659" fg:w="48"/><text x="68.9105%" y="703.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (48 samples, 0.58%)</title><rect x="68.6605%" y="677" width="0.5824%" height="15" fill="rgb(245,109,25)" fg:x="5659" fg:w="48"/><text x="68.9105%" y="687.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (1 samples, 0.01%)</title><rect x="69.2308%" y="661" width="0.0121%" height="15" fill="rgb(235,48,23)" fg:x="5706" fg:w="1"/><text x="69.4808%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="69.2308%" y="645" width="0.0121%" height="15" fill="rgb(229,203,36)" fg:x="5706" fg:w="1"/><text x="69.4808%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="69.2308%" y="629" width="0.0121%" height="15" fill="rgb(234,180,9)" fg:x="5706" fg:w="1"/><text x="69.4808%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.01%)</title><rect x="69.2308%" y="613" width="0.0121%" height="15" fill="rgb(228,98,45)" fg:x="5706" fg:w="1"/><text x="69.4808%" y="623.50"></text></g><g><title>&lt;bitvec::domain::Domain&lt;wyz::comu::Const,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="69.2308%" y="597" width="0.0121%" height="15" fill="rgb(240,24,36)" fg:x="5706" fg:w="1"/><text x="69.4808%" y="607.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="69.2550%" y="485" width="0.0243%" height="15" fill="rgb(227,154,19)" fg:x="5708" fg:w="2"/><text x="69.5050%" y="495.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="69.2550%" y="469" width="0.0243%" height="15" fill="rgb(231,2,48)" fg:x="5708" fg:w="2"/><text x="69.5050%" y="479.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="69.2550%" y="453" width="0.0243%" height="15" fill="rgb(219,216,0)" fg:x="5708" fg:w="2"/><text x="69.5050%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4 samples, 0.05%)</title><rect x="69.2550%" y="613" width="0.0485%" height="15" fill="rgb(251,88,0)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (4 samples, 0.05%)</title><rect x="69.2550%" y="597" width="0.0485%" height="15" fill="rgb(242,45,45)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (4 samples, 0.05%)</title><rect x="69.2550%" y="581" width="0.0485%" height="15" fill="rgb(218,149,45)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (4 samples, 0.05%)</title><rect x="69.2550%" y="565" width="0.0485%" height="15" fill="rgb(247,194,10)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="575.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.05%)</title><rect x="69.2550%" y="549" width="0.0485%" height="15" fill="rgb(234,33,37)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="69.2550%" y="533" width="0.0485%" height="15" fill="rgb(218,61,13)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="69.2550%" y="517" width="0.0485%" height="15" fill="rgb(210,80,52)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="527.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="69.2550%" y="501" width="0.0485%" height="15" fill="rgb(218,203,27)" fg:x="5708" fg:w="4"/><text x="69.5050%" y="511.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="69.2793%" y="485" width="0.0243%" height="15" fill="rgb(209,126,33)" fg:x="5710" fg:w="2"/><text x="69.5293%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (5 samples, 0.06%)</title><rect x="69.2550%" y="677" width="0.0607%" height="15" fill="rgb(234,173,41)" fg:x="5708" fg:w="5"/><text x="69.5050%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.06%)</title><rect x="69.2550%" y="661" width="0.0607%" height="15" fill="rgb(228,166,9)" fg:x="5708" fg:w="5"/><text x="69.5050%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.06%)</title><rect x="69.2550%" y="645" width="0.0607%" height="15" fill="rgb(208,124,43)" fg:x="5708" fg:w="5"/><text x="69.5050%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5 samples, 0.06%)</title><rect x="69.2550%" y="629" width="0.0607%" height="15" fill="rgb(212,154,38)" fg:x="5708" fg:w="5"/><text x="69.5050%" y="639.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.01%)</title><rect x="69.3036%" y="613" width="0.0121%" height="15" fill="rgb(246,179,35)" fg:x="5712" fg:w="1"/><text x="69.5536%" y="623.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="69.3157%" y="565" width="0.0121%" height="15" fill="rgb(251,3,50)" fg:x="5713" fg:w="1"/><text x="69.5657%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="69.3157%" y="549" width="0.0121%" height="15" fill="rgb(219,96,8)" fg:x="5713" fg:w="1"/><text x="69.5657%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.10%)</title><rect x="69.2429%" y="693" width="0.0971%" height="15" fill="rgb(251,216,33)" fg:x="5707" fg:w="8"/><text x="69.4929%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="69.3157%" y="677" width="0.0243%" height="15" fill="rgb(243,145,29)" fg:x="5713" fg:w="2"/><text x="69.5657%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="69.3157%" y="661" width="0.0243%" height="15" fill="rgb(210,75,20)" fg:x="5713" fg:w="2"/><text x="69.5657%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="69.3157%" y="645" width="0.0243%" height="15" fill="rgb(235,56,8)" fg:x="5713" fg:w="2"/><text x="69.5657%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="69.3157%" y="629" width="0.0243%" height="15" fill="rgb(226,175,49)" fg:x="5713" fg:w="2"/><text x="69.5657%" y="639.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="69.3157%" y="613" width="0.0243%" height="15" fill="rgb(242,204,23)" fg:x="5713" fg:w="2"/><text x="69.5657%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="69.3157%" y="597" width="0.0243%" height="15" fill="rgb(225,104,24)" fg:x="5713" fg:w="2"/><text x="69.5657%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="69.3157%" y="581" width="0.0243%" height="15" fill="rgb(253,34,1)" fg:x="5713" fg:w="2"/><text x="69.5657%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.01%)</title><rect x="69.3278%" y="565" width="0.0121%" height="15" fill="rgb(233,199,23)" fg:x="5714" fg:w="1"/><text x="69.5778%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="69.3278%" y="549" width="0.0121%" height="15" fill="rgb(247,7,51)" fg:x="5714" fg:w="1"/><text x="69.5778%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="69.3278%" y="533" width="0.0121%" height="15" fill="rgb(214,146,12)" fg:x="5714" fg:w="1"/><text x="69.5778%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="69.3278%" y="517" width="0.0121%" height="15" fill="rgb(234,181,43)" fg:x="5714" fg:w="1"/><text x="69.5778%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="69.3278%" y="501" width="0.0121%" height="15" fill="rgb(239,148,6)" fg:x="5714" fg:w="1"/><text x="69.5778%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.11%)</title><rect x="69.2429%" y="709" width="0.1092%" height="15" fill="rgb(206,151,17)" fg:x="5707" fg:w="9"/><text x="69.4929%" y="719.50"></text></g><g><title>std::collections::hash::map::map_entry (1 samples, 0.01%)</title><rect x="69.3400%" y="693" width="0.0121%" height="15" fill="rgb(213,215,10)" fg:x="5715" fg:w="1"/><text x="69.5900%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="69.3521%" y="661" width="0.0121%" height="15" fill="rgb(215,220,44)" fg:x="5716" fg:w="1"/><text x="69.6021%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="69.3521%" y="645" width="0.0121%" height="15" fill="rgb(245,205,37)" fg:x="5716" fg:w="1"/><text x="69.6021%" y="655.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="69.3521%" y="629" width="0.0121%" height="15" fill="rgb(245,130,43)" fg:x="5716" fg:w="1"/><text x="69.6021%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="69.3521%" y="613" width="0.0121%" height="15" fill="rgb(231,227,38)" fg:x="5716" fg:w="1"/><text x="69.6021%" y="623.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (231 samples, 2.80%)</title><rect x="66.5736%" y="725" width="2.8027%" height="15" fill="rgb(233,185,4)" fg:x="5487" fg:w="231"/><text x="66.8236%" y="735.50">re..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.02%)</title><rect x="69.3521%" y="709" width="0.0243%" height="15" fill="rgb(224,154,43)" fg:x="5716" fg:w="2"/><text x="69.6021%" y="719.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.02%)</title><rect x="69.3521%" y="693" width="0.0243%" height="15" fill="rgb(235,156,15)" fg:x="5716" fg:w="2"/><text x="69.6021%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="69.3521%" y="677" width="0.0243%" height="15" fill="rgb(211,55,43)" fg:x="5716" fg:w="2"/><text x="69.6021%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.01%)</title><rect x="69.3642%" y="661" width="0.0121%" height="15" fill="rgb(247,149,40)" fg:x="5717" fg:w="1"/><text x="69.6142%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.01%)</title><rect x="69.3642%" y="645" width="0.0121%" height="15" fill="rgb(232,171,16)" fg:x="5717" fg:w="1"/><text x="69.6142%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.01%)</title><rect x="69.3642%" y="629" width="0.0121%" height="15" fill="rgb(215,117,49)" fg:x="5717" fg:w="1"/><text x="69.6142%" y="639.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (1,212 samples, 14.71%)</title><rect x="54.7197%" y="805" width="14.7052%" height="15" fill="rgb(246,194,11)" fg:x="4510" fg:w="1212"/><text x="54.9697%" y="815.50">block_stm_revm::vm::Vm..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (241 samples, 2.92%)</title><rect x="66.5008%" y="789" width="2.9240%" height="15" fill="rgb(242,101,44)" fg:x="5481" fg:w="241"/><text x="66.7508%" y="799.50">re..</text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (235 samples, 2.85%)</title><rect x="66.5736%" y="773" width="2.8512%" height="15" fill="rgb(226,174,6)" fg:x="5487" fg:w="235"/><text x="66.8236%" y="783.50">re..</text></g><g><title>core::ops::function::Fn::call (235 samples, 2.85%)</title><rect x="66.5736%" y="757" width="2.8512%" height="15" fill="rgb(213,150,20)" fg:x="5487" fg:w="235"/><text x="66.8236%" y="767.50">co..</text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (235 samples, 2.85%)</title><rect x="66.5736%" y="741" width="2.8512%" height="15" fill="rgb(222,124,42)" fg:x="5487" fg:w="235"/><text x="66.8236%" y="751.50">re..</text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (4 samples, 0.05%)</title><rect x="69.3764%" y="725" width="0.0485%" height="15" fill="rgb(250,19,47)" fg:x="5718" fg:w="4"/><text x="69.6264%" y="735.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.04%)</title><rect x="69.3885%" y="709" width="0.0364%" height="15" fill="rgb(241,217,19)" fg:x="5719" fg:w="3"/><text x="69.6385%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.04%)</title><rect x="69.3885%" y="693" width="0.0364%" height="15" fill="rgb(207,210,34)" fg:x="5719" fg:w="3"/><text x="69.6385%" y="703.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (3 samples, 0.04%)</title><rect x="69.3885%" y="677" width="0.0364%" height="15" fill="rgb(244,45,4)" fg:x="5719" fg:w="3"/><text x="69.6385%" y="687.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (3 samples, 0.04%)</title><rect x="69.3885%" y="661" width="0.0364%" height="15" fill="rgb(252,134,50)" fg:x="5719" fg:w="3"/><text x="69.6385%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt; (4 samples, 0.05%)</title><rect x="69.4249%" y="805" width="0.0485%" height="15" fill="rgb(238,74,2)" fg:x="5722" fg:w="4"/><text x="69.6749%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (18 samples, 0.22%)</title><rect x="69.4734%" y="805" width="0.2184%" height="15" fill="rgb(226,58,46)" fg:x="5726" fg:w="18"/><text x="69.7234%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.22%)</title><rect x="69.4734%" y="789" width="0.2184%" height="15" fill="rgb(232,83,35)" fg:x="5726" fg:w="18"/><text x="69.7234%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (18 samples, 0.22%)</title><rect x="69.4734%" y="773" width="0.2184%" height="15" fill="rgb(212,148,47)" fg:x="5726" fg:w="18"/><text x="69.7234%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.22%)</title><rect x="69.4734%" y="757" width="0.2184%" height="15" fill="rgb(235,29,1)" fg:x="5726" fg:w="18"/><text x="69.7234%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.22%)</title><rect x="69.4734%" y="741" width="0.2184%" height="15" fill="rgb(247,55,37)" fg:x="5726" fg:w="18"/><text x="69.7234%" y="751.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="69.6918%" y="789" width="0.0121%" height="15" fill="rgb(222,48,3)" fg:x="5744" fg:w="1"/><text x="69.9418%" y="799.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.01%)</title><rect x="69.6918%" y="773" width="0.0121%" height="15" fill="rgb(234,21,33)" fg:x="5744" fg:w="1"/><text x="69.9418%" y="783.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.01%)</title><rect x="69.6918%" y="757" width="0.0121%" height="15" fill="rgb(247,178,53)" fg:x="5744" fg:w="1"/><text x="69.9418%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="69.6918%" y="741" width="0.0121%" height="15" fill="rgb(225,75,7)" fg:x="5744" fg:w="1"/><text x="69.9418%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="69.6918%" y="725" width="0.0121%" height="15" fill="rgb(219,199,7)" fg:x="5744" fg:w="1"/><text x="69.9418%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (8 samples, 0.10%)</title><rect x="69.7040%" y="773" width="0.0971%" height="15" fill="rgb(209,93,42)" fg:x="5745" fg:w="8"/><text x="69.9540%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (8 samples, 0.10%)</title><rect x="69.7040%" y="757" width="0.0971%" height="15" fill="rgb(240,175,17)" fg:x="5745" fg:w="8"/><text x="69.9540%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.04%)</title><rect x="69.8010%" y="757" width="0.0364%" height="15" fill="rgb(232,106,7)" fg:x="5753" fg:w="3"/><text x="70.0510%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.04%)</title><rect x="69.8010%" y="741" width="0.0364%" height="15" fill="rgb(242,106,43)" fg:x="5753" fg:w="3"/><text x="70.0510%" y="751.50"></text></g><g><title>perf_ctx_enable (10 samples, 0.12%)</title><rect x="69.9587%" y="565" width="0.1213%" height="15" fill="rgb(242,61,37)" fg:x="5766" fg:w="10"/><text x="70.2087%" y="575.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.07%)</title><rect x="70.0073%" y="549" width="0.0728%" height="15" fill="rgb(205,72,10)" fg:x="5770" fg:w="6"/><text x="70.2573%" y="559.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="70.0801%" y="565" width="0.0485%" height="15" fill="rgb(214,184,36)" fg:x="5776" fg:w="4"/><text x="70.3301%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (33 samples, 0.40%)</title><rect x="69.8496%" y="597" width="0.4004%" height="15" fill="rgb(206,107,18)" fg:x="5757" fg:w="33"/><text x="70.0996%" y="607.50"></text></g><g><title>__perf_event_task_sched_in (33 samples, 0.40%)</title><rect x="69.8496%" y="581" width="0.4004%" height="15" fill="rgb(210,75,5)" fg:x="5757" fg:w="33"/><text x="70.0996%" y="591.50"></text></g><g><title>x86_pmu_enable (10 samples, 0.12%)</title><rect x="70.1286%" y="565" width="0.1213%" height="15" fill="rgb(205,3,19)" fg:x="5780" fg:w="10"/><text x="70.3786%" y="575.50"></text></g><g><title>futex_wait_queue (34 samples, 0.41%)</title><rect x="69.8496%" y="645" width="0.4125%" height="15" fill="rgb(207,181,42)" fg:x="5757" fg:w="34"/><text x="70.0996%" y="655.50"></text></g><g><title>schedule (34 samples, 0.41%)</title><rect x="69.8496%" y="629" width="0.4125%" height="15" fill="rgb(229,179,43)" fg:x="5757" fg:w="34"/><text x="70.0996%" y="639.50"></text></g><g><title>__schedule (34 samples, 0.41%)</title><rect x="69.8496%" y="613" width="0.4125%" height="15" fill="rgb(246,95,30)" fg:x="5757" fg:w="34"/><text x="70.0996%" y="623.50"></text></g><g><title>psi_task_switch (1 samples, 0.01%)</title><rect x="70.2499%" y="597" width="0.0121%" height="15" fill="rgb(234,144,45)" fg:x="5790" fg:w="1"/><text x="70.4999%" y="607.50"></text></g><g><title>psi_group_change (1 samples, 0.01%)</title><rect x="70.2499%" y="581" width="0.0121%" height="15" fill="rgb(250,54,25)" fg:x="5790" fg:w="1"/><text x="70.4999%" y="591.50"></text></g><g><title>__x64_sys_futex (36 samples, 0.44%)</title><rect x="69.8374%" y="693" width="0.4368%" height="15" fill="rgb(215,195,40)" fg:x="5756" fg:w="36"/><text x="70.0874%" y="703.50"></text></g><g><title>do_futex (36 samples, 0.44%)</title><rect x="69.8374%" y="677" width="0.4368%" height="15" fill="rgb(233,188,42)" fg:x="5756" fg:w="36"/><text x="70.0874%" y="687.50"></text></g><g><title>futex_wait (36 samples, 0.44%)</title><rect x="69.8374%" y="661" width="0.4368%" height="15" fill="rgb(247,227,35)" fg:x="5756" fg:w="36"/><text x="70.0874%" y="671.50"></text></g><g><title>futex_wait_setup (1 samples, 0.01%)</title><rect x="70.2621%" y="645" width="0.0121%" height="15" fill="rgb(249,124,27)" fg:x="5791" fg:w="1"/><text x="70.5121%" y="655.50"></text></g><g><title>futex_q_unlock (1 samples, 0.01%)</title><rect x="70.2621%" y="629" width="0.0121%" height="15" fill="rgb(219,207,25)" fg:x="5791" fg:w="1"/><text x="70.5121%" y="639.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (37 samples, 0.45%)</title><rect x="69.8374%" y="757" width="0.4489%" height="15" fill="rgb(241,216,47)" fg:x="5756" fg:w="37"/><text x="70.0874%" y="767.50"></text></g><g><title>syscall (37 samples, 0.45%)</title><rect x="69.8374%" y="741" width="0.4489%" height="15" fill="rgb(233,82,50)" fg:x="5756" fg:w="37"/><text x="70.0874%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (37 samples, 0.45%)</title><rect x="69.8374%" y="725" width="0.4489%" height="15" fill="rgb(232,63,2)" fg:x="5756" fg:w="37"/><text x="70.0874%" y="735.50"></text></g><g><title>do_syscall_64 (37 samples, 0.45%)</title><rect x="69.8374%" y="709" width="0.4489%" height="15" fill="rgb(236,184,28)" fg:x="5756" fg:w="37"/><text x="70.0874%" y="719.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.01%)</title><rect x="70.2742%" y="693" width="0.0121%" height="15" fill="rgb(254,63,27)" fg:x="5792" fg:w="1"/><text x="70.5242%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.01%)</title><rect x="70.2742%" y="677" width="0.0121%" height="15" fill="rgb(253,106,28)" fg:x="5792" fg:w="1"/><text x="70.5242%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.01%)</title><rect x="70.2742%" y="661" width="0.0121%" height="15" fill="rgb(225,141,39)" fg:x="5792" fg:w="1"/><text x="70.5242%" y="671.50"></text></g><g><title>blkcg_maybe_throttle_current (1 samples, 0.01%)</title><rect x="70.2742%" y="645" width="0.0121%" height="15" fill="rgb(222,157,20)" fg:x="5792" fg:w="1"/><text x="70.5242%" y="655.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (2,445 samples, 29.67%)</title><rect x="40.6819%" y="821" width="29.6651%" height="15" fill="rgb(210,190,9)" fg:x="3353" fg:w="2445"/><text x="40.9319%" y="831.50">block_stm_revm::block_stm::try_execute</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (54 samples, 0.66%)</title><rect x="69.6918%" y="805" width="0.6552%" height="15" fill="rgb(242,167,7)" fg:x="5744" fg:w="54"/><text x="69.9418%" y="815.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (53 samples, 0.64%)</title><rect x="69.7040%" y="789" width="0.6430%" height="15" fill="rgb(227,82,41)" fg:x="5745" fg:w="53"/><text x="69.9540%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock_contended (45 samples, 0.55%)</title><rect x="69.8010%" y="773" width="0.5460%" height="15" fill="rgb(222,131,13)" fg:x="5753" fg:w="45"/><text x="70.0510%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::spin (5 samples, 0.06%)</title><rect x="70.2863%" y="757" width="0.0607%" height="15" fill="rgb(221,98,26)" fg:x="5793" fg:w="5"/><text x="70.5363%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (5 samples, 0.06%)</title><rect x="70.2863%" y="741" width="0.0607%" height="15" fill="rgb(251,63,52)" fg:x="5793" fg:w="5"/><text x="70.5363%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.06%)</title><rect x="70.2863%" y="725" width="0.0607%" height="15" fill="rgb(246,25,43)" fg:x="5793" fg:w="5"/><text x="70.5363%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.06%)</title><rect x="70.3470%" y="805" width="0.0607%" height="15" fill="rgb(247,167,15)" fg:x="5798" fg:w="5"/><text x="70.5970%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (5 samples, 0.06%)</title><rect x="70.3470%" y="789" width="0.0607%" height="15" fill="rgb(240,104,42)" fg:x="5798" fg:w="5"/><text x="70.5970%" y="799.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (5 samples, 0.06%)</title><rect x="70.3470%" y="773" width="0.0607%" height="15" fill="rgb(224,54,6)" fg:x="5798" fg:w="5"/><text x="70.5970%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.08%)</title><rect x="70.4926%" y="789" width="0.0849%" height="15" fill="rgb(244,108,35)" fg:x="5810" fg:w="7"/><text x="70.7426%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="70.5775%" y="789" width="0.0121%" height="15" fill="rgb(216,154,2)" fg:x="5817" fg:w="1"/><text x="70.8275%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="70.5775%" y="773" width="0.0121%" height="15" fill="rgb(222,8,47)" fg:x="5817" fg:w="1"/><text x="70.8275%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="70.5775%" y="757" width="0.0121%" height="15" fill="rgb(252,93,1)" fg:x="5817" fg:w="1"/><text x="70.8275%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="70.5775%" y="741" width="0.0121%" height="15" fill="rgb(223,226,51)" fg:x="5817" fg:w="1"/><text x="70.8275%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="70.5897%" y="789" width="0.0121%" height="15" fill="rgb(206,147,9)" fg:x="5818" fg:w="1"/><text x="70.8397%" y="799.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="70.5897%" y="773" width="0.0121%" height="15" fill="rgb(248,180,41)" fg:x="5818" fg:w="1"/><text x="70.8397%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.07%)</title><rect x="71.0628%" y="757" width="0.0728%" height="15" fill="rgb(209,47,50)" fg:x="5857" fg:w="6"/><text x="71.3128%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6 samples, 0.07%)</title><rect x="71.0628%" y="741" width="0.0728%" height="15" fill="rgb(243,65,31)" fg:x="5857" fg:w="6"/><text x="71.3128%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (6 samples, 0.07%)</title><rect x="71.0628%" y="725" width="0.0728%" height="15" fill="rgb(228,128,1)" fg:x="5857" fg:w="6"/><text x="71.3128%" y="735.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="71.1478%" y="533" width="0.0121%" height="15" fill="rgb(231,192,16)" fg:x="5864" fg:w="1"/><text x="71.3978%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.11%)</title><rect x="71.1599%" y="517" width="0.1092%" height="15" fill="rgb(224,26,40)" fg:x="5865" fg:w="9"/><text x="71.4099%" y="527.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="71.2084%" y="501" width="0.0607%" height="15" fill="rgb(214,192,17)" fg:x="5869" fg:w="5"/><text x="71.4584%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (15 samples, 0.18%)</title><rect x="71.1356%" y="693" width="0.1820%" height="15" fill="rgb(225,147,18)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (15 samples, 0.18%)</title><rect x="71.1356%" y="677" width="0.1820%" height="15" fill="rgb(205,35,11)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="687.50"></text></g><g><title>asm_sysvec_reschedule_ipi (15 samples, 0.18%)</title><rect x="71.1356%" y="661" width="0.1820%" height="15" fill="rgb(242,40,42)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="671.50"></text></g><g><title>sysvec_reschedule_ipi (15 samples, 0.18%)</title><rect x="71.1356%" y="645" width="0.1820%" height="15" fill="rgb(250,170,13)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="655.50"></text></g><g><title>irqentry_exit (15 samples, 0.18%)</title><rect x="71.1356%" y="629" width="0.1820%" height="15" fill="rgb(240,161,28)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="639.50"></text></g><g><title>irqentry_exit_to_user_mode (15 samples, 0.18%)</title><rect x="71.1356%" y="613" width="0.1820%" height="15" fill="rgb(245,179,12)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="623.50"></text></g><g><title>exit_to_user_mode_prepare (15 samples, 0.18%)</title><rect x="71.1356%" y="597" width="0.1820%" height="15" fill="rgb(250,92,32)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="607.50"></text></g><g><title>exit_to_user_mode_loop (15 samples, 0.18%)</title><rect x="71.1356%" y="581" width="0.1820%" height="15" fill="rgb(233,10,40)" fg:x="5863" fg:w="15"/><text x="71.3856%" y="591.50"></text></g><g><title>schedule (14 samples, 0.17%)</title><rect x="71.1478%" y="565" width="0.1699%" height="15" fill="rgb(217,98,1)" fg:x="5864" fg:w="14"/><text x="71.3978%" y="575.50"></text></g><g><title>__schedule (14 samples, 0.17%)</title><rect x="71.1478%" y="549" width="0.1699%" height="15" fill="rgb(238,202,7)" fg:x="5864" fg:w="14"/><text x="71.3978%" y="559.50"></text></g><g><title>finish_task_switch.isra.0 (13 samples, 0.16%)</title><rect x="71.1599%" y="533" width="0.1577%" height="15" fill="rgb(222,91,3)" fg:x="5865" fg:w="13"/><text x="71.4099%" y="543.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="71.2691%" y="517" width="0.0485%" height="15" fill="rgb(211,170,49)" fg:x="5874" fg:w="4"/><text x="71.5191%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (28 samples, 0.34%)</title><rect x="71.3176%" y="693" width="0.3397%" height="15" fill="rgb(253,139,18)" fg:x="5878" fg:w="28"/><text x="71.5676%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (28 samples, 0.34%)</title><rect x="71.3176%" y="677" width="0.3397%" height="15" fill="rgb(222,4,43)" fg:x="5878" fg:w="28"/><text x="71.5676%" y="687.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (77 samples, 0.93%)</title><rect x="71.1356%" y="757" width="0.9342%" height="15" fill="rgb(207,205,12)" fg:x="5863" fg:w="77"/><text x="71.3856%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (77 samples, 0.93%)</title><rect x="71.1356%" y="741" width="0.9342%" height="15" fill="rgb(216,159,46)" fg:x="5863" fg:w="77"/><text x="71.3856%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (77 samples, 0.93%)</title><rect x="71.1356%" y="725" width="0.9342%" height="15" fill="rgb(236,115,1)" fg:x="5863" fg:w="77"/><text x="71.3856%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (77 samples, 0.93%)</title><rect x="71.1356%" y="709" width="0.9342%" height="15" fill="rgb(251,35,33)" fg:x="5863" fg:w="77"/><text x="71.3856%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (34 samples, 0.41%)</title><rect x="71.6574%" y="693" width="0.4125%" height="15" fill="rgb(248,62,51)" fg:x="5906" fg:w="34"/><text x="71.9074%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (34 samples, 0.41%)</title><rect x="71.6574%" y="677" width="0.4125%" height="15" fill="rgb(254,180,19)" fg:x="5906" fg:w="34"/><text x="71.9074%" y="687.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="72.0699%" y="757" width="0.0364%" height="15" fill="rgb(217,100,32)" fg:x="5940" fg:w="3"/><text x="72.3199%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="72.0699%" y="741" width="0.0364%" height="15" fill="rgb(224,71,22)" fg:x="5940" fg:w="3"/><text x="72.3199%" y="751.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.02%)</title><rect x="72.0820%" y="725" width="0.0243%" height="15" fill="rgb(251,185,33)" fg:x="5941" fg:w="2"/><text x="72.3320%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="72.0942%" y="709" width="0.0121%" height="15" fill="rgb(209,75,48)" fg:x="5942" fg:w="1"/><text x="72.3442%" y="719.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.06%)</title><rect x="72.1063%" y="661" width="0.0607%" height="15" fill="rgb(253,190,16)" fg:x="5943" fg:w="5"/><text x="72.3563%" y="671.50"></text></g><g><title>tcache_get (5 samples, 0.06%)</title><rect x="72.1063%" y="645" width="0.0607%" height="15" fill="rgb(226,140,1)" fg:x="5943" fg:w="5"/><text x="72.3563%" y="655.50"></text></g><g><title>tcache_get_n (5 samples, 0.06%)</title><rect x="72.1063%" y="629" width="0.0607%" height="15" fill="rgb(206,75,30)" fg:x="5943" fg:w="5"/><text x="72.3563%" y="639.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="72.1669%" y="661" width="0.0243%" height="15" fill="rgb(231,208,37)" fg:x="5948" fg:w="2"/><text x="72.4169%" y="671.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="72.1669%" y="645" width="0.0243%" height="15" fill="rgb(238,136,40)" fg:x="5948" fg:w="2"/><text x="72.4169%" y="655.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="72.1912%" y="661" width="0.0243%" height="15" fill="rgb(247,137,17)" fg:x="5950" fg:w="2"/><text x="72.4412%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (10 samples, 0.12%)</title><rect x="72.1063%" y="757" width="0.1213%" height="15" fill="rgb(240,60,40)" fg:x="5943" fg:w="10"/><text x="72.3563%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.12%)</title><rect x="72.1063%" y="741" width="0.1213%" height="15" fill="rgb(236,68,50)" fg:x="5943" fg:w="10"/><text x="72.3563%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 0.12%)</title><rect x="72.1063%" y="725" width="0.1213%" height="15" fill="rgb(230,42,12)" fg:x="5943" fg:w="10"/><text x="72.3563%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.12%)</title><rect x="72.1063%" y="709" width="0.1213%" height="15" fill="rgb(219,16,16)" fg:x="5943" fg:w="10"/><text x="72.3563%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.12%)</title><rect x="72.1063%" y="693" width="0.1213%" height="15" fill="rgb(220,38,35)" fg:x="5943" fg:w="10"/><text x="72.3563%" y="703.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.12%)</title><rect x="72.1063%" y="677" width="0.1213%" height="15" fill="rgb(228,33,1)" fg:x="5943" fg:w="10"/><text x="72.3563%" y="687.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="72.2155%" y="661" width="0.0121%" height="15" fill="rgb(241,46,31)" fg:x="5952" fg:w="1"/><text x="72.4655%" y="671.50"></text></g><g><title>__GI___libc_free (5 samples, 0.06%)</title><rect x="72.2519%" y="693" width="0.0607%" height="15" fill="rgb(232,58,20)" fg:x="5955" fg:w="5"/><text x="72.5019%" y="703.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="72.2640%" y="677" width="0.0485%" height="15" fill="rgb(206,228,53)" fg:x="5956" fg:w="4"/><text x="72.5140%" y="687.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="72.3004%" y="661" width="0.0121%" height="15" fill="rgb(206,88,33)" fg:x="5959" fg:w="1"/><text x="72.5504%" y="671.50"></text></g><g><title>core::mem::drop (4 samples, 0.05%)</title><rect x="72.3125%" y="677" width="0.0485%" height="15" fill="rgb(238,69,7)" fg:x="5960" fg:w="4"/><text x="72.5625%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.05%)</title><rect x="72.3125%" y="661" width="0.0485%" height="15" fill="rgb(250,21,46)" fg:x="5960" fg:w="4"/><text x="72.5625%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="72.3125%" y="645" width="0.0485%" height="15" fill="rgb(215,212,21)" fg:x="5960" fg:w="4"/><text x="72.5625%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="72.3125%" y="629" width="0.0485%" height="15" fill="rgb(211,35,12)" fg:x="5960" fg:w="4"/><text x="72.5625%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="72.3125%" y="613" width="0.0485%" height="15" fill="rgb(231,184,16)" fg:x="5960" fg:w="4"/><text x="72.5625%" y="623.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="72.3611%" y="629" width="0.0607%" height="15" fill="rgb(242,140,15)" fg:x="5964" fg:w="5"/><text x="72.6111%" y="639.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="72.3611%" y="613" width="0.0607%" height="15" fill="rgb(220,37,14)" fg:x="5964" fg:w="5"/><text x="72.6111%" y="623.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="72.3611%" y="597" width="0.0607%" height="15" fill="rgb(223,146,22)" fg:x="5964" fg:w="5"/><text x="72.6111%" y="607.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="72.3611%" y="581" width="0.0607%" height="15" fill="rgb(216,132,15)" fg:x="5964" fg:w="5"/><text x="72.6111%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="72.3611%" y="565" width="0.0607%" height="15" fill="rgb(248,83,5)" fg:x="5964" fg:w="5"/><text x="72.6111%" y="575.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="72.3611%" y="549" width="0.0607%" height="15" fill="rgb(231,206,48)" fg:x="5964" fg:w="5"/><text x="72.6111%" y="559.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="72.3732%" y="533" width="0.0485%" height="15" fill="rgb(253,185,37)" fg:x="5965" fg:w="4"/><text x="72.6232%" y="543.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="72.3732%" y="517" width="0.0485%" height="15" fill="rgb(208,21,44)" fg:x="5965" fg:w="4"/><text x="72.6232%" y="527.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="72.3732%" y="501" width="0.0485%" height="15" fill="rgb(236,125,4)" fg:x="5965" fg:w="4"/><text x="72.6232%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (15 samples, 0.18%)</title><rect x="72.3125%" y="693" width="0.1820%" height="15" fill="rgb(226,134,25)" fg:x="5960" fg:w="15"/><text x="72.5625%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (11 samples, 0.13%)</title><rect x="72.3611%" y="677" width="0.1335%" height="15" fill="rgb(250,201,12)" fg:x="5964" fg:w="11"/><text x="72.6111%" y="687.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="72.3611%" y="661" width="0.1335%" height="15" fill="rgb(225,92,18)" fg:x="5964" fg:w="11"/><text x="72.6111%" y="671.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (11 samples, 0.13%)</title><rect x="72.3611%" y="645" width="0.1335%" height="15" fill="rgb(227,35,22)" fg:x="5964" fg:w="11"/><text x="72.6111%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.07%)</title><rect x="72.4217%" y="629" width="0.0728%" height="15" fill="rgb(214,180,52)" fg:x="5969" fg:w="6"/><text x="72.6717%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.07%)</title><rect x="72.4217%" y="613" width="0.0728%" height="15" fill="rgb(233,55,38)" fg:x="5969" fg:w="6"/><text x="72.6717%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (29 samples, 0.35%)</title><rect x="72.2276%" y="757" width="0.3519%" height="15" fill="rgb(249,171,43)" fg:x="5953" fg:w="29"/><text x="72.4776%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (27 samples, 0.33%)</title><rect x="72.2519%" y="741" width="0.3276%" height="15" fill="rgb(239,87,2)" fg:x="5955" fg:w="27"/><text x="72.5019%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (27 samples, 0.33%)</title><rect x="72.2519%" y="725" width="0.3276%" height="15" fill="rgb(248,141,5)" fg:x="5955" fg:w="27"/><text x="72.5019%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.33%)</title><rect x="72.2519%" y="709" width="0.3276%" height="15" fill="rgb(238,33,42)" fg:x="5955" fg:w="27"/><text x="72.5019%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (7 samples, 0.08%)</title><rect x="72.4945%" y="693" width="0.0849%" height="15" fill="rgb(231,57,19)" fg:x="5975" fg:w="7"/><text x="72.7445%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (7 samples, 0.08%)</title><rect x="72.4945%" y="677" width="0.0849%" height="15" fill="rgb(214,78,53)" fg:x="5975" fg:w="7"/><text x="72.7445%" y="687.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 1.80%)</title><rect x="70.9294%" y="773" width="1.7957%" height="15" fill="rgb(206,132,29)" fg:x="5846" fg:w="148"/><text x="71.1794%" y="783.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (12 samples, 0.15%)</title><rect x="72.5795%" y="757" width="0.1456%" height="15" fill="rgb(248,174,31)" fg:x="5982" fg:w="12"/><text x="72.8295%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (12 samples, 0.15%)</title><rect x="72.5795%" y="741" width="0.1456%" height="15" fill="rgb(221,87,13)" fg:x="5982" fg:w="12"/><text x="72.8295%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (12 samples, 0.15%)</title><rect x="72.5795%" y="725" width="0.1456%" height="15" fill="rgb(223,197,17)" fg:x="5982" fg:w="12"/><text x="72.8295%" y="735.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (12 samples, 0.15%)</title><rect x="72.5795%" y="709" width="0.1456%" height="15" fill="rgb(220,144,50)" fg:x="5982" fg:w="12"/><text x="72.8295%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (12 samples, 0.15%)</title><rect x="72.5795%" y="693" width="0.1456%" height="15" fill="rgb(244,201,11)" fg:x="5982" fg:w="12"/><text x="72.8295%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (12 samples, 0.15%)</title><rect x="72.5795%" y="677" width="0.1456%" height="15" fill="rgb(249,81,34)" fg:x="5982" fg:w="12"/><text x="72.8295%" y="687.50"></text></g><g><title>__GI___libc_free (6 samples, 0.07%)</title><rect x="72.7372%" y="693" width="0.0728%" height="15" fill="rgb(205,161,12)" fg:x="5995" fg:w="6"/><text x="72.9872%" y="703.50"></text></g><g><title>_int_free (6 samples, 0.07%)</title><rect x="72.7372%" y="677" width="0.0728%" height="15" fill="rgb(252,139,50)" fg:x="5995" fg:w="6"/><text x="72.9872%" y="687.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="72.7493%" y="661" width="0.0607%" height="15" fill="rgb(205,169,14)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="671.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="72.7493%" y="645" width="0.0607%" height="15" fill="rgb(248,198,33)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="655.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="72.7493%" y="629" width="0.0607%" height="15" fill="rgb(236,23,21)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="639.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="72.7493%" y="613" width="0.0607%" height="15" fill="rgb(231,13,38)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="623.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="72.7493%" y="597" width="0.0607%" height="15" fill="rgb(239,139,21)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="607.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="72.7493%" y="581" width="0.0607%" height="15" fill="rgb(222,164,45)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="591.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="72.7493%" y="565" width="0.0607%" height="15" fill="rgb(230,52,27)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="575.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="72.7493%" y="549" width="0.0607%" height="15" fill="rgb(227,143,42)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="559.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="72.7493%" y="533" width="0.0607%" height="15" fill="rgb(249,127,1)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="543.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="72.7493%" y="517" width="0.0607%" height="15" fill="rgb(243,107,26)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="527.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="72.7493%" y="501" width="0.0607%" height="15" fill="rgb(225,7,45)" fg:x="5996" fg:w="5"/><text x="72.9993%" y="511.50"></text></g><g><title>core::mem::drop (11 samples, 0.13%)</title><rect x="72.8100%" y="677" width="0.1335%" height="15" fill="rgb(241,88,38)" fg:x="6001" fg:w="11"/><text x="73.0600%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (11 samples, 0.13%)</title><rect x="72.8100%" y="661" width="0.1335%" height="15" fill="rgb(226,121,9)" fg:x="6001" fg:w="11"/><text x="73.0600%" y="671.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="72.8100%" y="645" width="0.1335%" height="15" fill="rgb(253,60,29)" fg:x="6001" fg:w="11"/><text x="73.0600%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.12%)</title><rect x="72.8221%" y="629" width="0.1213%" height="15" fill="rgb(244,181,39)" fg:x="6002" fg:w="10"/><text x="73.0721%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.12%)</title><rect x="72.8221%" y="613" width="0.1213%" height="15" fill="rgb(252,203,31)" fg:x="6002" fg:w="10"/><text x="73.0721%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (22 samples, 0.27%)</title><rect x="72.8100%" y="693" width="0.2669%" height="15" fill="rgb(224,120,8)" fg:x="6001" fg:w="22"/><text x="73.0600%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (11 samples, 0.13%)</title><rect x="72.9435%" y="677" width="0.1335%" height="15" fill="rgb(205,171,54)" fg:x="6012" fg:w="11"/><text x="73.1935%" y="687.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="72.9435%" y="661" width="0.1335%" height="15" fill="rgb(235,89,11)" fg:x="6012" fg:w="11"/><text x="73.1935%" y="671.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (11 samples, 0.13%)</title><rect x="72.9435%" y="645" width="0.1335%" height="15" fill="rgb(212,180,28)" fg:x="6012" fg:w="11"/><text x="73.1935%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.12%)</title><rect x="72.9556%" y="629" width="0.1213%" height="15" fill="rgb(247,84,49)" fg:x="6013" fg:w="10"/><text x="73.2056%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.12%)</title><rect x="72.9556%" y="613" width="0.1213%" height="15" fill="rgb(236,187,52)" fg:x="6013" fg:w="10"/><text x="73.2056%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::iter::Iter&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (31 samples, 0.38%)</title><rect x="72.7251%" y="773" width="0.3761%" height="15" fill="rgb(227,24,15)" fg:x="5994" fg:w="31"/><text x="72.9751%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt;&gt; (31 samples, 0.38%)</title><rect x="72.7251%" y="757" width="0.3761%" height="15" fill="rgb(227,211,13)" fg:x="5994" fg:w="31"/><text x="72.9751%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;,hashbrown::map::Iter&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;&gt;)&gt; (30 samples, 0.36%)</title><rect x="72.7372%" y="741" width="0.3640%" height="15" fill="rgb(245,52,14)" fg:x="5995" fg:w="30"/><text x="72.9872%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (30 samples, 0.36%)</title><rect x="72.7372%" y="725" width="0.3640%" height="15" fill="rgb(225,185,13)" fg:x="5995" fg:w="30"/><text x="72.9872%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.36%)</title><rect x="72.7372%" y="709" width="0.3640%" height="15" fill="rgb(217,160,29)" fg:x="5995" fg:w="30"/><text x="72.9872%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="73.0769%" y="693" width="0.0243%" height="15" fill="rgb(216,115,53)" fg:x="6023" fg:w="2"/><text x="73.3269%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="73.0769%" y="677" width="0.0243%" height="15" fill="rgb(236,99,5)" fg:x="6023" fg:w="2"/><text x="73.3269%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::multiple::RefMulti&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt; (4 samples, 0.05%)</title><rect x="73.1012%" y="773" width="0.0485%" height="15" fill="rgb(222,60,38)" fg:x="6025" fg:w="4"/><text x="73.3512%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;usize,dashmap::util::SharedValue&lt;block_stm_revm::mv_memory::MemoryEntry&gt;,std::hash::random::RandomState&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="73.1012%" y="757" width="0.0485%" height="15" fill="rgb(212,82,22)" fg:x="6025" fg:w="4"/><text x="73.3512%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="73.1012%" y="741" width="0.0485%" height="15" fill="rgb(214,48,28)" fg:x="6025" fg:w="4"/><text x="73.3512%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="73.1133%" y="725" width="0.0364%" height="15" fill="rgb(245,196,50)" fg:x="6026" fg:w="3"/><text x="73.3633%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="73.1133%" y="709" width="0.0364%" height="15" fill="rgb(225,159,46)" fg:x="6026" fg:w="3"/><text x="73.3633%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="73.1497%" y="709" width="0.0607%" height="15" fill="rgb(207,195,48)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="719.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="73.1497%" y="693" width="0.0607%" height="15" fill="rgb(240,73,3)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="703.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="73.1497%" y="677" width="0.0607%" height="15" fill="rgb(245,57,23)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="73.1497%" y="661" width="0.0607%" height="15" fill="rgb(240,75,18)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="73.1497%" y="645" width="0.0607%" height="15" fill="rgb(238,168,12)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="655.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="73.1497%" y="629" width="0.0607%" height="15" fill="rgb(226,20,40)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="639.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="73.1497%" y="613" width="0.0607%" height="15" fill="rgb(224,130,35)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="623.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="73.1497%" y="597" width="0.0607%" height="15" fill="rgb(225,63,41)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="73.1497%" y="581" width="0.0607%" height="15" fill="rgb(219,3,3)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="73.1497%" y="565" width="0.0607%" height="15" fill="rgb(218,157,4)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="575.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="73.1497%" y="549" width="0.0607%" height="15" fill="rgb(232,76,36)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="559.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.06%)</title><rect x="73.1497%" y="533" width="0.0607%" height="15" fill="rgb(247,36,0)" fg:x="6029" fg:w="5"/><text x="73.3997%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::Ref&lt;block_stm_revm::MemoryLocation,dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="73.1497%" y="773" width="0.0971%" height="15" fill="rgb(205,2,34)" fg:x="6029" fg:w="8"/><text x="73.3997%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (8 samples, 0.10%)</title><rect x="73.1497%" y="757" width="0.0971%" height="15" fill="rgb(239,136,13)" fg:x="6029" fg:w="8"/><text x="73.3997%" y="767.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="73.1497%" y="741" width="0.0971%" height="15" fill="rgb(253,122,12)" fg:x="6029" fg:w="8"/><text x="73.3997%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (8 samples, 0.10%)</title><rect x="73.1497%" y="725" width="0.0971%" height="15" fill="rgb(222,174,7)" fg:x="6029" fg:w="8"/><text x="73.3997%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="73.2104%" y="709" width="0.0364%" height="15" fill="rgb(208,191,42)" fg:x="6034" fg:w="3"/><text x="73.4604%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="73.2104%" y="693" width="0.0364%" height="15" fill="rgb(237,212,15)" fg:x="6034" fg:w="3"/><text x="73.4604%" y="703.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="73.2953%" y="501" width="0.0485%" height="15" fill="rgb(215,65,20)" fg:x="6041" fg:w="4"/><text x="73.5453%" y="511.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="73.2953%" y="485" width="0.0485%" height="15" fill="rgb(232,103,11)" fg:x="6041" fg:w="4"/><text x="73.5453%" y="495.50"></text></g><g><title>exit_to_user_mode_loop (8 samples, 0.10%)</title><rect x="73.2953%" y="565" width="0.0971%" height="15" fill="rgb(235,148,18)" fg:x="6041" fg:w="8"/><text x="73.5453%" y="575.50"></text></g><g><title>schedule (8 samples, 0.10%)</title><rect x="73.2953%" y="549" width="0.0971%" height="15" fill="rgb(240,173,7)" fg:x="6041" fg:w="8"/><text x="73.5453%" y="559.50"></text></g><g><title>__schedule (8 samples, 0.10%)</title><rect x="73.2953%" y="533" width="0.0971%" height="15" fill="rgb(228,182,25)" fg:x="6041" fg:w="8"/><text x="73.5453%" y="543.50"></text></g><g><title>finish_task_switch.isra.0 (8 samples, 0.10%)</title><rect x="73.2953%" y="517" width="0.0971%" height="15" fill="rgb(247,3,52)" fg:x="6041" fg:w="8"/><text x="73.5453%" y="527.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="73.3438%" y="501" width="0.0485%" height="15" fill="rgb(226,155,8)" fg:x="6045" fg:w="4"/><text x="73.5938%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (10 samples, 0.12%)</title><rect x="73.2953%" y="677" width="0.1213%" height="15" fill="rgb(243,195,38)" fg:x="6041" fg:w="10"/><text x="73.5453%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (10 samples, 0.12%)</title><rect x="73.2953%" y="661" width="0.1213%" height="15" fill="rgb(254,181,33)" fg:x="6041" fg:w="10"/><text x="73.5453%" y="671.50"></text></g><g><title>asm_sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="73.2953%" y="645" width="0.1213%" height="15" fill="rgb(232,98,23)" fg:x="6041" fg:w="10"/><text x="73.5453%" y="655.50"></text></g><g><title>sysvec_reschedule_ipi (10 samples, 0.12%)</title><rect x="73.2953%" y="629" width="0.1213%" height="15" fill="rgb(205,23,10)" fg:x="6041" fg:w="10"/><text x="73.5453%" y="639.50"></text></g><g><title>irqentry_exit (10 samples, 0.12%)</title><rect x="73.2953%" y="613" width="0.1213%" height="15" fill="rgb(212,124,38)" fg:x="6041" fg:w="10"/><text x="73.5453%" y="623.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.12%)</title><rect x="73.2953%" y="597" width="0.1213%" height="15" fill="rgb(228,207,2)" fg:x="6041" fg:w="10"/><text x="73.5453%" y="607.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.12%)</title><rect x="73.2953%" y="581" width="0.1213%" height="15" fill="rgb(215,120,22)" fg:x="6041" fg:w="10"/><text x="73.5453%" y="591.50"></text></g><g><title>switch_fpu_return (2 samples, 0.02%)</title><rect x="73.3924%" y="565" width="0.0243%" height="15" fill="rgb(251,172,33)" fg:x="6049" fg:w="2"/><text x="73.6424%" y="575.50"></text></g><g><title>restore_fpregs_from_fpstate (2 samples, 0.02%)</title><rect x="73.3924%" y="549" width="0.0243%" height="15" fill="rgb(250,83,2)" fg:x="6049" fg:w="2"/><text x="73.6424%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (12 samples, 0.15%)</title><rect x="73.4166%" y="677" width="0.1456%" height="15" fill="rgb(210,132,53)" fg:x="6051" fg:w="12"/><text x="73.6666%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (12 samples, 0.15%)</title><rect x="73.4166%" y="661" width="0.1456%" height="15" fill="rgb(221,208,36)" fg:x="6051" fg:w="12"/><text x="73.6666%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (11 samples, 0.13%)</title><rect x="73.5622%" y="677" width="0.1335%" height="15" fill="rgb(205,192,46)" fg:x="6063" fg:w="11"/><text x="73.8122%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.13%)</title><rect x="73.5622%" y="661" width="0.1335%" height="15" fill="rgb(223,163,14)" fg:x="6063" fg:w="11"/><text x="73.8122%" y="671.50"></text></g><g><title>blkcg_maybe_throttle_current (1 samples, 0.01%)</title><rect x="73.6957%" y="485" width="0.0121%" height="15" fill="rgb(218,41,28)" fg:x="6074" fg:w="1"/><text x="73.9457%" y="495.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="73.6957%" y="581" width="0.0607%" height="15" fill="rgb(235,104,10)" fg:x="6074" fg:w="5"/><text x="73.9457%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="73.6957%" y="565" width="0.0607%" height="15" fill="rgb(246,17,4)" fg:x="6074" fg:w="5"/><text x="73.9457%" y="575.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="73.6957%" y="549" width="0.0607%" height="15" fill="rgb(240,7,16)" fg:x="6074" fg:w="5"/><text x="73.9457%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="73.6957%" y="533" width="0.0607%" height="15" fill="rgb(213,160,23)" fg:x="6074" fg:w="5"/><text x="73.9457%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="73.6957%" y="517" width="0.0607%" height="15" fill="rgb(251,179,49)" fg:x="6074" fg:w="5"/><text x="73.9457%" y="527.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="73.6957%" y="501" width="0.0607%" height="15" fill="rgb(247,198,10)" fg:x="6074" fg:w="5"/><text x="73.9457%" y="511.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="73.7078%" y="485" width="0.0485%" height="15" fill="rgb(220,65,29)" fg:x="6075" fg:w="4"/><text x="73.9578%" y="495.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="73.7078%" y="469" width="0.0485%" height="15" fill="rgb(237,171,28)" fg:x="6075" fg:w="4"/><text x="73.9578%" y="479.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="73.7078%" y="453" width="0.0485%" height="15" fill="rgb(228,44,26)" fg:x="6075" fg:w="4"/><text x="73.9578%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="73.7928%" y="453" width="0.0607%" height="15" fill="rgb(216,210,27)" fg:x="6082" fg:w="5"/><text x="74.0428%" y="463.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="73.8534%" y="453" width="0.0485%" height="15" fill="rgb(252,10,17)" fg:x="6087" fg:w="4"/><text x="74.1034%" y="463.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="73.9020%" y="453" width="0.0121%" height="15" fill="rgb(214,172,30)" fg:x="6091" fg:w="1"/><text x="74.1520%" y="463.50"></text></g><g><title>_raw_spin_unlock (8 samples, 0.10%)</title><rect x="74.3024%" y="421" width="0.0971%" height="15" fill="rgb(253,130,48)" fg:x="6124" fg:w="8"/><text x="74.5524%" y="431.50"></text></g><g><title>perf_ctx_enable (59 samples, 0.72%)</title><rect x="74.3994%" y="421" width="0.7158%" height="15" fill="rgb(226,99,43)" fg:x="6132" fg:w="59"/><text x="74.6494%" y="431.50"></text></g><g><title>x86_pmu_enable (21 samples, 0.25%)</title><rect x="74.8605%" y="405" width="0.2548%" height="15" fill="rgb(239,111,26)" fg:x="6170" fg:w="21"/><text x="75.1105%" y="415.50"></text></g><g><title>__perf_event_task_sched_in (98 samples, 1.19%)</title><rect x="74.0354%" y="437" width="1.1890%" height="15" fill="rgb(240,27,53)" fg:x="6102" fg:w="98"/><text x="74.2854%" y="447.50"></text></g><g><title>perf_pmu_nop_void (9 samples, 0.11%)</title><rect x="75.1153%" y="421" width="0.1092%" height="15" fill="rgb(254,163,12)" fg:x="6191" fg:w="9"/><text x="75.3653%" y="431.50"></text></g><g><title>_raw_spin_unlock (10 samples, 0.12%)</title><rect x="75.2245%" y="437" width="0.1213%" height="15" fill="rgb(225,51,48)" fg:x="6200" fg:w="10"/><text x="75.4745%" y="447.50"></text></g><g><title>__x64_sys_futex (132 samples, 1.60%)</title><rect x="73.7564%" y="549" width="1.6016%" height="15" fill="rgb(205,19,32)" fg:x="6079" fg:w="132"/><text x="74.0064%" y="559.50"></text></g><g><title>do_futex (131 samples, 1.59%)</title><rect x="73.7685%" y="533" width="1.5894%" height="15" fill="rgb(218,119,26)" fg:x="6080" fg:w="131"/><text x="74.0185%" y="543.50"></text></g><g><title>futex_wait (131 samples, 1.59%)</title><rect x="73.7685%" y="517" width="1.5894%" height="15" fill="rgb(231,173,33)" fg:x="6080" fg:w="131"/><text x="74.0185%" y="527.50"></text></g><g><title>futex_wait_queue (131 samples, 1.59%)</title><rect x="73.7685%" y="501" width="1.5894%" height="15" fill="rgb(241,100,29)" fg:x="6080" fg:w="131"/><text x="74.0185%" y="511.50"></text></g><g><title>schedule (130 samples, 1.58%)</title><rect x="73.7806%" y="485" width="1.5773%" height="15" fill="rgb(250,194,34)" fg:x="6081" fg:w="130"/><text x="74.0306%" y="495.50"></text></g><g><title>__schedule (130 samples, 1.58%)</title><rect x="73.7806%" y="469" width="1.5773%" height="15" fill="rgb(215,23,50)" fg:x="6081" fg:w="130"/><text x="74.0306%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (119 samples, 1.44%)</title><rect x="73.9141%" y="453" width="1.4438%" height="15" fill="rgb(206,49,37)" fg:x="6092" fg:w="119"/><text x="74.1641%" y="463.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="75.3458%" y="437" width="0.0121%" height="15" fill="rgb(247,39,21)" fg:x="6210" fg:w="1"/><text x="75.5958%" y="447.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="75.3458%" y="421" width="0.0121%" height="15" fill="rgb(209,220,15)" fg:x="6210" fg:w="1"/><text x="75.5958%" y="431.50"></text></g><g><title>__sysvec_irq_work (1 samples, 0.01%)</title><rect x="75.3458%" y="405" width="0.0121%" height="15" fill="rgb(206,41,33)" fg:x="6210" fg:w="1"/><text x="75.5958%" y="415.50"></text></g><g><title>irq_work_run (1 samples, 0.01%)</title><rect x="75.3458%" y="389" width="0.0121%" height="15" fill="rgb(221,225,45)" fg:x="6210" fg:w="1"/><text x="75.5958%" y="399.50"></text></g><g><title>irq_work_run_list (1 samples, 0.01%)</title><rect x="75.3458%" y="373" width="0.0121%" height="15" fill="rgb(216,27,18)" fg:x="6210" fg:w="1"/><text x="75.5958%" y="383.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="75.3701%" y="485" width="0.0121%" height="15" fill="rgb(250,193,34)" fg:x="6212" fg:w="1"/><text x="75.6201%" y="495.50"></text></g><g><title>__get_user_8 (1 samples, 0.01%)</title><rect x="75.3701%" y="469" width="0.0121%" height="15" fill="rgb(227,215,20)" fg:x="6212" fg:w="1"/><text x="75.6201%" y="479.50"></text></g><g><title>parking_lot_core::parking_lot::park (140 samples, 1.70%)</title><rect x="73.6957%" y="677" width="1.6986%" height="15" fill="rgb(242,211,27)" fg:x="6074" fg:w="140"/><text x="73.9457%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (140 samples, 1.70%)</title><rect x="73.6957%" y="661" width="1.6986%" height="15" fill="rgb(229,190,30)" fg:x="6074" fg:w="140"/><text x="73.9457%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (140 samples, 1.70%)</title><rect x="73.6957%" y="645" width="1.6986%" height="15" fill="rgb(253,31,29)" fg:x="6074" fg:w="140"/><text x="73.9457%" y="655.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (140 samples, 1.70%)</title><rect x="73.6957%" y="629" width="1.6986%" height="15" fill="rgb(229,177,52)" fg:x="6074" fg:w="140"/><text x="73.9457%" y="639.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (140 samples, 1.70%)</title><rect x="73.6957%" y="613" width="1.6986%" height="15" fill="rgb(226,88,8)" fg:x="6074" fg:w="140"/><text x="73.9457%" y="623.50"></text></g><g><title>syscall (140 samples, 1.70%)</title><rect x="73.6957%" y="597" width="1.6986%" height="15" fill="rgb(214,55,27)" fg:x="6074" fg:w="140"/><text x="73.9457%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (135 samples, 1.64%)</title><rect x="73.7564%" y="581" width="1.6380%" height="15" fill="rgb(233,202,5)" fg:x="6079" fg:w="135"/><text x="74.0064%" y="591.50"></text></g><g><title>do_syscall_64 (135 samples, 1.64%)</title><rect x="73.7564%" y="565" width="1.6380%" height="15" fill="rgb(251,49,30)" fg:x="6079" fg:w="135"/><text x="74.0064%" y="575.50"></text></g><g><title>syscall_exit_to_user_mode (3 samples, 0.04%)</title><rect x="75.3579%" y="549" width="0.0364%" height="15" fill="rgb(235,18,52)" fg:x="6211" fg:w="3"/><text x="75.6079%" y="559.50"></text></g><g><title>exit_to_user_mode_prepare (3 samples, 0.04%)</title><rect x="75.3579%" y="533" width="0.0364%" height="15" fill="rgb(250,111,51)" fg:x="6211" fg:w="3"/><text x="75.6079%" y="543.50"></text></g><g><title>exit_to_user_mode_loop (3 samples, 0.04%)</title><rect x="75.3579%" y="517" width="0.0364%" height="15" fill="rgb(218,13,25)" fg:x="6211" fg:w="3"/><text x="75.6079%" y="527.50"></text></g><g><title>__rseq_handle_notify_resume (2 samples, 0.02%)</title><rect x="75.3701%" y="501" width="0.0243%" height="15" fill="rgb(248,96,7)" fg:x="6212" fg:w="2"/><text x="75.6201%" y="511.50"></text></g><g><title>rseq_update_cpu_node_id (1 samples, 0.01%)</title><rect x="75.3822%" y="485" width="0.0121%" height="15" fill="rgb(217,31,15)" fg:x="6213" fg:w="1"/><text x="75.6322%" y="495.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (180 samples, 2.18%)</title><rect x="73.2953%" y="693" width="2.1839%" height="15" fill="rgb(228,59,49)" fg:x="6041" fg:w="180"/><text x="73.5453%" y="703.50">d..</text></g><g><title>parking_lot_core::spinwait::SpinWait::spin_no_yield (7 samples, 0.08%)</title><rect x="75.3943%" y="677" width="0.0849%" height="15" fill="rgb(210,152,38)" fg:x="6214" fg:w="7"/><text x="75.6443%" y="687.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (7 samples, 0.08%)</title><rect x="75.3943%" y="661" width="0.0849%" height="15" fill="rgb(206,71,11)" fg:x="6214" fg:w="7"/><text x="75.6443%" y="671.50"></text></g><g><title>core::hint::spin_loop (7 samples, 0.08%)</title><rect x="75.3943%" y="645" width="0.0849%" height="15" fill="rgb(244,199,5)" fg:x="6214" fg:w="7"/><text x="75.6443%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (7 samples, 0.08%)</title><rect x="75.3943%" y="629" width="0.0849%" height="15" fill="rgb(253,49,1)" fg:x="6214" fg:w="7"/><text x="75.6443%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (48 samples, 0.58%)</title><rect x="75.4793%" y="677" width="0.5824%" height="15" fill="rgb(225,206,40)" fg:x="6221" fg:w="48"/><text x="75.7293%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (48 samples, 0.58%)</title><rect x="75.4793%" y="661" width="0.5824%" height="15" fill="rgb(243,116,47)" fg:x="6221" fg:w="48"/><text x="75.7293%" y="671.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (306 samples, 3.71%)</title><rect x="73.2832%" y="741" width="3.7127%" height="15" fill="rgb(219,225,16)" fg:x="6040" fg:w="306"/><text x="73.5332%" y="751.50">&lt;das..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (306 samples, 3.71%)</title><rect x="73.2832%" y="725" width="3.7127%" height="15" fill="rgb(233,29,47)" fg:x="6040" fg:w="306"/><text x="73.5332%" y="735.50">lock..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (306 samples, 3.71%)</title><rect x="73.2832%" y="709" width="3.7127%" height="15" fill="rgb(250,179,18)" fg:x="6040" fg:w="306"/><text x="73.5332%" y="719.50">&lt;das..</text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (125 samples, 1.52%)</title><rect x="75.4793%" y="693" width="1.5166%" height="15" fill="rgb(215,176,6)" fg:x="6221" fg:w="125"/><text x="75.7293%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (77 samples, 0.93%)</title><rect x="76.0616%" y="677" width="0.9342%" height="15" fill="rgb(214,117,39)" fg:x="6269" fg:w="77"/><text x="76.3116%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (77 samples, 0.93%)</title><rect x="76.0616%" y="661" width="0.9342%" height="15" fill="rgb(247,183,36)" fg:x="6269" fg:w="77"/><text x="76.3116%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (28 samples, 0.34%)</title><rect x="76.9959%" y="741" width="0.3397%" height="15" fill="rgb(237,200,3)" fg:x="6346" fg:w="28"/><text x="77.2459%" y="751.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.34%)</title><rect x="76.9959%" y="725" width="0.3397%" height="15" fill="rgb(212,220,24)" fg:x="6346" fg:w="28"/><text x="77.2459%" y="735.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (28 samples, 0.34%)</title><rect x="76.9959%" y="709" width="0.3397%" height="15" fill="rgb(245,216,20)" fg:x="6346" fg:w="28"/><text x="77.2459%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (28 samples, 0.34%)</title><rect x="76.9959%" y="693" width="0.3397%" height="15" fill="rgb(219,124,7)" fg:x="6346" fg:w="28"/><text x="77.2459%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (28 samples, 0.34%)</title><rect x="76.9959%" y="677" width="0.3397%" height="15" fill="rgb(227,167,8)" fg:x="6346" fg:w="28"/><text x="77.2459%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.04%)</title><rect x="77.3477%" y="661" width="0.0364%" height="15" fill="rgb(241,37,2)" fg:x="6375" fg:w="3"/><text x="77.5977%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.05%)</title><rect x="77.3477%" y="677" width="0.0485%" height="15" fill="rgb(238,134,33)" fg:x="6375" fg:w="4"/><text x="77.5977%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="77.3841%" y="661" width="0.0121%" height="15" fill="rgb(248,48,27)" fg:x="6378" fg:w="1"/><text x="77.6341%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.08%)</title><rect x="77.3356%" y="725" width="0.0849%" height="15" fill="rgb(212,14,16)" fg:x="6374" fg:w="7"/><text x="77.5856%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.08%)</title><rect x="77.3356%" y="709" width="0.0849%" height="15" fill="rgb(217,205,37)" fg:x="6374" fg:w="7"/><text x="77.5856%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.08%)</title><rect x="77.3356%" y="693" width="0.0849%" height="15" fill="rgb(233,185,47)" fg:x="6374" fg:w="7"/><text x="77.5856%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="77.3963%" y="677" width="0.0243%" height="15" fill="rgb(244,88,8)" fg:x="6379" fg:w="2"/><text x="77.6463%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="77.3963%" y="661" width="0.0243%" height="15" fill="rgb(213,0,20)" fg:x="6379" fg:w="2"/><text x="77.6463%" y="671.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.01%)</title><rect x="77.4205%" y="725" width="0.0121%" height="15" fill="rgb(238,159,36)" fg:x="6381" fg:w="1"/><text x="77.6705%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="77.5540%" y="549" width="0.0121%" height="15" fill="rgb(253,173,17)" fg:x="6392" fg:w="1"/><text x="77.8040%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="77.5540%" y="533" width="0.0121%" height="15" fill="rgb(221,23,28)" fg:x="6392" fg:w="1"/><text x="77.8040%" y="543.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="77.5661%" y="549" width="0.0607%" height="15" fill="rgb(218,113,15)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="559.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="77.5661%" y="533" width="0.0607%" height="15" fill="rgb(233,58,3)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="543.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="77.5661%" y="517" width="0.0607%" height="15" fill="rgb(250,46,35)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="527.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="77.5661%" y="501" width="0.0607%" height="15" fill="rgb(210,169,11)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="511.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="77.5661%" y="485" width="0.0607%" height="15" fill="rgb(246,88,19)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="495.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="77.5661%" y="469" width="0.0607%" height="15" fill="rgb(206,81,49)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="479.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="77.5661%" y="453" width="0.0607%" height="15" fill="rgb(232,144,18)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="463.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="77.5661%" y="437" width="0.0607%" height="15" fill="rgb(235,2,27)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="447.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="77.5661%" y="421" width="0.0607%" height="15" fill="rgb(239,157,39)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="431.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="77.5661%" y="405" width="0.0607%" height="15" fill="rgb(220,11,17)" fg:x="6393" fg:w="5"/><text x="77.8161%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.10%)</title><rect x="77.5419%" y="597" width="0.0971%" height="15" fill="rgb(243,94,50)" fg:x="6391" fg:w="8"/><text x="77.7919%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.10%)</title><rect x="77.5419%" y="581" width="0.0971%" height="15" fill="rgb(218,22,0)" fg:x="6391" fg:w="8"/><text x="77.7919%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.10%)</title><rect x="77.5419%" y="565" width="0.0971%" height="15" fill="rgb(249,70,21)" fg:x="6391" fg:w="8"/><text x="77.7919%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="77.6268%" y="549" width="0.0121%" height="15" fill="rgb(245,111,46)" fg:x="6398" fg:w="1"/><text x="77.8768%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (9 samples, 0.11%)</title><rect x="77.5419%" y="693" width="0.1092%" height="15" fill="rgb(244,183,12)" fg:x="6391" fg:w="9"/><text x="77.7919%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (9 samples, 0.11%)</title><rect x="77.5419%" y="677" width="0.1092%" height="15" fill="rgb(207,117,0)" fg:x="6391" fg:w="9"/><text x="77.7919%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (9 samples, 0.11%)</title><rect x="77.5419%" y="661" width="0.1092%" height="15" fill="rgb(206,20,43)" fg:x="6391" fg:w="9"/><text x="77.7919%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9 samples, 0.11%)</title><rect x="77.5419%" y="645" width="0.1092%" height="15" fill="rgb(221,104,11)" fg:x="6391" fg:w="9"/><text x="77.7919%" y="655.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (9 samples, 0.11%)</title><rect x="77.5419%" y="629" width="0.1092%" height="15" fill="rgb(254,36,50)" fg:x="6391" fg:w="9"/><text x="77.7919%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (9 samples, 0.11%)</title><rect x="77.5419%" y="613" width="0.1092%" height="15" fill="rgb(252,17,15)" fg:x="6391" fg:w="9"/><text x="77.7919%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.01%)</title><rect x="77.6389%" y="597" width="0.0121%" height="15" fill="rgb(219,129,43)" fg:x="6399" fg:w="1"/><text x="77.8889%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="77.6996%" y="645" width="0.0121%" height="15" fill="rgb(205,34,45)" fg:x="6404" fg:w="1"/><text x="77.9496%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="77.6996%" y="629" width="0.0121%" height="15" fill="rgb(251,201,32)" fg:x="6404" fg:w="1"/><text x="77.9496%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="77.6511%" y="693" width="0.0728%" height="15" fill="rgb(205,56,0)" fg:x="6400" fg:w="6"/><text x="77.9011%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="77.6511%" y="677" width="0.0728%" height="15" fill="rgb(211,193,27)" fg:x="6400" fg:w="6"/><text x="77.9011%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="77.6511%" y="661" width="0.0728%" height="15" fill="rgb(231,100,42)" fg:x="6400" fg:w="6"/><text x="77.9011%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="77.7117%" y="645" width="0.0121%" height="15" fill="rgb(245,85,27)" fg:x="6405" fg:w="1"/><text x="77.9617%" y="655.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (35 samples, 0.42%)</title><rect x="77.3356%" y="741" width="0.4247%" height="15" fill="rgb(241,76,24)" fg:x="6374" fg:w="35"/><text x="77.5856%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27 samples, 0.33%)</title><rect x="77.4327%" y="725" width="0.3276%" height="15" fill="rgb(249,157,15)" fg:x="6382" fg:w="27"/><text x="77.6827%" y="735.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (27 samples, 0.33%)</title><rect x="77.4327%" y="709" width="0.3276%" height="15" fill="rgb(222,218,25)" fg:x="6382" fg:w="27"/><text x="77.6827%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3 samples, 0.04%)</title><rect x="77.7239%" y="693" width="0.0364%" height="15" fill="rgb(252,156,52)" fg:x="6406" fg:w="3"/><text x="77.9739%" y="703.50"></text></g><g><title>core::hash::Hasher::write_isize (3 samples, 0.04%)</title><rect x="77.7239%" y="677" width="0.0364%" height="15" fill="rgb(211,185,7)" fg:x="6406" fg:w="3"/><text x="77.9739%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="77.7239%" y="661" width="0.0364%" height="15" fill="rgb(234,108,24)" fg:x="6406" fg:w="3"/><text x="77.9739%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="77.7360%" y="645" width="0.0243%" height="15" fill="rgb(227,218,2)" fg:x="6407" fg:w="2"/><text x="77.9860%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="77.7360%" y="629" width="0.0243%" height="15" fill="rgb(224,0,36)" fg:x="6407" fg:w="2"/><text x="77.9860%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="77.7360%" y="613" width="0.0243%" height="15" fill="rgb(233,201,10)" fg:x="6407" fg:w="2"/><text x="77.9860%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="77.7360%" y="597" width="0.0243%" height="15" fill="rgb(252,209,14)" fg:x="6407" fg:w="2"/><text x="77.9860%" y="607.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="78.3062%" y="709" width="0.0607%" height="15" fill="rgb(205,93,49)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="719.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="78.3062%" y="693" width="0.0607%" height="15" fill="rgb(234,116,45)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="703.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="78.3062%" y="677" width="0.0607%" height="15" fill="rgb(248,89,35)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="78.3062%" y="661" width="0.0607%" height="15" fill="rgb(233,167,45)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="78.3062%" y="645" width="0.0607%" height="15" fill="rgb(248,228,14)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="655.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="78.3062%" y="629" width="0.0607%" height="15" fill="rgb(246,91,14)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="639.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="78.3062%" y="613" width="0.0607%" height="15" fill="rgb(227,142,5)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="623.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="78.3062%" y="597" width="0.0607%" height="15" fill="rgb(221,63,33)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.06%)</title><rect x="78.3062%" y="581" width="0.0607%" height="15" fill="rgb(233,49,0)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.06%)</title><rect x="78.3062%" y="565" width="0.0607%" height="15" fill="rgb(251,115,38)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="575.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.06%)</title><rect x="78.3062%" y="549" width="0.0607%" height="15" fill="rgb(231,214,32)" fg:x="6454" fg:w="5"/><text x="78.5562%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="78.4154%" y="533" width="0.0121%" height="15" fill="rgb(248,73,46)" fg:x="6463" fg:w="1"/><text x="78.6654%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="78.4154%" y="517" width="0.0121%" height="15" fill="rgb(237,156,4)" fg:x="6463" fg:w="1"/><text x="78.6654%" y="527.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="78.4033%" y="677" width="0.0728%" height="15" fill="rgb(227,132,2)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.07%)</title><rect x="78.4033%" y="661" width="0.0728%" height="15" fill="rgb(248,161,9)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="671.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.07%)</title><rect x="78.4033%" y="645" width="0.0728%" height="15" fill="rgb(238,77,38)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.07%)</title><rect x="78.4033%" y="629" width="0.0728%" height="15" fill="rgb(222,166,40)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="639.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.07%)</title><rect x="78.4033%" y="613" width="0.0728%" height="15" fill="rgb(214,168,45)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.07%)</title><rect x="78.4033%" y="597" width="0.0728%" height="15" fill="rgb(226,64,37)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="78.4033%" y="581" width="0.0728%" height="15" fill="rgb(232,210,43)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="78.4033%" y="565" width="0.0728%" height="15" fill="rgb(214,76,33)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.07%)</title><rect x="78.4033%" y="549" width="0.0728%" height="15" fill="rgb(210,78,5)" fg:x="6462" fg:w="6"/><text x="78.6533%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.05%)</title><rect x="78.4276%" y="533" width="0.0485%" height="15" fill="rgb(211,107,37)" fg:x="6464" fg:w="4"/><text x="78.6776%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="78.5125%" y="613" width="0.0243%" height="15" fill="rgb(249,67,16)" fg:x="6471" fg:w="2"/><text x="78.7625%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.06%)</title><rect x="78.5004%" y="629" width="0.0607%" height="15" fill="rgb(222,114,31)" fg:x="6470" fg:w="5"/><text x="78.7504%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="78.5368%" y="613" width="0.0243%" height="15" fill="rgb(242,118,19)" fg:x="6473" fg:w="2"/><text x="78.7868%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.15%)</title><rect x="78.4761%" y="677" width="0.1456%" height="15" fill="rgb(223,115,1)" fg:x="6468" fg:w="12"/><text x="78.7261%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12 samples, 0.15%)</title><rect x="78.4761%" y="661" width="0.1456%" height="15" fill="rgb(241,182,54)" fg:x="6468" fg:w="12"/><text x="78.7261%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.15%)</title><rect x="78.4761%" y="645" width="0.1456%" height="15" fill="rgb(244,166,36)" fg:x="6468" fg:w="12"/><text x="78.7261%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.06%)</title><rect x="78.5610%" y="629" width="0.0607%" height="15" fill="rgb(241,52,43)" fg:x="6475" fg:w="5"/><text x="78.8110%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="78.6460%" y="581" width="0.0364%" height="15" fill="rgb(236,82,9)" fg:x="6482" fg:w="3"/><text x="78.8960%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="78.6702%" y="565" width="0.0121%" height="15" fill="rgb(241,119,0)" fg:x="6484" fg:w="1"/><text x="78.9202%" y="575.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (28 samples, 0.34%)</title><rect x="78.3669%" y="693" width="0.3397%" height="15" fill="rgb(221,19,22)" fg:x="6459" fg:w="28"/><text x="78.6169%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (7 samples, 0.08%)</title><rect x="78.6217%" y="677" width="0.0849%" height="15" fill="rgb(254,144,35)" fg:x="6480" fg:w="7"/><text x="78.8717%" y="687.50"></text></g><g><title>core::hash::Hasher::write_isize (7 samples, 0.08%)</title><rect x="78.6217%" y="661" width="0.0849%" height="15" fill="rgb(246,132,30)" fg:x="6480" fg:w="7"/><text x="78.8717%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.08%)</title><rect x="78.6217%" y="645" width="0.0849%" height="15" fill="rgb(234,69,28)" fg:x="6480" fg:w="7"/><text x="78.8717%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="78.6217%" y="629" width="0.0849%" height="15" fill="rgb(219,106,47)" fg:x="6480" fg:w="7"/><text x="78.8717%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="78.6217%" y="613" width="0.0849%" height="15" fill="rgb(218,79,24)" fg:x="6480" fg:w="7"/><text x="78.8717%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="78.6217%" y="597" width="0.0849%" height="15" fill="rgb(225,26,21)" fg:x="6480" fg:w="7"/><text x="78.8717%" y="607.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="78.6824%" y="581" width="0.0243%" height="15" fill="rgb(217,68,49)" fg:x="6485" fg:w="2"/><text x="78.9324%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="78.7430%" y="629" width="0.0121%" height="15" fill="rgb(220,204,28)" fg:x="6490" fg:w="1"/><text x="78.9930%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.05%)</title><rect x="78.7430%" y="645" width="0.0485%" height="15" fill="rgb(237,208,43)" fg:x="6490" fg:w="4"/><text x="78.9930%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="78.7552%" y="629" width="0.0364%" height="15" fill="rgb(213,97,42)" fg:x="6491" fg:w="3"/><text x="79.0052%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.45%)</title><rect x="78.3669%" y="709" width="0.4489%" height="15" fill="rgb(238,96,52)" fg:x="6459" fg:w="37"/><text x="78.6169%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.11%)</title><rect x="78.7066%" y="693" width="0.1092%" height="15" fill="rgb(228,14,13)" fg:x="6487" fg:w="9"/><text x="78.9566%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.11%)</title><rect x="78.7066%" y="677" width="0.1092%" height="15" fill="rgb(219,123,13)" fg:x="6487" fg:w="9"/><text x="78.9566%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.11%)</title><rect x="78.7066%" y="661" width="0.1092%" height="15" fill="rgb(216,144,17)" fg:x="6487" fg:w="9"/><text x="78.9566%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="78.7916%" y="645" width="0.0243%" height="15" fill="rgb(230,228,29)" fg:x="6494" fg:w="2"/><text x="79.0416%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="78.7916%" y="629" width="0.0243%" height="15" fill="rgb(233,18,5)" fg:x="6494" fg:w="2"/><text x="79.0416%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (33 samples, 0.40%)</title><rect x="78.8401%" y="661" width="0.4004%" height="15" fill="rgb(233,197,12)" fg:x="6498" fg:w="33"/><text x="79.0901%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (33 samples, 0.40%)</title><rect x="78.8401%" y="645" width="0.4004%" height="15" fill="rgb(234,140,29)" fg:x="6498" fg:w="33"/><text x="79.0901%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (33 samples, 0.40%)</title><rect x="78.8401%" y="629" width="0.4004%" height="15" fill="rgb(233,113,19)" fg:x="6498" fg:w="33"/><text x="79.0901%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (33 samples, 0.40%)</title><rect x="78.8401%" y="613" width="0.4004%" height="15" fill="rgb(246,209,13)" fg:x="6498" fg:w="33"/><text x="79.0901%" y="623.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::cmp::PartialEq&gt;::eq (33 samples, 0.40%)</title><rect x="78.8401%" y="597" width="0.4004%" height="15" fill="rgb(242,79,54)" fg:x="6498" fg:w="33"/><text x="79.0901%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="79.1919%" y="581" width="0.0485%" height="15" fill="rgb(219,73,16)" fg:x="6527" fg:w="4"/><text x="79.4419%" y="591.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="79.1919%" y="565" width="0.0485%" height="15" fill="rgb(224,52,10)" fg:x="6527" fg:w="4"/><text x="79.4419%" y="575.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (4 samples, 0.05%)</title><rect x="79.1919%" y="549" width="0.0485%" height="15" fill="rgb(237,179,5)" fg:x="6527" fg:w="4"/><text x="79.4419%" y="559.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (4 samples, 0.05%)</title><rect x="79.1919%" y="533" width="0.0485%" height="15" fill="rgb(231,20,6)" fg:x="6527" fg:w="4"/><text x="79.4419%" y="543.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="79.2405%" y="661" width="0.0121%" height="15" fill="rgb(253,171,45)" fg:x="6531" fg:w="1"/><text x="79.4905%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (12 samples, 0.15%)</title><rect x="79.2526%" y="661" width="0.1456%" height="15" fill="rgb(230,75,49)" fg:x="6532" fg:w="12"/><text x="79.5026%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.15%)</title><rect x="79.2526%" y="645" width="0.1456%" height="15" fill="rgb(216,83,46)" fg:x="6532" fg:w="12"/><text x="79.5026%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.15%)</title><rect x="79.2526%" y="629" width="0.1456%" height="15" fill="rgb(236,56,9)" fg:x="6532" fg:w="12"/><text x="79.5026%" y="639.50"></text></g><g><title>exit_to_user_mode_loop (4 samples, 0.05%)</title><rect x="79.4103%" y="549" width="0.0485%" height="15" fill="rgb(215,28,34)" fg:x="6545" fg:w="4"/><text x="79.6603%" y="559.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="79.4103%" y="533" width="0.0485%" height="15" fill="rgb(230,222,20)" fg:x="6545" fg:w="4"/><text x="79.6603%" y="543.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="79.4103%" y="517" width="0.0485%" height="15" fill="rgb(235,209,51)" fg:x="6545" fg:w="4"/><text x="79.6603%" y="527.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="79.4103%" y="501" width="0.0485%" height="15" fill="rgb(235,167,1)" fg:x="6545" fg:w="4"/><text x="79.6603%" y="511.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="79.4103%" y="485" width="0.0485%" height="15" fill="rgb(248,220,0)" fg:x="6545" fg:w="4"/><text x="79.6603%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.07%)</title><rect x="79.3982%" y="661" width="0.0728%" height="15" fill="rgb(239,0,18)" fg:x="6544" fg:w="6"/><text x="79.6482%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.07%)</title><rect x="79.3982%" y="645" width="0.0728%" height="15" fill="rgb(229,179,11)" fg:x="6544" fg:w="6"/><text x="79.6482%" y="655.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="79.4103%" y="629" width="0.0607%" height="15" fill="rgb(226,116,53)" fg:x="6545" fg:w="5"/><text x="79.6603%" y="639.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="79.4103%" y="613" width="0.0607%" height="15" fill="rgb(218,1,49)" fg:x="6545" fg:w="5"/><text x="79.6603%" y="623.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="79.4103%" y="597" width="0.0607%" height="15" fill="rgb(208,184,47)" fg:x="6545" fg:w="5"/><text x="79.6603%" y="607.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="79.4103%" y="581" width="0.0607%" height="15" fill="rgb(238,174,3)" fg:x="6545" fg:w="5"/><text x="79.6603%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="79.4103%" y="565" width="0.0607%" height="15" fill="rgb(247,188,6)" fg:x="6545" fg:w="5"/><text x="79.6603%" y="575.50"></text></g><g><title>switch_fpu_return (1 samples, 0.01%)</title><rect x="79.4589%" y="549" width="0.0121%" height="15" fill="rgb(211,165,46)" fg:x="6549" fg:w="1"/><text x="79.7089%" y="559.50"></text></g><g><title>restore_fpregs_from_fpstate (1 samples, 0.01%)</title><rect x="79.4589%" y="533" width="0.0121%" height="15" fill="rgb(222,190,10)" fg:x="6549" fg:w="1"/><text x="79.7089%" y="543.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (514 samples, 6.24%)</title><rect x="73.2468%" y="773" width="6.2364%" height="15" fill="rgb(206,185,3)" fg:x="6037" fg:w="514"/><text x="73.4968%" y="783.50">dashmap:..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (514 samples, 6.24%)</title><rect x="73.2468%" y="757" width="6.2364%" height="15" fill="rgb(244,125,37)" fg:x="6037" fg:w="514"/><text x="73.4968%" y="767.50">&lt;dashmap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (142 samples, 1.72%)</title><rect x="77.7603%" y="741" width="1.7229%" height="15" fill="rgb(211,43,7)" fg:x="6409" fg:w="142"/><text x="78.0103%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (142 samples, 1.72%)</title><rect x="77.7603%" y="725" width="1.7229%" height="15" fill="rgb(250,41,42)" fg:x="6409" fg:w="142"/><text x="78.0103%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (55 samples, 0.67%)</title><rect x="78.8158%" y="709" width="0.6673%" height="15" fill="rgb(254,54,42)" fg:x="6496" fg:w="55"/><text x="79.0658%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (55 samples, 0.67%)</title><rect x="78.8158%" y="693" width="0.6673%" height="15" fill="rgb(213,71,43)" fg:x="6496" fg:w="55"/><text x="79.0658%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (55 samples, 0.67%)</title><rect x="78.8158%" y="677" width="0.6673%" height="15" fill="rgb(249,3,44)" fg:x="6496" fg:w="55"/><text x="79.0658%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.01%)</title><rect x="79.4710%" y="661" width="0.0121%" height="15" fill="rgb(229,80,41)" fg:x="6550" fg:w="1"/><text x="79.7210%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="79.4710%" y="645" width="0.0121%" height="15" fill="rgb(231,25,28)" fg:x="6550" fg:w="1"/><text x="79.7210%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="79.4710%" y="629" width="0.0121%" height="15" fill="rgb(208,79,48)" fg:x="6550" fg:w="1"/><text x="79.7210%" y="639.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (733 samples, 8.89%)</title><rect x="70.6018%" y="789" width="8.8935%" height="15" fill="rgb(207,196,38)" fg:x="5819" fg:w="733"/><text x="70.8518%" y="799.50">block_stm_rev..</text></g><g><title>dashmap::mapref::multiple::RefMulti&lt;K,V,S&gt;::key (1 samples, 0.01%)</title><rect x="79.4831%" y="773" width="0.0121%" height="15" fill="rgb(228,105,49)" fg:x="6551" fg:w="1"/><text x="79.7331%" y="783.50"></text></g><g><title>dashmap::mapref::multiple::RefMulti&lt;K,V,S&gt;::pair (1 samples, 0.01%)</title><rect x="79.4831%" y="757" width="0.0121%" height="15" fill="rgb(237,99,15)" fg:x="6551" fg:w="1"/><text x="79.7331%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (25 samples, 0.30%)</title><rect x="79.4953%" y="789" width="0.3033%" height="15" fill="rgb(224,207,46)" fg:x="6552" fg:w="25"/><text x="79.7453%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.30%)</title><rect x="79.4953%" y="773" width="0.3033%" height="15" fill="rgb(249,117,50)" fg:x="6552" fg:w="25"/><text x="79.7453%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (24 samples, 0.29%)</title><rect x="79.5074%" y="757" width="0.2912%" height="15" fill="rgb(248,17,13)" fg:x="6553" fg:w="24"/><text x="79.7574%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.29%)</title><rect x="79.5074%" y="741" width="0.2912%" height="15" fill="rgb(228,187,36)" fg:x="6553" fg:w="24"/><text x="79.7574%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.29%)</title><rect x="79.5074%" y="725" width="0.2912%" height="15" fill="rgb(234,132,20)" fg:x="6553" fg:w="24"/><text x="79.7574%" y="735.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="79.7986%" y="773" width="0.0243%" height="15" fill="rgb(209,170,46)" fg:x="6577" fg:w="2"/><text x="80.0486%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.02%)</title><rect x="79.7986%" y="757" width="0.0243%" height="15" fill="rgb(237,23,19)" fg:x="6577" fg:w="2"/><text x="80.0486%" y="767.50"></text></g><g><title>std::sync::poison::Flag::get (2 samples, 0.02%)</title><rect x="79.7986%" y="741" width="0.0243%" height="15" fill="rgb(227,21,26)" fg:x="6577" fg:w="2"/><text x="80.0486%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.02%)</title><rect x="79.7986%" y="725" width="0.0243%" height="15" fill="rgb(222,220,48)" fg:x="6577" fg:w="2"/><text x="80.0486%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="79.7986%" y="709" width="0.0243%" height="15" fill="rgb(214,9,16)" fg:x="6577" fg:w="2"/><text x="80.0486%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (34 samples, 0.41%)</title><rect x="79.8350%" y="757" width="0.4125%" height="15" fill="rgb(209,73,30)" fg:x="6580" fg:w="34"/><text x="80.0850%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.41%)</title><rect x="79.8350%" y="741" width="0.4125%" height="15" fill="rgb(207,20,33)" fg:x="6580" fg:w="34"/><text x="80.0850%" y="751.50"></text></g><g><title>futex_unqueue (1 samples, 0.01%)</title><rect x="80.2718%" y="645" width="0.0121%" height="15" fill="rgb(219,153,12)" fg:x="6616" fg:w="1"/><text x="80.5218%" y="655.50"></text></g><g><title>futex_unqueue (1 samples, 0.01%)</title><rect x="80.2839%" y="629" width="0.0121%" height="15" fill="rgb(235,97,25)" fg:x="6617" fg:w="1"/><text x="80.5339%" y="639.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="80.3324%" y="581" width="0.0121%" height="15" fill="rgb(244,30,34)" fg:x="6621" fg:w="1"/><text x="80.5824%" y="591.50"></text></g><g><title>asm_sysvec_irq_work (5 samples, 0.06%)</title><rect x="80.3446%" y="581" width="0.0607%" height="15" fill="rgb(214,106,45)" fg:x="6622" fg:w="5"/><text x="80.5946%" y="591.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="80.4052%" y="581" width="0.0121%" height="15" fill="rgb(226,41,9)" fg:x="6627" fg:w="1"/><text x="80.6552%" y="591.50"></text></g><g><title>_raw_spin_unlock (10 samples, 0.12%)</title><rect x="80.9027%" y="549" width="0.1213%" height="15" fill="rgb(253,139,29)" fg:x="6668" fg:w="10"/><text x="81.1527%" y="559.50"></text></g><g><title>perf_ctx_enable (79 samples, 0.96%)</title><rect x="81.0240%" y="549" width="0.9585%" height="15" fill="rgb(213,205,39)" fg:x="6678" fg:w="79"/><text x="81.2740%" y="559.50"></text></g><g><title>x86_pmu_enable (18 samples, 0.22%)</title><rect x="81.7641%" y="533" width="0.2184%" height="15" fill="rgb(209,27,10)" fg:x="6739" fg:w="18"/><text x="82.0141%" y="543.50"></text></g><g><title>perf_pmu_nop_void (61 samples, 0.74%)</title><rect x="81.9825%" y="549" width="0.7401%" height="15" fill="rgb(249,142,16)" fg:x="6757" fg:w="61"/><text x="82.2325%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (196 samples, 2.38%)</title><rect x="80.5994%" y="565" width="2.3781%" height="15" fill="rgb(242,65,12)" fg:x="6643" fg:w="196"/><text x="80.8494%" y="575.50">__..</text></g><g><title>x86_pmu_enable (21 samples, 0.25%)</title><rect x="82.7226%" y="549" width="0.2548%" height="15" fill="rgb(232,48,10)" fg:x="6818" fg:w="21"/><text x="82.9726%" y="559.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.01%)</title><rect x="82.9774%" y="565" width="0.0121%" height="15" fill="rgb(253,67,19)" fg:x="6839" fg:w="1"/><text x="83.2274%" y="575.50"></text></g><g><title>_raw_spin_unlock (22 samples, 0.27%)</title><rect x="82.9896%" y="565" width="0.2669%" height="15" fill="rgb(227,93,29)" fg:x="6840" fg:w="22"/><text x="83.2396%" y="575.50"></text></g><g><title>__sysvec_irq_work (1 samples, 0.01%)</title><rect x="83.2808%" y="533" width="0.0121%" height="15" fill="rgb(226,189,53)" fg:x="6864" fg:w="1"/><text x="83.5308%" y="543.50"></text></g><g><title>irq_work_run (1 samples, 0.01%)</title><rect x="83.2808%" y="517" width="0.0121%" height="15" fill="rgb(223,224,1)" fg:x="6864" fg:w="1"/><text x="83.5308%" y="527.50"></text></g><g><title>irq_work_run_list (1 samples, 0.01%)</title><rect x="83.2808%" y="501" width="0.0121%" height="15" fill="rgb(221,84,32)" fg:x="6864" fg:w="1"/><text x="83.5308%" y="511.50"></text></g><g><title>finish_task_switch.isra.0 (238 samples, 2.89%)</title><rect x="80.4174%" y="581" width="2.8876%" height="15" fill="rgb(214,189,28)" fg:x="6628" fg:w="238"/><text x="80.6674%" y="591.50">fi..</text></g><g><title>asm_sysvec_irq_work (4 samples, 0.05%)</title><rect x="83.2565%" y="565" width="0.0485%" height="15" fill="rgb(234,7,52)" fg:x="6862" fg:w="4"/><text x="83.5065%" y="575.50"></text></g><g><title>sysvec_irq_work (4 samples, 0.05%)</title><rect x="83.2565%" y="549" width="0.0485%" height="15" fill="rgb(249,73,31)" fg:x="6862" fg:w="4"/><text x="83.5065%" y="559.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="83.2929%" y="533" width="0.0121%" height="15" fill="rgb(253,153,41)" fg:x="6865" fg:w="1"/><text x="83.5429%" y="543.50"></text></g><g><title>futex_wait_queue (249 samples, 3.02%)</title><rect x="80.2960%" y="629" width="3.0211%" height="15" fill="rgb(249,52,34)" fg:x="6618" fg:w="249"/><text x="80.5460%" y="639.50">fut..</text></g><g><title>schedule (247 samples, 3.00%)</title><rect x="80.3203%" y="613" width="2.9968%" height="15" fill="rgb(236,177,47)" fg:x="6620" fg:w="247"/><text x="80.5703%" y="623.50">sch..</text></g><g><title>__schedule (247 samples, 3.00%)</title><rect x="80.3203%" y="597" width="2.9968%" height="15" fill="rgb(252,185,45)" fg:x="6620" fg:w="247"/><text x="80.5703%" y="607.50">__s..</text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="83.3050%" y="581" width="0.0121%" height="15" fill="rgb(251,15,30)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="591.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="83.3050%" y="565" width="0.0121%" height="15" fill="rgb(233,31,4)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="575.50"></text></g><g><title>newidle_balance (1 samples, 0.01%)</title><rect x="83.3050%" y="549" width="0.0121%" height="15" fill="rgb(254,44,24)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="559.50"></text></g><g><title>load_balance (1 samples, 0.01%)</title><rect x="83.3050%" y="533" width="0.0121%" height="15" fill="rgb(218,54,1)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="543.50"></text></g><g><title>find_busiest_group (1 samples, 0.01%)</title><rect x="83.3050%" y="517" width="0.0121%" height="15" fill="rgb(243,209,39)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="527.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (1 samples, 0.01%)</title><rect x="83.3050%" y="501" width="0.0121%" height="15" fill="rgb(206,75,33)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="511.50"></text></g><g><title>update_sg_lb_stats (1 samples, 0.01%)</title><rect x="83.3050%" y="485" width="0.0121%" height="15" fill="rgb(223,108,18)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="495.50"></text></g><g><title>cpu_util (1 samples, 0.01%)</title><rect x="83.3050%" y="469" width="0.0121%" height="15" fill="rgb(244,89,31)" fg:x="6866" fg:w="1"/><text x="83.5550%" y="479.50"></text></g><g><title>__x64_sys_futex (253 samples, 3.07%)</title><rect x="80.2596%" y="677" width="3.0696%" height="15" fill="rgb(222,167,27)" fg:x="6615" fg:w="253"/><text x="80.5096%" y="687.50">__x..</text></g><g><title>do_futex (253 samples, 3.07%)</title><rect x="80.2596%" y="661" width="3.0696%" height="15" fill="rgb(247,41,16)" fg:x="6615" fg:w="253"/><text x="80.5096%" y="671.50">do_..</text></g><g><title>futex_wait (251 samples, 3.05%)</title><rect x="80.2839%" y="645" width="3.0454%" height="15" fill="rgb(233,168,40)" fg:x="6617" fg:w="251"/><text x="80.5339%" y="655.50">fut..</text></g><g><title>futex_wait_setup (1 samples, 0.01%)</title><rect x="83.3172%" y="629" width="0.0121%" height="15" fill="rgb(205,211,8)" fg:x="6867" fg:w="1"/><text x="83.5672%" y="639.50"></text></g><g><title>futex_q_lock (1 samples, 0.01%)</title><rect x="83.3172%" y="613" width="0.0121%" height="15" fill="rgb(238,105,11)" fg:x="6867" fg:w="1"/><text x="83.5672%" y="623.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="83.3172%" y="597" width="0.0121%" height="15" fill="rgb(223,142,52)" fg:x="6867" fg:w="1"/><text x="83.5672%" y="607.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="83.3172%" y="581" width="0.0121%" height="15" fill="rgb(238,51,33)" fg:x="6867" fg:w="1"/><text x="83.5672%" y="591.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="83.3293%" y="629" width="0.0121%" height="15" fill="rgb(231,188,43)" fg:x="6868" fg:w="1"/><text x="83.5793%" y="639.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.01%)</title><rect x="83.3293%" y="613" width="0.0121%" height="15" fill="rgb(216,92,17)" fg:x="6868" fg:w="1"/><text x="83.5793%" y="623.50"></text></g><g><title>rseq_get_rseq_cs (1 samples, 0.01%)</title><rect x="83.3293%" y="597" width="0.0121%" height="15" fill="rgb(228,2,40)" fg:x="6868" fg:w="1"/><text x="83.5793%" y="607.50"></text></g><g><title>exit_to_user_mode_loop (2 samples, 0.02%)</title><rect x="83.3293%" y="645" width="0.0243%" height="15" fill="rgb(226,73,15)" fg:x="6868" fg:w="2"/><text x="83.5793%" y="655.50"></text></g><g><title>mem_cgroup_handle_over_high (1 samples, 0.01%)</title><rect x="83.3414%" y="629" width="0.0121%" height="15" fill="rgb(227,66,46)" fg:x="6869" fg:w="1"/><text x="83.5914%" y="639.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (258 samples, 3.13%)</title><rect x="80.2596%" y="741" width="3.1303%" height="15" fill="rgb(209,71,6)" fg:x="6615" fg:w="258"/><text x="80.5096%" y="751.50">std..</text></g><g><title>syscall (258 samples, 3.13%)</title><rect x="80.2596%" y="725" width="3.1303%" height="15" fill="rgb(246,100,25)" fg:x="6615" fg:w="258"/><text x="80.5096%" y="735.50">sys..</text></g><g><title>entry_SYSCALL_64_after_hwframe (258 samples, 3.13%)</title><rect x="80.2596%" y="709" width="3.1303%" height="15" fill="rgb(248,185,27)" fg:x="6615" fg:w="258"/><text x="80.5096%" y="719.50">ent..</text></g><g><title>do_syscall_64 (258 samples, 3.13%)</title><rect x="80.2596%" y="693" width="3.1303%" height="15" fill="rgb(225,118,47)" fg:x="6615" fg:w="258"/><text x="80.5096%" y="703.50">do_..</text></g><g><title>syscall_exit_to_user_mode (5 samples, 0.06%)</title><rect x="83.3293%" y="677" width="0.0607%" height="15" fill="rgb(220,185,44)" fg:x="6868" fg:w="5"/><text x="83.5793%" y="687.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="83.3293%" y="661" width="0.0607%" height="15" fill="rgb(227,95,24)" fg:x="6868" fg:w="5"/><text x="83.5793%" y="671.50"></text></g><g><title>switch_fpu_return (3 samples, 0.04%)</title><rect x="83.3536%" y="645" width="0.0364%" height="15" fill="rgb(252,84,24)" fg:x="6870" fg:w="3"/><text x="83.6036%" y="655.50"></text></g><g><title>restore_fpregs_from_fpstate (2 samples, 0.02%)</title><rect x="83.3657%" y="629" width="0.0243%" height="15" fill="rgb(240,34,44)" fg:x="6871" fg:w="2"/><text x="83.6157%" y="639.50"></text></g><g><title>core::hint::spin_loop (6 samples, 0.07%)</title><rect x="83.3900%" y="725" width="0.0728%" height="15" fill="rgb(209,72,54)" fg:x="6873" fg:w="6"/><text x="83.6400%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (6 samples, 0.07%)</title><rect x="83.3900%" y="709" width="0.0728%" height="15" fill="rgb(226,19,45)" fg:x="6873" fg:w="6"/><text x="83.6400%" y="719.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="83.4749%" y="597" width="0.0121%" height="15" fill="rgb(246,7,45)" fg:x="6880" fg:w="1"/><text x="83.7249%" y="607.50"></text></g><g><title>__put_user_8 (1 samples, 0.01%)</title><rect x="83.4749%" y="581" width="0.0121%" height="15" fill="rgb(225,45,2)" fg:x="6880" fg:w="1"/><text x="83.7249%" y="591.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::validate_read_set (1,082 samples, 13.13%)</title><rect x="70.4077%" y="805" width="13.1279%" height="15" fill="rgb(221,80,29)" fg:x="5803" fg:w="1082"/><text x="70.6577%" y="815.50">block_stm_revm::mv_m..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (308 samples, 3.74%)</title><rect x="79.7986%" y="789" width="3.7370%" height="15" fill="rgb(228,11,19)" fg:x="6577" fg:w="308"/><text x="80.0486%" y="799.50">std:..</text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (306 samples, 3.71%)</title><rect x="79.8229%" y="773" width="3.7127%" height="15" fill="rgb(243,17,21)" fg:x="6579" fg:w="306"/><text x="80.0729%" y="783.50">std:..</text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock_contended (271 samples, 3.29%)</title><rect x="80.2475%" y="757" width="3.2880%" height="15" fill="rgb(243,88,8)" fg:x="6614" fg:w="271"/><text x="80.4975%" y="767.50">std..</text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::spin (12 samples, 0.15%)</title><rect x="83.3900%" y="741" width="0.1456%" height="15" fill="rgb(214,17,9)" fg:x="6873" fg:w="12"/><text x="83.6400%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (6 samples, 0.07%)</title><rect x="83.4628%" y="725" width="0.0728%" height="15" fill="rgb(232,169,15)" fg:x="6879" fg:w="6"/><text x="83.7128%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.07%)</title><rect x="83.4628%" y="709" width="0.0728%" height="15" fill="rgb(232,86,53)" fg:x="6879" fg:w="6"/><text x="83.7128%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="83.4749%" y="693" width="0.0607%" height="15" fill="rgb(222,100,4)" fg:x="6880" fg:w="5"/><text x="83.7249%" y="703.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="83.4749%" y="677" width="0.0607%" height="15" fill="rgb(253,151,38)" fg:x="6880" fg:w="5"/><text x="83.7249%" y="687.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="83.4749%" y="661" width="0.0607%" height="15" fill="rgb(238,215,29)" fg:x="6880" fg:w="5"/><text x="83.7249%" y="671.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="83.4749%" y="645" width="0.0607%" height="15" fill="rgb(205,128,53)" fg:x="6880" fg:w="5"/><text x="83.7249%" y="655.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="83.4749%" y="629" width="0.0607%" height="15" fill="rgb(248,183,14)" fg:x="6880" fg:w="5"/><text x="83.7249%" y="639.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="83.4749%" y="613" width="0.0607%" height="15" fill="rgb(244,172,35)" fg:x="6880" fg:w="5"/><text x="83.7249%" y="623.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="83.4870%" y="597" width="0.0485%" height="15" fill="rgb(234,93,19)" fg:x="6881" fg:w="4"/><text x="83.7370%" y="607.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="83.4870%" y="581" width="0.0485%" height="15" fill="rgb(227,109,7)" fg:x="6881" fg:w="4"/><text x="83.7370%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="83.4870%" y="565" width="0.0485%" height="15" fill="rgb(233,136,54)" fg:x="6881" fg:w="4"/><text x="83.7370%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="83.4870%" y="549" width="0.0485%" height="15" fill="rgb(233,19,40)" fg:x="6881" fg:w="4"/><text x="83.7370%" y="559.50"></text></g><g><title>block_stm_revm::block_stm::try_validate (1,216 samples, 14.75%)</title><rect x="70.3470%" y="821" width="14.7537%" height="15" fill="rgb(247,41,18)" fg:x="5798" fg:w="1216"/><text x="70.5970%" y="831.50">block_stm_revm::block_s..</text></g><g><title>block_stm_revm::scheduler::Scheduler::finish_validation (129 samples, 1.57%)</title><rect x="83.5355%" y="805" width="1.5652%" height="15" fill="rgb(220,34,34)" fg:x="6885" fg:w="129"/><text x="83.7855%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (129 samples, 1.57%)</title><rect x="83.5355%" y="789" width="1.5652%" height="15" fill="rgb(222,135,32)" fg:x="6885" fg:w="129"/><text x="83.7855%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (129 samples, 1.57%)</title><rect x="83.5355%" y="773" width="1.5652%" height="15" fill="rgb(214,80,19)" fg:x="6885" fg:w="129"/><text x="83.7855%" y="783.50"></text></g><g><title>asm_sysvec_reschedule_ipi (1 samples, 0.01%)</title><rect x="85.1250%" y="661" width="0.0121%" height="15" fill="rgb(234,54,46)" fg:x="7016" fg:w="1"/><text x="85.3750%" y="671.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="85.1250%" y="789" width="0.0607%" height="15" fill="rgb(251,48,23)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="85.1250%" y="773" width="0.0607%" height="15" fill="rgb(254,109,52)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="85.1250%" y="757" width="0.0607%" height="15" fill="rgb(240,186,19)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="85.1250%" y="741" width="0.0607%" height="15" fill="rgb(246,187,17)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="85.1250%" y="725" width="0.0607%" height="15" fill="rgb(212,21,5)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="85.1250%" y="709" width="0.0607%" height="15" fill="rgb(225,185,18)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="719.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="85.1250%" y="693" width="0.0607%" height="15" fill="rgb(245,114,17)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="703.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="85.1250%" y="677" width="0.0607%" height="15" fill="rgb(223,164,24)" fg:x="7016" fg:w="5"/><text x="85.3750%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="85.1371%" y="661" width="0.0485%" height="15" fill="rgb(211,228,3)" fg:x="7017" fg:w="4"/><text x="85.3871%" y="671.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="85.1371%" y="645" width="0.0485%" height="15" fill="rgb(223,16,38)" fg:x="7017" fg:w="4"/><text x="85.3871%" y="655.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::done (207 samples, 2.51%)</title><rect x="85.1007%" y="821" width="2.5115%" height="15" fill="rgb(207,31,54)" fg:x="7014" fg:w="207"/><text x="85.3507%" y="831.50">bl..</text></g><g><title>core::sync::atomic::AtomicBool::load (207 samples, 2.51%)</title><rect x="85.1007%" y="805" width="2.5115%" height="15" fill="rgb(220,39,11)" fg:x="7014" fg:w="207"/><text x="85.3507%" y="815.50">co..</text></g><g><title>core::sync::atomic::atomic_load (200 samples, 2.43%)</title><rect x="85.1856%" y="789" width="2.4266%" height="15" fill="rgb(235,185,0)" fg:x="7021" fg:w="200"/><text x="85.4356%" y="799.50">co..</text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="87.6122%" y="661" width="0.0121%" height="15" fill="rgb(249,39,18)" fg:x="7221" fg:w="1"/><text x="87.8622%" y="671.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="87.6122%" y="789" width="0.0607%" height="15" fill="rgb(240,110,33)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="87.6122%" y="773" width="0.0607%" height="15" fill="rgb(210,92,42)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="87.6122%" y="757" width="0.0607%" height="15" fill="rgb(218,215,28)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="87.6122%" y="741" width="0.0607%" height="15" fill="rgb(238,215,36)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="87.6122%" y="725" width="0.0607%" height="15" fill="rgb(220,31,10)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="87.6122%" y="709" width="0.0607%" height="15" fill="rgb(212,93,14)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="719.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="87.6122%" y="693" width="0.0607%" height="15" fill="rgb(254,207,2)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="703.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="87.6122%" y="677" width="0.0607%" height="15" fill="rgb(205,57,44)" fg:x="7221" fg:w="5"/><text x="87.8622%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="87.6244%" y="661" width="0.0485%" height="15" fill="rgb(226,151,19)" fg:x="7222" fg:w="4"/><text x="87.8744%" y="671.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="87.6244%" y="645" width="0.0485%" height="15" fill="rgb(230,72,30)" fg:x="7222" fg:w="4"/><text x="87.8744%" y="655.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="87.6244%" y="629" width="0.0485%" height="15" fill="rgb(244,0,8)" fg:x="7222" fg:w="4"/><text x="87.8744%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.04%)</title><rect x="87.7336%" y="773" width="0.0364%" height="15" fill="rgb(230,192,6)" fg:x="7231" fg:w="3"/><text x="87.9836%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="87.7336%" y="757" width="0.0364%" height="15" fill="rgb(233,207,13)" fg:x="7231" fg:w="3"/><text x="87.9836%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="87.7578%" y="741" width="0.0121%" height="15" fill="rgb(206,227,7)" fg:x="7233" fg:w="1"/><text x="88.0078%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="87.7578%" y="725" width="0.0121%" height="15" fill="rgb(213,217,25)" fg:x="7233" fg:w="1"/><text x="88.0078%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (4 samples, 0.05%)</title><rect x="87.7700%" y="773" width="0.0485%" height="15" fill="rgb(249,75,4)" fg:x="7234" fg:w="4"/><text x="88.0200%" y="783.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="87.7700%" y="757" width="0.0485%" height="15" fill="rgb(225,114,18)" fg:x="7234" fg:w="4"/><text x="88.0200%" y="767.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (4 samples, 0.05%)</title><rect x="87.7700%" y="741" width="0.0485%" height="15" fill="rgb(211,162,40)" fg:x="7234" fg:w="4"/><text x="88.0200%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (4 samples, 0.05%)</title><rect x="87.7700%" y="725" width="0.0485%" height="15" fill="rgb(206,49,29)" fg:x="7234" fg:w="4"/><text x="88.0200%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (4 samples, 0.05%)</title><rect x="87.7700%" y="709" width="0.0485%" height="15" fill="rgb(244,8,6)" fg:x="7234" fg:w="4"/><text x="88.0200%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.19%)</title><rect x="87.8185%" y="741" width="0.1941%" height="15" fill="rgb(231,194,28)" fg:x="7238" fg:w="16"/><text x="88.0685%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.19%)</title><rect x="87.8185%" y="725" width="0.1941%" height="15" fill="rgb(210,69,5)" fg:x="7238" fg:w="16"/><text x="88.0685%" y="735.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::try_incarnate (29 samples, 0.35%)</title><rect x="87.6729%" y="789" width="0.3519%" height="15" fill="rgb(216,186,12)" fg:x="7226" fg:w="29"/><text x="87.9229%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.21%)</title><rect x="87.8185%" y="773" width="0.2063%" height="15" fill="rgb(238,61,15)" fg:x="7238" fg:w="17"/><text x="88.0685%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (17 samples, 0.21%)</title><rect x="87.8185%" y="757" width="0.2063%" height="15" fill="rgb(226,104,1)" fg:x="7238" fg:w="17"/><text x="88.0685%" y="767.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.01%)</title><rect x="88.0126%" y="741" width="0.0121%" height="15" fill="rgb(229,128,15)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="751.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.01%)</title><rect x="88.0126%" y="725" width="0.0121%" height="15" fill="rgb(247,110,15)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="735.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="88.0126%" y="709" width="0.0121%" height="15" fill="rgb(210,74,48)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="719.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="88.0126%" y="693" width="0.0121%" height="15" fill="rgb(246,121,10)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="703.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="88.0126%" y="677" width="0.0121%" height="15" fill="rgb(214,156,37)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="687.50"></text></g><g><title>__x64_sys_futex (1 samples, 0.01%)</title><rect x="88.0126%" y="661" width="0.0121%" height="15" fill="rgb(214,210,34)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="671.50"></text></g><g><title>do_futex (1 samples, 0.01%)</title><rect x="88.0126%" y="645" width="0.0121%" height="15" fill="rgb(237,93,35)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="655.50"></text></g><g><title>futex_wait (1 samples, 0.01%)</title><rect x="88.0126%" y="629" width="0.0121%" height="15" fill="rgb(206,36,8)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="639.50"></text></g><g><title>futex_wait_queue (1 samples, 0.01%)</title><rect x="88.0126%" y="613" width="0.0121%" height="15" fill="rgb(208,151,12)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="623.50"></text></g><g><title>schedule (1 samples, 0.01%)</title><rect x="88.0126%" y="597" width="0.0121%" height="15" fill="rgb(225,133,52)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="607.50"></text></g><g><title>__schedule (1 samples, 0.01%)</title><rect x="88.0126%" y="581" width="0.0121%" height="15" fill="rgb(231,71,53)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="591.50"></text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="88.0126%" y="565" width="0.0121%" height="15" fill="rgb(243,76,21)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="575.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="88.0126%" y="549" width="0.0121%" height="15" fill="rgb(252,144,3)" fg:x="7254" fg:w="1"/><text x="88.2626%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (49 samples, 0.59%)</title><rect x="88.0248%" y="789" width="0.5945%" height="15" fill="rgb(231,199,10)" fg:x="7255" fg:w="49"/><text x="88.2748%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (49 samples, 0.59%)</title><rect x="88.0248%" y="773" width="0.5945%" height="15" fill="rgb(215,18,11)" fg:x="7255" fg:w="49"/><text x="88.2748%" y="783.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_version_to_execute (90 samples, 1.09%)</title><rect x="87.6122%" y="805" width="1.0920%" height="15" fill="rgb(241,65,24)" fg:x="7221" fg:w="90"/><text x="87.8622%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.08%)</title><rect x="88.6193%" y="789" width="0.0849%" height="15" fill="rgb(251,192,38)" fg:x="7304" fg:w="7"/><text x="88.8693%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.08%)</title><rect x="88.6193%" y="773" width="0.0849%" height="15" fill="rgb(205,9,35)" fg:x="7304" fg:w="7"/><text x="88.8693%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.42%)</title><rect x="88.7406%" y="773" width="0.4247%" height="15" fill="rgb(229,225,49)" fg:x="7314" fg:w="35"/><text x="88.9906%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.02%)</title><rect x="89.1410%" y="757" width="0.0243%" height="15" fill="rgb(207,125,39)" fg:x="7347" fg:w="2"/><text x="89.3910%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="89.1410%" y="741" width="0.0243%" height="15" fill="rgb(222,78,19)" fg:x="7347" fg:w="2"/><text x="89.3910%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (40 samples, 0.49%)</title><rect x="88.7406%" y="789" width="0.4853%" height="15" fill="rgb(248,207,20)" fg:x="7314" fg:w="40"/><text x="88.9906%" y="799.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.06%)</title><rect x="89.1653%" y="773" width="0.0607%" height="15" fill="rgb(205,103,49)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="783.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.06%)</title><rect x="89.1653%" y="757" width="0.0607%" height="15" fill="rgb(216,42,28)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="89.1653%" y="741" width="0.0607%" height="15" fill="rgb(213,205,53)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="89.1653%" y="725" width="0.0607%" height="15" fill="rgb(239,140,53)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="89.1653%" y="709" width="0.0607%" height="15" fill="rgb(248,95,9)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="89.1653%" y="693" width="0.0607%" height="15" fill="rgb(254,58,47)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="89.1653%" y="677" width="0.0607%" height="15" fill="rgb(234,227,14)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.06%)</title><rect x="89.1653%" y="661" width="0.0607%" height="15" fill="rgb(205,192,45)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="671.50"></text></g><g><title>schedule (5 samples, 0.06%)</title><rect x="89.1653%" y="645" width="0.0607%" height="15" fill="rgb(253,187,31)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.06%)</title><rect x="89.1653%" y="629" width="0.0607%" height="15" fill="rgb(222,6,32)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="639.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.06%)</title><rect x="89.1653%" y="613" width="0.0607%" height="15" fill="rgb(249,190,19)" fg:x="7349" fg:w="5"/><text x="89.4153%" y="623.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="89.2259%" y="693" width="0.0121%" height="15" fill="rgb(251,28,20)" fg:x="7354" fg:w="1"/><text x="89.4759%" y="703.50"></text></g><g><title>__put_user_8 (1 samples, 0.01%)</title><rect x="89.2259%" y="677" width="0.0121%" height="15" fill="rgb(210,223,40)" fg:x="7354" fg:w="1"/><text x="89.4759%" y="687.50"></text></g><g><title>__rcu_read_unlock (4 samples, 0.05%)</title><rect x="89.2987%" y="645" width="0.0485%" height="15" fill="rgb(216,137,22)" fg:x="7360" fg:w="4"/><text x="89.5487%" y="655.50"></text></g><g><title>asm_sysvec_reschedule_ipi (25 samples, 0.30%)</title><rect x="89.2259%" y="789" width="0.3033%" height="15" fill="rgb(247,39,34)" fg:x="7354" fg:w="25"/><text x="89.4759%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (25 samples, 0.30%)</title><rect x="89.2259%" y="773" width="0.3033%" height="15" fill="rgb(239,43,50)" fg:x="7354" fg:w="25"/><text x="89.4759%" y="783.50"></text></g><g><title>irqentry_exit (25 samples, 0.30%)</title><rect x="89.2259%" y="757" width="0.3033%" height="15" fill="rgb(241,212,9)" fg:x="7354" fg:w="25"/><text x="89.4759%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (25 samples, 0.30%)</title><rect x="89.2259%" y="741" width="0.3033%" height="15" fill="rgb(205,8,2)" fg:x="7354" fg:w="25"/><text x="89.4759%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (25 samples, 0.30%)</title><rect x="89.2259%" y="725" width="0.3033%" height="15" fill="rgb(217,173,54)" fg:x="7354" fg:w="25"/><text x="89.4759%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (25 samples, 0.30%)</title><rect x="89.2259%" y="709" width="0.3033%" height="15" fill="rgb(208,149,52)" fg:x="7354" fg:w="25"/><text x="89.4759%" y="719.50"></text></g><g><title>schedule (24 samples, 0.29%)</title><rect x="89.2380%" y="693" width="0.2912%" height="15" fill="rgb(239,99,40)" fg:x="7355" fg:w="24"/><text x="89.4880%" y="703.50"></text></g><g><title>__schedule (24 samples, 0.29%)</title><rect x="89.2380%" y="677" width="0.2912%" height="15" fill="rgb(233,214,26)" fg:x="7355" fg:w="24"/><text x="89.4880%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (24 samples, 0.29%)</title><rect x="89.2380%" y="661" width="0.2912%" height="15" fill="rgb(231,225,37)" fg:x="7355" fg:w="24"/><text x="89.4880%" y="671.50"></text></g><g><title>_raw_spin_unlock (15 samples, 0.18%)</title><rect x="89.3472%" y="645" width="0.1820%" height="15" fill="rgb(252,55,35)" fg:x="7364" fg:w="15"/><text x="89.5972%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.29%)</title><rect x="89.5292%" y="741" width="0.2912%" height="15" fill="rgb(239,43,18)" fg:x="7379" fg:w="24"/><text x="89.7792%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.29%)</title><rect x="89.5292%" y="725" width="0.2912%" height="15" fill="rgb(251,125,49)" fg:x="7379" fg:w="24"/><text x="89.7792%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (26 samples, 0.32%)</title><rect x="89.5292%" y="789" width="0.3155%" height="15" fill="rgb(212,83,54)" fg:x="7379" fg:w="26"/><text x="89.7792%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.32%)</title><rect x="89.5292%" y="773" width="0.3155%" height="15" fill="rgb(250,75,6)" fg:x="7379" fg:w="26"/><text x="89.7792%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (26 samples, 0.32%)</title><rect x="89.5292%" y="757" width="0.3155%" height="15" fill="rgb(252,36,40)" fg:x="7379" fg:w="26"/><text x="89.7792%" y="767.50"></text></g><g><title>syscall (2 samples, 0.02%)</title><rect x="89.8204%" y="741" width="0.0243%" height="15" fill="rgb(230,91,51)" fg:x="7403" fg:w="2"/><text x="90.0704%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="89.8204%" y="725" width="0.0243%" height="15" fill="rgb(212,92,28)" fg:x="7403" fg:w="2"/><text x="90.0704%" y="735.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="89.8204%" y="709" width="0.0243%" height="15" fill="rgb(227,13,22)" fg:x="7403" fg:w="2"/><text x="90.0704%" y="719.50"></text></g><g><title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="89.8204%" y="693" width="0.0243%" height="15" fill="rgb(239,204,32)" fg:x="7403" fg:w="2"/><text x="90.0704%" y="703.50"></text></g><g><title>do_futex (2 samples, 0.02%)</title><rect x="89.8204%" y="677" width="0.0243%" height="15" fill="rgb(228,49,41)" fg:x="7403" fg:w="2"/><text x="90.0704%" y="687.50"></text></g><g><title>futex_wake (2 samples, 0.02%)</title><rect x="89.8204%" y="661" width="0.0243%" height="15" fill="rgb(206,95,6)" fg:x="7403" fg:w="2"/><text x="90.0704%" y="671.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="89.8326%" y="645" width="0.0121%" height="15" fill="rgb(251,20,14)" fg:x="7404" fg:w="1"/><text x="90.0826%" y="655.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="89.8326%" y="629" width="0.0121%" height="15" fill="rgb(214,99,28)" fg:x="7404" fg:w="1"/><text x="90.0826%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (333 samples, 4.04%)</title><rect x="89.8447%" y="789" width="4.0403%" height="15" fill="rgb(239,122,54)" fg:x="7405" fg:w="333"/><text x="90.0947%" y="799.50">core..</text></g><g><title>core::sync::atomic::atomic_add (333 samples, 4.04%)</title><rect x="89.8447%" y="773" width="4.0403%" height="15" fill="rgb(218,217,46)" fg:x="7405" fg:w="333"/><text x="90.0947%" y="783.50">core..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (97 samples, 1.18%)</title><rect x="93.8850%" y="789" width="1.1769%" height="15" fill="rgb(249,106,28)" fg:x="7738" fg:w="97"/><text x="94.1350%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (97 samples, 1.18%)</title><rect x="93.8850%" y="773" width="1.1769%" height="15" fill="rgb(250,158,18)" fg:x="7738" fg:w="97"/><text x="94.1350%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="95.0619%" y="789" width="0.0121%" height="15" fill="rgb(226,137,29)" fg:x="7835" fg:w="1"/><text x="95.3119%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="95.0619%" y="773" width="0.0121%" height="15" fill="rgb(210,188,1)" fg:x="7835" fg:w="1"/><text x="95.3119%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="95.0740%" y="789" width="0.0121%" height="15" fill="rgb(227,84,42)" fg:x="7836" fg:w="1"/><text x="95.3240%" y="799.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="95.0861%" y="773" width="0.0243%" height="15" fill="rgb(222,147,48)" fg:x="7837" fg:w="2"/><text x="95.3361%" y="783.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.02%)</title><rect x="95.0861%" y="757" width="0.0243%" height="15" fill="rgb(241,150,43)" fg:x="7837" fg:w="2"/><text x="95.3361%" y="767.50"></text></g><g><title>std::sync::poison::Flag::get (2 samples, 0.02%)</title><rect x="95.0861%" y="741" width="0.0243%" height="15" fill="rgb(206,139,52)" fg:x="7837" fg:w="2"/><text x="95.3361%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.02%)</title><rect x="95.0861%" y="725" width="0.0243%" height="15" fill="rgb(230,63,14)" fg:x="7837" fg:w="2"/><text x="95.3361%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="95.0861%" y="709" width="0.0243%" height="15" fill="rgb(247,8,20)" fg:x="7837" fg:w="2"/><text x="95.3361%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (87 samples, 1.06%)</title><rect x="95.1104%" y="757" width="1.0556%" height="15" fill="rgb(213,115,4)" fg:x="7839" fg:w="87"/><text x="95.3604%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (87 samples, 1.06%)</title><rect x="95.1104%" y="741" width="1.0556%" height="15" fill="rgb(241,79,49)" fg:x="7839" fg:w="87"/><text x="95.3604%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.02%)</title><rect x="96.1781%" y="741" width="0.0243%" height="15" fill="rgb(222,42,35)" fg:x="7927" fg:w="2"/><text x="96.4281%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="96.1781%" y="725" width="0.0243%" height="15" fill="rgb(247,59,23)" fg:x="7927" fg:w="2"/><text x="96.4281%" y="735.50"></text></g><g><title>futex_unqueue (1 samples, 0.01%)</title><rect x="96.2024%" y="629" width="0.0121%" height="15" fill="rgb(247,93,18)" fg:x="7929" fg:w="1"/><text x="96.4524%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="96.2388%" y="581" width="0.0485%" height="15" fill="rgb(249,107,47)" fg:x="7932" fg:w="4"/><text x="96.4888%" y="591.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="96.3844%" y="549" width="0.0485%" height="15" fill="rgb(219,27,1)" fg:x="7944" fg:w="4"/><text x="96.6344%" y="559.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.05%)</title><rect x="96.4329%" y="549" width="0.0485%" height="15" fill="rgb(217,82,32)" fg:x="7948" fg:w="4"/><text x="96.6829%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (17 samples, 0.21%)</title><rect x="96.2873%" y="565" width="0.2063%" height="15" fill="rgb(250,129,47)" fg:x="7936" fg:w="17"/><text x="96.5373%" y="575.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="96.4814%" y="549" width="0.0121%" height="15" fill="rgb(253,88,35)" fg:x="7952" fg:w="1"/><text x="96.7314%" y="559.50"></text></g><g><title>_raw_spin_unlock (13 samples, 0.16%)</title><rect x="96.4936%" y="565" width="0.1577%" height="15" fill="rgb(245,221,14)" fg:x="7953" fg:w="13"/><text x="96.7436%" y="575.50"></text></g><g><title>__x64_sys_futex (38 samples, 0.46%)</title><rect x="96.2024%" y="677" width="0.4611%" height="15" fill="rgb(217,119,54)" fg:x="7929" fg:w="38"/><text x="96.4524%" y="687.50"></text></g><g><title>do_futex (38 samples, 0.46%)</title><rect x="96.2024%" y="661" width="0.4611%" height="15" fill="rgb(247,128,31)" fg:x="7929" fg:w="38"/><text x="96.4524%" y="671.50"></text></g><g><title>futex_wait (38 samples, 0.46%)</title><rect x="96.2024%" y="645" width="0.4611%" height="15" fill="rgb(211,99,22)" fg:x="7929" fg:w="38"/><text x="96.4524%" y="655.50"></text></g><g><title>futex_wait_queue (37 samples, 0.45%)</title><rect x="96.2145%" y="629" width="0.4489%" height="15" fill="rgb(212,20,17)" fg:x="7930" fg:w="37"/><text x="96.4645%" y="639.50"></text></g><g><title>schedule (37 samples, 0.45%)</title><rect x="96.2145%" y="613" width="0.4489%" height="15" fill="rgb(209,159,29)" fg:x="7930" fg:w="37"/><text x="96.4645%" y="623.50"></text></g><g><title>__schedule (35 samples, 0.42%)</title><rect x="96.2388%" y="597" width="0.4247%" height="15" fill="rgb(222,177,53)" fg:x="7932" fg:w="35"/><text x="96.4888%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (31 samples, 0.38%)</title><rect x="96.2873%" y="581" width="0.3761%" height="15" fill="rgb(234,46,43)" fg:x="7936" fg:w="31"/><text x="96.5373%" y="591.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="96.6513%" y="565" width="0.0121%" height="15" fill="rgb(208,108,14)" fg:x="7966" fg:w="1"/><text x="96.9013%" y="575.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="96.6513%" y="549" width="0.0121%" height="15" fill="rgb(226,78,53)" fg:x="7966" fg:w="1"/><text x="96.9013%" y="559.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.01%)</title><rect x="96.6513%" y="533" width="0.0121%" height="15" fill="rgb(230,20,41)" fg:x="7966" fg:w="1"/><text x="96.9013%" y="543.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (40 samples, 0.49%)</title><rect x="96.2024%" y="741" width="0.4853%" height="15" fill="rgb(213,195,35)" fg:x="7929" fg:w="40"/><text x="96.4524%" y="751.50"></text></g><g><title>syscall (40 samples, 0.49%)</title><rect x="96.2024%" y="725" width="0.4853%" height="15" fill="rgb(242,62,36)" fg:x="7929" fg:w="40"/><text x="96.4524%" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (40 samples, 0.49%)</title><rect x="96.2024%" y="709" width="0.4853%" height="15" fill="rgb(222,210,37)" fg:x="7929" fg:w="40"/><text x="96.4524%" y="719.50"></text></g><g><title>do_syscall_64 (40 samples, 0.49%)</title><rect x="96.2024%" y="693" width="0.4853%" height="15" fill="rgb(232,107,19)" fg:x="7929" fg:w="40"/><text x="96.4524%" y="703.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.02%)</title><rect x="96.6634%" y="677" width="0.0243%" height="15" fill="rgb(235,85,17)" fg:x="7967" fg:w="2"/><text x="96.9134%" y="687.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.02%)</title><rect x="96.6634%" y="661" width="0.0243%" height="15" fill="rgb(219,195,31)" fg:x="7967" fg:w="2"/><text x="96.9134%" y="671.50"></text></g><g><title>exit_to_user_mode_loop (2 samples, 0.02%)</title><rect x="96.6634%" y="645" width="0.0243%" height="15" fill="rgb(231,183,30)" fg:x="7967" fg:w="2"/><text x="96.9134%" y="655.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.01%)</title><rect x="96.6756%" y="629" width="0.0121%" height="15" fill="rgb(212,0,11)" fg:x="7968" fg:w="1"/><text x="96.9256%" y="639.50"></text></g><g><title>rseq_get_rseq_cs (1 samples, 0.01%)</title><rect x="96.6756%" y="613" width="0.0121%" height="15" fill="rgb(249,53,54)" fg:x="7968" fg:w="1"/><text x="96.9256%" y="623.50"></text></g><g><title>core::hint::spin_loop (12 samples, 0.15%)</title><rect x="96.6877%" y="725" width="0.1456%" height="15" fill="rgb(211,118,13)" fg:x="7969" fg:w="12"/><text x="96.9377%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (12 samples, 0.15%)</title><rect x="96.6877%" y="709" width="0.1456%" height="15" fill="rgb(237,42,9)" fg:x="7969" fg:w="12"/><text x="96.9377%" y="719.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_version_to_validate (678 samples, 8.23%)</title><rect x="88.7042%" y="805" width="8.2262%" height="15" fill="rgb(227,68,32)" fg:x="7311" fg:w="678"/><text x="88.9542%" y="815.50">block_stm_r..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (152 samples, 1.84%)</title><rect x="95.0861%" y="789" width="1.8442%" height="15" fill="rgb(238,10,7)" fg:x="7837" fg:w="152"/><text x="95.3361%" y="799.50">s..</text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (150 samples, 1.82%)</title><rect x="95.1104%" y="773" width="1.8199%" height="15" fill="rgb(224,42,12)" fg:x="7839" fg:w="150"/><text x="95.3604%" y="783.50">s..</text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock_contended (63 samples, 0.76%)</title><rect x="96.1660%" y="757" width="0.7644%" height="15" fill="rgb(252,190,5)" fg:x="7926" fg:w="63"/><text x="96.4160%" y="767.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::spin (20 samples, 0.24%)</title><rect x="96.6877%" y="741" width="0.2427%" height="15" fill="rgb(220,214,39)" fg:x="7969" fg:w="20"/><text x="96.9377%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (8 samples, 0.10%)</title><rect x="96.8333%" y="725" width="0.0971%" height="15" fill="rgb(247,98,4)" fg:x="7981" fg:w="8"/><text x="97.0833%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.10%)</title><rect x="96.8333%" y="709" width="0.0971%" height="15" fill="rgb(211,60,12)" fg:x="7981" fg:w="8"/><text x="97.0833%" y="719.50"></text></g><g><title>exit_to_user_mode_loop (4 samples, 0.05%)</title><rect x="98.2286%" y="693" width="0.0485%" height="15" fill="rgb(224,42,10)" fg:x="8096" fg:w="4"/><text x="98.4786%" y="703.50"></text></g><g><title>schedule (4 samples, 0.05%)</title><rect x="98.2286%" y="677" width="0.0485%" height="15" fill="rgb(217,167,4)" fg:x="8096" fg:w="4"/><text x="98.4786%" y="687.50"></text></g><g><title>__schedule (4 samples, 0.05%)</title><rect x="98.2286%" y="661" width="0.0485%" height="15" fill="rgb(253,18,17)" fg:x="8096" fg:w="4"/><text x="98.4786%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.05%)</title><rect x="98.2286%" y="645" width="0.0485%" height="15" fill="rgb(249,186,44)" fg:x="8096" fg:w="4"/><text x="98.4786%" y="655.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.05%)</title><rect x="98.2286%" y="629" width="0.0485%" height="15" fill="rgb(254,124,54)" fg:x="8096" fg:w="4"/><text x="98.4786%" y="639.50"></text></g><g><title>std::panic::catch_unwind (4,750 samples, 57.63%)</title><rect x="40.6576%" y="933" width="57.6316%" height="15" fill="rgb(220,124,39)" fg:x="3351" fg:w="4750"/><text x="40.9076%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,750 samples, 57.63%)</title><rect x="40.6576%" y="917" width="57.6316%" height="15" fill="rgb(225,96,46)" fg:x="3351" fg:w="4750"/><text x="40.9076%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,750 samples, 57.63%)</title><rect x="40.6576%" y="901" width="57.6316%" height="15" fill="rgb(221,106,12)" fg:x="3351" fg:w="4750"/><text x="40.9076%" y="911.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,750 samples, 57.63%)</title><rect x="40.6576%" y="885" width="57.6316%" height="15" fill="rgb(227,133,23)" fg:x="3351" fg:w="4750"/><text x="40.9076%" y="895.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (4,750 samples, 57.63%)</title><rect x="40.6576%" y="869" width="57.6316%" height="15" fill="rgb(216,44,52)" fg:x="3351" fg:w="4750"/><text x="40.9076%" y="879.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,750 samples, 57.63%)</title><rect x="40.6576%" y="853" width="57.6316%" height="15" fill="rgb(239,149,7)" fg:x="3351" fg:w="4750"/><text x="40.9076%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (4,750 samples, 57.63%)</title><rect x="40.6576%" y="837" width="57.6316%" height="15" fill="rgb(211,157,31)" fg:x="3351" fg:w="4750"/><text x="40.9076%" y="847.50">block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}}</text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (880 samples, 10.68%)</title><rect x="87.6122%" y="821" width="10.6770%" height="15" fill="rgb(206,215,22)" fg:x="7221" fg:w="880"/><text x="87.8622%" y="831.50">block_stm_revm::..</text></g><g><title>core::sync::atomic::AtomicUsize::load (112 samples, 1.36%)</title><rect x="96.9304%" y="805" width="1.3589%" height="15" fill="rgb(208,113,15)" fg:x="7989" fg:w="112"/><text x="97.1804%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (112 samples, 1.36%)</title><rect x="96.9304%" y="789" width="1.3589%" height="15" fill="rgb(207,189,15)" fg:x="7989" fg:w="112"/><text x="97.1804%" y="799.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="98.2286%" y="773" width="0.0607%" height="15" fill="rgb(231,115,4)" fg:x="8096" fg:w="5"/><text x="98.4786%" y="783.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.06%)</title><rect x="98.2286%" y="757" width="0.0607%" height="15" fill="rgb(253,117,2)" fg:x="8096" fg:w="5"/><text x="98.4786%" y="767.50"></text></g><g><title>irqentry_exit (5 samples, 0.06%)</title><rect x="98.2286%" y="741" width="0.0607%" height="15" fill="rgb(248,48,24)" fg:x="8096" fg:w="5"/><text x="98.4786%" y="751.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.06%)</title><rect x="98.2286%" y="725" width="0.0607%" height="15" fill="rgb(241,28,46)" fg:x="8096" fg:w="5"/><text x="98.4786%" y="735.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.06%)</title><rect x="98.2286%" y="709" width="0.0607%" height="15" fill="rgb(216,165,52)" fg:x="8096" fg:w="5"/><text x="98.4786%" y="719.50"></text></g><g><title>switch_fpu_return (1 samples, 0.01%)</title><rect x="98.2771%" y="693" width="0.0121%" height="15" fill="rgb(220,222,34)" fg:x="8100" fg:w="1"/><text x="98.5271%" y="703.50"></text></g><g><title>restore_fpregs_from_fpstate (1 samples, 0.01%)</title><rect x="98.2771%" y="677" width="0.0121%" height="15" fill="rgb(247,222,49)" fg:x="8100" fg:w="1"/><text x="98.5271%" y="687.50"></text></g><g><title>do_mmap (1 samples, 0.01%)</title><rect x="98.2893%" y="661" width="0.0121%" height="15" fill="rgb(240,10,31)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="671.50"></text></g><g><title>mmap_region (1 samples, 0.01%)</title><rect x="98.2893%" y="645" width="0.0121%" height="15" fill="rgb(221,199,35)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="655.50"></text></g><g><title>vma_expand (1 samples, 0.01%)</title><rect x="98.2893%" y="629" width="0.0121%" height="15" fill="rgb(230,223,11)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="639.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.01%)</title><rect x="98.2893%" y="613" width="0.0121%" height="15" fill="rgb(218,82,45)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="623.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="98.2893%" y="597" width="0.0121%" height="15" fill="rgb(233,213,33)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="607.50"></text></g><g><title>mas_wr_modify (1 samples, 0.01%)</title><rect x="98.2893%" y="581" width="0.0121%" height="15" fill="rgb(210,143,52)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="591.50"></text></g><g><title>mas_wr_bnode (1 samples, 0.01%)</title><rect x="98.2893%" y="565" width="0.0121%" height="15" fill="rgb(206,95,4)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="575.50"></text></g><g><title>mas_rebalance.isra.0 (1 samples, 0.01%)</title><rect x="98.2893%" y="549" width="0.0121%" height="15" fill="rgb(246,164,46)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="559.50"></text></g><g><title>__memcpy (1 samples, 0.01%)</title><rect x="98.2893%" y="533" width="0.0121%" height="15" fill="rgb(213,210,47)" fg:x="8101" fg:w="1"/><text x="98.5393%" y="543.50"></text></g><g><title>osq_lock (1 samples, 0.01%)</title><rect x="98.3014%" y="613" width="0.0121%" height="15" fill="rgb(210,12,38)" fg:x="8102" fg:w="1"/><text x="98.5514%" y="623.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.04%)</title><rect x="98.2893%" y="773" width="0.0364%" height="15" fill="rgb(252,192,54)" fg:x="8101" fg:w="3"/><text x="98.5393%" y="783.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.04%)</title><rect x="98.2893%" y="757" width="0.0364%" height="15" fill="rgb(242,92,6)" fg:x="8101" fg:w="3"/><text x="98.5393%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="98.2893%" y="741" width="0.0364%" height="15" fill="rgb(253,154,15)" fg:x="8101" fg:w="3"/><text x="98.5393%" y="751.50"></text></g><g><title>do_syscall_64 (3 samples, 0.04%)</title><rect x="98.2893%" y="725" width="0.0364%" height="15" fill="rgb(209,20,43)" fg:x="8101" fg:w="3"/><text x="98.5393%" y="735.50"></text></g><g><title>__x64_sys_mmap (3 samples, 0.04%)</title><rect x="98.2893%" y="709" width="0.0364%" height="15" fill="rgb(232,28,49)" fg:x="8101" fg:w="3"/><text x="98.5393%" y="719.50"></text></g><g><title>ksys_mmap_pgoff (3 samples, 0.04%)</title><rect x="98.2893%" y="693" width="0.0364%" height="15" fill="rgb(248,131,53)" fg:x="8101" fg:w="3"/><text x="98.5393%" y="703.50"></text></g><g><title>vm_mmap_pgoff (3 samples, 0.04%)</title><rect x="98.2893%" y="677" width="0.0364%" height="15" fill="rgb(214,16,30)" fg:x="8101" fg:w="3"/><text x="98.5393%" y="687.50"></text></g><g><title>down_write_killable (2 samples, 0.02%)</title><rect x="98.3014%" y="661" width="0.0243%" height="15" fill="rgb(245,16,0)" fg:x="8102" fg:w="2"/><text x="98.5514%" y="671.50"></text></g><g><title>rwsem_down_write_slowpath (2 samples, 0.02%)</title><rect x="98.3014%" y="645" width="0.0243%" height="15" fill="rgb(245,17,35)" fg:x="8102" fg:w="2"/><text x="98.5514%" y="655.50"></text></g><g><title>rwsem_optimistic_spin (2 samples, 0.02%)</title><rect x="98.3014%" y="629" width="0.0243%" height="15" fill="rgb(249,27,53)" fg:x="8102" fg:w="2"/><text x="98.5514%" y="639.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="98.3135%" y="613" width="0.0121%" height="15" fill="rgb(214,73,24)" fg:x="8103" fg:w="1"/><text x="98.5635%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="98.3256%" y="613" width="0.0485%" height="15" fill="rgb(223,84,37)" fg:x="8104" fg:w="4"/><text x="98.5756%" y="623.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="98.3256%" y="597" width="0.0485%" height="15" fill="rgb(210,109,28)" fg:x="8104" fg:w="4"/><text x="98.5756%" y="607.50"></text></g><g><title>down_read_killable (14 samples, 0.17%)</title><rect x="98.3256%" y="709" width="0.1699%" height="15" fill="rgb(208,186,6)" fg:x="8104" fg:w="14"/><text x="98.5756%" y="719.50"></text></g><g><title>rwsem_down_read_slowpath (14 samples, 0.17%)</title><rect x="98.3256%" y="693" width="0.1699%" height="15" fill="rgb(235,201,30)" fg:x="8104" fg:w="14"/><text x="98.5756%" y="703.50"></text></g><g><title>schedule_preempt_disabled (14 samples, 0.17%)</title><rect x="98.3256%" y="677" width="0.1699%" height="15" fill="rgb(216,198,48)" fg:x="8104" fg:w="14"/><text x="98.5756%" y="687.50"></text></g><g><title>schedule (14 samples, 0.17%)</title><rect x="98.3256%" y="661" width="0.1699%" height="15" fill="rgb(254,186,25)" fg:x="8104" fg:w="14"/><text x="98.5756%" y="671.50"></text></g><g><title>__schedule (14 samples, 0.17%)</title><rect x="98.3256%" y="645" width="0.1699%" height="15" fill="rgb(227,87,5)" fg:x="8104" fg:w="14"/><text x="98.5756%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (14 samples, 0.17%)</title><rect x="98.3256%" y="629" width="0.1699%" height="15" fill="rgb(236,205,25)" fg:x="8104" fg:w="14"/><text x="98.5756%" y="639.50"></text></g><g><title>_raw_spin_unlock (10 samples, 0.12%)</title><rect x="98.3742%" y="613" width="0.1213%" height="15" fill="rgb(229,99,32)" fg:x="8108" fg:w="10"/><text x="98.6242%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4,768 samples, 57.85%)</title><rect x="40.6576%" y="997" width="57.8500%" height="15" fill="rgb(231,177,31)" fg:x="3351" fg:w="4768"/><text x="40.9076%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4,768 samples, 57.85%)</title><rect x="40.6576%" y="981" width="57.8500%" height="15" fill="rgb(246,15,2)" fg:x="3351" fg:w="4768"/><text x="40.9076%" y="991.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4,768 samples, 57.85%)</title><rect x="40.6576%" y="965" width="57.8500%" height="15" fill="rgb(207,39,15)" fg:x="3351" fg:w="4768"/><text x="40.9076%" y="975.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (4,768 samples, 57.85%)</title><rect x="40.6576%" y="949" width="57.8500%" height="15" fill="rgb(207,44,9)" fg:x="3351" fg:w="4768"/><text x="40.9076%" y="959.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::sys::pal::unix::thread::guard::current (18 samples, 0.22%)</title><rect x="98.2893%" y="933" width="0.2184%" height="15" fill="rgb(225,224,33)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="943.50"></text></g><g><title>__pthread_getattr_np (18 samples, 0.22%)</title><rect x="98.2893%" y="917" width="0.2184%" height="15" fill="rgb(252,151,3)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="927.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.22%)</title><rect x="98.2893%" y="901" width="0.2184%" height="15" fill="rgb(211,140,13)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="911.50"></text></g><g><title>tcache_init (18 samples, 0.22%)</title><rect x="98.2893%" y="885" width="0.2184%" height="15" fill="rgb(239,225,17)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="895.50"></text></g><g><title>tcache_init (18 samples, 0.22%)</title><rect x="98.2893%" y="869" width="0.2184%" height="15" fill="rgb(223,170,52)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="879.50"></text></g><g><title>arena_get2 (18 samples, 0.22%)</title><rect x="98.2893%" y="853" width="0.2184%" height="15" fill="rgb(212,64,21)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="863.50"></text></g><g><title>arena_get2 (18 samples, 0.22%)</title><rect x="98.2893%" y="837" width="0.2184%" height="15" fill="rgb(236,126,48)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="847.50"></text></g><g><title>_int_new_arena (18 samples, 0.22%)</title><rect x="98.2893%" y="821" width="0.2184%" height="15" fill="rgb(209,135,11)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="831.50"></text></g><g><title>new_heap (18 samples, 0.22%)</title><rect x="98.2893%" y="805" width="0.2184%" height="15" fill="rgb(228,126,40)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="815.50"></text></g><g><title>alloc_new_heap (18 samples, 0.22%)</title><rect x="98.2893%" y="789" width="0.2184%" height="15" fill="rgb(205,196,36)" fg:x="8101" fg:w="18"/><text x="98.5393%" y="799.50"></text></g><g><title>asm_exc_page_fault (15 samples, 0.18%)</title><rect x="98.3256%" y="773" width="0.1820%" height="15" fill="rgb(243,160,33)" fg:x="8104" fg:w="15"/><text x="98.5756%" y="783.50"></text></g><g><title>exc_page_fault (15 samples, 0.18%)</title><rect x="98.3256%" y="757" width="0.1820%" height="15" fill="rgb(210,84,20)" fg:x="8104" fg:w="15"/><text x="98.5756%" y="767.50"></text></g><g><title>do_user_addr_fault (15 samples, 0.18%)</title><rect x="98.3256%" y="741" width="0.1820%" height="15" fill="rgb(228,213,30)" fg:x="8104" fg:w="15"/><text x="98.5756%" y="751.50"></text></g><g><title>lock_mm_and_find_vma (15 samples, 0.18%)</title><rect x="98.3256%" y="725" width="0.1820%" height="15" fill="rgb(252,33,45)" fg:x="8104" fg:w="15"/><text x="98.5756%" y="735.50"></text></g><g><title>find_vma (1 samples, 0.01%)</title><rect x="98.4955%" y="709" width="0.0121%" height="15" fill="rgb(254,227,20)" fg:x="8118" fg:w="1"/><text x="98.7455%" y="719.50"></text></g><g><title>mt_find (1 samples, 0.01%)</title><rect x="98.4955%" y="693" width="0.0121%" height="15" fill="rgb(228,192,2)" fg:x="8118" fg:w="1"/><text x="98.7455%" y="703.50"></text></g><g><title>mtree_range_walk (1 samples, 0.01%)</title><rect x="98.4955%" y="677" width="0.0121%" height="15" fill="rgb(233,32,8)" fg:x="8118" fg:w="1"/><text x="98.7455%" y="687.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.01%)</title><rect x="98.5076%" y="789" width="0.0121%" height="15" fill="rgb(220,146,47)" fg:x="8119" fg:w="1"/><text x="98.7576%" y="799.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.01%)</title><rect x="98.5076%" y="773" width="0.0121%" height="15" fill="rgb(246,194,1)" fg:x="8119" fg:w="1"/><text x="98.7576%" y="783.50"></text></g><g><title>mas_wr_modify (1 samples, 0.01%)</title><rect x="98.5076%" y="757" width="0.0121%" height="15" fill="rgb(218,203,9)" fg:x="8119" fg:w="1"/><text x="98.7576%" y="767.50"></text></g><g><title>mas_wr_bnode (1 samples, 0.01%)</title><rect x="98.5076%" y="741" width="0.0121%" height="15" fill="rgb(237,97,14)" fg:x="8119" fg:w="1"/><text x="98.7576%" y="751.50"></text></g><g><title>mas_split.isra.0 (1 samples, 0.01%)</title><rect x="98.5076%" y="725" width="0.0121%" height="15" fill="rgb(239,76,15)" fg:x="8119" fg:w="1"/><text x="98.7576%" y="735.50"></text></g><g><title>do_mmap (2 samples, 0.02%)</title><rect x="98.5076%" y="821" width="0.0243%" height="15" fill="rgb(222,53,45)" fg:x="8119" fg:w="2"/><text x="98.7576%" y="831.50"></text></g><g><title>mmap_region (2 samples, 0.02%)</title><rect x="98.5076%" y="805" width="0.0243%" height="15" fill="rgb(237,88,5)" fg:x="8119" fg:w="2"/><text x="98.7576%" y="815.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="98.5198%" y="789" width="0.0121%" height="15" fill="rgb(218,223,35)" fg:x="8120" fg:w="1"/><text x="98.7698%" y="799.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.01%)</title><rect x="98.5198%" y="773" width="0.0121%" height="15" fill="rgb(243,229,38)" fg:x="8120" fg:w="1"/><text x="98.7698%" y="783.50"></text></g><g><title>perf_iterate_sb.constprop.0 (1 samples, 0.01%)</title><rect x="98.5198%" y="757" width="0.0121%" height="15" fill="rgb(240,75,41)" fg:x="8120" fg:w="1"/><text x="98.7698%" y="767.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="98.5198%" y="741" width="0.0121%" height="15" fill="rgb(209,110,37)" fg:x="8120" fg:w="1"/><text x="98.7698%" y="751.50"></text></g><g><title>osq_lock (1 samples, 0.01%)</title><rect x="98.5319%" y="773" width="0.0121%" height="15" fill="rgb(221,130,46)" fg:x="8121" fg:w="1"/><text x="98.7819%" y="783.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.05%)</title><rect x="98.5076%" y="933" width="0.0485%" height="15" fill="rgb(237,160,20)" fg:x="8119" fg:w="4"/><text x="98.7576%" y="943.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.05%)</title><rect x="98.5076%" y="917" width="0.0485%" height="15" fill="rgb(234,126,24)" fg:x="8119" fg:w="4"/><text x="98.7576%" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="98.5076%" y="901" width="0.0485%" height="15" fill="rgb(207,177,9)" fg:x="8119" fg:w="4"/><text x="98.7576%" y="911.50"></text></g><g><title>do_syscall_64 (4 samples, 0.05%)</title><rect x="98.5076%" y="885" width="0.0485%" height="15" fill="rgb(231,191,33)" fg:x="8119" fg:w="4"/><text x="98.7576%" y="895.50"></text></g><g><title>__x64_sys_mmap (4 samples, 0.05%)</title><rect x="98.5076%" y="869" width="0.0485%" height="15" fill="rgb(207,42,1)" fg:x="8119" fg:w="4"/><text x="98.7576%" y="879.50"></text></g><g><title>ksys_mmap_pgoff (4 samples, 0.05%)</title><rect x="98.5076%" y="853" width="0.0485%" height="15" fill="rgb(218,34,50)" fg:x="8119" fg:w="4"/><text x="98.7576%" y="863.50"></text></g><g><title>vm_mmap_pgoff (4 samples, 0.05%)</title><rect x="98.5076%" y="837" width="0.0485%" height="15" fill="rgb(254,126,39)" fg:x="8119" fg:w="4"/><text x="98.7576%" y="847.50"></text></g><g><title>down_write_killable (2 samples, 0.02%)</title><rect x="98.5319%" y="821" width="0.0243%" height="15" fill="rgb(251,17,26)" fg:x="8121" fg:w="2"/><text x="98.7819%" y="831.50"></text></g><g><title>rwsem_down_write_slowpath (2 samples, 0.02%)</title><rect x="98.5319%" y="805" width="0.0243%" height="15" fill="rgb(252,215,34)" fg:x="8121" fg:w="2"/><text x="98.7819%" y="815.50"></text></g><g><title>rwsem_optimistic_spin (2 samples, 0.02%)</title><rect x="98.5319%" y="789" width="0.0243%" height="15" fill="rgb(217,120,44)" fg:x="8121" fg:w="2"/><text x="98.7819%" y="799.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="98.5440%" y="773" width="0.0121%" height="15" fill="rgb(211,31,11)" fg:x="8122" fg:w="1"/><text x="98.7940%" y="783.50"></text></g><g><title>osq_lock (1 samples, 0.01%)</title><rect x="98.5562%" y="805" width="0.0121%" height="15" fill="rgb(222,69,51)" fg:x="8123" fg:w="1"/><text x="98.8062%" y="815.50"></text></g><g><title>rwsem_optimistic_spin (2 samples, 0.02%)</title><rect x="98.5562%" y="821" width="0.0243%" height="15" fill="rgb(215,229,42)" fg:x="8123" fg:w="2"/><text x="98.8062%" y="831.50"></text></g><g><title>rwsem_spin_on_owner (1 samples, 0.01%)</title><rect x="98.5683%" y="805" width="0.0121%" height="15" fill="rgb(212,102,15)" fg:x="8124" fg:w="1"/><text x="98.8183%" y="815.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.01%)</title><rect x="98.6290%" y="741" width="0.0121%" height="15" fill="rgb(205,179,41)" fg:x="8129" fg:w="1"/><text x="98.8790%" y="751.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.11%)</title><rect x="98.5804%" y="757" width="0.1092%" height="15" fill="rgb(219,148,46)" fg:x="8125" fg:w="9"/><text x="98.8304%" y="767.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="98.6411%" y="741" width="0.0485%" height="15" fill="rgb(243,40,19)" fg:x="8130" fg:w="4"/><text x="98.8911%" y="751.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.12%)</title><rect x="98.5804%" y="773" width="0.1213%" height="15" fill="rgb(208,206,34)" fg:x="8125" fg:w="10"/><text x="98.8304%" y="783.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="98.6896%" y="757" width="0.0121%" height="15" fill="rgb(244,184,38)" fg:x="8134" fg:w="1"/><text x="98.9396%" y="767.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.01%)</title><rect x="98.6896%" y="741" width="0.0121%" height="15" fill="rgb(244,151,47)" fg:x="8134" fg:w="1"/><text x="98.9396%" y="751.50"></text></g><g><title>down_write_killable (13 samples, 0.16%)</title><rect x="98.5562%" y="853" width="0.1577%" height="15" fill="rgb(236,134,42)" fg:x="8123" fg:w="13"/><text x="98.8062%" y="863.50"></text></g><g><title>rwsem_down_write_slowpath (13 samples, 0.16%)</title><rect x="98.5562%" y="837" width="0.1577%" height="15" fill="rgb(233,93,22)" fg:x="8123" fg:w="13"/><text x="98.8062%" y="847.50"></text></g><g><title>schedule_preempt_disabled (11 samples, 0.13%)</title><rect x="98.5804%" y="821" width="0.1335%" height="15" fill="rgb(211,202,10)" fg:x="8125" fg:w="11"/><text x="98.8304%" y="831.50"></text></g><g><title>schedule (11 samples, 0.13%)</title><rect x="98.5804%" y="805" width="0.1335%" height="15" fill="rgb(240,63,8)" fg:x="8125" fg:w="11"/><text x="98.8304%" y="815.50"></text></g><g><title>__schedule (11 samples, 0.13%)</title><rect x="98.5804%" y="789" width="0.1335%" height="15" fill="rgb(214,9,4)" fg:x="8125" fg:w="11"/><text x="98.8304%" y="799.50"></text></g><g><title>pick_next_task (1 samples, 0.01%)</title><rect x="98.7018%" y="773" width="0.0121%" height="15" fill="rgb(243,66,45)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="783.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="98.7018%" y="757" width="0.0121%" height="15" fill="rgb(220,50,42)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="767.50"></text></g><g><title>newidle_balance (1 samples, 0.01%)</title><rect x="98.7018%" y="741" width="0.0121%" height="15" fill="rgb(220,134,27)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="751.50"></text></g><g><title>load_balance (1 samples, 0.01%)</title><rect x="98.7018%" y="725" width="0.0121%" height="15" fill="rgb(246,151,50)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="735.50"></text></g><g><title>find_busiest_group (1 samples, 0.01%)</title><rect x="98.7018%" y="709" width="0.0121%" height="15" fill="rgb(238,216,27)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="719.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (1 samples, 0.01%)</title><rect x="98.7018%" y="693" width="0.0121%" height="15" fill="rgb(250,92,11)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="703.50"></text></g><g><title>update_sg_lb_stats (1 samples, 0.01%)</title><rect x="98.7018%" y="677" width="0.0121%" height="15" fill="rgb(248,183,6)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="687.50"></text></g><g><title>idle_cpu (1 samples, 0.01%)</title><rect x="98.7018%" y="661" width="0.0121%" height="15" fill="rgb(211,204,50)" fg:x="8135" fg:w="1"/><text x="98.9518%" y="671.50"></text></g><g><title>clone3 (4,788 samples, 58.09%)</title><rect x="40.6333%" y="1045" width="58.0927%" height="15" fill="rgb(252,55,47)" fg:x="3349" fg:w="4788"/><text x="40.8833%" y="1055.50">clone3</text></g><g><title>start_thread (4,786 samples, 58.07%)</title><rect x="40.6576%" y="1029" width="58.0684%" height="15" fill="rgb(240,198,32)" fg:x="3351" fg:w="4786"/><text x="40.9076%" y="1039.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4,786 samples, 58.07%)</title><rect x="40.6576%" y="1013" width="58.0684%" height="15" fill="rgb(224,203,19)" fg:x="3351" fg:w="4786"/><text x="40.9076%" y="1023.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (18 samples, 0.22%)</title><rect x="98.5076%" y="997" width="0.2184%" height="15" fill="rgb(205,27,16)" fg:x="8119" fg:w="18"/><text x="98.7576%" y="1007.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (18 samples, 0.22%)</title><rect x="98.5076%" y="981" width="0.2184%" height="15" fill="rgb(224,226,17)" fg:x="8119" fg:w="18"/><text x="98.7576%" y="991.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (18 samples, 0.22%)</title><rect x="98.5076%" y="965" width="0.2184%" height="15" fill="rgb(205,216,54)" fg:x="8119" fg:w="18"/><text x="98.7576%" y="975.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stackp (18 samples, 0.22%)</title><rect x="98.5076%" y="949" width="0.2184%" height="15" fill="rgb(248,168,46)" fg:x="8119" fg:w="18"/><text x="98.7576%" y="959.50"></text></g><g><title>__GI_mprotect (14 samples, 0.17%)</title><rect x="98.5562%" y="933" width="0.1699%" height="15" fill="rgb(226,111,45)" fg:x="8123" fg:w="14"/><text x="98.8062%" y="943.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.17%)</title><rect x="98.5562%" y="917" width="0.1699%" height="15" fill="rgb(231,15,9)" fg:x="8123" fg:w="14"/><text x="98.8062%" y="927.50"></text></g><g><title>do_syscall_64 (14 samples, 0.17%)</title><rect x="98.5562%" y="901" width="0.1699%" height="15" fill="rgb(243,168,3)" fg:x="8123" fg:w="14"/><text x="98.8062%" y="911.50"></text></g><g><title>__x64_sys_mprotect (14 samples, 0.17%)</title><rect x="98.5562%" y="885" width="0.1699%" height="15" fill="rgb(221,220,54)" fg:x="8123" fg:w="14"/><text x="98.8062%" y="895.50"></text></g><g><title>do_mprotect_pkey (14 samples, 0.17%)</title><rect x="98.5562%" y="869" width="0.1699%" height="15" fill="rgb(232,174,38)" fg:x="8123" fg:w="14"/><text x="98.8062%" y="879.50"></text></g><g><title>mprotect_fixup (1 samples, 0.01%)</title><rect x="98.7139%" y="853" width="0.0121%" height="15" fill="rgb(205,14,38)" fg:x="8136" fg:w="1"/><text x="98.9639%" y="863.50"></text></g><g><title>split_vma (1 samples, 0.01%)</title><rect x="98.7139%" y="837" width="0.0121%" height="15" fill="rgb(234,89,19)" fg:x="8136" fg:w="1"/><text x="98.9639%" y="847.50"></text></g><g><title>__split_vma (1 samples, 0.01%)</title><rect x="98.7139%" y="821" width="0.0121%" height="15" fill="rgb(216,68,51)" fg:x="8136" fg:w="1"/><text x="98.9639%" y="831.50"></text></g><g><title>vm_area_dup (1 samples, 0.01%)</title><rect x="98.7139%" y="805" width="0.0121%" height="15" fill="rgb(213,49,2)" fg:x="8136" fg:w="1"/><text x="98.9639%" y="815.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.01%)</title><rect x="98.7139%" y="789" width="0.0121%" height="15" fill="rgb(242,146,30)" fg:x="8136" fg:w="1"/><text x="98.9639%" y="799.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.01%)</title><rect x="98.7382%" y="1013" width="0.0121%" height="15" fill="rgb(224,188,11)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="1023.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.01%)</title><rect x="98.7382%" y="997" width="0.0121%" height="15" fill="rgb(213,159,11)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="1007.50"></text></g><g><title>bprm_execve (1 samples, 0.01%)</title><rect x="98.7382%" y="981" width="0.0121%" height="15" fill="rgb(229,13,31)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="991.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.01%)</title><rect x="98.7382%" y="965" width="0.0121%" height="15" fill="rgb(209,103,11)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="975.50"></text></g><g><title>exec_binprm (1 samples, 0.01%)</title><rect x="98.7382%" y="949" width="0.0121%" height="15" fill="rgb(206,3,4)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="959.50"></text></g><g><title>search_binary_handler (1 samples, 0.01%)</title><rect x="98.7382%" y="933" width="0.0121%" height="15" fill="rgb(252,10,49)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="943.50"></text></g><g><title>load_elf_binary (1 samples, 0.01%)</title><rect x="98.7382%" y="917" width="0.0121%" height="15" fill="rgb(217,160,32)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="927.50"></text></g><g><title>load_elf_interp.isra.0 (1 samples, 0.01%)</title><rect x="98.7382%" y="901" width="0.0121%" height="15" fill="rgb(249,196,0)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="911.50"></text></g><g><title>elf_map (1 samples, 0.01%)</title><rect x="98.7382%" y="885" width="0.0121%" height="15" fill="rgb(213,17,48)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="895.50"></text></g><g><title>vm_munmap (1 samples, 0.01%)</title><rect x="98.7382%" y="869" width="0.0121%" height="15" fill="rgb(206,42,46)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="879.50"></text></g><g><title>__vm_munmap (1 samples, 0.01%)</title><rect x="98.7382%" y="853" width="0.0121%" height="15" fill="rgb(212,105,24)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="863.50"></text></g><g><title>do_vmi_munmap (1 samples, 0.01%)</title><rect x="98.7382%" y="837" width="0.0121%" height="15" fill="rgb(243,216,30)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="847.50"></text></g><g><title>do_vmi_align_munmap (1 samples, 0.01%)</title><rect x="98.7382%" y="821" width="0.0121%" height="15" fill="rgb(207,121,3)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="831.50"></text></g><g><title>unmap_region (1 samples, 0.01%)</title><rect x="98.7382%" y="805" width="0.0121%" height="15" fill="rgb(249,78,0)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="815.50"></text></g><g><title>lru_add_drain (1 samples, 0.01%)</title><rect x="98.7382%" y="789" width="0.0121%" height="15" fill="rgb(244,151,32)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="799.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.01%)</title><rect x="98.7382%" y="773" width="0.0121%" height="15" fill="rgb(228,63,25)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="783.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.01%)</title><rect x="98.7382%" y="757" width="0.0121%" height="15" fill="rgb(231,158,23)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="767.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="98.7382%" y="741" width="0.0121%" height="15" fill="rgb(248,107,23)" fg:x="8138" fg:w="1"/><text x="98.9882%" y="751.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.01%)</title><rect x="98.7503%" y="901" width="0.0121%" height="15" fill="rgb(215,168,21)" fg:x="8139" fg:w="1"/><text x="99.0003%" y="911.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.01%)</title><rect x="98.7503%" y="885" width="0.0121%" height="15" fill="rgb(227,83,22)" fg:x="8139" fg:w="1"/><text x="99.0003%" y="895.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.01%)</title><rect x="98.7503%" y="869" width="0.0121%" height="15" fill="rgb(217,118,43)" fg:x="8139" fg:w="1"/><text x="99.0003%" y="879.50"></text></g><g><title>release_pages (1 samples, 0.01%)</title><rect x="98.7503%" y="853" width="0.0121%" height="15" fill="rgb(229,220,41)" fg:x="8139" fg:w="1"/><text x="99.0003%" y="863.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.01%)</title><rect x="98.7503%" y="837" width="0.0121%" height="15" fill="rgb(254,146,46)" fg:x="8139" fg:w="1"/><text x="99.0003%" y="847.50"></text></g><g><title>folio_test_hugetlb (2 samples, 0.02%)</title><rect x="98.7746%" y="821" width="0.0243%" height="15" fill="rgb(233,208,31)" fg:x="8141" fg:w="2"/><text x="99.0246%" y="831.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="98.8352%" y="789" width="0.0121%" height="15" fill="rgb(222,162,7)" fg:x="8146" fg:w="1"/><text x="99.0852%" y="799.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="98.8352%" y="773" width="0.0121%" height="15" fill="rgb(230,117,45)" fg:x="8146" fg:w="1"/><text x="99.0852%" y="783.50"></text></g><g><title>page_remove_rmap (6 samples, 0.07%)</title><rect x="98.7988%" y="821" width="0.0728%" height="15" fill="rgb(239,163,6)" fg:x="8143" fg:w="6"/><text x="99.0488%" y="831.50"></text></g><g><title>__mod_lruvec_page_state (3 samples, 0.04%)</title><rect x="98.8352%" y="805" width="0.0364%" height="15" fill="rgb(246,130,17)" fg:x="8146" fg:w="3"/><text x="99.0852%" y="815.50"></text></g><g><title>__mod_node_page_state (2 samples, 0.02%)</title><rect x="98.8474%" y="789" width="0.0243%" height="15" fill="rgb(216,84,5)" fg:x="8147" fg:w="2"/><text x="99.0974%" y="799.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="98.8959%" y="741" width="0.0121%" height="15" fill="rgb(230,200,21)" fg:x="8151" fg:w="1"/><text x="99.1459%" y="751.50"></text></g><g><title>__mem_cgroup_uncharge_list (2 samples, 0.02%)</title><rect x="98.8959%" y="757" width="0.0243%" height="15" fill="rgb(224,2,8)" fg:x="8151" fg:w="2"/><text x="99.1459%" y="767.50"></text></g><g><title>uncharge_folio (1 samples, 0.01%)</title><rect x="98.9080%" y="741" width="0.0121%" height="15" fill="rgb(238,178,10)" fg:x="8152" fg:w="1"/><text x="99.1580%" y="751.50"></text></g><g><title>free_unref_page_commit (7 samples, 0.08%)</title><rect x="98.9202%" y="741" width="0.0849%" height="15" fill="rgb(242,153,24)" fg:x="8153" fg:w="7"/><text x="99.1702%" y="751.50"></text></g><g><title>free_pcppages_bulk (6 samples, 0.07%)</title><rect x="98.9323%" y="725" width="0.0728%" height="15" fill="rgb(242,32,48)" fg:x="8154" fg:w="6"/><text x="99.1823%" y="735.50"></text></g><g><title>__free_one_page (5 samples, 0.06%)</title><rect x="98.9444%" y="709" width="0.0607%" height="15" fill="rgb(227,36,0)" fg:x="8155" fg:w="5"/><text x="99.1944%" y="719.50"></text></g><g><title>free_unref_page_list (8 samples, 0.10%)</title><rect x="98.9202%" y="757" width="0.0971%" height="15" fill="rgb(251,33,35)" fg:x="8153" fg:w="8"/><text x="99.1702%" y="767.50"></text></g><g><title>free_unref_page_prepare (1 samples, 0.01%)</title><rect x="99.0051%" y="741" width="0.0121%" height="15" fill="rgb(232,168,51)" fg:x="8160" fg:w="1"/><text x="99.2551%" y="751.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="99.0536%" y="741" width="0.0121%" height="15" fill="rgb(228,56,10)" fg:x="8164" fg:w="1"/><text x="99.3036%" y="751.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="99.0536%" y="725" width="0.0121%" height="15" fill="rgb(231,10,26)" fg:x="8164" fg:w="1"/><text x="99.3036%" y="735.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (5 samples, 0.06%)</title><rect x="99.0172%" y="757" width="0.0607%" height="15" fill="rgb(226,202,12)" fg:x="8161" fg:w="5"/><text x="99.2672%" y="767.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="99.0658%" y="741" width="0.0121%" height="15" fill="rgb(251,49,21)" fg:x="8165" fg:w="1"/><text x="99.3158%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (30 samples, 0.36%)</title><rect x="98.7260%" y="1045" width="0.3640%" height="15" fill="rgb(206,228,28)" fg:x="8137" fg:w="30"/><text x="98.9760%" y="1055.50"></text></g><g><title>do_syscall_64 (29 samples, 0.35%)</title><rect x="98.7382%" y="1029" width="0.3519%" height="15" fill="rgb(205,198,31)" fg:x="8138" fg:w="29"/><text x="98.9882%" y="1039.50"></text></g><g><title>__x64_sys_exit_group (28 samples, 0.34%)</title><rect x="98.7503%" y="1013" width="0.3397%" height="15" fill="rgb(213,69,1)" fg:x="8139" fg:w="28"/><text x="99.0003%" y="1023.50"></text></g><g><title>do_group_exit (28 samples, 0.34%)</title><rect x="98.7503%" y="997" width="0.3397%" height="15" fill="rgb(209,177,9)" fg:x="8139" fg:w="28"/><text x="99.0003%" y="1007.50"></text></g><g><title>do_exit (28 samples, 0.34%)</title><rect x="98.7503%" y="981" width="0.3397%" height="15" fill="rgb(227,119,30)" fg:x="8139" fg:w="28"/><text x="99.0003%" y="991.50"></text></g><g><title>exit_mm (28 samples, 0.34%)</title><rect x="98.7503%" y="965" width="0.3397%" height="15" fill="rgb(234,106,41)" fg:x="8139" fg:w="28"/><text x="99.0003%" y="975.50"></text></g><g><title>mmput (28 samples, 0.34%)</title><rect x="98.7503%" y="949" width="0.3397%" height="15" fill="rgb(244,103,47)" fg:x="8139" fg:w="28"/><text x="99.0003%" y="959.50"></text></g><g><title>__mmput (28 samples, 0.34%)</title><rect x="98.7503%" y="933" width="0.3397%" height="15" fill="rgb(212,211,25)" fg:x="8139" fg:w="28"/><text x="99.0003%" y="943.50"></text></g><g><title>exit_mmap (28 samples, 0.34%)</title><rect x="98.7503%" y="917" width="0.3397%" height="15" fill="rgb(208,63,53)" fg:x="8139" fg:w="28"/><text x="99.0003%" y="927.50"></text></g><g><title>unmap_vmas (27 samples, 0.33%)</title><rect x="98.7624%" y="901" width="0.3276%" height="15" fill="rgb(213,176,21)" fg:x="8140" fg:w="27"/><text x="99.0124%" y="911.50"></text></g><g><title>unmap_single_vma (27 samples, 0.33%)</title><rect x="98.7624%" y="885" width="0.3276%" height="15" fill="rgb(243,124,12)" fg:x="8140" fg:w="27"/><text x="99.0124%" y="895.50"></text></g><g><title>unmap_page_range (27 samples, 0.33%)</title><rect x="98.7624%" y="869" width="0.3276%" height="15" fill="rgb(239,2,35)" fg:x="8140" fg:w="27"/><text x="99.0124%" y="879.50"></text></g><g><title>zap_pmd_range.isra.0 (27 samples, 0.33%)</title><rect x="98.7624%" y="853" width="0.3276%" height="15" fill="rgb(253,169,22)" fg:x="8140" fg:w="27"/><text x="99.0124%" y="863.50"></text></g><g><title>zap_pte_range (27 samples, 0.33%)</title><rect x="98.7624%" y="837" width="0.3276%" height="15" fill="rgb(254,51,12)" fg:x="8140" fg:w="27"/><text x="99.0124%" y="847.50"></text></g><g><title>tlb_flush_mmu (18 samples, 0.22%)</title><rect x="98.8716%" y="821" width="0.2184%" height="15" fill="rgb(244,17,47)" fg:x="8149" fg:w="18"/><text x="99.1216%" y="831.50"></text></g><g><title>tlb_batch_pages_flush (18 samples, 0.22%)</title><rect x="98.8716%" y="805" width="0.2184%" height="15" fill="rgb(251,45,46)" fg:x="8149" fg:w="18"/><text x="99.1216%" y="815.50"></text></g><g><title>free_pages_and_swap_cache (18 samples, 0.22%)</title><rect x="98.8716%" y="789" width="0.2184%" height="15" fill="rgb(223,87,43)" fg:x="8149" fg:w="18"/><text x="99.1216%" y="799.50"></text></g><g><title>release_pages (18 samples, 0.22%)</title><rect x="98.8716%" y="773" width="0.2184%" height="15" fill="rgb(230,132,31)" fg:x="8149" fg:w="18"/><text x="99.1216%" y="783.50"></text></g><g><title>uncharge_folio (1 samples, 0.01%)</title><rect x="99.0779%" y="757" width="0.0121%" height="15" fill="rgb(206,99,1)" fg:x="8166" fg:w="1"/><text x="99.3279%" y="767.50"></text></g><g><title>calculate_sigpending (1 samples, 0.01%)</title><rect x="99.1022%" y="1013" width="0.0121%" height="15" fill="rgb(227,110,25)" fg:x="8168" fg:w="1"/><text x="99.3522%" y="1023.50"></text></g><g><title>calculate_sigpending (3 samples, 0.04%)</title><rect x="99.1264%" y="997" width="0.0364%" height="15" fill="rgb(217,182,7)" fg:x="8170" fg:w="3"/><text x="99.3764%" y="1007.50"></text></g><g><title>_raw_spin_lock_irq (3 samples, 0.04%)</title><rect x="99.1264%" y="981" width="0.0364%" height="15" fill="rgb(250,176,4)" fg:x="8170" fg:w="3"/><text x="99.3764%" y="991.50"></text></g><g><title>block-stm-revm (8,237 samples, 99.94%)</title><rect x="0.0000%" y="1061" width="99.9393%" height="15" fill="rgb(244,98,30)" fg:x="0" fg:w="8237"/><text x="0.2500%" y="1071.50">block-stm-revm</text></g><g><title>ret_from_fork_asm (70 samples, 0.85%)</title><rect x="99.0900%" y="1045" width="0.8493%" height="15" fill="rgb(228,150,42)" fg:x="8167" fg:w="70"/><text x="99.3400%" y="1055.50"></text></g><g><title>ret_from_fork (70 samples, 0.85%)</title><rect x="99.0900%" y="1029" width="0.8493%" height="15" fill="rgb(231,91,46)" fg:x="8167" fg:w="70"/><text x="99.3400%" y="1039.50"></text></g><g><title>schedule_tail (68 samples, 0.83%)</title><rect x="99.1143%" y="1013" width="0.8250%" height="15" fill="rgb(252,161,32)" fg:x="8169" fg:w="68"/><text x="99.3643%" y="1023.50"></text></g><g><title>finish_task_switch.isra.0 (64 samples, 0.78%)</title><rect x="99.1628%" y="997" width="0.7765%" height="15" fill="rgb(236,69,41)" fg:x="8173" fg:w="64"/><text x="99.4128%" y="1007.50"></text></g><g><title>__perf_event_task_sched_in (62 samples, 0.75%)</title><rect x="99.1871%" y="981" width="0.7522%" height="15" fill="rgb(212,160,3)" fg:x="8175" fg:w="62"/><text x="99.4371%" y="991.50"></text></g><g><title>perf_ctx_enable (62 samples, 0.75%)</title><rect x="99.1871%" y="965" width="0.7522%" height="15" fill="rgb(216,5,50)" fg:x="8175" fg:w="62"/><text x="99.4371%" y="975.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="99.8908%" y="949" width="0.0485%" height="15" fill="rgb(241,138,25)" fg:x="8233" fg:w="4"/><text x="100.1408%" y="959.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="99.9393%" y="885" width="0.0121%" height="15" fill="rgb(239,42,18)" fg:x="8237" fg:w="1"/><text x="100.1893%" y="895.50"></text></g><g><title>all (8,242 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(239,40,7)" fg:x="0" fg:w="8242"/><text x="0.2500%" y="1087.50"></text></g><g><title>perf-exec (5 samples, 0.06%)</title><rect x="99.9393%" y="1061" width="0.0607%" height="15" fill="rgb(239,11,31)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="1071.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.06%)</title><rect x="99.9393%" y="1045" width="0.0607%" height="15" fill="rgb(224,77,40)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="1055.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="99.9393%" y="1029" width="0.0607%" height="15" fill="rgb(226,15,5)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="1039.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.06%)</title><rect x="99.9393%" y="1013" width="0.0607%" height="15" fill="rgb(254,188,5)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="1023.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.06%)</title><rect x="99.9393%" y="997" width="0.0607%" height="15" fill="rgb(241,148,52)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="1007.50"></text></g><g><title>bprm_execve (5 samples, 0.06%)</title><rect x="99.9393%" y="981" width="0.0607%" height="15" fill="rgb(251,48,36)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="991.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.06%)</title><rect x="99.9393%" y="965" width="0.0607%" height="15" fill="rgb(243,83,13)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="975.50"></text></g><g><title>exec_binprm (5 samples, 0.06%)</title><rect x="99.9393%" y="949" width="0.0607%" height="15" fill="rgb(210,105,0)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="959.50"></text></g><g><title>search_binary_handler (5 samples, 0.06%)</title><rect x="99.9393%" y="933" width="0.0607%" height="15" fill="rgb(239,60,36)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="943.50"></text></g><g><title>load_elf_binary (5 samples, 0.06%)</title><rect x="99.9393%" y="917" width="0.0607%" height="15" fill="rgb(210,20,0)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="927.50"></text></g><g><title>begin_new_exec (5 samples, 0.06%)</title><rect x="99.9393%" y="901" width="0.0607%" height="15" fill="rgb(244,26,53)" fg:x="8237" fg:w="5"/><text x="100.1893%" y="911.50"></text></g><g><title>perf_event_exec (4 samples, 0.05%)</title><rect x="99.9515%" y="885" width="0.0485%" height="15" fill="rgb(240,100,49)" fg:x="8238" fg:w="4"/><text x="100.2015%" y="895.50"></text></g><g><title>perf_event_enable_on_exec (4 samples, 0.05%)</title><rect x="99.9515%" y="869" width="0.0485%" height="15" fill="rgb(250,46,45)" fg:x="8238" fg:w="4"/><text x="100.2015%" y="879.50"></text></g><g><title>ctx_resched (4 samples, 0.05%)</title><rect x="99.9515%" y="853" width="0.0485%" height="15" fill="rgb(220,181,29)" fg:x="8238" fg:w="4"/><text x="100.2015%" y="863.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.05%)</title><rect x="99.9515%" y="837" width="0.0485%" height="15" fill="rgb(213,137,33)" fg:x="8238" fg:w="4"/><text x="100.2015%" y="847.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="99.9515%" y="821" width="0.0485%" height="15" fill="rgb(213,27,48)" fg:x="8238" fg:w="4"/><text x="100.2015%" y="831.50"></text></g></svg></svg>