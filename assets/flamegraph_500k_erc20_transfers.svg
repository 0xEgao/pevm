<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="11304"><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="0.0177%" y="1045" width="0.0177%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2677%" y="1055.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.07%)</title><rect x="0.0442%" y="1045" width="0.0708%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="8"/><text x="0.2942%" y="1055.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="0.1150%" y="1045" width="0.0265%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="3"/><text x="0.3650%" y="1055.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (2 samples, 0.02%)</title><rect x="0.1592%" y="1045" width="0.0177%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="2"/><text x="0.4092%" y="1055.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (15 samples, 0.13%)</title><rect x="0.1769%" y="1045" width="0.1327%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="15"/><text x="0.4269%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.03%)</title><rect x="0.3096%" y="1045" width="0.0265%" height="15" fill="rgb(232,128,0)" fg:x="35" fg:w="3"/><text x="0.5596%" y="1055.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (4 samples, 0.04%)</title><rect x="0.3539%" y="1045" width="0.0354%" height="15" fill="rgb(207,160,47)" fg:x="40" fg:w="4"/><text x="0.6039%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="0.3539%" y="1029" width="0.0354%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="4"/><text x="0.6039%" y="1039.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="0.3539%" y="1013" width="0.0354%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="4"/><text x="0.6039%" y="1023.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (2 samples, 0.02%)</title><rect x="0.3715%" y="997" width="0.0177%" height="15" fill="rgb(220,122,19)" fg:x="42" fg:w="2"/><text x="0.6215%" y="1007.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="0.3715%" y="981" width="0.0177%" height="15" fill="rgb(250,228,42)" fg:x="42" fg:w="2"/><text x="0.6215%" y="991.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="0.3715%" y="965" width="0.0177%" height="15" fill="rgb(240,193,28)" fg:x="42" fg:w="2"/><text x="0.6215%" y="975.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="0.3715%" y="949" width="0.0177%" height="15" fill="rgb(216,20,37)" fg:x="42" fg:w="2"/><text x="0.6215%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="0.3715%" y="933" width="0.0177%" height="15" fill="rgb(206,188,39)" fg:x="42" fg:w="2"/><text x="0.6215%" y="943.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (3 samples, 0.03%)</title><rect x="0.3981%" y="1045" width="0.0265%" height="15" fill="rgb(217,207,13)" fg:x="45" fg:w="3"/><text x="0.6481%" y="1055.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (4 samples, 0.04%)</title><rect x="0.4246%" y="1045" width="0.0354%" height="15" fill="rgb(231,73,38)" fg:x="48" fg:w="4"/><text x="0.6746%" y="1055.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (2 samples, 0.02%)</title><rect x="0.4600%" y="1029" width="0.0177%" height="15" fill="rgb(225,20,46)" fg:x="52" fg:w="2"/><text x="0.7100%" y="1039.50"></text></g><g><title>revm_interpreter::instructions::bitwise::shl (4 samples, 0.04%)</title><rect x="0.4600%" y="1045" width="0.0354%" height="15" fill="rgb(210,31,41)" fg:x="52" fg:w="4"/><text x="0.7100%" y="1055.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::ShlAssign&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shl_assign (2 samples, 0.02%)</title><rect x="0.4777%" y="1029" width="0.0177%" height="15" fill="rgb(221,200,47)" fg:x="54" fg:w="2"/><text x="0.7277%" y="1039.50"></text></g><g><title>[[heap]] (57 samples, 0.50%)</title><rect x="0.0088%" y="1061" width="0.5042%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="57"/><text x="0.2588%" y="1071.50"></text></g><g><title>__GI___libc_free (6 samples, 0.05%)</title><rect x="0.5573%" y="1045" width="0.0531%" height="15" fill="rgb(249,33,26)" fg:x="63" fg:w="6"/><text x="0.8073%" y="1055.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="0.6104%" y="1045" width="0.0265%" height="15" fill="rgb(235,183,28)" fg:x="69" fg:w="3"/><text x="0.8604%" y="1055.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="0.6369%" y="1045" width="0.0442%" height="15" fill="rgb(221,5,38)" fg:x="72" fg:w="5"/><text x="0.8869%" y="1055.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="0.6812%" y="1045" width="0.0265%" height="15" fill="rgb(247,18,42)" fg:x="77" fg:w="3"/><text x="0.9312%" y="1055.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="0.7077%" y="1045" width="0.0354%" height="15" fill="rgb(241,131,45)" fg:x="80" fg:w="4"/><text x="0.9577%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.7431%" y="1045" width="0.0177%" height="15" fill="rgb(249,31,29)" fg:x="84" fg:w="2"/><text x="0.9931%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="0.7608%" y="1045" width="0.0177%" height="15" fill="rgb(225,111,53)" fg:x="86" fg:w="2"/><text x="1.0108%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="0.7608%" y="1029" width="0.0177%" height="15" fill="rgb(238,160,17)" fg:x="86" fg:w="2"/><text x="1.0108%" y="1039.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="0.7873%" y="1029" width="0.0265%" height="15" fill="rgb(214,148,48)" fg:x="89" fg:w="3"/><text x="1.0373%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.03%)</title><rect x="0.7873%" y="1013" width="0.0265%" height="15" fill="rgb(232,36,49)" fg:x="89" fg:w="3"/><text x="1.0373%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.03%)</title><rect x="0.7873%" y="997" width="0.0265%" height="15" fill="rgb(209,103,24)" fg:x="89" fg:w="3"/><text x="1.0373%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.03%)</title><rect x="0.7873%" y="981" width="0.0265%" height="15" fill="rgb(229,88,8)" fg:x="89" fg:w="3"/><text x="1.0373%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.03%)</title><rect x="0.7873%" y="965" width="0.0265%" height="15" fill="rgb(213,181,19)" fg:x="89" fg:w="3"/><text x="1.0373%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="0.7873%" y="949" width="0.0265%" height="15" fill="rgb(254,191,54)" fg:x="89" fg:w="3"/><text x="1.0373%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,std::hash::random::RandomState&gt;&gt; (3 samples, 0.03%)</title><rect x="0.7873%" y="933" width="0.0265%" height="15" fill="rgb(241,83,37)" fg:x="89" fg:w="3"/><text x="1.0373%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt;&gt; (3 samples, 0.03%)</title><rect x="0.7873%" y="917" width="0.0265%" height="15" fill="rgb(233,36,39)" fg:x="89" fg:w="3"/><text x="1.0373%" y="927.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="0.7873%" y="901" width="0.0265%" height="15" fill="rgb(226,3,54)" fg:x="89" fg:w="3"/><text x="1.0373%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.03%)</title><rect x="0.7873%" y="885" width="0.0265%" height="15" fill="rgb(245,192,40)" fg:x="89" fg:w="3"/><text x="1.0373%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.03%)</title><rect x="0.7873%" y="869" width="0.0265%" height="15" fill="rgb(238,167,29)" fg:x="89" fg:w="3"/><text x="1.0373%" y="879.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.03%)</title><rect x="0.7873%" y="853" width="0.0265%" height="15" fill="rgb(232,182,51)" fg:x="89" fg:w="3"/><text x="1.0373%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3 samples, 0.03%)</title><rect x="0.7873%" y="837" width="0.0265%" height="15" fill="rgb(231,60,39)" fg:x="89" fg:w="3"/><text x="1.0373%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (3 samples, 0.03%)</title><rect x="0.8139%" y="1029" width="0.0265%" height="15" fill="rgb(208,69,12)" fg:x="92" fg:w="3"/><text x="1.0639%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (3 samples, 0.03%)</title><rect x="0.8139%" y="1013" width="0.0265%" height="15" fill="rgb(235,93,37)" fg:x="92" fg:w="3"/><text x="1.0639%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (3 samples, 0.03%)</title><rect x="0.8139%" y="997" width="0.0265%" height="15" fill="rgb(213,116,39)" fg:x="92" fg:w="3"/><text x="1.0639%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (3 samples, 0.03%)</title><rect x="0.8139%" y="981" width="0.0265%" height="15" fill="rgb(222,207,29)" fg:x="92" fg:w="3"/><text x="1.0639%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="0.8139%" y="965" width="0.0265%" height="15" fill="rgb(206,96,30)" fg:x="92" fg:w="3"/><text x="1.0639%" y="975.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.03%)</title><rect x="0.8139%" y="949" width="0.0265%" height="15" fill="rgb(218,138,4)" fg:x="92" fg:w="3"/><text x="1.0639%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.03%)</title><rect x="0.8139%" y="933" width="0.0265%" height="15" fill="rgb(250,191,14)" fg:x="92" fg:w="3"/><text x="1.0639%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.03%)</title><rect x="0.8139%" y="917" width="0.0265%" height="15" fill="rgb(239,60,40)" fg:x="92" fg:w="3"/><text x="1.0639%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3 samples, 0.03%)</title><rect x="0.8139%" y="901" width="0.0265%" height="15" fill="rgb(206,27,48)" fg:x="92" fg:w="3"/><text x="1.0639%" y="911.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (7 samples, 0.06%)</title><rect x="0.7873%" y="1045" width="0.0619%" height="15" fill="rgb(225,35,8)" fg:x="89" fg:w="7"/><text x="1.0373%" y="1055.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.05%)</title><rect x="0.8846%" y="949" width="0.0531%" height="15" fill="rgb(250,213,24)" fg:x="100" fg:w="6"/><text x="1.1346%" y="959.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.05%)</title><rect x="0.8846%" y="933" width="0.0531%" height="15" fill="rgb(247,123,22)" fg:x="100" fg:w="6"/><text x="1.1346%" y="943.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (15 samples, 0.13%)</title><rect x="0.8846%" y="1013" width="0.1327%" height="15" fill="rgb(231,138,38)" fg:x="100" fg:w="15"/><text x="1.1346%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (15 samples, 0.13%)</title><rect x="0.8846%" y="997" width="0.1327%" height="15" fill="rgb(231,145,46)" fg:x="100" fg:w="15"/><text x="1.1346%" y="1007.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (15 samples, 0.13%)</title><rect x="0.8846%" y="981" width="0.1327%" height="15" fill="rgb(251,118,11)" fg:x="100" fg:w="15"/><text x="1.1346%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (15 samples, 0.13%)</title><rect x="0.8846%" y="965" width="0.1327%" height="15" fill="rgb(217,147,25)" fg:x="100" fg:w="15"/><text x="1.1346%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (9 samples, 0.08%)</title><rect x="0.9377%" y="949" width="0.0796%" height="15" fill="rgb(247,81,37)" fg:x="106" fg:w="9"/><text x="1.1877%" y="959.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.18%)</title><rect x="0.8669%" y="1045" width="0.1769%" height="15" fill="rgb(209,12,38)" fg:x="98" fg:w="20"/><text x="1.1169%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.16%)</title><rect x="0.8846%" y="1029" width="0.1592%" height="15" fill="rgb(227,1,9)" fg:x="100" fg:w="18"/><text x="1.1346%" y="1039.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="1.0173%" y="1013" width="0.0265%" height="15" fill="rgb(248,47,43)" fg:x="115" fg:w="3"/><text x="1.2673%" y="1023.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="1.0173%" y="997" width="0.0265%" height="15" fill="rgb(221,10,30)" fg:x="115" fg:w="3"/><text x="1.2673%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="1.0173%" y="981" width="0.0265%" height="15" fill="rgb(210,229,1)" fg:x="115" fg:w="3"/><text x="1.2673%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (2 samples, 0.02%)</title><rect x="1.0262%" y="965" width="0.0177%" height="15" fill="rgb(222,148,37)" fg:x="116" fg:w="2"/><text x="1.2762%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.02%)</title><rect x="1.1058%" y="1045" width="0.0177%" height="15" fill="rgb(234,67,33)" fg:x="125" fg:w="2"/><text x="1.3558%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="1.1323%" y="1045" width="0.0177%" height="15" fill="rgb(247,98,35)" fg:x="128" fg:w="2"/><text x="1.3823%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.02%)</title><rect x="1.1323%" y="1029" width="0.0177%" height="15" fill="rgb(247,138,52)" fg:x="128" fg:w="2"/><text x="1.3823%" y="1039.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_ref_db (2 samples, 0.02%)</title><rect x="1.1500%" y="1045" width="0.0177%" height="15" fill="rgb(213,79,30)" fg:x="130" fg:w="2"/><text x="1.4000%" y="1055.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (2 samples, 0.02%)</title><rect x="1.1943%" y="1045" width="0.0177%" height="15" fill="rgb(246,177,23)" fg:x="135" fg:w="2"/><text x="1.4443%" y="1055.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="1.2120%" y="1045" width="0.0177%" height="15" fill="rgb(230,62,27)" fg:x="137" fg:w="2"/><text x="1.4620%" y="1055.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (2 samples, 0.02%)</title><rect x="1.2562%" y="1045" width="0.0177%" height="15" fill="rgb(216,154,8)" fg:x="142" fg:w="2"/><text x="1.5062%" y="1055.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (3 samples, 0.03%)</title><rect x="1.2739%" y="1045" width="0.0265%" height="15" fill="rgb(244,35,45)" fg:x="144" fg:w="3"/><text x="1.5239%" y="1055.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="1.2827%" y="1029" width="0.0177%" height="15" fill="rgb(251,115,12)" fg:x="145" fg:w="2"/><text x="1.5327%" y="1039.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::run (56 samples, 0.50%)</title><rect x="1.3093%" y="1045" width="0.4954%" height="15" fill="rgb(240,54,50)" fg:x="148" fg:w="56"/><text x="1.5593%" y="1055.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::step (56 samples, 0.50%)</title><rect x="1.3093%" y="1029" width="0.4954%" height="15" fill="rgb(233,84,52)" fg:x="148" fg:w="56"/><text x="1.5593%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (56 samples, 0.50%)</title><rect x="1.3093%" y="1013" width="0.4954%" height="15" fill="rgb(207,117,47)" fg:x="148" fg:w="56"/><text x="1.5593%" y="1023.50"></text></g><g><title>[[stack]] (149 samples, 1.32%)</title><rect x="0.5131%" y="1061" width="1.3181%" height="15" fill="rgb(249,43,39)" fg:x="58" fg:w="149"/><text x="0.7631%" y="1071.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_shr (2 samples, 0.02%)</title><rect x="1.8135%" y="1045" width="0.0177%" height="15" fill="rgb(209,38,44)" fg:x="205" fg:w="2"/><text x="2.0635%" y="1055.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="1.8577%" y="1029" width="0.0177%" height="15" fill="rgb(236,212,23)" fg:x="210" fg:w="2"/><text x="2.1077%" y="1039.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="1.8577%" y="1013" width="0.0177%" height="15" fill="rgb(242,79,21)" fg:x="210" fg:w="2"/><text x="2.1077%" y="1023.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (2 samples, 0.02%)</title><rect x="1.8577%" y="997" width="0.0177%" height="15" fill="rgb(211,96,35)" fg:x="210" fg:w="2"/><text x="2.1077%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.04%)</title><rect x="1.8577%" y="1045" width="0.0354%" height="15" fill="rgb(253,215,40)" fg:x="210" fg:w="4"/><text x="2.1077%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="1.8754%" y="1029" width="0.0177%" height="15" fill="rgb(211,81,21)" fg:x="212" fg:w="2"/><text x="2.1254%" y="1039.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="1.8754%" y="1013" width="0.0177%" height="15" fill="rgb(208,190,38)" fg:x="212" fg:w="2"/><text x="2.1254%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="1.8754%" y="997" width="0.0177%" height="15" fill="rgb(235,213,38)" fg:x="212" fg:w="2"/><text x="2.1254%" y="1007.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (2 samples, 0.02%)</title><rect x="1.8931%" y="1045" width="0.0177%" height="15" fill="rgb(237,122,38)" fg:x="214" fg:w="2"/><text x="2.1431%" y="1055.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.9108%" y="965" width="0.0177%" height="15" fill="rgb(244,218,35)" fg:x="216" fg:w="2"/><text x="2.1608%" y="975.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.9108%" y="949" width="0.0177%" height="15" fill="rgb(240,68,47)" fg:x="216" fg:w="2"/><text x="2.1608%" y="959.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.9108%" y="933" width="0.0177%" height="15" fill="rgb(210,16,53)" fg:x="216" fg:w="2"/><text x="2.1608%" y="943.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.9108%" y="917" width="0.0177%" height="15" fill="rgb(235,124,12)" fg:x="216" fg:w="2"/><text x="2.1608%" y="927.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="1.9108%" y="901" width="0.0177%" height="15" fill="rgb(224,169,11)" fg:x="216" fg:w="2"/><text x="2.1608%" y="911.50"></text></g><g><title>core::clone::Clone::clone (3 samples, 0.03%)</title><rect x="1.9108%" y="997" width="0.0265%" height="15" fill="rgb(250,166,2)" fg:x="216" fg:w="3"/><text x="2.1608%" y="1007.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="1.9108%" y="981" width="0.0265%" height="15" fill="rgb(242,216,29)" fg:x="216" fg:w="3"/><text x="2.1608%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="1.9108%" y="1045" width="0.0442%" height="15" fill="rgb(230,116,27)" fg:x="216" fg:w="5"/><text x="2.1608%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (5 samples, 0.04%)</title><rect x="1.9108%" y="1029" width="0.0442%" height="15" fill="rgb(228,99,48)" fg:x="216" fg:w="5"/><text x="2.1608%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (5 samples, 0.04%)</title><rect x="1.9108%" y="1013" width="0.0442%" height="15" fill="rgb(253,11,6)" fg:x="216" fg:w="5"/><text x="2.1608%" y="1023.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="1.9639%" y="1045" width="0.0177%" height="15" fill="rgb(247,143,39)" fg:x="222" fg:w="2"/><text x="2.2139%" y="1055.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="1.9816%" y="1045" width="0.0442%" height="15" fill="rgb(236,97,10)" fg:x="224" fg:w="5"/><text x="2.2316%" y="1055.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.06%)</title><rect x="2.0258%" y="1045" width="0.0619%" height="15" fill="rgb(233,208,19)" fg:x="229" fg:w="7"/><text x="2.2758%" y="1055.50"></text></g><g><title>_int_free (5 samples, 0.04%)</title><rect x="2.0966%" y="1045" width="0.0442%" height="15" fill="rgb(216,164,2)" fg:x="237" fg:w="5"/><text x="2.3466%" y="1055.50"></text></g><g><title>_int_malloc (7 samples, 0.06%)</title><rect x="2.1497%" y="1045" width="0.0619%" height="15" fill="rgb(220,129,5)" fg:x="243" fg:w="7"/><text x="2.3997%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="2.2116%" y="1045" width="0.0265%" height="15" fill="rgb(242,17,10)" fg:x="250" fg:w="3"/><text x="2.4616%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="2.2205%" y="1029" width="0.0177%" height="15" fill="rgb(242,107,0)" fg:x="251" fg:w="2"/><text x="2.4705%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="2.2381%" y="1045" width="0.0265%" height="15" fill="rgb(251,28,31)" fg:x="253" fg:w="3"/><text x="2.4881%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="2.2381%" y="1029" width="0.0265%" height="15" fill="rgb(233,223,10)" fg:x="253" fg:w="3"/><text x="2.4881%" y="1039.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (26 samples, 0.23%)</title><rect x="2.2735%" y="1045" width="0.2300%" height="15" fill="rgb(215,21,27)" fg:x="257" fg:w="26"/><text x="2.5235%" y="1055.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.04%)</title><rect x="2.5478%" y="949" width="0.0354%" height="15" fill="rgb(232,23,21)" fg:x="288" fg:w="4"/><text x="2.7978%" y="959.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.04%)</title><rect x="2.5478%" y="933" width="0.0354%" height="15" fill="rgb(244,5,23)" fg:x="288" fg:w="4"/><text x="2.7978%" y="943.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (9 samples, 0.08%)</title><rect x="2.5478%" y="1013" width="0.0796%" height="15" fill="rgb(226,81,46)" fg:x="288" fg:w="9"/><text x="2.7978%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (9 samples, 0.08%)</title><rect x="2.5478%" y="997" width="0.0796%" height="15" fill="rgb(247,70,30)" fg:x="288" fg:w="9"/><text x="2.7978%" y="1007.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (9 samples, 0.08%)</title><rect x="2.5478%" y="981" width="0.0796%" height="15" fill="rgb(212,68,19)" fg:x="288" fg:w="9"/><text x="2.7978%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9 samples, 0.08%)</title><rect x="2.5478%" y="965" width="0.0796%" height="15" fill="rgb(240,187,13)" fg:x="288" fg:w="9"/><text x="2.7978%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (5 samples, 0.04%)</title><rect x="2.5832%" y="949" width="0.0442%" height="15" fill="rgb(223,113,26)" fg:x="292" fg:w="5"/><text x="2.8332%" y="959.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.12%)</title><rect x="2.5301%" y="1045" width="0.1150%" height="15" fill="rgb(206,192,2)" fg:x="286" fg:w="13"/><text x="2.7801%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.10%)</title><rect x="2.5478%" y="1029" width="0.0973%" height="15" fill="rgb(241,108,4)" fg:x="288" fg:w="11"/><text x="2.7978%" y="1039.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="2.6274%" y="1013" width="0.0177%" height="15" fill="rgb(247,173,49)" fg:x="297" fg:w="2"/><text x="2.8774%" y="1023.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="2.6274%" y="997" width="0.0177%" height="15" fill="rgb(224,114,35)" fg:x="297" fg:w="2"/><text x="2.8774%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="2.6274%" y="981" width="0.0177%" height="15" fill="rgb(245,159,27)" fg:x="297" fg:w="2"/><text x="2.8774%" y="991.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.03%)</title><rect x="2.6451%" y="1045" width="0.0265%" height="15" fill="rgb(245,172,44)" fg:x="299" fg:w="3"/><text x="2.8951%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::mainnet::execution::call_return&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="2.6805%" y="1045" width="0.0177%" height="15" fill="rgb(236,23,11)" fg:x="303" fg:w="2"/><text x="2.9305%" y="1055.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (2 samples, 0.02%)</title><rect x="2.7070%" y="1045" width="0.0177%" height="15" fill="rgb(205,117,38)" fg:x="306" fg:w="2"/><text x="2.9570%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.04%)</title><rect x="2.7247%" y="1045" width="0.0442%" height="15" fill="rgb(237,72,25)" fg:x="308" fg:w="5"/><text x="2.9747%" y="1055.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="2.7512%" y="1029" width="0.0177%" height="15" fill="rgb(244,70,9)" fg:x="311" fg:w="2"/><text x="3.0012%" y="1039.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (2 samples, 0.02%)</title><rect x="2.7689%" y="1045" width="0.0177%" height="15" fill="rgb(217,125,39)" fg:x="313" fg:w="2"/><text x="3.0189%" y="1055.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (2 samples, 0.02%)</title><rect x="2.7689%" y="1029" width="0.0177%" height="15" fill="rgb(235,36,10)" fg:x="313" fg:w="2"/><text x="3.0189%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (2 samples, 0.02%)</title><rect x="2.7689%" y="1013" width="0.0177%" height="15" fill="rgb(251,123,47)" fg:x="313" fg:w="2"/><text x="3.0189%" y="1023.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="2.7689%" y="997" width="0.0177%" height="15" fill="rgb(221,13,13)" fg:x="313" fg:w="2"/><text x="3.0189%" y="1007.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="2.7689%" y="981" width="0.0177%" height="15" fill="rgb(238,131,9)" fg:x="313" fg:w="2"/><text x="3.0189%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.02%)</title><rect x="2.7689%" y="965" width="0.0177%" height="15" fill="rgb(211,50,8)" fg:x="313" fg:w="2"/><text x="3.0189%" y="975.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (2 samples, 0.02%)</title><rect x="2.7689%" y="949" width="0.0177%" height="15" fill="rgb(245,182,24)" fg:x="313" fg:w="2"/><text x="3.0189%" y="959.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (3 samples, 0.03%)</title><rect x="2.8043%" y="1045" width="0.0265%" height="15" fill="rgb(242,14,37)" fg:x="317" fg:w="3"/><text x="3.0543%" y="1055.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (3 samples, 0.03%)</title><rect x="2.8928%" y="1045" width="0.0265%" height="15" fill="rgb(246,228,12)" fg:x="327" fg:w="3"/><text x="3.1428%" y="1055.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (2 samples, 0.02%)</title><rect x="2.9193%" y="1045" width="0.0177%" height="15" fill="rgb(213,55,15)" fg:x="330" fg:w="2"/><text x="3.1693%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::bitwise::shl (2 samples, 0.02%)</title><rect x="2.9370%" y="1045" width="0.0177%" height="15" fill="rgb(209,9,3)" fg:x="332" fg:w="2"/><text x="3.1870%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::memory::mstore (3 samples, 0.03%)</title><rect x="2.9901%" y="1045" width="0.0265%" height="15" fill="rgb(230,59,30)" fg:x="338" fg:w="3"/><text x="3.2401%" y="1055.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::resize (2 samples, 0.02%)</title><rect x="2.9989%" y="1029" width="0.0177%" height="15" fill="rgb(209,121,21)" fg:x="339" fg:w="2"/><text x="3.2489%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="2.9989%" y="1013" width="0.0177%" height="15" fill="rgb(220,109,13)" fg:x="339" fg:w="2"/><text x="3.2489%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="2.9989%" y="997" width="0.0177%" height="15" fill="rgb(232,18,1)" fg:x="339" fg:w="2"/><text x="3.2489%" y="1007.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="2.9989%" y="981" width="0.0177%" height="15" fill="rgb(215,41,42)" fg:x="339" fg:w="2"/><text x="3.2489%" y="991.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::run (43 samples, 0.38%)</title><rect x="3.0255%" y="1045" width="0.3804%" height="15" fill="rgb(224,123,36)" fg:x="342" fg:w="43"/><text x="3.2755%" y="1055.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::step (42 samples, 0.37%)</title><rect x="3.0343%" y="1029" width="0.3715%" height="15" fill="rgb(240,125,3)" fg:x="343" fg:w="42"/><text x="3.2843%" y="1039.50"></text></g><g><title>core::ops::function::Fn::call (42 samples, 0.37%)</title><rect x="3.0343%" y="1013" width="0.3715%" height="15" fill="rgb(205,98,50)" fg:x="343" fg:w="42"/><text x="3.2843%" y="1023.50"></text></g><g><title>[anon] (179 samples, 1.58%)</title><rect x="1.8312%" y="1061" width="1.5835%" height="15" fill="rgb(205,185,37)" fg:x="207" fg:w="179"/><text x="2.0812%" y="1071.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="3.4413%" y="1045" width="0.0177%" height="15" fill="rgb(238,207,15)" fg:x="389" fg:w="2"/><text x="3.6913%" y="1055.50"></text></g><g><title>[block-stm-revm] (6 samples, 0.05%)</title><rect x="3.4147%" y="1061" width="0.0531%" height="15" fill="rgb(213,199,42)" fg:x="386" fg:w="6"/><text x="3.6647%" y="1071.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="3.4766%" y="1045" width="0.0177%" height="15" fill="rgb(235,201,11)" fg:x="393" fg:w="2"/><text x="3.7266%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="3.4766%" y="1029" width="0.0177%" height="15" fill="rgb(207,46,11)" fg:x="393" fg:w="2"/><text x="3.7266%" y="1039.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="3.4766%" y="1013" width="0.0177%" height="15" fill="rgb(241,35,35)" fg:x="393" fg:w="2"/><text x="3.7266%" y="1023.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="3.4766%" y="997" width="0.0177%" height="15" fill="rgb(243,32,47)" fg:x="393" fg:w="2"/><text x="3.7266%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="3.4766%" y="981" width="0.0177%" height="15" fill="rgb(247,202,23)" fg:x="393" fg:w="2"/><text x="3.7266%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="3.4766%" y="965" width="0.0177%" height="15" fill="rgb(219,102,11)" fg:x="393" fg:w="2"/><text x="3.7266%" y="975.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="3.4766%" y="949" width="0.0177%" height="15" fill="rgb(243,110,44)" fg:x="393" fg:w="2"/><text x="3.7266%" y="959.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="3.4943%" y="1045" width="0.0177%" height="15" fill="rgb(222,74,54)" fg:x="395" fg:w="2"/><text x="3.7443%" y="1055.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="3.4678%" y="1061" width="0.0531%" height="15" fill="rgb(216,99,12)" fg:x="392" fg:w="6"/><text x="3.7178%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="3.5297%" y="1045" width="0.0265%" height="15" fill="rgb(226,22,26)" fg:x="399" fg:w="3"/><text x="3.7797%" y="1055.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (3 samples, 0.03%)</title><rect x="3.5563%" y="1045" width="0.0265%" height="15" fill="rgb(217,163,10)" fg:x="402" fg:w="3"/><text x="3.8063%" y="1055.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="3.6005%" y="965" width="0.0177%" height="15" fill="rgb(213,25,53)" fg:x="407" fg:w="2"/><text x="3.8505%" y="975.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="3.6005%" y="949" width="0.0177%" height="15" fill="rgb(252,105,26)" fg:x="407" fg:w="2"/><text x="3.8505%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (43 samples, 0.38%)</title><rect x="3.6182%" y="965" width="0.3804%" height="15" fill="rgb(220,39,43)" fg:x="409" fg:w="43"/><text x="3.8682%" y="975.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.07%)</title><rect x="4.0251%" y="949" width="0.0708%" height="15" fill="rgb(229,68,48)" fg:x="455" fg:w="8"/><text x="4.2751%" y="959.50"></text></g><g><title>core::mem::drop (8 samples, 0.07%)</title><rect x="4.0251%" y="933" width="0.0708%" height="15" fill="rgb(252,8,32)" fg:x="455" fg:w="8"/><text x="4.2751%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (8 samples, 0.07%)</title><rect x="4.0251%" y="917" width="0.0708%" height="15" fill="rgb(223,20,43)" fg:x="455" fg:w="8"/><text x="4.2751%" y="927.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="4.0251%" y="901" width="0.0708%" height="15" fill="rgb(229,81,49)" fg:x="455" fg:w="8"/><text x="4.2751%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.05%)</title><rect x="4.0428%" y="885" width="0.0531%" height="15" fill="rgb(236,28,36)" fg:x="457" fg:w="6"/><text x="4.2928%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.05%)</title><rect x="4.0428%" y="869" width="0.0531%" height="15" fill="rgb(249,185,26)" fg:x="457" fg:w="6"/><text x="4.2928%" y="879.50"></text></g><g><title>__GI___libc_free (8 samples, 0.07%)</title><rect x="4.0959%" y="901" width="0.0708%" height="15" fill="rgb(249,174,33)" fg:x="463" fg:w="8"/><text x="4.3459%" y="911.50"></text></g><g><title>_int_free (8 samples, 0.07%)</title><rect x="4.0959%" y="885" width="0.0708%" height="15" fill="rgb(233,201,37)" fg:x="463" fg:w="8"/><text x="4.3459%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.05%)</title><rect x="4.1667%" y="901" width="0.0531%" height="15" fill="rgb(221,78,26)" fg:x="471" fg:w="6"/><text x="4.4167%" y="911.50"></text></g><g><title>core::mem::drop (6 samples, 0.05%)</title><rect x="4.1667%" y="885" width="0.0531%" height="15" fill="rgb(250,127,30)" fg:x="471" fg:w="6"/><text x="4.4167%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (6 samples, 0.05%)</title><rect x="4.1667%" y="869" width="0.0531%" height="15" fill="rgb(230,49,44)" fg:x="471" fg:w="6"/><text x="4.4167%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="4.1667%" y="853" width="0.0531%" height="15" fill="rgb(229,67,23)" fg:x="471" fg:w="6"/><text x="4.4167%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="4.1844%" y="837" width="0.0354%" height="15" fill="rgb(249,83,47)" fg:x="473" fg:w="4"/><text x="4.4344%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="4.1844%" y="821" width="0.0354%" height="15" fill="rgb(215,43,3)" fg:x="473" fg:w="4"/><text x="4.4344%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (17 samples, 0.15%)</title><rect x="4.0959%" y="933" width="0.1504%" height="15" fill="rgb(238,154,13)" fg:x="463" fg:w="17"/><text x="4.3459%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.15%)</title><rect x="4.0959%" y="917" width="0.1504%" height="15" fill="rgb(219,56,2)" fg:x="463" fg:w="17"/><text x="4.3459%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="4.2197%" y="901" width="0.0265%" height="15" fill="rgb(233,0,4)" fg:x="477" fg:w="3"/><text x="4.4697%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="4.2197%" y="885" width="0.0265%" height="15" fill="rgb(235,30,7)" fg:x="477" fg:w="3"/><text x="4.4697%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="4.2463%" y="933" width="0.0177%" height="15" fill="rgb(250,79,13)" fg:x="480" fg:w="2"/><text x="4.4963%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="4.2463%" y="917" width="0.0177%" height="15" fill="rgb(211,146,34)" fg:x="480" fg:w="2"/><text x="4.4963%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="4.2640%" y="901" width="0.0177%" height="15" fill="rgb(228,22,38)" fg:x="482" fg:w="2"/><text x="4.5140%" y="911.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="4.2640%" y="885" width="0.0177%" height="15" fill="rgb(235,168,5)" fg:x="482" fg:w="2"/><text x="4.5140%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="4.2640%" y="869" width="0.0177%" height="15" fill="rgb(221,155,16)" fg:x="482" fg:w="2"/><text x="4.5140%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="4.2640%" y="853" width="0.0177%" height="15" fill="rgb(215,215,53)" fg:x="482" fg:w="2"/><text x="4.5140%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.2640%" y="837" width="0.0177%" height="15" fill="rgb(223,4,10)" fg:x="482" fg:w="2"/><text x="4.5140%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.2640%" y="821" width="0.0177%" height="15" fill="rgb(234,103,6)" fg:x="482" fg:w="2"/><text x="4.5140%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (23 samples, 0.20%)</title><rect x="4.0959%" y="949" width="0.2035%" height="15" fill="rgb(227,97,0)" fg:x="463" fg:w="23"/><text x="4.3459%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="4.2640%" y="933" width="0.0354%" height="15" fill="rgb(234,150,53)" fg:x="482" fg:w="4"/><text x="4.5140%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="4.2640%" y="917" width="0.0354%" height="15" fill="rgb(228,201,54)" fg:x="482" fg:w="4"/><text x="4.5140%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.2817%" y="901" width="0.0177%" height="15" fill="rgb(222,22,37)" fg:x="484" fg:w="2"/><text x="4.5317%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.2817%" y="885" width="0.0177%" height="15" fill="rgb(237,53,32)" fg:x="484" fg:w="2"/><text x="4.5317%" y="895.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="4.3082%" y="885" width="0.0265%" height="15" fill="rgb(233,25,53)" fg:x="487" fg:w="3"/><text x="4.5582%" y="895.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="4.3082%" y="901" width="0.0354%" height="15" fill="rgb(210,40,34)" fg:x="487" fg:w="4"/><text x="4.5582%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="4.3436%" y="901" width="0.0177%" height="15" fill="rgb(241,220,44)" fg:x="491" fg:w="2"/><text x="4.5936%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (11 samples, 0.10%)</title><rect x="4.3082%" y="933" width="0.0973%" height="15" fill="rgb(235,28,35)" fg:x="487" fg:w="11"/><text x="4.5582%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.10%)</title><rect x="4.3082%" y="917" width="0.0973%" height="15" fill="rgb(210,56,17)" fg:x="487" fg:w="11"/><text x="4.5582%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="4.3613%" y="901" width="0.0442%" height="15" fill="rgb(224,130,29)" fg:x="493" fg:w="5"/><text x="4.6113%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="4.3613%" y="885" width="0.0442%" height="15" fill="rgb(235,212,8)" fg:x="493" fg:w="5"/><text x="4.6113%" y="895.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="4.4055%" y="901" width="0.0177%" height="15" fill="rgb(223,33,50)" fg:x="498" fg:w="2"/><text x="4.6555%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="4.4055%" y="885" width="0.0177%" height="15" fill="rgb(219,149,13)" fg:x="498" fg:w="2"/><text x="4.6555%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.04%)</title><rect x="4.4232%" y="901" width="0.0354%" height="15" fill="rgb(250,156,29)" fg:x="500" fg:w="4"/><text x="4.6732%" y="911.50"></text></g><g><title>core::mem::drop (4 samples, 0.04%)</title><rect x="4.4232%" y="885" width="0.0354%" height="15" fill="rgb(216,193,19)" fg:x="500" fg:w="4"/><text x="4.6732%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.04%)</title><rect x="4.4232%" y="869" width="0.0354%" height="15" fill="rgb(216,135,14)" fg:x="500" fg:w="4"/><text x="4.6732%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="4.4232%" y="853" width="0.0354%" height="15" fill="rgb(241,47,5)" fg:x="500" fg:w="4"/><text x="4.6732%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="4.4321%" y="837" width="0.0265%" height="15" fill="rgb(233,42,35)" fg:x="501" fg:w="3"/><text x="4.6821%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="4.4321%" y="821" width="0.0265%" height="15" fill="rgb(231,13,6)" fg:x="501" fg:w="3"/><text x="4.6821%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (19 samples, 0.17%)</title><rect x="4.2994%" y="949" width="0.1681%" height="15" fill="rgb(207,181,40)" fg:x="486" fg:w="19"/><text x="4.5494%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="4.4055%" y="933" width="0.0619%" height="15" fill="rgb(254,173,49)" fg:x="498" fg:w="7"/><text x="4.6555%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="4.4055%" y="917" width="0.0619%" height="15" fill="rgb(221,1,38)" fg:x="498" fg:w="7"/><text x="4.6555%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="4.4674%" y="933" width="0.0265%" height="15" fill="rgb(206,124,46)" fg:x="505" fg:w="3"/><text x="4.7174%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="4.4674%" y="917" width="0.0265%" height="15" fill="rgb(249,21,11)" fg:x="505" fg:w="3"/><text x="4.7174%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.4763%" y="901" width="0.0177%" height="15" fill="rgb(222,201,40)" fg:x="506" fg:w="2"/><text x="4.7263%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.4763%" y="885" width="0.0177%" height="15" fill="rgb(235,61,29)" fg:x="506" fg:w="2"/><text x="4.7263%" y="895.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="4.5028%" y="901" width="0.0177%" height="15" fill="rgb(219,207,3)" fg:x="509" fg:w="2"/><text x="4.7528%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="4.5205%" y="901" width="0.0177%" height="15" fill="rgb(222,56,46)" fg:x="511" fg:w="2"/><text x="4.7705%" y="911.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="4.5205%" y="885" width="0.0177%" height="15" fill="rgb(239,76,54)" fg:x="511" fg:w="2"/><text x="4.7705%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="4.5205%" y="869" width="0.0177%" height="15" fill="rgb(231,124,27)" fg:x="511" fg:w="2"/><text x="4.7705%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="4.5205%" y="853" width="0.0177%" height="15" fill="rgb(249,195,6)" fg:x="511" fg:w="2"/><text x="4.7705%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.5205%" y="837" width="0.0177%" height="15" fill="rgb(237,174,47)" fg:x="511" fg:w="2"/><text x="4.7705%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.5205%" y="821" width="0.0177%" height="15" fill="rgb(206,201,31)" fg:x="511" fg:w="2"/><text x="4.7705%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (68 samples, 0.60%)</title><rect x="4.0163%" y="965" width="0.6016%" height="15" fill="rgb(231,57,52)" fg:x="454" fg:w="68"/><text x="4.2663%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (17 samples, 0.15%)</title><rect x="4.4674%" y="949" width="0.1504%" height="15" fill="rgb(248,177,22)" fg:x="505" fg:w="17"/><text x="4.7174%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (13 samples, 0.12%)</title><rect x="4.5028%" y="933" width="0.1150%" height="15" fill="rgb(215,211,37)" fg:x="509" fg:w="13"/><text x="4.7528%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.12%)</title><rect x="4.5028%" y="917" width="0.1150%" height="15" fill="rgb(241,128,51)" fg:x="509" fg:w="13"/><text x="4.7528%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.08%)</title><rect x="4.5382%" y="901" width="0.0796%" height="15" fill="rgb(227,165,31)" fg:x="513" fg:w="9"/><text x="4.7882%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.08%)</title><rect x="4.5382%" y="885" width="0.0796%" height="15" fill="rgb(228,167,24)" fg:x="513" fg:w="9"/><text x="4.7882%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="4.6178%" y="949" width="0.0265%" height="15" fill="rgb(228,143,12)" fg:x="522" fg:w="3"/><text x="4.8678%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="4.6178%" y="933" width="0.0265%" height="15" fill="rgb(249,149,8)" fg:x="522" fg:w="3"/><text x="4.8678%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="4.6178%" y="917" width="0.0265%" height="15" fill="rgb(243,35,44)" fg:x="522" fg:w="3"/><text x="4.8678%" y="927.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="4.6178%" y="901" width="0.0265%" height="15" fill="rgb(246,89,9)" fg:x="522" fg:w="3"/><text x="4.8678%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="4.6178%" y="885" width="0.0265%" height="15" fill="rgb(233,213,13)" fg:x="522" fg:w="3"/><text x="4.8678%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="4.6178%" y="869" width="0.0265%" height="15" fill="rgb(233,141,41)" fg:x="522" fg:w="3"/><text x="4.8678%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.6267%" y="853" width="0.0177%" height="15" fill="rgb(239,167,4)" fg:x="523" fg:w="2"/><text x="4.8767%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.6267%" y="837" width="0.0177%" height="15" fill="rgb(209,217,16)" fg:x="523" fg:w="2"/><text x="4.8767%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="4.6444%" y="949" width="0.0265%" height="15" fill="rgb(219,88,35)" fg:x="525" fg:w="3"/><text x="4.8944%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="4.6444%" y="933" width="0.0265%" height="15" fill="rgb(220,193,23)" fg:x="525" fg:w="3"/><text x="4.8944%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="4.6444%" y="917" width="0.0265%" height="15" fill="rgb(230,90,52)" fg:x="525" fg:w="3"/><text x="4.8944%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="4.6444%" y="901" width="0.0265%" height="15" fill="rgb(252,106,19)" fg:x="525" fg:w="3"/><text x="4.8944%" y="911.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="4.6709%" y="917" width="0.0442%" height="15" fill="rgb(206,74,20)" fg:x="528" fg:w="5"/><text x="4.9209%" y="927.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="4.6798%" y="901" width="0.0354%" height="15" fill="rgb(230,138,44)" fg:x="529" fg:w="4"/><text x="4.9298%" y="911.50"></text></g><g><title>free_perturb (2 samples, 0.02%)</title><rect x="4.6975%" y="885" width="0.0177%" height="15" fill="rgb(235,182,43)" fg:x="531" fg:w="2"/><text x="4.9475%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="4.7151%" y="917" width="0.0177%" height="15" fill="rgb(242,16,51)" fg:x="533" fg:w="2"/><text x="4.9651%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (9 samples, 0.08%)</title><rect x="4.6709%" y="949" width="0.0796%" height="15" fill="rgb(248,9,4)" fg:x="528" fg:w="9"/><text x="4.9209%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="4.6709%" y="933" width="0.0796%" height="15" fill="rgb(210,31,22)" fg:x="528" fg:w="9"/><text x="4.9209%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.7328%" y="917" width="0.0177%" height="15" fill="rgb(239,54,39)" fg:x="535" fg:w="2"/><text x="4.9828%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.7328%" y="901" width="0.0177%" height="15" fill="rgb(230,99,41)" fg:x="535" fg:w="2"/><text x="4.9828%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.05%)</title><rect x="4.7505%" y="917" width="0.0531%" height="15" fill="rgb(253,106,12)" fg:x="537" fg:w="6"/><text x="5.0005%" y="927.50"></text></g><g><title>core::mem::drop (6 samples, 0.05%)</title><rect x="4.7505%" y="901" width="0.0531%" height="15" fill="rgb(213,46,41)" fg:x="537" fg:w="6"/><text x="5.0005%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (6 samples, 0.05%)</title><rect x="4.7505%" y="885" width="0.0531%" height="15" fill="rgb(215,133,35)" fg:x="537" fg:w="6"/><text x="5.0005%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="4.7505%" y="869" width="0.0531%" height="15" fill="rgb(213,28,5)" fg:x="537" fg:w="6"/><text x="5.0005%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="4.7594%" y="853" width="0.0442%" height="15" fill="rgb(215,77,49)" fg:x="538" fg:w="5"/><text x="5.0094%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="4.7594%" y="837" width="0.0442%" height="15" fill="rgb(248,100,22)" fg:x="538" fg:w="5"/><text x="5.0094%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (10 samples, 0.09%)</title><rect x="4.7505%" y="949" width="0.0885%" height="15" fill="rgb(208,67,9)" fg:x="537" fg:w="10"/><text x="5.0005%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.09%)</title><rect x="4.7505%" y="933" width="0.0885%" height="15" fill="rgb(219,133,21)" fg:x="537" fg:w="10"/><text x="5.0005%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="4.8036%" y="917" width="0.0354%" height="15" fill="rgb(246,46,29)" fg:x="543" fg:w="4"/><text x="5.0536%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="4.8036%" y="901" width="0.0354%" height="15" fill="rgb(246,185,52)" fg:x="543" fg:w="4"/><text x="5.0536%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="4.8567%" y="901" width="0.0177%" height="15" fill="rgb(252,136,11)" fg:x="549" fg:w="2"/><text x="5.1067%" y="911.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="4.8478%" y="917" width="0.0354%" height="15" fill="rgb(219,138,53)" fg:x="548" fg:w="4"/><text x="5.0978%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="4.8390%" y="949" width="0.0619%" height="15" fill="rgb(211,51,23)" fg:x="547" fg:w="7"/><text x="5.0890%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="4.8390%" y="933" width="0.0619%" height="15" fill="rgb(247,221,28)" fg:x="547" fg:w="7"/><text x="5.0890%" y="943.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="4.9009%" y="917" width="0.0177%" height="15" fill="rgb(251,222,45)" fg:x="554" fg:w="2"/><text x="5.1509%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="4.9186%" y="917" width="0.0265%" height="15" fill="rgb(217,162,53)" fg:x="556" fg:w="3"/><text x="5.1686%" y="927.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="4.9186%" y="901" width="0.0265%" height="15" fill="rgb(229,93,14)" fg:x="556" fg:w="3"/><text x="5.1686%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="4.9186%" y="885" width="0.0265%" height="15" fill="rgb(209,67,49)" fg:x="556" fg:w="3"/><text x="5.1686%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="4.9186%" y="869" width="0.0265%" height="15" fill="rgb(213,87,29)" fg:x="556" fg:w="3"/><text x="5.1686%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="4.9186%" y="853" width="0.0265%" height="15" fill="rgb(205,151,52)" fg:x="556" fg:w="3"/><text x="5.1686%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="4.9186%" y="837" width="0.0265%" height="15" fill="rgb(253,215,39)" fg:x="556" fg:w="3"/><text x="5.1686%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="4.9009%" y="949" width="0.0708%" height="15" fill="rgb(221,220,41)" fg:x="554" fg:w="8"/><text x="5.1509%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="4.9009%" y="933" width="0.0708%" height="15" fill="rgb(218,133,21)" fg:x="554" fg:w="8"/><text x="5.1509%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="4.9452%" y="917" width="0.0265%" height="15" fill="rgb(221,193,43)" fg:x="559" fg:w="3"/><text x="5.1952%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="4.9452%" y="901" width="0.0265%" height="15" fill="rgb(240,128,52)" fg:x="559" fg:w="3"/><text x="5.1952%" y="911.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="4.9805%" y="917" width="0.0177%" height="15" fill="rgb(253,114,12)" fg:x="563" fg:w="2"/><text x="5.2305%" y="927.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="4.9805%" y="901" width="0.0177%" height="15" fill="rgb(215,223,47)" fg:x="563" fg:w="2"/><text x="5.2305%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (45 samples, 0.40%)</title><rect x="4.6178%" y="965" width="0.3981%" height="15" fill="rgb(248,225,23)" fg:x="522" fg:w="45"/><text x="4.8678%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="4.9717%" y="949" width="0.0442%" height="15" fill="rgb(250,108,0)" fg:x="562" fg:w="5"/><text x="5.2217%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="4.9717%" y="933" width="0.0442%" height="15" fill="rgb(228,208,7)" fg:x="562" fg:w="5"/><text x="5.2217%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="4.9982%" y="917" width="0.0177%" height="15" fill="rgb(244,45,10)" fg:x="565" fg:w="2"/><text x="5.2482%" y="927.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="4.9982%" y="901" width="0.0177%" height="15" fill="rgb(207,125,25)" fg:x="565" fg:w="2"/><text x="5.2482%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="4.9982%" y="885" width="0.0177%" height="15" fill="rgb(210,195,18)" fg:x="565" fg:w="2"/><text x="5.2482%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="4.9982%" y="869" width="0.0177%" height="15" fill="rgb(249,80,12)" fg:x="565" fg:w="2"/><text x="5.2482%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="4.9982%" y="853" width="0.0177%" height="15" fill="rgb(221,65,9)" fg:x="565" fg:w="2"/><text x="5.2482%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="4.9982%" y="837" width="0.0177%" height="15" fill="rgb(235,49,36)" fg:x="565" fg:w="2"/><text x="5.2482%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (21 samples, 0.19%)</title><rect x="5.0248%" y="917" width="0.1858%" height="15" fill="rgb(225,32,20)" fg:x="568" fg:w="21"/><text x="5.2748%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="5.2105%" y="901" width="0.0531%" height="15" fill="rgb(215,141,46)" fg:x="589" fg:w="6"/><text x="5.4605%" y="911.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="5.5290%" y="757" width="0.0177%" height="15" fill="rgb(250,160,47)" fg:x="625" fg:w="2"/><text x="5.7790%" y="767.50"></text></g><g><title>_int_malloc (31 samples, 0.27%)</title><rect x="5.3167%" y="773" width="0.2742%" height="15" fill="rgb(216,222,40)" fg:x="601" fg:w="31"/><text x="5.5667%" y="783.50"></text></g><g><title>unlink_chunk (4 samples, 0.04%)</title><rect x="5.5556%" y="757" width="0.0354%" height="15" fill="rgb(234,217,39)" fg:x="628" fg:w="4"/><text x="5.8056%" y="767.50"></text></g><g><title>__GI___libc_malloc (36 samples, 0.32%)</title><rect x="5.2902%" y="789" width="0.3185%" height="15" fill="rgb(207,178,40)" fg:x="598" fg:w="36"/><text x="5.5402%" y="799.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (41 samples, 0.36%)</title><rect x="5.2636%" y="901" width="0.3627%" height="15" fill="rgb(221,136,13)" fg:x="595" fg:w="41"/><text x="5.5136%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (39 samples, 0.35%)</title><rect x="5.2813%" y="885" width="0.3450%" height="15" fill="rgb(249,199,10)" fg:x="597" fg:w="39"/><text x="5.5313%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (39 samples, 0.35%)</title><rect x="5.2813%" y="869" width="0.3450%" height="15" fill="rgb(249,222,13)" fg:x="597" fg:w="39"/><text x="5.5313%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (38 samples, 0.34%)</title><rect x="5.2902%" y="853" width="0.3362%" height="15" fill="rgb(244,185,38)" fg:x="598" fg:w="38"/><text x="5.5402%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.34%)</title><rect x="5.2902%" y="837" width="0.3362%" height="15" fill="rgb(236,202,9)" fg:x="598" fg:w="38"/><text x="5.5402%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.34%)</title><rect x="5.2902%" y="821" width="0.3362%" height="15" fill="rgb(250,229,37)" fg:x="598" fg:w="38"/><text x="5.5402%" y="831.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.34%)</title><rect x="5.2902%" y="805" width="0.3362%" height="15" fill="rgb(206,174,23)" fg:x="598" fg:w="38"/><text x="5.5402%" y="815.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="5.6086%" y="789" width="0.0177%" height="15" fill="rgb(211,33,43)" fg:x="634" fg:w="2"/><text x="5.8586%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="5.6086%" y="773" width="0.0177%" height="15" fill="rgb(245,58,50)" fg:x="634" fg:w="2"/><text x="5.8586%" y="783.50"></text></g><g><title>_int_malloc (5 samples, 0.04%)</title><rect x="5.6529%" y="773" width="0.0442%" height="15" fill="rgb(244,68,36)" fg:x="639" fg:w="5"/><text x="5.9029%" y="783.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="5.6971%" y="773" width="0.0177%" height="15" fill="rgb(232,229,15)" fg:x="644" fg:w="2"/><text x="5.9471%" y="783.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (13 samples, 0.12%)</title><rect x="5.6263%" y="901" width="0.1150%" height="15" fill="rgb(254,30,23)" fg:x="636" fg:w="13"/><text x="5.8763%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (12 samples, 0.11%)</title><rect x="5.6352%" y="885" width="0.1062%" height="15" fill="rgb(235,160,14)" fg:x="637" fg:w="12"/><text x="5.8852%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.11%)</title><rect x="5.6352%" y="869" width="0.1062%" height="15" fill="rgb(212,155,44)" fg:x="637" fg:w="12"/><text x="5.8852%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.11%)</title><rect x="5.6352%" y="853" width="0.1062%" height="15" fill="rgb(226,2,50)" fg:x="637" fg:w="12"/><text x="5.8852%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.11%)</title><rect x="5.6352%" y="837" width="0.1062%" height="15" fill="rgb(234,177,6)" fg:x="637" fg:w="12"/><text x="5.8852%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.11%)</title><rect x="5.6352%" y="821" width="0.1062%" height="15" fill="rgb(217,24,9)" fg:x="637" fg:w="12"/><text x="5.8852%" y="831.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.11%)</title><rect x="5.6352%" y="805" width="0.1062%" height="15" fill="rgb(220,13,46)" fg:x="637" fg:w="12"/><text x="5.8852%" y="815.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.11%)</title><rect x="5.6352%" y="789" width="0.1062%" height="15" fill="rgb(239,221,27)" fg:x="637" fg:w="12"/><text x="5.8852%" y="799.50"></text></g><g><title>tcache_get (3 samples, 0.03%)</title><rect x="5.7148%" y="773" width="0.0265%" height="15" fill="rgb(222,198,25)" fg:x="646" fg:w="3"/><text x="5.9648%" y="783.50"></text></g><g><title>tcache_get_n (3 samples, 0.03%)</title><rect x="5.7148%" y="757" width="0.0265%" height="15" fill="rgb(211,99,13)" fg:x="646" fg:w="3"/><text x="5.9648%" y="767.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.09%)</title><rect x="5.7413%" y="789" width="0.0885%" height="15" fill="rgb(232,111,31)" fg:x="649" fg:w="10"/><text x="5.9913%" y="799.50"></text></g><g><title>_int_malloc (10 samples, 0.09%)</title><rect x="5.7413%" y="773" width="0.0885%" height="15" fill="rgb(245,82,37)" fg:x="649" fg:w="10"/><text x="5.9913%" y="783.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="5.8033%" y="757" width="0.0265%" height="15" fill="rgb(227,149,46)" fg:x="656" fg:w="3"/><text x="6.0533%" y="767.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (12 samples, 0.11%)</title><rect x="5.7413%" y="901" width="0.1062%" height="15" fill="rgb(218,36,50)" fg:x="649" fg:w="12"/><text x="5.9913%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (12 samples, 0.11%)</title><rect x="5.7413%" y="885" width="0.1062%" height="15" fill="rgb(226,80,48)" fg:x="649" fg:w="12"/><text x="5.9913%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.11%)</title><rect x="5.7413%" y="869" width="0.1062%" height="15" fill="rgb(238,224,15)" fg:x="649" fg:w="12"/><text x="5.9913%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.11%)</title><rect x="5.7413%" y="853" width="0.1062%" height="15" fill="rgb(241,136,10)" fg:x="649" fg:w="12"/><text x="5.9913%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.11%)</title><rect x="5.7413%" y="837" width="0.1062%" height="15" fill="rgb(208,32,45)" fg:x="649" fg:w="12"/><text x="5.9913%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.11%)</title><rect x="5.7413%" y="821" width="0.1062%" height="15" fill="rgb(207,135,9)" fg:x="649" fg:w="12"/><text x="5.9913%" y="831.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.11%)</title><rect x="5.7413%" y="805" width="0.1062%" height="15" fill="rgb(206,86,44)" fg:x="649" fg:w="12"/><text x="5.9913%" y="815.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="5.8298%" y="789" width="0.0177%" height="15" fill="rgb(245,177,15)" fg:x="659" fg:w="2"/><text x="6.0798%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="5.8298%" y="773" width="0.0177%" height="15" fill="rgb(206,64,50)" fg:x="659" fg:w="2"/><text x="6.0798%" y="783.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="5.8475%" y="789" width="0.0265%" height="15" fill="rgb(234,36,40)" fg:x="661" fg:w="3"/><text x="6.0975%" y="799.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (98 samples, 0.87%)</title><rect x="5.0159%" y="965" width="0.8669%" height="15" fill="rgb(213,64,8)" fg:x="567" fg:w="98"/><text x="5.2659%" y="975.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (98 samples, 0.87%)</title><rect x="5.0159%" y="949" width="0.8669%" height="15" fill="rgb(210,75,36)" fg:x="567" fg:w="98"/><text x="5.2659%" y="959.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (98 samples, 0.87%)</title><rect x="5.0159%" y="933" width="0.8669%" height="15" fill="rgb(229,88,21)" fg:x="567" fg:w="98"/><text x="5.2659%" y="943.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (76 samples, 0.67%)</title><rect x="5.2105%" y="917" width="0.6723%" height="15" fill="rgb(252,204,47)" fg:x="589" fg:w="76"/><text x="5.4605%" y="927.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (4 samples, 0.04%)</title><rect x="5.8475%" y="901" width="0.0354%" height="15" fill="rgb(208,77,27)" fg:x="661" fg:w="4"/><text x="6.0975%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="5.8475%" y="885" width="0.0354%" height="15" fill="rgb(221,76,26)" fg:x="661" fg:w="4"/><text x="6.0975%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="5.8475%" y="869" width="0.0354%" height="15" fill="rgb(225,139,18)" fg:x="661" fg:w="4"/><text x="6.0975%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.04%)</title><rect x="5.8475%" y="853" width="0.0354%" height="15" fill="rgb(230,137,11)" fg:x="661" fg:w="4"/><text x="6.0975%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="5.8475%" y="837" width="0.0354%" height="15" fill="rgb(212,28,1)" fg:x="661" fg:w="4"/><text x="6.0975%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="5.8475%" y="821" width="0.0354%" height="15" fill="rgb(248,164,17)" fg:x="661" fg:w="4"/><text x="6.0975%" y="831.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="5.8475%" y="805" width="0.0354%" height="15" fill="rgb(222,171,42)" fg:x="661" fg:w="4"/><text x="6.0975%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="5.8917%" y="949" width="0.0177%" height="15" fill="rgb(243,84,45)" fg:x="666" fg:w="2"/><text x="6.1417%" y="959.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_ref_db (263 samples, 2.33%)</title><rect x="3.6005%" y="981" width="2.3266%" height="15" fill="rgb(252,49,23)" fg:x="407" fg:w="263"/><text x="3.8505%" y="991.50">r..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (4 samples, 0.04%)</title><rect x="5.8917%" y="965" width="0.0354%" height="15" fill="rgb(215,19,7)" fg:x="666" fg:w="4"/><text x="6.1417%" y="975.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::with_db (2 samples, 0.02%)</title><rect x="5.9094%" y="949" width="0.0177%" height="15" fill="rgb(238,81,41)" fg:x="668" fg:w="2"/><text x="6.1594%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="5.9094%" y="933" width="0.0177%" height="15" fill="rgb(210,199,37)" fg:x="668" fg:w="2"/><text x="6.1594%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="5.9448%" y="853" width="0.0531%" height="15" fill="rgb(244,192,49)" fg:x="672" fg:w="6"/><text x="6.1948%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (8 samples, 0.07%)</title><rect x="5.9360%" y="885" width="0.0708%" height="15" fill="rgb(226,211,11)" fg:x="671" fg:w="8"/><text x="6.1860%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="5.9448%" y="869" width="0.0619%" height="15" fill="rgb(236,162,54)" fg:x="672" fg:w="7"/><text x="6.1948%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="6.0067%" y="885" width="0.0354%" height="15" fill="rgb(220,229,9)" fg:x="679" fg:w="4"/><text x="6.2567%" y="895.50"></text></g><g><title>revm::journaled_state::JournaledState::new (6 samples, 0.05%)</title><rect x="6.0421%" y="885" width="0.0531%" height="15" fill="rgb(250,87,22)" fg:x="683" fg:w="6"/><text x="6.2921%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="6.0775%" y="869" width="0.0177%" height="15" fill="rgb(239,43,17)" fg:x="687" fg:w="2"/><text x="6.3275%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="6.0775%" y="853" width="0.0177%" height="15" fill="rgb(231,177,25)" fg:x="687" fg:w="2"/><text x="6.3275%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="6.0775%" y="837" width="0.0177%" height="15" fill="rgb(219,179,1)" fg:x="687" fg:w="2"/><text x="6.3275%" y="847.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="6.0775%" y="821" width="0.0177%" height="15" fill="rgb(238,219,53)" fg:x="687" fg:w="2"/><text x="6.3275%" y="831.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="6.0775%" y="805" width="0.0177%" height="15" fill="rgb(232,167,36)" fg:x="687" fg:w="2"/><text x="6.3275%" y="815.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="6.0775%" y="789" width="0.0177%" height="15" fill="rgb(244,19,51)" fg:x="687" fg:w="2"/><text x="6.3275%" y="799.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (20 samples, 0.18%)</title><rect x="5.9271%" y="949" width="0.1769%" height="15" fill="rgb(224,6,22)" fg:x="670" fg:w="20"/><text x="6.1771%" y="959.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (20 samples, 0.18%)</title><rect x="5.9271%" y="933" width="0.1769%" height="15" fill="rgb(224,145,5)" fg:x="670" fg:w="20"/><text x="6.1771%" y="943.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (20 samples, 0.18%)</title><rect x="5.9271%" y="917" width="0.1769%" height="15" fill="rgb(234,130,49)" fg:x="670" fg:w="20"/><text x="6.1771%" y="927.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (19 samples, 0.17%)</title><rect x="5.9360%" y="901" width="0.1681%" height="15" fill="rgb(254,6,2)" fg:x="671" fg:w="19"/><text x="6.1860%" y="911.50"></text></g><g><title>__memcpy_avx_unaligned_erms (12 samples, 0.11%)</title><rect x="6.1040%" y="949" width="0.1062%" height="15" fill="rgb(208,96,46)" fg:x="690" fg:w="12"/><text x="6.3540%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (18 samples, 0.16%)</title><rect x="6.2367%" y="901" width="0.1592%" height="15" fill="rgb(239,3,39)" fg:x="705" fg:w="18"/><text x="6.4867%" y="911.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="6.3960%" y="885" width="0.0354%" height="15" fill="rgb(233,210,1)" fg:x="723" fg:w="4"/><text x="6.6460%" y="895.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="6.4490%" y="757" width="0.0265%" height="15" fill="rgb(244,137,37)" fg:x="729" fg:w="3"/><text x="6.6990%" y="767.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="6.4490%" y="741" width="0.0265%" height="15" fill="rgb(240,136,2)" fg:x="729" fg:w="3"/><text x="6.6990%" y="751.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.05%)</title><rect x="6.4402%" y="773" width="0.0531%" height="15" fill="rgb(239,18,37)" fg:x="728" fg:w="6"/><text x="6.6902%" y="783.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="6.4756%" y="757" width="0.0177%" height="15" fill="rgb(218,185,22)" fg:x="732" fg:w="2"/><text x="6.7256%" y="767.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (8 samples, 0.07%)</title><rect x="6.4314%" y="885" width="0.0708%" height="15" fill="rgb(225,218,4)" fg:x="727" fg:w="8"/><text x="6.6814%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="6.4402%" y="869" width="0.0619%" height="15" fill="rgb(230,182,32)" fg:x="728" fg:w="7"/><text x="6.6902%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="6.4402%" y="853" width="0.0619%" height="15" fill="rgb(242,56,43)" fg:x="728" fg:w="7"/><text x="6.6902%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.06%)</title><rect x="6.4402%" y="837" width="0.0619%" height="15" fill="rgb(233,99,24)" fg:x="728" fg:w="7"/><text x="6.6902%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.06%)</title><rect x="6.4402%" y="821" width="0.0619%" height="15" fill="rgb(234,209,42)" fg:x="728" fg:w="7"/><text x="6.6902%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.06%)</title><rect x="6.4402%" y="805" width="0.0619%" height="15" fill="rgb(227,7,12)" fg:x="728" fg:w="7"/><text x="6.6902%" y="815.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.06%)</title><rect x="6.4402%" y="789" width="0.0619%" height="15" fill="rgb(245,203,43)" fg:x="728" fg:w="7"/><text x="6.6902%" y="799.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="6.5375%" y="757" width="0.0354%" height="15" fill="rgb(238,205,33)" fg:x="739" fg:w="4"/><text x="6.7875%" y="767.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (10 samples, 0.09%)</title><rect x="6.5021%" y="885" width="0.0885%" height="15" fill="rgb(231,56,7)" fg:x="735" fg:w="10"/><text x="6.7521%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9 samples, 0.08%)</title><rect x="6.5110%" y="869" width="0.0796%" height="15" fill="rgb(244,186,29)" fg:x="736" fg:w="9"/><text x="6.7610%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.08%)</title><rect x="6.5110%" y="853" width="0.0796%" height="15" fill="rgb(234,111,31)" fg:x="736" fg:w="9"/><text x="6.7610%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.07%)</title><rect x="6.5198%" y="837" width="0.0708%" height="15" fill="rgb(241,149,10)" fg:x="737" fg:w="8"/><text x="6.7698%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.07%)</title><rect x="6.5198%" y="821" width="0.0708%" height="15" fill="rgb(249,206,44)" fg:x="737" fg:w="8"/><text x="6.7698%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.07%)</title><rect x="6.5198%" y="805" width="0.0708%" height="15" fill="rgb(251,153,30)" fg:x="737" fg:w="8"/><text x="6.7698%" y="815.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.07%)</title><rect x="6.5198%" y="789" width="0.0708%" height="15" fill="rgb(239,152,38)" fg:x="737" fg:w="8"/><text x="6.7698%" y="799.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.07%)</title><rect x="6.5198%" y="773" width="0.0708%" height="15" fill="rgb(249,139,47)" fg:x="737" fg:w="8"/><text x="6.7698%" y="783.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="6.5729%" y="757" width="0.0177%" height="15" fill="rgb(244,64,35)" fg:x="743" fg:w="2"/><text x="6.8229%" y="767.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="6.5729%" y="741" width="0.0177%" height="15" fill="rgb(216,46,15)" fg:x="743" fg:w="2"/><text x="6.8229%" y="751.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (79 samples, 0.70%)</title><rect x="5.9271%" y="981" width="0.6989%" height="15" fill="rgb(250,74,19)" fg:x="670" fg:w="79"/><text x="6.1771%" y="991.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (79 samples, 0.70%)</title><rect x="5.9271%" y="965" width="0.6989%" height="15" fill="rgb(249,42,33)" fg:x="670" fg:w="79"/><text x="6.1771%" y="975.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (47 samples, 0.42%)</title><rect x="6.2102%" y="949" width="0.4158%" height="15" fill="rgb(242,149,17)" fg:x="702" fg:w="47"/><text x="6.4602%" y="959.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (47 samples, 0.42%)</title><rect x="6.2102%" y="933" width="0.4158%" height="15" fill="rgb(244,29,21)" fg:x="702" fg:w="47"/><text x="6.4602%" y="943.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (47 samples, 0.42%)</title><rect x="6.2102%" y="917" width="0.4158%" height="15" fill="rgb(220,130,37)" fg:x="702" fg:w="47"/><text x="6.4602%" y="927.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (26 samples, 0.23%)</title><rect x="6.3960%" y="901" width="0.2300%" height="15" fill="rgb(211,67,2)" fg:x="723" fg:w="26"/><text x="6.6460%" y="911.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (3 samples, 0.03%)</title><rect x="6.5994%" y="885" width="0.0265%" height="15" fill="rgb(235,68,52)" fg:x="746" fg:w="3"/><text x="6.8494%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="6.6083%" y="869" width="0.0177%" height="15" fill="rgb(246,142,3)" fg:x="747" fg:w="2"/><text x="6.8583%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="6.6083%" y="853" width="0.0177%" height="15" fill="rgb(241,25,7)" fg:x="747" fg:w="2"/><text x="6.8583%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="6.6083%" y="837" width="0.0177%" height="15" fill="rgb(242,119,39)" fg:x="747" fg:w="2"/><text x="6.8583%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="6.6083%" y="821" width="0.0177%" height="15" fill="rgb(241,98,45)" fg:x="747" fg:w="2"/><text x="6.8583%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="6.6083%" y="805" width="0.0177%" height="15" fill="rgb(254,28,30)" fg:x="747" fg:w="2"/><text x="6.8583%" y="815.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="6.6083%" y="789" width="0.0177%" height="15" fill="rgb(241,142,54)" fg:x="747" fg:w="2"/><text x="6.8583%" y="799.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="6.6083%" y="773" width="0.0177%" height="15" fill="rgb(222,85,15)" fg:x="747" fg:w="2"/><text x="6.8583%" y="783.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="6.6083%" y="757" width="0.0177%" height="15" fill="rgb(210,85,47)" fg:x="747" fg:w="2"/><text x="6.8583%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="6.6702%" y="949" width="0.0177%" height="15" fill="rgb(224,206,25)" fg:x="754" fg:w="2"/><text x="6.9202%" y="959.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.04%)</title><rect x="6.7675%" y="533" width="0.0442%" height="15" fill="rgb(243,201,19)" fg:x="765" fg:w="5"/><text x="7.0175%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.12%)</title><rect x="6.7321%" y="581" width="0.1238%" height="15" fill="rgb(236,59,4)" fg:x="761" fg:w="14"/><text x="6.9821%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.12%)</title><rect x="6.7321%" y="565" width="0.1238%" height="15" fill="rgb(254,179,45)" fg:x="761" fg:w="14"/><text x="6.9821%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.12%)</title><rect x="6.7321%" y="549" width="0.1238%" height="15" fill="rgb(226,14,10)" fg:x="761" fg:w="14"/><text x="6.9821%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.04%)</title><rect x="6.8117%" y="533" width="0.0442%" height="15" fill="rgb(244,27,41)" fg:x="770" fg:w="5"/><text x="7.0617%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.04%)</title><rect x="6.8206%" y="517" width="0.0354%" height="15" fill="rgb(235,35,32)" fg:x="771" fg:w="4"/><text x="7.0706%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="6.9356%" y="405" width="0.0177%" height="15" fill="rgb(218,68,31)" fg:x="784" fg:w="2"/><text x="7.1856%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.04%)</title><rect x="6.9356%" y="421" width="0.0354%" height="15" fill="rgb(207,120,37)" fg:x="784" fg:w="4"/><text x="7.1856%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="6.9533%" y="405" width="0.0177%" height="15" fill="rgb(227,98,0)" fg:x="786" fg:w="2"/><text x="7.2033%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="6.8737%" y="469" width="0.1327%" height="15" fill="rgb(207,7,3)" fg:x="777" fg:w="15"/><text x="7.1237%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="6.8737%" y="453" width="0.1327%" height="15" fill="rgb(206,98,19)" fg:x="777" fg:w="15"/><text x="7.1237%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="6.8737%" y="437" width="0.1327%" height="15" fill="rgb(217,5,26)" fg:x="777" fg:w="15"/><text x="7.1237%" y="447.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.04%)</title><rect x="6.9710%" y="421" width="0.0354%" height="15" fill="rgb(235,190,38)" fg:x="788" fg:w="4"/><text x="7.2210%" y="431.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (18 samples, 0.16%)</title><rect x="6.8560%" y="501" width="0.1592%" height="15" fill="rgb(247,86,24)" fg:x="775" fg:w="18"/><text x="7.1060%" y="511.50"></text></g><g><title>core::hash::Hasher::write_usize (18 samples, 0.16%)</title><rect x="6.8560%" y="485" width="0.1592%" height="15" fill="rgb(205,101,16)" fg:x="775" fg:w="18"/><text x="7.1060%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.04%)</title><rect x="7.0418%" y="437" width="0.0354%" height="15" fill="rgb(246,168,33)" fg:x="796" fg:w="4"/><text x="7.2918%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.36%)</title><rect x="6.7321%" y="613" width="0.3627%" height="15" fill="rgb(231,114,1)" fg:x="761" fg:w="41"/><text x="6.9821%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.36%)</title><rect x="6.7321%" y="597" width="0.3627%" height="15" fill="rgb(207,184,53)" fg:x="761" fg:w="41"/><text x="6.9821%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27 samples, 0.24%)</title><rect x="6.8560%" y="581" width="0.2389%" height="15" fill="rgb(224,95,51)" fg:x="775" fg:w="27"/><text x="7.1060%" y="591.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (27 samples, 0.24%)</title><rect x="6.8560%" y="565" width="0.2389%" height="15" fill="rgb(212,188,45)" fg:x="775" fg:w="27"/><text x="7.1060%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (27 samples, 0.24%)</title><rect x="6.8560%" y="549" width="0.2389%" height="15" fill="rgb(223,154,38)" fg:x="775" fg:w="27"/><text x="7.1060%" y="559.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (27 samples, 0.24%)</title><rect x="6.8560%" y="533" width="0.2389%" height="15" fill="rgb(251,22,52)" fg:x="775" fg:w="27"/><text x="7.1060%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (27 samples, 0.24%)</title><rect x="6.8560%" y="517" width="0.2389%" height="15" fill="rgb(229,209,22)" fg:x="775" fg:w="27"/><text x="7.1060%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (9 samples, 0.08%)</title><rect x="7.0152%" y="501" width="0.0796%" height="15" fill="rgb(234,138,34)" fg:x="793" fg:w="9"/><text x="7.2652%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="7.0152%" y="485" width="0.0796%" height="15" fill="rgb(212,95,11)" fg:x="793" fg:w="9"/><text x="7.2652%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="7.0152%" y="469" width="0.0796%" height="15" fill="rgb(240,179,47)" fg:x="793" fg:w="9"/><text x="7.2652%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="7.0152%" y="453" width="0.0796%" height="15" fill="rgb(240,163,11)" fg:x="793" fg:w="9"/><text x="7.2652%" y="463.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="7.0771%" y="437" width="0.0177%" height="15" fill="rgb(236,37,12)" fg:x="800" fg:w="2"/><text x="7.3271%" y="447.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.02%)</title><rect x="7.1037%" y="565" width="0.0177%" height="15" fill="rgb(232,164,16)" fg:x="803" fg:w="2"/><text x="7.3537%" y="575.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.02%)</title><rect x="7.1037%" y="549" width="0.0177%" height="15" fill="rgb(244,205,15)" fg:x="803" fg:w="2"/><text x="7.3537%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="7.1037%" y="533" width="0.0177%" height="15" fill="rgb(223,117,47)" fg:x="803" fg:w="2"/><text x="7.3537%" y="543.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="7.1037%" y="517" width="0.0177%" height="15" fill="rgb(244,107,35)" fg:x="803" fg:w="2"/><text x="7.3537%" y="527.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="7.1037%" y="501" width="0.0177%" height="15" fill="rgb(205,140,8)" fg:x="803" fg:w="2"/><text x="7.3537%" y="511.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="7.1037%" y="485" width="0.0177%" height="15" fill="rgb(228,84,46)" fg:x="803" fg:w="2"/><text x="7.3537%" y="495.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="7.1037%" y="469" width="0.0177%" height="15" fill="rgb(254,188,9)" fg:x="803" fg:w="2"/><text x="7.3537%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (4 samples, 0.04%)</title><rect x="7.1037%" y="581" width="0.0354%" height="15" fill="rgb(206,112,54)" fg:x="803" fg:w="4"/><text x="7.3537%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="7.1214%" y="565" width="0.0177%" height="15" fill="rgb(216,84,49)" fg:x="805" fg:w="2"/><text x="7.3714%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.02%)</title><rect x="7.1214%" y="549" width="0.0177%" height="15" fill="rgb(214,194,35)" fg:x="805" fg:w="2"/><text x="7.3714%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.02%)</title><rect x="7.1214%" y="533" width="0.0177%" height="15" fill="rgb(249,28,3)" fg:x="805" fg:w="2"/><text x="7.3714%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.02%)</title><rect x="7.1214%" y="517" width="0.0177%" height="15" fill="rgb(222,56,52)" fg:x="805" fg:w="2"/><text x="7.3714%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.02%)</title><rect x="7.1391%" y="581" width="0.0177%" height="15" fill="rgb(245,217,50)" fg:x="807" fg:w="2"/><text x="7.3891%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.02%)</title><rect x="7.1391%" y="565" width="0.0177%" height="15" fill="rgb(213,201,24)" fg:x="807" fg:w="2"/><text x="7.3891%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="7.1391%" y="549" width="0.0177%" height="15" fill="rgb(248,116,28)" fg:x="807" fg:w="2"/><text x="7.3891%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.02%)</title><rect x="7.1568%" y="581" width="0.0177%" height="15" fill="rgb(219,72,43)" fg:x="809" fg:w="2"/><text x="7.4068%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11 samples, 0.10%)</title><rect x="7.0948%" y="613" width="0.0973%" height="15" fill="rgb(209,138,14)" fg:x="802" fg:w="11"/><text x="7.3448%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (11 samples, 0.10%)</title><rect x="7.0948%" y="597" width="0.0973%" height="15" fill="rgb(222,18,33)" fg:x="802" fg:w="11"/><text x="7.3448%" y="607.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (57 samples, 0.50%)</title><rect x="6.7233%" y="725" width="0.5042%" height="15" fill="rgb(213,199,7)" fg:x="760" fg:w="57"/><text x="6.9733%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (57 samples, 0.50%)</title><rect x="6.7233%" y="709" width="0.5042%" height="15" fill="rgb(250,110,10)" fg:x="760" fg:w="57"/><text x="6.9733%" y="719.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (57 samples, 0.50%)</title><rect x="6.7233%" y="693" width="0.5042%" height="15" fill="rgb(248,123,6)" fg:x="760" fg:w="57"/><text x="6.9733%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (57 samples, 0.50%)</title><rect x="6.7233%" y="677" width="0.5042%" height="15" fill="rgb(206,91,31)" fg:x="760" fg:w="57"/><text x="6.9733%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (57 samples, 0.50%)</title><rect x="6.7233%" y="661" width="0.5042%" height="15" fill="rgb(211,154,13)" fg:x="760" fg:w="57"/><text x="6.9733%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (57 samples, 0.50%)</title><rect x="6.7233%" y="645" width="0.5042%" height="15" fill="rgb(225,148,7)" fg:x="760" fg:w="57"/><text x="6.9733%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (57 samples, 0.50%)</title><rect x="6.7233%" y="629" width="0.5042%" height="15" fill="rgb(220,160,43)" fg:x="760" fg:w="57"/><text x="6.9733%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (4 samples, 0.04%)</title><rect x="7.1921%" y="613" width="0.0354%" height="15" fill="rgb(213,52,39)" fg:x="813" fg:w="4"/><text x="7.4421%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 0.03%)</title><rect x="7.2010%" y="597" width="0.0265%" height="15" fill="rgb(243,137,7)" fg:x="814" fg:w="3"/><text x="7.4510%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (2 samples, 0.02%)</title><rect x="7.2098%" y="581" width="0.0177%" height="15" fill="rgb(230,79,13)" fg:x="815" fg:w="2"/><text x="7.4598%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2 samples, 0.02%)</title><rect x="7.2098%" y="565" width="0.0177%" height="15" fill="rgb(247,105,23)" fg:x="815" fg:w="2"/><text x="7.4598%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (60 samples, 0.53%)</title><rect x="6.7144%" y="853" width="0.5308%" height="15" fill="rgb(223,179,41)" fg:x="759" fg:w="60"/><text x="6.9644%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.53%)</title><rect x="6.7144%" y="837" width="0.5308%" height="15" fill="rgb(218,9,34)" fg:x="759" fg:w="60"/><text x="6.9644%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.53%)</title><rect x="6.7144%" y="821" width="0.5308%" height="15" fill="rgb(222,106,8)" fg:x="759" fg:w="60"/><text x="6.9644%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.53%)</title><rect x="6.7144%" y="805" width="0.5308%" height="15" fill="rgb(211,220,0)" fg:x="759" fg:w="60"/><text x="6.9644%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.53%)</title><rect x="6.7144%" y="789" width="0.5308%" height="15" fill="rgb(229,52,16)" fg:x="759" fg:w="60"/><text x="6.9644%" y="799.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.53%)</title><rect x="6.7144%" y="773" width="0.5308%" height="15" fill="rgb(212,155,18)" fg:x="759" fg:w="60"/><text x="6.9644%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.53%)</title><rect x="6.7144%" y="757" width="0.5308%" height="15" fill="rgb(242,21,14)" fg:x="759" fg:w="60"/><text x="6.9644%" y="767.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (59 samples, 0.52%)</title><rect x="6.7233%" y="741" width="0.5219%" height="15" fill="rgb(222,19,48)" fg:x="760" fg:w="59"/><text x="6.9733%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.2275%" y="725" width="0.0177%" height="15" fill="rgb(232,45,27)" fg:x="817" fg:w="2"/><text x="7.4775%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.02%)</title><rect x="7.2452%" y="741" width="0.0177%" height="15" fill="rgb(249,103,42)" fg:x="819" fg:w="2"/><text x="7.4952%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (64 samples, 0.57%)</title><rect x="6.7056%" y="933" width="0.5662%" height="15" fill="rgb(246,81,33)" fg:x="758" fg:w="64"/><text x="6.9556%" y="943.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (64 samples, 0.57%)</title><rect x="6.7056%" y="917" width="0.5662%" height="15" fill="rgb(252,33,42)" fg:x="758" fg:w="64"/><text x="6.9556%" y="927.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (63 samples, 0.56%)</title><rect x="6.7144%" y="901" width="0.5573%" height="15" fill="rgb(209,212,41)" fg:x="759" fg:w="63"/><text x="6.9644%" y="911.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (63 samples, 0.56%)</title><rect x="6.7144%" y="885" width="0.5573%" height="15" fill="rgb(207,154,6)" fg:x="759" fg:w="63"/><text x="6.9644%" y="895.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (63 samples, 0.56%)</title><rect x="6.7144%" y="869" width="0.5573%" height="15" fill="rgb(223,64,47)" fg:x="759" fg:w="63"/><text x="6.9644%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3 samples, 0.03%)</title><rect x="7.2452%" y="853" width="0.0265%" height="15" fill="rgb(211,161,38)" fg:x="819" fg:w="3"/><text x="7.4952%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="7.2452%" y="837" width="0.0265%" height="15" fill="rgb(219,138,40)" fg:x="819" fg:w="3"/><text x="7.4952%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.03%)</title><rect x="7.2452%" y="821" width="0.0265%" height="15" fill="rgb(241,228,46)" fg:x="819" fg:w="3"/><text x="7.4952%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.03%)</title><rect x="7.2452%" y="805" width="0.0265%" height="15" fill="rgb(223,209,38)" fg:x="819" fg:w="3"/><text x="7.4952%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.03%)</title><rect x="7.2452%" y="789" width="0.0265%" height="15" fill="rgb(236,164,45)" fg:x="819" fg:w="3"/><text x="7.4952%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3 samples, 0.03%)</title><rect x="7.2452%" y="773" width="0.0265%" height="15" fill="rgb(231,15,5)" fg:x="819" fg:w="3"/><text x="7.4952%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3 samples, 0.03%)</title><rect x="7.2452%" y="757" width="0.0265%" height="15" fill="rgb(252,35,15)" fg:x="819" fg:w="3"/><text x="7.4952%" y="767.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (67 samples, 0.59%)</title><rect x="6.6967%" y="949" width="0.5927%" height="15" fill="rgb(248,181,18)" fg:x="757" fg:w="67"/><text x="6.9467%" y="959.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::addresses (2 samples, 0.02%)</title><rect x="7.2718%" y="933" width="0.0177%" height="15" fill="rgb(233,39,42)" fg:x="822" fg:w="2"/><text x="7.5218%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::keys (2 samples, 0.02%)</title><rect x="7.2718%" y="917" width="0.0177%" height="15" fill="rgb(238,110,33)" fg:x="822" fg:w="2"/><text x="7.5218%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (2 samples, 0.02%)</title><rect x="7.2718%" y="901" width="0.0177%" height="15" fill="rgb(233,195,10)" fg:x="822" fg:w="2"/><text x="7.5218%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (2 samples, 0.02%)</title><rect x="7.2718%" y="885" width="0.0177%" height="15" fill="rgb(254,105,3)" fg:x="822" fg:w="2"/><text x="7.5218%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (2 samples, 0.02%)</title><rect x="7.2718%" y="869" width="0.0177%" height="15" fill="rgb(221,225,9)" fg:x="822" fg:w="2"/><text x="7.5218%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (2 samples, 0.02%)</title><rect x="7.2718%" y="853" width="0.0177%" height="15" fill="rgb(224,227,45)" fg:x="822" fg:w="2"/><text x="7.5218%" y="863.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.03%)</title><rect x="7.3160%" y="917" width="0.0265%" height="15" fill="rgb(229,198,43)" fg:x="827" fg:w="3"/><text x="7.5660%" y="927.50"></text></g><g><title>malloc_consolidate (3 samples, 0.03%)</title><rect x="7.3160%" y="901" width="0.0265%" height="15" fill="rgb(206,209,35)" fg:x="827" fg:w="3"/><text x="7.5660%" y="911.50"></text></g><g><title>__GI___libc_free (6 samples, 0.05%)</title><rect x="7.2983%" y="933" width="0.0531%" height="15" fill="rgb(245,195,53)" fg:x="825" fg:w="6"/><text x="7.5483%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="7.3514%" y="933" width="0.0177%" height="15" fill="rgb(240,92,26)" fg:x="831" fg:w="2"/><text x="7.6014%" y="943.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="7.3779%" y="933" width="0.0177%" height="15" fill="rgb(207,40,23)" fg:x="834" fg:w="2"/><text x="7.6279%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (6 samples, 0.05%)</title><rect x="7.3956%" y="933" width="0.0531%" height="15" fill="rgb(223,111,35)" fg:x="836" fg:w="6"/><text x="7.6456%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="7.3956%" y="917" width="0.0531%" height="15" fill="rgb(229,147,28)" fg:x="836" fg:w="6"/><text x="7.6456%" y="927.50"></text></g><g><title>charge_memcg (3 samples, 0.03%)</title><rect x="7.6610%" y="645" width="0.0265%" height="15" fill="rgb(211,29,28)" fg:x="866" fg:w="3"/><text x="7.9110%" y="655.50"></text></g><g><title>__mem_cgroup_charge (7 samples, 0.06%)</title><rect x="7.6610%" y="661" width="0.0619%" height="15" fill="rgb(228,72,33)" fg:x="866" fg:w="7"/><text x="7.9110%" y="671.50"></text></g><g><title>get_mem_cgroup_from_mm (4 samples, 0.04%)</title><rect x="7.6875%" y="645" width="0.0354%" height="15" fill="rgb(205,214,31)" fg:x="869" fg:w="4"/><text x="7.9375%" y="655.50"></text></g><g><title>__folio_alloc (2 samples, 0.02%)</title><rect x="7.7583%" y="645" width="0.0177%" height="15" fill="rgb(224,111,15)" fg:x="877" fg:w="2"/><text x="8.0083%" y="655.50"></text></g><g><title>__alloc_pages (2 samples, 0.02%)</title><rect x="7.7583%" y="629" width="0.0177%" height="15" fill="rgb(253,21,26)" fg:x="877" fg:w="2"/><text x="8.0083%" y="639.50"></text></g><g><title>__handle_mm_fault (15 samples, 0.13%)</title><rect x="7.6522%" y="709" width="0.1327%" height="15" fill="rgb(245,139,43)" fg:x="865" fg:w="15"/><text x="7.9022%" y="719.50"></text></g><g><title>handle_pte_fault (15 samples, 0.13%)</title><rect x="7.6522%" y="693" width="0.1327%" height="15" fill="rgb(252,170,7)" fg:x="865" fg:w="15"/><text x="7.9022%" y="703.50"></text></g><g><title>do_anonymous_page (15 samples, 0.13%)</title><rect x="7.6522%" y="677" width="0.1327%" height="15" fill="rgb(231,118,14)" fg:x="865" fg:w="15"/><text x="7.9022%" y="687.50"></text></g><g><title>vma_alloc_folio (4 samples, 0.04%)</title><rect x="7.7495%" y="661" width="0.0354%" height="15" fill="rgb(238,83,0)" fg:x="876" fg:w="4"/><text x="7.9995%" y="671.50"></text></g><g><title>do_user_addr_fault (19 samples, 0.17%)</title><rect x="7.6345%" y="741" width="0.1681%" height="15" fill="rgb(221,39,39)" fg:x="863" fg:w="19"/><text x="7.8845%" y="751.50"></text></g><g><title>handle_mm_fault (17 samples, 0.15%)</title><rect x="7.6522%" y="725" width="0.1504%" height="15" fill="rgb(222,119,46)" fg:x="865" fg:w="17"/><text x="7.9022%" y="735.50"></text></g><g><title>asm_exc_page_fault (21 samples, 0.19%)</title><rect x="7.6345%" y="773" width="0.1858%" height="15" fill="rgb(222,165,49)" fg:x="863" fg:w="21"/><text x="7.8845%" y="783.50"></text></g><g><title>exc_page_fault (21 samples, 0.19%)</title><rect x="7.6345%" y="757" width="0.1858%" height="15" fill="rgb(219,113,52)" fg:x="863" fg:w="21"/><text x="7.8845%" y="767.50"></text></g><g><title>irqentry_exit (2 samples, 0.02%)</title><rect x="7.8025%" y="741" width="0.0177%" height="15" fill="rgb(214,7,15)" fg:x="882" fg:w="2"/><text x="8.0525%" y="751.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.02%)</title><rect x="7.8025%" y="725" width="0.0177%" height="15" fill="rgb(235,32,4)" fg:x="882" fg:w="2"/><text x="8.0525%" y="735.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.02%)</title><rect x="7.8025%" y="709" width="0.0177%" height="15" fill="rgb(238,90,54)" fg:x="882" fg:w="2"/><text x="8.0525%" y="719.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="7.8202%" y="773" width="0.0177%" height="15" fill="rgb(213,208,19)" fg:x="884" fg:w="2"/><text x="8.0702%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (37 samples, 0.33%)</title><rect x="7.5283%" y="917" width="0.3273%" height="15" fill="rgb(233,156,4)" fg:x="851" fg:w="37"/><text x="7.7783%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37 samples, 0.33%)</title><rect x="7.5283%" y="901" width="0.3273%" height="15" fill="rgb(207,194,5)" fg:x="851" fg:w="37"/><text x="7.7783%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.33%)</title><rect x="7.5283%" y="885" width="0.3273%" height="15" fill="rgb(206,111,30)" fg:x="851" fg:w="37"/><text x="7.7783%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.33%)</title><rect x="7.5283%" y="869" width="0.3273%" height="15" fill="rgb(243,70,54)" fg:x="851" fg:w="37"/><text x="7.7783%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.33%)</title><rect x="7.5283%" y="853" width="0.3273%" height="15" fill="rgb(242,28,8)" fg:x="851" fg:w="37"/><text x="7.7783%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.33%)</title><rect x="7.5283%" y="837" width="0.3273%" height="15" fill="rgb(219,106,18)" fg:x="851" fg:w="37"/><text x="7.7783%" y="847.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.33%)</title><rect x="7.5283%" y="821" width="0.3273%" height="15" fill="rgb(244,222,10)" fg:x="851" fg:w="37"/><text x="7.7783%" y="831.50"></text></g><g><title>__GI___libc_malloc (37 samples, 0.33%)</title><rect x="7.5283%" y="805" width="0.3273%" height="15" fill="rgb(236,179,52)" fg:x="851" fg:w="37"/><text x="7.7783%" y="815.50"></text></g><g><title>_int_malloc (37 samples, 0.33%)</title><rect x="7.5283%" y="789" width="0.3273%" height="15" fill="rgb(213,23,39)" fg:x="851" fg:w="37"/><text x="7.7783%" y="799.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.03%)</title><rect x="7.8645%" y="805" width="0.0265%" height="15" fill="rgb(238,48,10)" fg:x="889" fg:w="3"/><text x="8.1145%" y="815.50"></text></g><g><title>malloc_consolidate (3 samples, 0.03%)</title><rect x="7.8645%" y="789" width="0.0265%" height="15" fill="rgb(251,196,23)" fg:x="889" fg:w="3"/><text x="8.1145%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="7.8556%" y="901" width="0.0442%" height="15" fill="rgb(250,152,24)" fg:x="888" fg:w="5"/><text x="8.1056%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="7.8556%" y="885" width="0.0442%" height="15" fill="rgb(209,150,17)" fg:x="888" fg:w="5"/><text x="8.1056%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="7.8556%" y="869" width="0.0442%" height="15" fill="rgb(234,202,34)" fg:x="888" fg:w="5"/><text x="8.1056%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="7.8556%" y="853" width="0.0442%" height="15" fill="rgb(253,148,53)" fg:x="888" fg:w="5"/><text x="8.1056%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="7.8556%" y="837" width="0.0442%" height="15" fill="rgb(218,129,16)" fg:x="888" fg:w="5"/><text x="8.1056%" y="847.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="7.8556%" y="821" width="0.0442%" height="15" fill="rgb(216,85,19)" fg:x="888" fg:w="5"/><text x="8.1056%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::shared_memory::SharedMemory&gt; (6 samples, 0.05%)</title><rect x="7.8556%" y="917" width="0.0531%" height="15" fill="rgb(235,228,7)" fg:x="888" fg:w="6"/><text x="8.1056%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="7.9087%" y="853" width="0.0177%" height="15" fill="rgb(245,175,0)" fg:x="894" fg:w="2"/><text x="8.1587%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="7.9087%" y="837" width="0.0177%" height="15" fill="rgb(208,168,36)" fg:x="894" fg:w="2"/><text x="8.1587%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="7.9087%" y="821" width="0.0177%" height="15" fill="rgb(246,171,24)" fg:x="894" fg:w="2"/><text x="8.1587%" y="831.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="7.9087%" y="805" width="0.0177%" height="15" fill="rgb(215,142,24)" fg:x="894" fg:w="2"/><text x="8.1587%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="7.9264%" y="789" width="0.0177%" height="15" fill="rgb(250,187,7)" fg:x="896" fg:w="2"/><text x="8.1764%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="7.9264%" y="773" width="0.0177%" height="15" fill="rgb(228,66,33)" fg:x="896" fg:w="2"/><text x="8.1764%" y="783.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="7.9264%" y="757" width="0.0177%" height="15" fill="rgb(234,215,21)" fg:x="896" fg:w="2"/><text x="8.1764%" y="767.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.02%)</title><rect x="7.9264%" y="741" width="0.0177%" height="15" fill="rgb(222,191,20)" fg:x="896" fg:w="2"/><text x="8.1764%" y="751.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="7.9264%" y="725" width="0.0177%" height="15" fill="rgb(245,79,54)" fg:x="896" fg:w="2"/><text x="8.1764%" y="735.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.02%)</title><rect x="7.9264%" y="709" width="0.0177%" height="15" fill="rgb(240,10,37)" fg:x="896" fg:w="2"/><text x="8.1764%" y="719.50"></text></g><g><title>core::mem::drop (5 samples, 0.04%)</title><rect x="7.9706%" y="709" width="0.0442%" height="15" fill="rgb(214,192,32)" fg:x="901" fg:w="5"/><text x="8.2206%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;bitvec::vec::BitVec&lt;u8&gt;,&amp;alloc::alloc::Global&gt;&gt; (5 samples, 0.04%)</title><rect x="7.9706%" y="693" width="0.0442%" height="15" fill="rgb(209,36,54)" fg:x="901" fg:w="5"/><text x="8.2206%" y="703.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="7.9706%" y="677" width="0.0442%" height="15" fill="rgb(220,10,11)" fg:x="901" fg:w="5"/><text x="8.2206%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="7.9706%" y="661" width="0.0442%" height="15" fill="rgb(221,106,17)" fg:x="901" fg:w="5"/><text x="8.2206%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="7.9706%" y="645" width="0.0442%" height="15" fill="rgb(251,142,44)" fg:x="901" fg:w="5"/><text x="8.2206%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.06%)</title><rect x="7.9706%" y="725" width="0.0619%" height="15" fill="rgb(238,13,15)" fg:x="901" fg:w="7"/><text x="8.2206%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="8.0149%" y="709" width="0.0177%" height="15" fill="rgb(208,107,27)" fg:x="906" fg:w="2"/><text x="8.2649%" y="719.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (2 samples, 0.02%)</title><rect x="8.0149%" y="693" width="0.0177%" height="15" fill="rgb(205,136,37)" fg:x="906" fg:w="2"/><text x="8.2649%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::contract::Contract&gt; (13 samples, 0.12%)</title><rect x="7.9264%" y="805" width="0.1150%" height="15" fill="rgb(250,205,27)" fg:x="896" fg:w="13"/><text x="8.1764%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::analysis::BytecodeLocked&gt; (11 samples, 0.10%)</title><rect x="7.9441%" y="789" width="0.0973%" height="15" fill="rgb(210,80,43)" fg:x="898" fg:w="11"/><text x="8.1941%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (10 samples, 0.09%)</title><rect x="7.9529%" y="773" width="0.0885%" height="15" fill="rgb(247,160,36)" fg:x="899" fg:w="10"/><text x="8.2029%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (10 samples, 0.09%)</title><rect x="7.9529%" y="757" width="0.0885%" height="15" fill="rgb(234,13,49)" fg:x="899" fg:w="10"/><text x="8.2029%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.09%)</title><rect x="7.9529%" y="741" width="0.0885%" height="15" fill="rgb(234,122,0)" fg:x="899" fg:w="10"/><text x="8.2029%" y="751.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.03%)</title><rect x="8.0414%" y="693" width="0.0265%" height="15" fill="rgb(207,146,38)" fg:x="909" fg:w="3"/><text x="8.2914%" y="703.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="8.0502%" y="677" width="0.0177%" height="15" fill="rgb(207,177,25)" fg:x="910" fg:w="2"/><text x="8.3002%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::FrameData&gt; (18 samples, 0.16%)</title><rect x="7.9264%" y="837" width="0.1592%" height="15" fill="rgb(211,178,42)" fg:x="896" fg:w="18"/><text x="8.1764%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::Interpreter&gt; (18 samples, 0.16%)</title><rect x="7.9264%" y="821" width="0.1592%" height="15" fill="rgb(230,69,54)" fg:x="896" fg:w="18"/><text x="8.1764%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::stack::Stack&gt; (5 samples, 0.04%)</title><rect x="8.0414%" y="805" width="0.0442%" height="15" fill="rgb(214,135,41)" fg:x="909" fg:w="5"/><text x="8.2914%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ruint::Uint&lt;256_usize,4_usize&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="8.0414%" y="789" width="0.0442%" height="15" fill="rgb(237,67,25)" fg:x="909" fg:w="5"/><text x="8.2914%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;ruint::Uint&lt;256_usize,4_usize&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="8.0414%" y="773" width="0.0442%" height="15" fill="rgb(222,189,50)" fg:x="909" fg:w="5"/><text x="8.2914%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="8.0414%" y="757" width="0.0442%" height="15" fill="rgb(245,148,34)" fg:x="909" fg:w="5"/><text x="8.2914%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="8.0414%" y="741" width="0.0442%" height="15" fill="rgb(222,29,6)" fg:x="909" fg:w="5"/><text x="8.2914%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="8.0414%" y="725" width="0.0442%" height="15" fill="rgb(221,189,43)" fg:x="909" fg:w="5"/><text x="8.2914%" y="735.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="8.0414%" y="709" width="0.0442%" height="15" fill="rgb(207,36,27)" fg:x="909" fg:w="5"/><text x="8.2914%" y="719.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.02%)</title><rect x="8.0679%" y="693" width="0.0177%" height="15" fill="rgb(217,90,24)" fg:x="912" fg:w="2"/><text x="8.3179%" y="703.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call_return (21 samples, 0.19%)</title><rect x="7.9087%" y="917" width="0.1858%" height="15" fill="rgb(224,66,35)" fg:x="894" fg:w="21"/><text x="8.1587%" y="927.50"></text></g><g><title>core::ops::function::Fn::call (21 samples, 0.19%)</title><rect x="7.9087%" y="901" width="0.1858%" height="15" fill="rgb(221,13,50)" fg:x="894" fg:w="21"/><text x="8.1587%" y="911.50"></text></g><g><title>revm::handler::mainnet::execution::call_return (21 samples, 0.19%)</title><rect x="7.9087%" y="885" width="0.1858%" height="15" fill="rgb(236,68,49)" fg:x="894" fg:w="21"/><text x="8.1587%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm::frame::CallFrame&gt;&gt; (21 samples, 0.19%)</title><rect x="7.9087%" y="869" width="0.1858%" height="15" fill="rgb(229,146,28)" fg:x="894" fg:w="21"/><text x="8.1587%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::CallFrame&gt; (19 samples, 0.17%)</title><rect x="7.9264%" y="853" width="0.1681%" height="15" fill="rgb(225,31,38)" fg:x="896" fg:w="19"/><text x="8.1764%" y="863.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::wrapping_add (5 samples, 0.04%)</title><rect x="8.5987%" y="869" width="0.0442%" height="15" fill="rgb(250,208,3)" fg:x="972" fg:w="5"/><text x="8.8487%" y="879.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::wrapping_sub (9 samples, 0.08%)</title><rect x="8.6430%" y="869" width="0.0796%" height="15" fill="rgb(246,54,23)" fg:x="977" fg:w="9"/><text x="8.8930%" y="879.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_sub (3 samples, 0.03%)</title><rect x="8.6960%" y="853" width="0.0265%" height="15" fill="rgb(243,76,11)" fg:x="983" fg:w="3"/><text x="8.9460%" y="863.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (3 samples, 0.03%)</title><rect x="8.6960%" y="837" width="0.0265%" height="15" fill="rgb(245,21,50)" fg:x="983" fg:w="3"/><text x="8.9460%" y="847.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="8.7226%" y="853" width="0.0177%" height="15" fill="rgb(228,9,43)" fg:x="986" fg:w="2"/><text x="8.9726%" y="863.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="8.7226%" y="837" width="0.0177%" height="15" fill="rgb(208,100,47)" fg:x="986" fg:w="2"/><text x="8.9726%" y="847.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="8.7226%" y="821" width="0.0177%" height="15" fill="rgb(232,26,8)" fg:x="986" fg:w="2"/><text x="8.9726%" y="831.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_top_unsafe (3 samples, 0.03%)</title><rect x="8.7491%" y="853" width="0.0265%" height="15" fill="rgb(216,166,38)" fg:x="989" fg:w="3"/><text x="8.9991%" y="863.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (3 samples, 0.03%)</title><rect x="8.7491%" y="837" width="0.0265%" height="15" fill="rgb(251,202,51)" fg:x="989" fg:w="3"/><text x="8.9991%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.03%)</title><rect x="8.7491%" y="821" width="0.0265%" height="15" fill="rgb(254,216,34)" fg:x="989" fg:w="3"/><text x="8.9991%" y="831.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="8.7491%" y="805" width="0.0265%" height="15" fill="rgb(251,32,27)" fg:x="989" fg:w="3"/><text x="8.9991%" y="815.50"></text></g><g><title>revm_interpreter::instructions::bitwise::eq (8 samples, 0.07%)</title><rect x="8.7226%" y="869" width="0.0708%" height="15" fill="rgb(208,127,28)" fg:x="986" fg:w="8"/><text x="8.9726%" y="879.50"></text></g><g><title>ruint::from::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from (2 samples, 0.02%)</title><rect x="8.7757%" y="853" width="0.0177%" height="15" fill="rgb(224,137,22)" fg:x="992" fg:w="2"/><text x="9.0257%" y="863.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as ruint::from::UintTryFrom&lt;T&gt;&gt;::uint_try_from (2 samples, 0.02%)</title><rect x="8.7757%" y="837" width="0.0177%" height="15" fill="rgb(254,70,32)" fg:x="992" fg:w="2"/><text x="9.0257%" y="847.50"></text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;bool&gt; for ruint::Uint&lt;_,_&gt;&gt;::try_from (2 samples, 0.02%)</title><rect x="8.7757%" y="821" width="0.0177%" height="15" fill="rgb(229,75,37)" fg:x="992" fg:w="2"/><text x="9.0257%" y="831.50"></text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;u64&gt; for ruint::Uint&lt;_,_&gt;&gt;::try_from (2 samples, 0.02%)</title><rect x="8.7757%" y="805" width="0.0177%" height="15" fill="rgb(252,64,23)" fg:x="992" fg:w="2"/><text x="9.0257%" y="815.50"></text></g><g><title>revm_interpreter::instructions::bitwise::iszero (2 samples, 0.02%)</title><rect x="8.8022%" y="869" width="0.0177%" height="15" fill="rgb(232,162,48)" fg:x="995" fg:w="2"/><text x="9.0522%" y="879.50"></text></g><g><title>revm_interpreter::instructions::bitwise::shl (13 samples, 0.12%)</title><rect x="8.8287%" y="869" width="0.1150%" height="15" fill="rgb(246,160,12)" fg:x="998" fg:w="13"/><text x="9.0787%" y="879.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::ShlAssign&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shl_assign (13 samples, 0.12%)</title><rect x="8.8287%" y="853" width="0.1150%" height="15" fill="rgb(247,166,0)" fg:x="998" fg:w="13"/><text x="9.0787%" y="863.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::Shl&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shl (12 samples, 0.11%)</title><rect x="8.8376%" y="837" width="0.1062%" height="15" fill="rgb(249,219,21)" fg:x="999" fg:w="12"/><text x="9.0876%" y="847.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_shl (12 samples, 0.11%)</title><rect x="8.8376%" y="821" width="0.1062%" height="15" fill="rgb(205,209,3)" fg:x="999" fg:w="12"/><text x="9.0876%" y="831.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_shl (11 samples, 0.10%)</title><rect x="8.8464%" y="805" width="0.0973%" height="15" fill="rgb(243,44,1)" fg:x="1000" fg:w="11"/><text x="9.0964%" y="815.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.02%)</title><rect x="8.9260%" y="789" width="0.0177%" height="15" fill="rgb(206,159,16)" fg:x="1009" fg:w="2"/><text x="9.1760%" y="799.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.02%)</title><rect x="8.9260%" y="773" width="0.0177%" height="15" fill="rgb(244,77,30)" fg:x="1009" fg:w="2"/><text x="9.1760%" y="783.50"></text></g><g><title>revm_interpreter::instructions::bitwise::shr (4 samples, 0.04%)</title><rect x="8.9437%" y="869" width="0.0354%" height="15" fill="rgb(218,69,12)" fg:x="1011" fg:w="4"/><text x="9.1937%" y="879.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::ShrAssign&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shr_assign (4 samples, 0.04%)</title><rect x="8.9437%" y="853" width="0.0354%" height="15" fill="rgb(212,87,7)" fg:x="1011" fg:w="4"/><text x="9.1937%" y="863.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::Shr&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shr (4 samples, 0.04%)</title><rect x="8.9437%" y="837" width="0.0354%" height="15" fill="rgb(245,114,25)" fg:x="1011" fg:w="4"/><text x="9.1937%" y="847.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_shr (4 samples, 0.04%)</title><rect x="8.9437%" y="821" width="0.0354%" height="15" fill="rgb(210,61,42)" fg:x="1011" fg:w="4"/><text x="9.1937%" y="831.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_shr (4 samples, 0.04%)</title><rect x="8.9437%" y="805" width="0.0354%" height="15" fill="rgb(211,52,33)" fg:x="1011" fg:w="4"/><text x="9.1937%" y="815.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (2 samples, 0.02%)</title><rect x="8.9880%" y="853" width="0.0177%" height="15" fill="rgb(234,58,33)" fg:x="1016" fg:w="2"/><text x="9.2380%" y="863.50"></text></g><g><title>revm_interpreter::instructions::control::jump_inner (4 samples, 0.04%)</title><rect x="9.0057%" y="853" width="0.0354%" height="15" fill="rgb(220,115,36)" fg:x="1018" fg:w="4"/><text x="9.2557%" y="863.50"></text></g><g><title>revm_interpreter::instructions::control::jump (8 samples, 0.07%)</title><rect x="8.9791%" y="869" width="0.0708%" height="15" fill="rgb(243,153,54)" fg:x="1015" fg:w="8"/><text x="9.2291%" y="879.50"></text></g><g><title>revm_interpreter::instructions::control::jumpdest (2 samples, 0.02%)</title><rect x="9.0499%" y="869" width="0.0177%" height="15" fill="rgb(251,47,18)" fg:x="1023" fg:w="2"/><text x="9.2999%" y="879.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (2 samples, 0.02%)</title><rect x="9.0499%" y="853" width="0.0177%" height="15" fill="rgb(242,102,42)" fg:x="1023" fg:w="2"/><text x="9.2999%" y="863.50"></text></g><g><title>revm_interpreter::instructions::control::jump_inner (3 samples, 0.03%)</title><rect x="9.1118%" y="853" width="0.0265%" height="15" fill="rgb(234,31,38)" fg:x="1030" fg:w="3"/><text x="9.3618%" y="863.50"></text></g><g><title>revm_interpreter::interpreter::contract::Contract::is_valid_jump (3 samples, 0.03%)</title><rect x="9.1118%" y="837" width="0.0265%" height="15" fill="rgb(221,117,51)" fg:x="1030" fg:w="3"/><text x="9.3618%" y="847.50"></text></g><g><title>revm_primitives::bytecode::JumpMap::is_valid (2 samples, 0.02%)</title><rect x="9.1207%" y="821" width="0.0177%" height="15" fill="rgb(212,20,18)" fg:x="1031" fg:w="2"/><text x="9.3707%" y="831.50"></text></g><g><title>revm_interpreter::instructions::control::jumpi (11 samples, 0.10%)</title><rect x="9.0676%" y="869" width="0.0973%" height="15" fill="rgb(245,133,36)" fg:x="1025" fg:w="11"/><text x="9.3176%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop2_unsafe (3 samples, 0.03%)</title><rect x="9.1384%" y="853" width="0.0265%" height="15" fill="rgb(212,6,19)" fg:x="1033" fg:w="3"/><text x="9.3884%" y="863.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (3 samples, 0.03%)</title><rect x="9.1384%" y="837" width="0.0265%" height="15" fill="rgb(218,1,36)" fg:x="1033" fg:w="3"/><text x="9.3884%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.03%)</title><rect x="9.1384%" y="821" width="0.0265%" height="15" fill="rgb(246,84,54)" fg:x="1033" fg:w="3"/><text x="9.3884%" y="831.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="9.1384%" y="805" width="0.0265%" height="15" fill="rgb(242,110,6)" fg:x="1033" fg:w="3"/><text x="9.3884%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="9.1737%" y="837" width="0.0177%" height="15" fill="rgb(214,47,5)" fg:x="1037" fg:w="2"/><text x="9.4237%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (2 samples, 0.02%)</title><rect x="9.1737%" y="821" width="0.0177%" height="15" fill="rgb(218,159,25)" fg:x="1037" fg:w="2"/><text x="9.4237%" y="831.50"></text></g><g><title>revm_interpreter::instructions::control::ret (5 samples, 0.04%)</title><rect x="9.1649%" y="869" width="0.0442%" height="15" fill="rgb(215,211,28)" fg:x="1036" fg:w="5"/><text x="9.4149%" y="879.50"></text></g><g><title>revm_interpreter::instructions::control::return_inner (5 samples, 0.04%)</title><rect x="9.1649%" y="853" width="0.0442%" height="15" fill="rgb(238,59,32)" fg:x="1036" fg:w="5"/><text x="9.4149%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.02%)</title><rect x="9.1914%" y="837" width="0.0177%" height="15" fill="rgb(226,82,3)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="9.1914%" y="821" width="0.0177%" height="15" fill="rgb(240,164,32)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="9.1914%" y="805" width="0.0177%" height="15" fill="rgb(232,46,7)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="9.1914%" y="789" width="0.0177%" height="15" fill="rgb(229,129,53)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="9.1914%" y="773" width="0.0177%" height="15" fill="rgb(234,188,29)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="9.1914%" y="757" width="0.0177%" height="15" fill="rgb(246,141,4)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="9.1914%" y="741" width="0.0177%" height="15" fill="rgb(229,23,39)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="9.1914%" y="725" width="0.0177%" height="15" fill="rgb(206,12,3)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="9.1914%" y="709" width="0.0177%" height="15" fill="rgb(252,226,20)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="719.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="9.1914%" y="693" width="0.0177%" height="15" fill="rgb(216,123,35)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="703.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="9.1914%" y="677" width="0.0177%" height="15" fill="rgb(212,68,40)" fg:x="1039" fg:w="2"/><text x="9.4414%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.22%)</title><rect x="9.2534%" y="805" width="0.2212%" height="15" fill="rgb(254,125,32)" fg:x="1046" fg:w="25"/><text x="9.5034%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (25 samples, 0.22%)</title><rect x="9.2534%" y="789" width="0.2212%" height="15" fill="rgb(253,97,22)" fg:x="1046" fg:w="25"/><text x="9.5034%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.22%)</title><rect x="9.2534%" y="773" width="0.2212%" height="15" fill="rgb(241,101,14)" fg:x="1046" fg:w="25"/><text x="9.5034%" y="783.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.21%)</title><rect x="9.2622%" y="757" width="0.2123%" height="15" fill="rgb(238,103,29)" fg:x="1047" fg:w="24"/><text x="9.5122%" y="767.50"></text></g><g><title>_int_malloc (23 samples, 0.20%)</title><rect x="9.2711%" y="741" width="0.2035%" height="15" fill="rgb(233,195,47)" fg:x="1048" fg:w="23"/><text x="9.5211%" y="751.50"></text></g><g><title>unlink_chunk (19 samples, 0.17%)</title><rect x="9.3064%" y="725" width="0.1681%" height="15" fill="rgb(246,218,30)" fg:x="1052" fg:w="19"/><text x="9.5564%" y="735.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::log (26 samples, 0.23%)</title><rect x="9.2534%" y="853" width="0.2300%" height="15" fill="rgb(219,145,47)" fg:x="1046" fg:w="26"/><text x="9.5034%" y="863.50"></text></g><g><title>revm::journaled_state::JournaledState::log (26 samples, 0.23%)</title><rect x="9.2534%" y="837" width="0.2300%" height="15" fill="rgb(243,12,26)" fg:x="1046" fg:w="26"/><text x="9.5034%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (26 samples, 0.23%)</title><rect x="9.2534%" y="821" width="0.2300%" height="15" fill="rgb(214,87,16)" fg:x="1046" fg:w="26"/><text x="9.5034%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="9.4834%" y="853" width="0.0177%" height="15" fill="rgb(208,99,42)" fg:x="1072" fg:w="2"/><text x="9.7334%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="9.4834%" y="837" width="0.0177%" height="15" fill="rgb(253,99,2)" fg:x="1072" fg:w="2"/><text x="9.7334%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="9.4834%" y="821" width="0.0177%" height="15" fill="rgb(220,168,23)" fg:x="1072" fg:w="2"/><text x="9.7334%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="9.4834%" y="805" width="0.0177%" height="15" fill="rgb(242,38,24)" fg:x="1072" fg:w="2"/><text x="9.7334%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="9.4834%" y="789" width="0.0177%" height="15" fill="rgb(225,182,9)" fg:x="1072" fg:w="2"/><text x="9.7334%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="9.4834%" y="773" width="0.0177%" height="15" fill="rgb(243,178,37)" fg:x="1072" fg:w="2"/><text x="9.7334%" y="783.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="9.4834%" y="757" width="0.0177%" height="15" fill="rgb(232,139,19)" fg:x="1072" fg:w="2"/><text x="9.7334%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="9.5188%" y="757" width="0.0531%" height="15" fill="rgb(225,201,24)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="9.5188%" y="741" width="0.0531%" height="15" fill="rgb(221,47,46)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="9.5188%" y="725" width="0.0531%" height="15" fill="rgb(249,23,13)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="9.5188%" y="709" width="0.0531%" height="15" fill="rgb(219,9,5)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="9.5188%" y="693" width="0.0531%" height="15" fill="rgb(254,171,16)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="703.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="9.5188%" y="677" width="0.0531%" height="15" fill="rgb(230,171,20)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="687.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.05%)</title><rect x="9.5188%" y="661" width="0.0531%" height="15" fill="rgb(210,71,41)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="671.50"></text></g><g><title>_int_malloc (6 samples, 0.05%)</title><rect x="9.5188%" y="645" width="0.0531%" height="15" fill="rgb(206,173,20)" fg:x="1076" fg:w="6"/><text x="9.7688%" y="655.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="9.5541%" y="629" width="0.0177%" height="15" fill="rgb(233,88,34)" fg:x="1080" fg:w="2"/><text x="9.8041%" y="639.50"></text></g><g><title>alloy_primitives::bytes_::Bytes::copy_from_slice (9 samples, 0.08%)</title><rect x="9.5011%" y="853" width="0.0796%" height="15" fill="rgb(223,209,46)" fg:x="1074" fg:w="9"/><text x="9.7511%" y="863.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (9 samples, 0.08%)</title><rect x="9.5011%" y="837" width="0.0796%" height="15" fill="rgb(250,43,18)" fg:x="1074" fg:w="9"/><text x="9.7511%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.07%)</title><rect x="9.5099%" y="821" width="0.0708%" height="15" fill="rgb(208,13,10)" fg:x="1075" fg:w="8"/><text x="9.7599%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.07%)</title><rect x="9.5099%" y="805" width="0.0708%" height="15" fill="rgb(212,200,36)" fg:x="1075" fg:w="8"/><text x="9.7599%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.07%)</title><rect x="9.5099%" y="789" width="0.0708%" height="15" fill="rgb(225,90,30)" fg:x="1075" fg:w="8"/><text x="9.7599%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.07%)</title><rect x="9.5099%" y="773" width="0.0708%" height="15" fill="rgb(236,182,39)" fg:x="1075" fg:w="8"/><text x="9.7599%" y="783.50"></text></g><g><title>revm_interpreter::instructions::host::log (44 samples, 0.39%)</title><rect x="9.2091%" y="869" width="0.3892%" height="15" fill="rgb(212,144,35)" fg:x="1041" fg:w="44"/><text x="9.4591%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6 samples, 0.05%)</title><rect x="9.6161%" y="837" width="0.0531%" height="15" fill="rgb(228,63,44)" fg:x="1087" fg:w="6"/><text x="9.8661%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="9.7488%" y="645" width="0.0265%" height="15" fill="rgb(228,109,6)" fg:x="1102" fg:w="3"/><text x="9.9988%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="9.7488%" y="629" width="0.0265%" height="15" fill="rgb(238,117,24)" fg:x="1102" fg:w="3"/><text x="9.9988%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="9.7488%" y="613" width="0.0265%" height="15" fill="rgb(242,26,26)" fg:x="1102" fg:w="3"/><text x="9.9988%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="9.7576%" y="597" width="0.0177%" height="15" fill="rgb(221,92,48)" fg:x="1103" fg:w="2"/><text x="10.0076%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="9.7576%" y="581" width="0.0177%" height="15" fill="rgb(209,209,32)" fg:x="1103" fg:w="2"/><text x="10.0076%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.07%)</title><rect x="9.7488%" y="677" width="0.0708%" height="15" fill="rgb(221,70,22)" fg:x="1102" fg:w="8"/><text x="9.9988%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.07%)</title><rect x="9.7488%" y="661" width="0.0708%" height="15" fill="rgb(248,145,5)" fg:x="1102" fg:w="8"/><text x="9.9988%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="9.7753%" y="645" width="0.0442%" height="15" fill="rgb(226,116,26)" fg:x="1105" fg:w="5"/><text x="10.0253%" y="655.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="9.7753%" y="629" width="0.0442%" height="15" fill="rgb(244,5,17)" fg:x="1105" fg:w="5"/><text x="10.0253%" y="639.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.04%)</title><rect x="9.7753%" y="613" width="0.0442%" height="15" fill="rgb(252,159,33)" fg:x="1105" fg:w="5"/><text x="10.0253%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.04%)</title><rect x="9.7753%" y="597" width="0.0442%" height="15" fill="rgb(206,71,0)" fg:x="1105" fg:w="5"/><text x="10.0253%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (4 samples, 0.04%)</title><rect x="9.7841%" y="581" width="0.0354%" height="15" fill="rgb(233,118,54)" fg:x="1106" fg:w="4"/><text x="10.0341%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="9.7841%" y="565" width="0.0354%" height="15" fill="rgb(234,83,48)" fg:x="1106" fg:w="4"/><text x="10.0341%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="9.7841%" y="549" width="0.0354%" height="15" fill="rgb(228,3,54)" fg:x="1106" fg:w="4"/><text x="10.0341%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="9.7841%" y="533" width="0.0354%" height="15" fill="rgb(226,155,13)" fg:x="1106" fg:w="4"/><text x="10.0341%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="9.7930%" y="517" width="0.0265%" height="15" fill="rgb(241,28,37)" fg:x="1107" fg:w="3"/><text x="10.0430%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="9.8018%" y="501" width="0.0177%" height="15" fill="rgb(233,93,10)" fg:x="1108" fg:w="2"/><text x="10.0518%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (64 samples, 0.57%)</title><rect x="9.8195%" y="629" width="0.5662%" height="15" fill="rgb(225,113,19)" fg:x="1110" fg:w="64"/><text x="10.0695%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (64 samples, 0.57%)</title><rect x="9.8195%" y="613" width="0.5662%" height="15" fill="rgb(241,2,18)" fg:x="1110" fg:w="64"/><text x="10.0695%" y="623.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (64 samples, 0.57%)</title><rect x="9.8195%" y="597" width="0.5662%" height="15" fill="rgb(228,207,21)" fg:x="1110" fg:w="64"/><text x="10.0695%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (64 samples, 0.57%)</title><rect x="9.8195%" y="581" width="0.5662%" height="15" fill="rgb(213,211,35)" fg:x="1110" fg:w="64"/><text x="10.0695%" y="591.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (64 samples, 0.57%)</title><rect x="9.8195%" y="565" width="0.5662%" height="15" fill="rgb(209,83,10)" fg:x="1110" fg:w="64"/><text x="10.0695%" y="575.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (64 samples, 0.57%)</title><rect x="9.8195%" y="549" width="0.5662%" height="15" fill="rgb(209,164,1)" fg:x="1110" fg:w="64"/><text x="10.0695%" y="559.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (64 samples, 0.57%)</title><rect x="9.8195%" y="533" width="0.5662%" height="15" fill="rgb(213,184,43)" fg:x="1110" fg:w="64"/><text x="10.0695%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (16 samples, 0.14%)</title><rect x="10.3857%" y="629" width="0.1415%" height="15" fill="rgb(231,61,34)" fg:x="1174" fg:w="16"/><text x="10.6357%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.14%)</title><rect x="10.3857%" y="613" width="0.1415%" height="15" fill="rgb(235,75,3)" fg:x="1174" fg:w="16"/><text x="10.6357%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.14%)</title><rect x="10.3857%" y="597" width="0.1415%" height="15" fill="rgb(220,106,47)" fg:x="1174" fg:w="16"/><text x="10.6357%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (92 samples, 0.81%)</title><rect x="9.7311%" y="757" width="0.8139%" height="15" fill="rgb(210,196,33)" fg:x="1100" fg:w="92"/><text x="9.9811%" y="767.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::storage_ref::_{{closure}} (92 samples, 0.81%)</title><rect x="9.7311%" y="741" width="0.8139%" height="15" fill="rgb(229,154,42)" fg:x="1100" fg:w="92"/><text x="9.9811%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (92 samples, 0.81%)</title><rect x="9.7311%" y="725" width="0.8139%" height="15" fill="rgb(228,114,26)" fg:x="1100" fg:w="92"/><text x="9.9811%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (92 samples, 0.81%)</title><rect x="9.7311%" y="709" width="0.8139%" height="15" fill="rgb(208,144,1)" fg:x="1100" fg:w="92"/><text x="9.9811%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (92 samples, 0.81%)</title><rect x="9.7311%" y="693" width="0.8139%" height="15" fill="rgb(239,112,37)" fg:x="1100" fg:w="92"/><text x="9.9811%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (82 samples, 0.73%)</title><rect x="9.8195%" y="677" width="0.7254%" height="15" fill="rgb(210,96,50)" fg:x="1110" fg:w="82"/><text x="10.0695%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (82 samples, 0.73%)</title><rect x="9.8195%" y="661" width="0.7254%" height="15" fill="rgb(222,178,2)" fg:x="1110" fg:w="82"/><text x="10.0695%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (82 samples, 0.73%)</title><rect x="9.8195%" y="645" width="0.7254%" height="15" fill="rgb(226,74,18)" fg:x="1110" fg:w="82"/><text x="10.0695%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="10.5272%" y="629" width="0.0177%" height="15" fill="rgb(225,67,54)" fg:x="1190" fg:w="2"/><text x="10.7772%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="10.5272%" y="613" width="0.0177%" height="15" fill="rgb(251,92,32)" fg:x="1190" fg:w="2"/><text x="10.7772%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="10.5538%" y="677" width="0.0265%" height="15" fill="rgb(228,149,22)" fg:x="1193" fg:w="3"/><text x="10.8038%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="10.5538%" y="661" width="0.0265%" height="15" fill="rgb(243,54,13)" fg:x="1193" fg:w="3"/><text x="10.8038%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="10.5538%" y="645" width="0.0265%" height="15" fill="rgb(243,180,28)" fg:x="1193" fg:w="3"/><text x="10.8038%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="10.5626%" y="629" width="0.0177%" height="15" fill="rgb(208,167,24)" fg:x="1194" fg:w="2"/><text x="10.8126%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="10.5626%" y="613" width="0.0177%" height="15" fill="rgb(245,73,45)" fg:x="1194" fg:w="2"/><text x="10.8126%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="10.5538%" y="709" width="0.0442%" height="15" fill="rgb(237,203,48)" fg:x="1193" fg:w="5"/><text x="10.8038%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="10.5538%" y="693" width="0.0442%" height="15" fill="rgb(211,197,16)" fg:x="1193" fg:w="5"/><text x="10.8038%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="10.5803%" y="677" width="0.0177%" height="15" fill="rgb(243,99,51)" fg:x="1196" fg:w="2"/><text x="10.8303%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="10.5803%" y="661" width="0.0177%" height="15" fill="rgb(215,123,29)" fg:x="1196" fg:w="2"/><text x="10.8303%" y="671.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="10.5803%" y="645" width="0.0177%" height="15" fill="rgb(239,186,37)" fg:x="1196" fg:w="2"/><text x="10.8303%" y="655.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="10.5803%" y="629" width="0.0177%" height="15" fill="rgb(252,136,39)" fg:x="1196" fg:w="2"/><text x="10.8303%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="10.5803%" y="613" width="0.0177%" height="15" fill="rgb(223,213,32)" fg:x="1196" fg:w="2"/><text x="10.8303%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="10.6069%" y="661" width="0.0177%" height="15" fill="rgb(233,115,5)" fg:x="1199" fg:w="2"/><text x="10.8569%" y="671.50"></text></g><g><title>&lt;revm_primitives::db::WrapDatabaseRef&lt;T&gt; as revm_primitives::db::Database&gt;::storage (107 samples, 0.95%)</title><rect x="9.7134%" y="805" width="0.9466%" height="15" fill="rgb(207,226,44)" fg:x="1098" fg:w="107"/><text x="9.9634%" y="815.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for &amp;T&gt;::storage_ref (107 samples, 0.95%)</title><rect x="9.7134%" y="789" width="0.9466%" height="15" fill="rgb(208,126,0)" fg:x="1098" fg:w="107"/><text x="9.9634%" y="799.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::storage_ref (107 samples, 0.95%)</title><rect x="9.7134%" y="773" width="0.9466%" height="15" fill="rgb(244,66,21)" fg:x="1098" fg:w="107"/><text x="9.9634%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.12%)</title><rect x="10.5449%" y="757" width="0.1150%" height="15" fill="rgb(222,97,12)" fg:x="1192" fg:w="13"/><text x="10.7949%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (13 samples, 0.12%)</title><rect x="10.5449%" y="741" width="0.1150%" height="15" fill="rgb(219,213,19)" fg:x="1192" fg:w="13"/><text x="10.7949%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 0.12%)</title><rect x="10.5449%" y="725" width="0.1150%" height="15" fill="rgb(252,169,30)" fg:x="1192" fg:w="13"/><text x="10.7949%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 0.06%)</title><rect x="10.5980%" y="709" width="0.0619%" height="15" fill="rgb(206,32,51)" fg:x="1198" fg:w="7"/><text x="10.8480%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.06%)</title><rect x="10.5980%" y="693" width="0.0619%" height="15" fill="rgb(250,172,42)" fg:x="1198" fg:w="7"/><text x="10.8480%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 0.06%)</title><rect x="10.5980%" y="677" width="0.0619%" height="15" fill="rgb(209,34,43)" fg:x="1198" fg:w="7"/><text x="10.8480%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="10.6423%" y="661" width="0.0177%" height="15" fill="rgb(223,11,35)" fg:x="1203" fg:w="2"/><text x="10.8923%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="10.6423%" y="645" width="0.0177%" height="15" fill="rgb(251,219,26)" fg:x="1203" fg:w="2"/><text x="10.8923%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (14 samples, 0.12%)</title><rect x="10.6599%" y="773" width="0.1238%" height="15" fill="rgb(231,119,3)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (14 samples, 0.12%)</title><rect x="10.6599%" y="757" width="0.1238%" height="15" fill="rgb(216,97,11)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.12%)</title><rect x="10.6599%" y="741" width="0.1238%" height="15" fill="rgb(223,59,9)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (14 samples, 0.12%)</title><rect x="10.6599%" y="725" width="0.1238%" height="15" fill="rgb(233,93,31)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (14 samples, 0.12%)</title><rect x="10.6599%" y="709" width="0.1238%" height="15" fill="rgb(239,81,33)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (14 samples, 0.12%)</title><rect x="10.6599%" y="693" width="0.1238%" height="15" fill="rgb(213,120,34)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (14 samples, 0.12%)</title><rect x="10.6599%" y="677" width="0.1238%" height="15" fill="rgb(243,49,53)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (14 samples, 0.12%)</title><rect x="10.6599%" y="661" width="0.1238%" height="15" fill="rgb(247,216,33)" fg:x="1205" fg:w="14"/><text x="10.9099%" y="671.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (13 samples, 0.12%)</title><rect x="10.6688%" y="645" width="0.1150%" height="15" fill="rgb(226,26,14)" fg:x="1206" fg:w="13"/><text x="10.9188%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.12%)</title><rect x="10.6688%" y="629" width="0.1150%" height="15" fill="rgb(215,49,53)" fg:x="1206" fg:w="13"/><text x="10.9188%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.12%)</title><rect x="10.6688%" y="613" width="0.1150%" height="15" fill="rgb(245,162,40)" fg:x="1206" fg:w="13"/><text x="10.9188%" y="623.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.12%)</title><rect x="10.6688%" y="597" width="0.1150%" height="15" fill="rgb(229,68,17)" fg:x="1206" fg:w="13"/><text x="10.9188%" y="607.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.12%)</title><rect x="10.6688%" y="581" width="0.1150%" height="15" fill="rgb(213,182,10)" fg:x="1206" fg:w="13"/><text x="10.9188%" y="591.50"></text></g><g><title>_int_malloc (13 samples, 0.12%)</title><rect x="10.6688%" y="565" width="0.1150%" height="15" fill="rgb(245,125,30)" fg:x="1206" fg:w="13"/><text x="10.9188%" y="575.50"></text></g><g><title>unlink_chunk (3 samples, 0.03%)</title><rect x="10.7573%" y="549" width="0.0265%" height="15" fill="rgb(232,202,2)" fg:x="1216" fg:w="3"/><text x="11.0073%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="10.7838%" y="741" width="0.0177%" height="15" fill="rgb(237,140,51)" fg:x="1219" fg:w="2"/><text x="11.0338%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="10.7838%" y="725" width="0.0177%" height="15" fill="rgb(236,157,25)" fg:x="1219" fg:w="2"/><text x="11.0338%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="10.7838%" y="709" width="0.0177%" height="15" fill="rgb(219,209,0)" fg:x="1219" fg:w="2"/><text x="11.0338%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="10.8015%" y="645" width="0.0265%" height="15" fill="rgb(240,116,54)" fg:x="1221" fg:w="3"/><text x="11.0515%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="10.8015%" y="629" width="0.0265%" height="15" fill="rgb(216,10,36)" fg:x="1221" fg:w="3"/><text x="11.0515%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="10.8015%" y="613" width="0.0265%" height="15" fill="rgb(222,72,44)" fg:x="1221" fg:w="3"/><text x="11.0515%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="10.8103%" y="597" width="0.0177%" height="15" fill="rgb(232,159,9)" fg:x="1222" fg:w="2"/><text x="11.0603%" y="607.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.04%)</title><rect x="10.8015%" y="677" width="0.0354%" height="15" fill="rgb(210,39,32)" fg:x="1221" fg:w="4"/><text x="11.0515%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.04%)</title><rect x="10.8015%" y="661" width="0.0354%" height="15" fill="rgb(216,194,45)" fg:x="1221" fg:w="4"/><text x="11.0515%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.06%)</title><rect x="10.7838%" y="773" width="0.0619%" height="15" fill="rgb(218,18,35)" fg:x="1219" fg:w="7"/><text x="11.0338%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.06%)</title><rect x="10.7838%" y="757" width="0.0619%" height="15" fill="rgb(207,83,51)" fg:x="1219" fg:w="7"/><text x="11.0338%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="10.8015%" y="741" width="0.0442%" height="15" fill="rgb(225,63,43)" fg:x="1221" fg:w="5"/><text x="11.0515%" y="751.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="10.8015%" y="725" width="0.0442%" height="15" fill="rgb(207,57,36)" fg:x="1221" fg:w="5"/><text x="11.0515%" y="735.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.04%)</title><rect x="10.8015%" y="709" width="0.0442%" height="15" fill="rgb(216,99,33)" fg:x="1221" fg:w="5"/><text x="11.0515%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.04%)</title><rect x="10.8015%" y="693" width="0.0442%" height="15" fill="rgb(225,42,16)" fg:x="1221" fg:w="5"/><text x="11.0515%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="10.8634%" y="741" width="0.0177%" height="15" fill="rgb(220,201,45)" fg:x="1228" fg:w="2"/><text x="11.1134%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (2 samples, 0.02%)</title><rect x="10.8634%" y="725" width="0.0177%" height="15" fill="rgb(225,33,4)" fg:x="1228" fg:w="2"/><text x="11.1134%" y="735.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="10.8634%" y="709" width="0.0177%" height="15" fill="rgb(224,33,50)" fg:x="1228" fg:w="2"/><text x="11.1134%" y="719.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="10.8634%" y="693" width="0.0177%" height="15" fill="rgb(246,198,51)" fg:x="1228" fg:w="2"/><text x="11.1134%" y="703.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="10.8634%" y="677" width="0.0177%" height="15" fill="rgb(205,22,4)" fg:x="1228" fg:w="2"/><text x="11.1134%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (26 samples, 0.23%)</title><rect x="10.6599%" y="805" width="0.2300%" height="15" fill="rgb(206,3,8)" fg:x="1205" fg:w="26"/><text x="10.9099%" y="815.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (26 samples, 0.23%)</title><rect x="10.6599%" y="789" width="0.2300%" height="15" fill="rgb(251,23,15)" fg:x="1205" fg:w="26"/><text x="10.9099%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.04%)</title><rect x="10.8457%" y="773" width="0.0442%" height="15" fill="rgb(252,88,28)" fg:x="1226" fg:w="5"/><text x="11.0957%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.04%)</title><rect x="10.8457%" y="757" width="0.0442%" height="15" fill="rgb(212,127,14)" fg:x="1226" fg:w="5"/><text x="11.0957%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="10.8988%" y="725" width="0.0354%" height="15" fill="rgb(247,145,37)" fg:x="1232" fg:w="4"/><text x="11.1488%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="10.8988%" y="709" width="0.0354%" height="15" fill="rgb(209,117,53)" fg:x="1232" fg:w="4"/><text x="11.1488%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="10.8988%" y="693" width="0.0354%" height="15" fill="rgb(212,90,42)" fg:x="1232" fg:w="4"/><text x="11.1488%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.03%)</title><rect x="10.9076%" y="677" width="0.0265%" height="15" fill="rgb(218,164,37)" fg:x="1233" fg:w="3"/><text x="11.1576%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="10.9165%" y="661" width="0.0177%" height="15" fill="rgb(246,65,34)" fg:x="1234" fg:w="2"/><text x="11.1665%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.06%)</title><rect x="10.8988%" y="757" width="0.0619%" height="15" fill="rgb(231,100,33)" fg:x="1232" fg:w="7"/><text x="11.1488%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.06%)</title><rect x="10.8988%" y="741" width="0.0619%" height="15" fill="rgb(228,126,14)" fg:x="1232" fg:w="7"/><text x="11.1488%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.03%)</title><rect x="10.9342%" y="725" width="0.0265%" height="15" fill="rgb(215,173,21)" fg:x="1236" fg:w="3"/><text x="11.1842%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="10.9342%" y="709" width="0.0265%" height="15" fill="rgb(210,6,40)" fg:x="1236" fg:w="3"/><text x="11.1842%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="10.9342%" y="693" width="0.0265%" height="15" fill="rgb(212,48,18)" fg:x="1236" fg:w="3"/><text x="11.1842%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="10.9342%" y="677" width="0.0265%" height="15" fill="rgb(230,214,11)" fg:x="1236" fg:w="3"/><text x="11.1842%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="10.9342%" y="661" width="0.0265%" height="15" fill="rgb(254,105,39)" fg:x="1236" fg:w="3"/><text x="11.1842%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="10.9430%" y="645" width="0.0177%" height="15" fill="rgb(245,158,5)" fg:x="1237" fg:w="2"/><text x="11.1930%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="10.9430%" y="629" width="0.0177%" height="15" fill="rgb(249,208,11)" fg:x="1237" fg:w="2"/><text x="11.1930%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="10.9430%" y="613" width="0.0177%" height="15" fill="rgb(210,39,28)" fg:x="1237" fg:w="2"/><text x="11.1930%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="10.9430%" y="597" width="0.0177%" height="15" fill="rgb(211,56,53)" fg:x="1237" fg:w="2"/><text x="11.1930%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (11 samples, 0.10%)</title><rect x="10.8900%" y="805" width="0.0973%" height="15" fill="rgb(226,201,30)" fg:x="1231" fg:w="11"/><text x="11.1400%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (11 samples, 0.10%)</title><rect x="10.8900%" y="789" width="0.0973%" height="15" fill="rgb(239,101,34)" fg:x="1231" fg:w="11"/><text x="11.1400%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (11 samples, 0.10%)</title><rect x="10.8900%" y="773" width="0.0973%" height="15" fill="rgb(226,209,5)" fg:x="1231" fg:w="11"/><text x="11.1400%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.03%)</title><rect x="10.9607%" y="757" width="0.0265%" height="15" fill="rgb(250,105,47)" fg:x="1239" fg:w="3"/><text x="11.2107%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="10.9607%" y="741" width="0.0265%" height="15" fill="rgb(230,72,3)" fg:x="1239" fg:w="3"/><text x="11.2107%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.03%)</title><rect x="10.9607%" y="725" width="0.0265%" height="15" fill="rgb(232,218,39)" fg:x="1239" fg:w="3"/><text x="11.2107%" y="735.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sload (156 samples, 1.38%)</title><rect x="9.6161%" y="853" width="1.3800%" height="15" fill="rgb(248,166,6)" fg:x="1087" fg:w="156"/><text x="9.8661%" y="863.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::sload (150 samples, 1.33%)</title><rect x="9.6691%" y="837" width="1.3270%" height="15" fill="rgb(247,89,20)" fg:x="1093" fg:w="150"/><text x="9.9191%" y="847.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (150 samples, 1.33%)</title><rect x="9.6691%" y="821" width="1.3270%" height="15" fill="rgb(248,130,54)" fg:x="1093" fg:w="150"/><text x="9.9191%" y="831.50"></text></g><g><title>revm_interpreter::instructions::host::sload (160 samples, 1.42%)</title><rect x="9.5984%" y="869" width="1.4154%" height="15" fill="rgb(234,196,4)" fg:x="1085" fg:w="160"/><text x="9.8484%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="11.0492%" y="837" width="0.0177%" height="15" fill="rgb(250,143,31)" fg:x="1249" fg:w="2"/><text x="11.2992%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.04%)</title><rect x="11.0757%" y="805" width="0.0442%" height="15" fill="rgb(211,110,34)" fg:x="1252" fg:w="5"/><text x="11.3257%" y="815.50"></text></g><g><title>__GI_memcpy (3 samples, 0.03%)</title><rect x="11.1288%" y="661" width="0.0265%" height="15" fill="rgb(215,124,48)" fg:x="1258" fg:w="3"/><text x="11.3788%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="11.1377%" y="645" width="0.0177%" height="15" fill="rgb(216,46,13)" fg:x="1259" fg:w="2"/><text x="11.3877%" y="655.50"></text></g><g><title>handle_mm_fault (3 samples, 0.03%)</title><rect x="11.2261%" y="597" width="0.0265%" height="15" fill="rgb(205,184,25)" fg:x="1269" fg:w="3"/><text x="11.4761%" y="607.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.03%)</title><rect x="11.2261%" y="581" width="0.0265%" height="15" fill="rgb(228,1,10)" fg:x="1269" fg:w="3"/><text x="11.4761%" y="591.50"></text></g><g><title>handle_pte_fault (3 samples, 0.03%)</title><rect x="11.2261%" y="565" width="0.0265%" height="15" fill="rgb(213,116,27)" fg:x="1269" fg:w="3"/><text x="11.4761%" y="575.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="11.2350%" y="549" width="0.0177%" height="15" fill="rgb(241,95,50)" fg:x="1270" fg:w="2"/><text x="11.4850%" y="559.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.04%)</title><rect x="11.2173%" y="645" width="0.0442%" height="15" fill="rgb(238,48,32)" fg:x="1268" fg:w="5"/><text x="11.4673%" y="655.50"></text></g><g><title>exc_page_fault (4 samples, 0.04%)</title><rect x="11.2261%" y="629" width="0.0354%" height="15" fill="rgb(235,113,49)" fg:x="1269" fg:w="4"/><text x="11.4761%" y="639.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.04%)</title><rect x="11.2261%" y="613" width="0.0354%" height="15" fill="rgb(205,127,43)" fg:x="1269" fg:w="4"/><text x="11.4761%" y="623.50"></text></g><g><title>__GI___libc_realloc (16 samples, 0.14%)</title><rect x="11.1288%" y="693" width="0.1415%" height="15" fill="rgb(250,162,2)" fg:x="1258" fg:w="16"/><text x="11.3788%" y="703.50"></text></g><g><title>_int_realloc (16 samples, 0.14%)</title><rect x="11.1288%" y="677" width="0.1415%" height="15" fill="rgb(220,13,41)" fg:x="1258" fg:w="16"/><text x="11.3788%" y="687.50"></text></g><g><title>_int_malloc (13 samples, 0.12%)</title><rect x="11.1553%" y="661" width="0.1150%" height="15" fill="rgb(249,221,25)" fg:x="1261" fg:w="13"/><text x="11.4053%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.16%)</title><rect x="11.1200%" y="789" width="0.1592%" height="15" fill="rgb(215,208,19)" fg:x="1257" fg:w="18"/><text x="11.3700%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (18 samples, 0.16%)</title><rect x="11.1200%" y="773" width="0.1592%" height="15" fill="rgb(236,175,2)" fg:x="1257" fg:w="18"/><text x="11.3700%" y="783.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.15%)</title><rect x="11.1288%" y="757" width="0.1504%" height="15" fill="rgb(241,52,2)" fg:x="1258" fg:w="17"/><text x="11.3788%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.15%)</title><rect x="11.1288%" y="741" width="0.1504%" height="15" fill="rgb(248,140,14)" fg:x="1258" fg:w="17"/><text x="11.3788%" y="751.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.15%)</title><rect x="11.1288%" y="725" width="0.1504%" height="15" fill="rgb(253,22,42)" fg:x="1258" fg:w="17"/><text x="11.3788%" y="735.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.15%)</title><rect x="11.1288%" y="709" width="0.1504%" height="15" fill="rgb(234,61,47)" fg:x="1258" fg:w="17"/><text x="11.3788%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.18%)</title><rect x="11.1200%" y="805" width="0.1769%" height="15" fill="rgb(208,226,15)" fg:x="1257" fg:w="20"/><text x="11.3700%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="11.3234%" y="725" width="0.0177%" height="15" fill="rgb(217,221,4)" fg:x="1280" fg:w="2"/><text x="11.5734%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="11.3234%" y="709" width="0.0177%" height="15" fill="rgb(212,174,34)" fg:x="1280" fg:w="2"/><text x="11.5734%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="11.3234%" y="693" width="0.0177%" height="15" fill="rgb(253,83,4)" fg:x="1280" fg:w="2"/><text x="11.5734%" y="703.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="11.3411%" y="661" width="0.0265%" height="15" fill="rgb(250,195,49)" fg:x="1282" fg:w="3"/><text x="11.5911%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="11.3411%" y="645" width="0.0265%" height="15" fill="rgb(241,192,25)" fg:x="1282" fg:w="3"/><text x="11.5911%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="11.3411%" y="629" width="0.0265%" height="15" fill="rgb(208,124,10)" fg:x="1282" fg:w="3"/><text x="11.5911%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="11.3411%" y="613" width="0.0265%" height="15" fill="rgb(222,33,0)" fg:x="1282" fg:w="3"/><text x="11.5911%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="11.3411%" y="597" width="0.0265%" height="15" fill="rgb(234,209,28)" fg:x="1282" fg:w="3"/><text x="11.5911%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="11.3234%" y="757" width="0.0531%" height="15" fill="rgb(224,11,23)" fg:x="1280" fg:w="6"/><text x="11.5734%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="11.3234%" y="741" width="0.0531%" height="15" fill="rgb(232,99,1)" fg:x="1280" fg:w="6"/><text x="11.5734%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="11.3411%" y="725" width="0.0354%" height="15" fill="rgb(237,95,45)" fg:x="1282" fg:w="4"/><text x="11.5911%" y="735.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="11.3411%" y="709" width="0.0354%" height="15" fill="rgb(208,109,11)" fg:x="1282" fg:w="4"/><text x="11.5911%" y="719.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="11.3411%" y="693" width="0.0354%" height="15" fill="rgb(216,190,48)" fg:x="1282" fg:w="4"/><text x="11.5911%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="11.3411%" y="677" width="0.0354%" height="15" fill="rgb(251,171,36)" fg:x="1282" fg:w="4"/><text x="11.5911%" y="687.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="11.3942%" y="725" width="0.0177%" height="15" fill="rgb(230,62,22)" fg:x="1288" fg:w="2"/><text x="11.6442%" y="735.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (11 samples, 0.10%)</title><rect x="11.3234%" y="789" width="0.0973%" height="15" fill="rgb(225,114,35)" fg:x="1280" fg:w="11"/><text x="11.5734%" y="799.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11 samples, 0.10%)</title><rect x="11.3234%" y="773" width="0.0973%" height="15" fill="rgb(215,118,42)" fg:x="1280" fg:w="11"/><text x="11.5734%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.04%)</title><rect x="11.3765%" y="757" width="0.0442%" height="15" fill="rgb(243,119,21)" fg:x="1286" fg:w="5"/><text x="11.6265%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.04%)</title><rect x="11.3765%" y="741" width="0.0442%" height="15" fill="rgb(252,177,53)" fg:x="1286" fg:w="5"/><text x="11.6265%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="11.4207%" y="709" width="0.0177%" height="15" fill="rgb(237,209,29)" fg:x="1291" fg:w="2"/><text x="11.6707%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="11.4207%" y="693" width="0.0177%" height="15" fill="rgb(212,65,23)" fg:x="1291" fg:w="2"/><text x="11.6707%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="11.4207%" y="677" width="0.0177%" height="15" fill="rgb(230,222,46)" fg:x="1291" fg:w="2"/><text x="11.6707%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="11.4207%" y="661" width="0.0177%" height="15" fill="rgb(215,135,32)" fg:x="1291" fg:w="2"/><text x="11.6707%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="11.4384%" y="629" width="0.0265%" height="15" fill="rgb(246,101,22)" fg:x="1293" fg:w="3"/><text x="11.6884%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="11.4384%" y="613" width="0.0265%" height="15" fill="rgb(206,107,13)" fg:x="1293" fg:w="3"/><text x="11.6884%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="11.4473%" y="597" width="0.0177%" height="15" fill="rgb(250,100,44)" fg:x="1294" fg:w="2"/><text x="11.6973%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="11.4473%" y="581" width="0.0177%" height="15" fill="rgb(231,147,38)" fg:x="1294" fg:w="2"/><text x="11.6973%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="11.4473%" y="565" width="0.0177%" height="15" fill="rgb(229,8,40)" fg:x="1294" fg:w="2"/><text x="11.6973%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.04%)</title><rect x="11.4650%" y="565" width="0.0442%" height="15" fill="rgb(221,135,30)" fg:x="1296" fg:w="5"/><text x="11.7150%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="11.4915%" y="549" width="0.0177%" height="15" fill="rgb(249,193,18)" fg:x="1299" fg:w="2"/><text x="11.7415%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.12%)</title><rect x="11.4207%" y="741" width="0.1150%" height="15" fill="rgb(209,133,39)" fg:x="1291" fg:w="13"/><text x="11.6707%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.12%)</title><rect x="11.4207%" y="725" width="0.1150%" height="15" fill="rgb(232,100,14)" fg:x="1291" fg:w="13"/><text x="11.6707%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.10%)</title><rect x="11.4384%" y="709" width="0.0973%" height="15" fill="rgb(224,185,1)" fg:x="1293" fg:w="11"/><text x="11.6884%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (11 samples, 0.10%)</title><rect x="11.4384%" y="693" width="0.0973%" height="15" fill="rgb(223,139,8)" fg:x="1293" fg:w="11"/><text x="11.6884%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (11 samples, 0.10%)</title><rect x="11.4384%" y="677" width="0.0973%" height="15" fill="rgb(232,213,38)" fg:x="1293" fg:w="11"/><text x="11.6884%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (11 samples, 0.10%)</title><rect x="11.4384%" y="661" width="0.0973%" height="15" fill="rgb(207,94,22)" fg:x="1293" fg:w="11"/><text x="11.6884%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (11 samples, 0.10%)</title><rect x="11.4384%" y="645" width="0.0973%" height="15" fill="rgb(219,183,54)" fg:x="1293" fg:w="11"/><text x="11.6884%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (8 samples, 0.07%)</title><rect x="11.4650%" y="629" width="0.0708%" height="15" fill="rgb(216,185,54)" fg:x="1296" fg:w="8"/><text x="11.7150%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.07%)</title><rect x="11.4650%" y="613" width="0.0708%" height="15" fill="rgb(254,217,39)" fg:x="1296" fg:w="8"/><text x="11.7150%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.07%)</title><rect x="11.4650%" y="597" width="0.0708%" height="15" fill="rgb(240,178,23)" fg:x="1296" fg:w="8"/><text x="11.7150%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.07%)</title><rect x="11.4650%" y="581" width="0.0708%" height="15" fill="rgb(218,11,47)" fg:x="1296" fg:w="8"/><text x="11.7150%" y="591.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.03%)</title><rect x="11.5092%" y="565" width="0.0265%" height="15" fill="rgb(218,51,51)" fg:x="1301" fg:w="3"/><text x="11.7592%" y="575.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (30 samples, 0.27%)</title><rect x="11.2969%" y="805" width="0.2654%" height="15" fill="rgb(238,126,27)" fg:x="1277" fg:w="30"/><text x="11.5469%" y="815.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (16 samples, 0.14%)</title><rect x="11.4207%" y="789" width="0.1415%" height="15" fill="rgb(249,202,22)" fg:x="1291" fg:w="16"/><text x="11.6707%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (16 samples, 0.14%)</title><rect x="11.4207%" y="773" width="0.1415%" height="15" fill="rgb(254,195,49)" fg:x="1291" fg:w="16"/><text x="11.6707%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (16 samples, 0.14%)</title><rect x="11.4207%" y="757" width="0.1415%" height="15" fill="rgb(208,123,14)" fg:x="1291" fg:w="16"/><text x="11.6707%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.03%)</title><rect x="11.5357%" y="741" width="0.0265%" height="15" fill="rgb(224,200,8)" fg:x="1304" fg:w="3"/><text x="11.7857%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="11.5357%" y="725" width="0.0265%" height="15" fill="rgb(217,61,36)" fg:x="1304" fg:w="3"/><text x="11.7857%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.03%)</title><rect x="11.5357%" y="709" width="0.0265%" height="15" fill="rgb(206,35,45)" fg:x="1304" fg:w="3"/><text x="11.7857%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="11.5711%" y="725" width="0.0265%" height="15" fill="rgb(217,65,33)" fg:x="1308" fg:w="3"/><text x="11.8211%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="11.5711%" y="709" width="0.0265%" height="15" fill="rgb(222,158,48)" fg:x="1308" fg:w="3"/><text x="11.8211%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="11.5711%" y="693" width="0.0265%" height="15" fill="rgb(254,2,54)" fg:x="1308" fg:w="3"/><text x="11.8211%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="11.6154%" y="565" width="0.0177%" height="15" fill="rgb(250,143,38)" fg:x="1313" fg:w="2"/><text x="11.8654%" y="575.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5 samples, 0.04%)</title><rect x="11.6065%" y="645" width="0.0442%" height="15" fill="rgb(248,25,0)" fg:x="1312" fg:w="5"/><text x="11.8565%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.04%)</title><rect x="11.6065%" y="629" width="0.0442%" height="15" fill="rgb(206,152,27)" fg:x="1312" fg:w="5"/><text x="11.8565%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="11.6154%" y="613" width="0.0354%" height="15" fill="rgb(240,77,30)" fg:x="1313" fg:w="4"/><text x="11.8654%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="11.6154%" y="597" width="0.0354%" height="15" fill="rgb(231,5,3)" fg:x="1313" fg:w="4"/><text x="11.8654%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="11.6154%" y="581" width="0.0354%" height="15" fill="rgb(207,226,32)" fg:x="1313" fg:w="4"/><text x="11.8654%" y="591.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="11.6331%" y="565" width="0.0177%" height="15" fill="rgb(222,207,47)" fg:x="1315" fg:w="2"/><text x="11.8831%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.04%)</title><rect x="11.6773%" y="581" width="0.0354%" height="15" fill="rgb(229,115,45)" fg:x="1320" fg:w="4"/><text x="11.9273%" y="591.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (14 samples, 0.12%)</title><rect x="11.6065%" y="709" width="0.1238%" height="15" fill="rgb(224,191,6)" fg:x="1312" fg:w="14"/><text x="11.8565%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (14 samples, 0.12%)</title><rect x="11.6065%" y="693" width="0.1238%" height="15" fill="rgb(230,227,24)" fg:x="1312" fg:w="14"/><text x="11.8565%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (14 samples, 0.12%)</title><rect x="11.6065%" y="677" width="0.1238%" height="15" fill="rgb(228,80,19)" fg:x="1312" fg:w="14"/><text x="11.8565%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (14 samples, 0.12%)</title><rect x="11.6065%" y="661" width="0.1238%" height="15" fill="rgb(247,229,0)" fg:x="1312" fg:w="14"/><text x="11.8565%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (9 samples, 0.08%)</title><rect x="11.6507%" y="645" width="0.0796%" height="15" fill="rgb(237,194,15)" fg:x="1317" fg:w="9"/><text x="11.9007%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="11.6507%" y="629" width="0.0796%" height="15" fill="rgb(219,203,20)" fg:x="1317" fg:w="9"/><text x="11.9007%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="11.6507%" y="613" width="0.0796%" height="15" fill="rgb(234,128,8)" fg:x="1317" fg:w="9"/><text x="11.9007%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="11.6507%" y="597" width="0.0796%" height="15" fill="rgb(248,202,8)" fg:x="1317" fg:w="9"/><text x="11.9007%" y="607.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="11.7127%" y="581" width="0.0177%" height="15" fill="rgb(206,104,37)" fg:x="1324" fg:w="2"/><text x="11.9627%" y="591.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="11.7304%" y="661" width="0.0265%" height="15" fill="rgb(223,8,27)" fg:x="1326" fg:w="3"/><text x="11.9804%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="11.7304%" y="645" width="0.0265%" height="15" fill="rgb(216,217,28)" fg:x="1326" fg:w="3"/><text x="11.9804%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="11.7304%" y="629" width="0.0265%" height="15" fill="rgb(249,199,1)" fg:x="1326" fg:w="3"/><text x="11.9804%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="11.7304%" y="613" width="0.0265%" height="15" fill="rgb(240,85,17)" fg:x="1326" fg:w="3"/><text x="11.9804%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="11.7304%" y="597" width="0.0265%" height="15" fill="rgb(206,108,45)" fg:x="1326" fg:w="3"/><text x="11.9804%" y="607.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="11.7392%" y="581" width="0.0177%" height="15" fill="rgb(245,210,41)" fg:x="1327" fg:w="2"/><text x="11.9892%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.22%)</title><rect x="11.5711%" y="757" width="0.2212%" height="15" fill="rgb(206,13,37)" fg:x="1308" fg:w="25"/><text x="11.8211%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.22%)</title><rect x="11.5711%" y="741" width="0.2212%" height="15" fill="rgb(250,61,18)" fg:x="1308" fg:w="25"/><text x="11.8211%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (21 samples, 0.19%)</title><rect x="11.6065%" y="725" width="0.1858%" height="15" fill="rgb(235,172,48)" fg:x="1312" fg:w="21"/><text x="11.8565%" y="735.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (7 samples, 0.06%)</title><rect x="11.7304%" y="709" width="0.0619%" height="15" fill="rgb(249,201,17)" fg:x="1326" fg:w="7"/><text x="11.9804%" y="719.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (7 samples, 0.06%)</title><rect x="11.7304%" y="693" width="0.0619%" height="15" fill="rgb(219,208,6)" fg:x="1326" fg:w="7"/><text x="11.9804%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (7 samples, 0.06%)</title><rect x="11.7304%" y="677" width="0.0619%" height="15" fill="rgb(248,31,23)" fg:x="1326" fg:w="7"/><text x="11.9804%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (4 samples, 0.04%)</title><rect x="11.7569%" y="661" width="0.0354%" height="15" fill="rgb(245,15,42)" fg:x="1329" fg:w="4"/><text x="12.0069%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="11.7569%" y="645" width="0.0354%" height="15" fill="rgb(222,217,39)" fg:x="1329" fg:w="4"/><text x="12.0069%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="11.7569%" y="629" width="0.0354%" height="15" fill="rgb(210,219,27)" fg:x="1329" fg:w="4"/><text x="12.0069%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="11.7569%" y="613" width="0.0354%" height="15" fill="rgb(252,166,36)" fg:x="1329" fg:w="4"/><text x="12.0069%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.03%)</title><rect x="11.8011%" y="709" width="0.0265%" height="15" fill="rgb(245,132,34)" fg:x="1334" fg:w="3"/><text x="12.0511%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.03%)</title><rect x="11.8011%" y="693" width="0.0265%" height="15" fill="rgb(236,54,3)" fg:x="1334" fg:w="3"/><text x="12.0511%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.03%)</title><rect x="11.8011%" y="677" width="0.0265%" height="15" fill="rgb(241,173,43)" fg:x="1334" fg:w="3"/><text x="12.0511%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.03%)</title><rect x="11.8011%" y="661" width="0.0265%" height="15" fill="rgb(215,190,9)" fg:x="1334" fg:w="3"/><text x="12.0511%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.03%)</title><rect x="11.8011%" y="645" width="0.0265%" height="15" fill="rgb(242,101,16)" fg:x="1334" fg:w="3"/><text x="12.0511%" y="655.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sstore (89 samples, 0.79%)</title><rect x="11.0492%" y="853" width="0.7873%" height="15" fill="rgb(223,190,21)" fg:x="1249" fg:w="89"/><text x="11.2992%" y="863.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::sstore (87 samples, 0.77%)</title><rect x="11.0669%" y="837" width="0.7696%" height="15" fill="rgb(215,228,25)" fg:x="1251" fg:w="87"/><text x="11.3169%" y="847.50"></text></g><g><title>revm::journaled_state::JournaledState::sstore (87 samples, 0.77%)</title><rect x="11.0669%" y="821" width="0.7696%" height="15" fill="rgb(225,36,22)" fg:x="1251" fg:w="87"/><text x="11.3169%" y="831.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (31 samples, 0.27%)</title><rect x="11.5623%" y="805" width="0.2742%" height="15" fill="rgb(251,106,46)" fg:x="1307" fg:w="31"/><text x="11.8123%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (31 samples, 0.27%)</title><rect x="11.5623%" y="789" width="0.2742%" height="15" fill="rgb(208,90,1)" fg:x="1307" fg:w="31"/><text x="11.8123%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (31 samples, 0.27%)</title><rect x="11.5623%" y="773" width="0.2742%" height="15" fill="rgb(243,10,4)" fg:x="1307" fg:w="31"/><text x="11.8123%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5 samples, 0.04%)</title><rect x="11.7923%" y="757" width="0.0442%" height="15" fill="rgb(212,137,27)" fg:x="1333" fg:w="5"/><text x="12.0423%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.04%)</title><rect x="11.7923%" y="741" width="0.0442%" height="15" fill="rgb(231,220,49)" fg:x="1333" fg:w="5"/><text x="12.0423%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.04%)</title><rect x="11.7923%" y="725" width="0.0442%" height="15" fill="rgb(237,96,20)" fg:x="1333" fg:w="5"/><text x="12.0423%" y="735.50"></text></g><g><title>revm_interpreter::instructions::host::sstore (96 samples, 0.85%)</title><rect x="11.0138%" y="869" width="0.8493%" height="15" fill="rgb(239,229,30)" fg:x="1245" fg:w="96"/><text x="11.2638%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop2_unsafe (2 samples, 0.02%)</title><rect x="11.8454%" y="853" width="0.0177%" height="15" fill="rgb(219,65,33)" fg:x="1339" fg:w="2"/><text x="12.0954%" y="863.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (2 samples, 0.02%)</title><rect x="11.8454%" y="837" width="0.0177%" height="15" fill="rgb(243,134,7)" fg:x="1339" fg:w="2"/><text x="12.0954%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.02%)</title><rect x="11.8454%" y="821" width="0.0177%" height="15" fill="rgb(216,177,54)" fg:x="1339" fg:w="2"/><text x="12.0954%" y="831.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::get_u256 (4 samples, 0.04%)</title><rect x="11.8719%" y="853" width="0.0354%" height="15" fill="rgb(211,160,20)" fg:x="1342" fg:w="4"/><text x="12.1219%" y="863.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.03%)</title><rect x="11.8808%" y="837" width="0.0265%" height="15" fill="rgb(239,85,39)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="847.50"></text></g><g><title>alloy_primitives::bits::fixed::&lt;impl core::convert::From&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt; for ruint::Uint&lt;256_usize,4_usize&gt;&gt;::from (3 samples, 0.03%)</title><rect x="11.8808%" y="821" width="0.0265%" height="15" fill="rgb(232,125,22)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="831.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_bytes (3 samples, 0.03%)</title><rect x="11.8808%" y="805" width="0.0265%" height="15" fill="rgb(244,57,34)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="815.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_slice (3 samples, 0.03%)</title><rect x="11.8808%" y="789" width="0.0265%" height="15" fill="rgb(214,203,32)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="799.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_be_slice (3 samples, 0.03%)</title><rect x="11.8808%" y="773" width="0.0265%" height="15" fill="rgb(207,58,43)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (3 samples, 0.03%)</title><rect x="11.8808%" y="757" width="0.0265%" height="15" fill="rgb(215,193,15)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (3 samples, 0.03%)</title><rect x="11.8808%" y="741" width="0.0265%" height="15" fill="rgb(232,15,44)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (3 samples, 0.03%)</title><rect x="11.8808%" y="725" width="0.0265%" height="15" fill="rgb(212,3,48)" fg:x="1343" fg:w="3"/><text x="12.1308%" y="735.50"></text></g><g><title>revm_interpreter::instructions::memory::mload (7 samples, 0.06%)</title><rect x="11.8631%" y="869" width="0.0619%" height="15" fill="rgb(218,128,7)" fg:x="1341" fg:w="7"/><text x="12.1131%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::push (2 samples, 0.02%)</title><rect x="11.9073%" y="853" width="0.0177%" height="15" fill="rgb(226,216,39)" fg:x="1346" fg:w="2"/><text x="12.1573%" y="863.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (4 samples, 0.04%)</title><rect x="11.9781%" y="853" width="0.0354%" height="15" fill="rgb(243,47,51)" fg:x="1354" fg:w="4"/><text x="12.2281%" y="863.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::resize (3 samples, 0.03%)</title><rect x="12.0223%" y="853" width="0.0265%" height="15" fill="rgb(241,183,40)" fg:x="1359" fg:w="3"/><text x="12.2723%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (3 samples, 0.03%)</title><rect x="12.0223%" y="837" width="0.0265%" height="15" fill="rgb(231,217,32)" fg:x="1359" fg:w="3"/><text x="12.2723%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3 samples, 0.03%)</title><rect x="12.0223%" y="821" width="0.0265%" height="15" fill="rgb(229,61,38)" fg:x="1359" fg:w="3"/><text x="12.2723%" y="831.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="12.0311%" y="805" width="0.0177%" height="15" fill="rgb(225,210,5)" fg:x="1360" fg:w="2"/><text x="12.2811%" y="815.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="12.0311%" y="789" width="0.0177%" height="15" fill="rgb(231,79,45)" fg:x="1360" fg:w="2"/><text x="12.2811%" y="799.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::set_u256 (8 samples, 0.07%)</title><rect x="12.0488%" y="853" width="0.0708%" height="15" fill="rgb(224,100,7)" fg:x="1362" fg:w="8"/><text x="12.2988%" y="863.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::to_be_bytes (7 samples, 0.06%)</title><rect x="12.0577%" y="837" width="0.0619%" height="15" fill="rgb(241,198,18)" fg:x="1363" fg:w="7"/><text x="12.3077%" y="847.50"></text></g><g><title>revm_interpreter::instructions::memory::mstore (25 samples, 0.22%)</title><rect x="11.9250%" y="869" width="0.2212%" height="15" fill="rgb(252,97,53)" fg:x="1348" fg:w="25"/><text x="12.1750%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop2_unsafe (2 samples, 0.02%)</title><rect x="12.1285%" y="853" width="0.0177%" height="15" fill="rgb(220,88,7)" fg:x="1371" fg:w="2"/><text x="12.3785%" y="863.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (2 samples, 0.02%)</title><rect x="12.1285%" y="837" width="0.0177%" height="15" fill="rgb(213,176,14)" fg:x="1371" fg:w="2"/><text x="12.3785%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.02%)</title><rect x="12.1285%" y="821" width="0.0177%" height="15" fill="rgb(246,73,7)" fg:x="1371" fg:w="2"/><text x="12.3785%" y="831.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="12.1285%" y="805" width="0.0177%" height="15" fill="rgb(245,64,36)" fg:x="1371" fg:w="2"/><text x="12.3785%" y="815.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (4 samples, 0.04%)</title><rect x="12.1461%" y="853" width="0.0354%" height="15" fill="rgb(245,80,10)" fg:x="1373" fg:w="4"/><text x="12.3961%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.04%)</title><rect x="12.2169%" y="837" width="0.0354%" height="15" fill="rgb(232,107,50)" fg:x="1381" fg:w="4"/><text x="12.4669%" y="847.50"></text></g><g><title>revm_interpreter::instructions::stack::dup (18 samples, 0.16%)</title><rect x="12.1461%" y="869" width="0.1592%" height="15" fill="rgb(253,3,0)" fg:x="1373" fg:w="18"/><text x="12.3961%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::dup (14 samples, 0.12%)</title><rect x="12.1815%" y="853" width="0.1238%" height="15" fill="rgb(212,99,53)" fg:x="1377" fg:w="14"/><text x="12.4315%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.05%)</title><rect x="12.2523%" y="837" width="0.0531%" height="15" fill="rgb(249,111,54)" fg:x="1385" fg:w="6"/><text x="12.5023%" y="847.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="12.2877%" y="821" width="0.0177%" height="15" fill="rgb(249,55,30)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="831.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="12.2877%" y="805" width="0.0177%" height="15" fill="rgb(237,47,42)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="815.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="12.2877%" y="789" width="0.0177%" height="15" fill="rgb(211,20,18)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="799.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="12.2877%" y="773" width="0.0177%" height="15" fill="rgb(231,203,46)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="783.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="12.2877%" y="757" width="0.0177%" height="15" fill="rgb(237,142,3)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="767.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="12.2877%" y="741" width="0.0177%" height="15" fill="rgb(241,107,1)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="751.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="12.2877%" y="725" width="0.0177%" height="15" fill="rgb(229,83,13)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="735.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.02%)</title><rect x="12.2877%" y="709" width="0.0177%" height="15" fill="rgb(241,91,40)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="719.50"></text></g><g><title>__folio_alloc (2 samples, 0.02%)</title><rect x="12.2877%" y="693" width="0.0177%" height="15" fill="rgb(225,3,45)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="703.50"></text></g><g><title>__alloc_pages (2 samples, 0.02%)</title><rect x="12.2877%" y="677" width="0.0177%" height="15" fill="rgb(244,223,14)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="687.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="12.2877%" y="661" width="0.0177%" height="15" fill="rgb(224,124,37)" fg:x="1389" fg:w="2"/><text x="12.5377%" y="671.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (2 samples, 0.02%)</title><rect x="12.3054%" y="853" width="0.0177%" height="15" fill="rgb(251,171,30)" fg:x="1391" fg:w="2"/><text x="12.5554%" y="863.50"></text></g><g><title>revm_interpreter::instructions::stack::pop (5 samples, 0.04%)</title><rect x="12.3054%" y="869" width="0.0442%" height="15" fill="rgb(236,46,54)" fg:x="1391" fg:w="5"/><text x="12.5554%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop (3 samples, 0.03%)</title><rect x="12.3231%" y="853" width="0.0265%" height="15" fill="rgb(245,213,5)" fg:x="1393" fg:w="3"/><text x="12.5731%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.03%)</title><rect x="12.3231%" y="837" width="0.0265%" height="15" fill="rgb(230,144,27)" fg:x="1393" fg:w="3"/><text x="12.5731%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.02%)</title><rect x="12.3496%" y="853" width="0.0177%" height="15" fill="rgb(220,86,6)" fg:x="1396" fg:w="2"/><text x="12.5996%" y="863.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (4 samples, 0.04%)</title><rect x="12.3673%" y="853" width="0.0354%" height="15" fill="rgb(240,20,13)" fg:x="1398" fg:w="4"/><text x="12.6173%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.04%)</title><rect x="12.5265%" y="837" width="0.0354%" height="15" fill="rgb(217,89,34)" fg:x="1416" fg:w="4"/><text x="12.7765%" y="847.50"></text></g><g><title>core::ptr::write (4 samples, 0.04%)</title><rect x="12.5265%" y="821" width="0.0354%" height="15" fill="rgb(229,13,5)" fg:x="1416" fg:w="4"/><text x="12.7765%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.02%)</title><rect x="12.5619%" y="837" width="0.0177%" height="15" fill="rgb(244,67,35)" fg:x="1420" fg:w="2"/><text x="12.8119%" y="847.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.02%)</title><rect x="12.5619%" y="821" width="0.0177%" height="15" fill="rgb(221,40,2)" fg:x="1420" fg:w="2"/><text x="12.8119%" y="831.50"></text></g><g><title>revm_interpreter::instructions::stack::push (30 samples, 0.27%)</title><rect x="12.3496%" y="869" width="0.2654%" height="15" fill="rgb(237,157,21)" fg:x="1396" fg:w="30"/><text x="12.5996%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::push_slice (24 samples, 0.21%)</title><rect x="12.4027%" y="853" width="0.2123%" height="15" fill="rgb(222,94,11)" fg:x="1402" fg:w="24"/><text x="12.6527%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.04%)</title><rect x="12.5796%" y="837" width="0.0354%" height="15" fill="rgb(249,113,6)" fg:x="1422" fg:w="4"/><text x="12.8296%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="12.5796%" y="821" width="0.0354%" height="15" fill="rgb(238,137,36)" fg:x="1422" fg:w="4"/><text x="12.8296%" y="831.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (5 samples, 0.04%)</title><rect x="12.6150%" y="853" width="0.0442%" height="15" fill="rgb(210,102,26)" fg:x="1426" fg:w="5"/><text x="12.8650%" y="863.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.02%)</title><rect x="12.6946%" y="805" width="0.0177%" height="15" fill="rgb(218,30,30)" fg:x="1435" fg:w="2"/><text x="12.9446%" y="815.50"></text></g><g><title>revm_interpreter::instructions::stack::swap (25 samples, 0.22%)</title><rect x="12.6150%" y="869" width="0.2212%" height="15" fill="rgb(214,67,26)" fg:x="1426" fg:w="25"/><text x="12.8650%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::swap (20 samples, 0.18%)</title><rect x="12.6592%" y="853" width="0.1769%" height="15" fill="rgb(251,9,53)" fg:x="1431" fg:w="20"/><text x="12.9092%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (16 samples, 0.14%)</title><rect x="12.6946%" y="837" width="0.1415%" height="15" fill="rgb(228,204,25)" fg:x="1435" fg:w="16"/><text x="12.9446%" y="847.50"></text></g><g><title>core::ptr::swap (16 samples, 0.14%)</title><rect x="12.6946%" y="821" width="0.1415%" height="15" fill="rgb(207,153,8)" fg:x="1435" fg:w="16"/><text x="12.9446%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.12%)</title><rect x="12.7123%" y="805" width="0.1238%" height="15" fill="rgb(242,9,16)" fg:x="1437" fg:w="14"/><text x="12.9623%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.03%)</title><rect x="12.8450%" y="837" width="0.0265%" height="15" fill="rgb(217,211,10)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="847.50"></text></g><g><title>alloy_primitives::bits::fixed::&lt;impl core::convert::From&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt; for ruint::Uint&lt;256_usize,4_usize&gt;&gt;::from (3 samples, 0.03%)</title><rect x="12.8450%" y="821" width="0.0265%" height="15" fill="rgb(219,228,52)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="831.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_bytes (3 samples, 0.03%)</title><rect x="12.8450%" y="805" width="0.0265%" height="15" fill="rgb(231,92,29)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="815.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_slice (3 samples, 0.03%)</title><rect x="12.8450%" y="789" width="0.0265%" height="15" fill="rgb(232,8,23)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="799.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_be_slice (3 samples, 0.03%)</title><rect x="12.8450%" y="773" width="0.0265%" height="15" fill="rgb(216,211,34)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (3 samples, 0.03%)</title><rect x="12.8450%" y="757" width="0.0265%" height="15" fill="rgb(236,151,0)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (3 samples, 0.03%)</title><rect x="12.8450%" y="741" width="0.0265%" height="15" fill="rgb(209,168,3)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (3 samples, 0.03%)</title><rect x="12.8450%" y="725" width="0.0265%" height="15" fill="rgb(208,129,28)" fg:x="1452" fg:w="3"/><text x="13.0950%" y="735.50"></text></g><g><title>revm_interpreter::instructions::system::calldataload (5 samples, 0.04%)</title><rect x="12.8362%" y="869" width="0.0442%" height="15" fill="rgb(229,78,22)" fg:x="1451" fg:w="5"/><text x="13.0862%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::push_b256 (4 samples, 0.04%)</title><rect x="12.8450%" y="853" width="0.0354%" height="15" fill="rgb(228,187,13)" fg:x="1452" fg:w="4"/><text x="13.0950%" y="863.50"></text></g><g><title>revm_interpreter::instructions::system::caller (3 samples, 0.03%)</title><rect x="12.8804%" y="869" width="0.0265%" height="15" fill="rgb(240,119,24)" fg:x="1456" fg:w="3"/><text x="13.1304%" y="879.50"></text></g><g><title>revm_interpreter::instructions::system::codecopy (3 samples, 0.03%)</title><rect x="12.9158%" y="869" width="0.0265%" height="15" fill="rgb(209,194,42)" fg:x="1460" fg:w="3"/><text x="13.1658%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="12.9777%" y="821" width="0.0265%" height="15" fill="rgb(247,200,46)" fg:x="1467" fg:w="3"/><text x="13.2277%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="13.0042%" y="773" width="0.0177%" height="15" fill="rgb(218,76,16)" fg:x="1470" fg:w="2"/><text x="13.2542%" y="783.50"></text></g><g><title>tiny_keccak::Buffer::setout (4 samples, 0.04%)</title><rect x="13.0308%" y="741" width="0.0354%" height="15" fill="rgb(225,21,48)" fg:x="1473" fg:w="4"/><text x="13.2808%" y="751.50"></text></g><g><title>tiny_keccak::Buffer::execute (4 samples, 0.04%)</title><rect x="13.0308%" y="725" width="0.0354%" height="15" fill="rgb(239,223,50)" fg:x="1473" fg:w="4"/><text x="13.2808%" y="735.50"></text></g><g><title>tiny_keccak::Buffer::setout::_{{closure}} (4 samples, 0.04%)</title><rect x="13.0308%" y="709" width="0.0354%" height="15" fill="rgb(244,45,21)" fg:x="1473" fg:w="4"/><text x="13.2808%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.04%)</title><rect x="13.0308%" y="693" width="0.0354%" height="15" fill="rgb(232,33,43)" fg:x="1473" fg:w="4"/><text x="13.2808%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="13.0308%" y="677" width="0.0354%" height="15" fill="rgb(209,8,3)" fg:x="1473" fg:w="4"/><text x="13.2808%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="13.0308%" y="661" width="0.0354%" height="15" fill="rgb(214,25,53)" fg:x="1473" fg:w="4"/><text x="13.2808%" y="671.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.06%)</title><rect x="16.2863%" y="677" width="0.0619%" height="15" fill="rgb(254,186,54)" fg:x="1841" fg:w="7"/><text x="16.5363%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.06%)</title><rect x="16.2863%" y="661" width="0.0619%" height="15" fill="rgb(208,174,49)" fg:x="1841" fg:w="7"/><text x="16.5363%" y="671.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::fill_block (463 samples, 4.10%)</title><rect x="13.0662%" y="741" width="4.0959%" height="15" fill="rgb(233,191,51)" fg:x="1477" fg:w="463"/><text x="13.3162%" y="751.50">tiny..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::keccak (463 samples, 4.10%)</title><rect x="13.0662%" y="725" width="4.0959%" height="15" fill="rgb(222,134,10)" fg:x="1477" fg:w="463"/><text x="13.3162%" y="735.50">tiny..</text></g><g><title>&lt;tiny_keccak::keccakf::KeccakF as tiny_keccak::Permutation&gt;::execute (463 samples, 4.10%)</title><rect x="13.0662%" y="709" width="4.0959%" height="15" fill="rgb(230,226,20)" fg:x="1477" fg:w="463"/><text x="13.3162%" y="719.50">&lt;tin..</text></g><g><title>tiny_keccak::keccakf::keccakf (463 samples, 4.10%)</title><rect x="13.0662%" y="693" width="4.0959%" height="15" fill="rgb(251,111,25)" fg:x="1477" fg:w="463"/><text x="13.3162%" y="703.50">tiny..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (92 samples, 0.81%)</title><rect x="16.3482%" y="677" width="0.8139%" height="15" fill="rgb(224,40,46)" fg:x="1848" fg:w="92"/><text x="16.5982%" y="687.50"></text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_raw (473 samples, 4.18%)</title><rect x="13.0042%" y="821" width="4.1844%" height="15" fill="rgb(236,108,47)" fg:x="1470" fg:w="473"/><text x="13.2542%" y="831.50">alloy..</text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_array (473 samples, 4.18%)</title><rect x="13.0042%" y="805" width="4.1844%" height="15" fill="rgb(234,93,0)" fg:x="1470" fg:w="473"/><text x="13.2542%" y="815.50">alloy..</text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (473 samples, 4.18%)</title><rect x="13.0042%" y="789" width="4.1844%" height="15" fill="rgb(224,213,32)" fg:x="1470" fg:w="473"/><text x="13.2542%" y="799.50">&lt;tiny..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::finalize (471 samples, 4.17%)</title><rect x="13.0219%" y="773" width="4.1667%" height="15" fill="rgb(251,11,48)" fg:x="1472" fg:w="471"/><text x="13.2719%" y="783.50">tiny_..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::squeeze (471 samples, 4.17%)</title><rect x="13.0219%" y="757" width="4.1667%" height="15" fill="rgb(236,173,5)" fg:x="1472" fg:w="471"/><text x="13.2719%" y="767.50">tiny_..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::pad (3 samples, 0.03%)</title><rect x="17.1621%" y="741" width="0.0265%" height="15" fill="rgb(230,95,12)" fg:x="1940" fg:w="3"/><text x="17.4121%" y="751.50"></text></g><g><title>tiny_keccak::Buffer::pad (3 samples, 0.03%)</title><rect x="17.1621%" y="725" width="0.0265%" height="15" fill="rgb(232,209,1)" fg:x="1940" fg:w="3"/><text x="17.4121%" y="735.50"></text></g><g><title>tiny_keccak::Buffer::execute (3 samples, 0.03%)</title><rect x="17.1621%" y="709" width="0.0265%" height="15" fill="rgb(232,6,1)" fg:x="1940" fg:w="3"/><text x="17.4121%" y="719.50"></text></g><g><title>tiny_keccak::Buffer::pad::_{{closure}} (2 samples, 0.02%)</title><rect x="17.1709%" y="693" width="0.0177%" height="15" fill="rgb(210,224,50)" fg:x="1941" fg:w="2"/><text x="17.4209%" y="703.50"></text></g><g><title>alloy_primitives::utils::Keccak256::update (8 samples, 0.07%)</title><rect x="17.1975%" y="821" width="0.0708%" height="15" fill="rgb(228,127,35)" fg:x="1944" fg:w="8"/><text x="17.4475%" y="831.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (8 samples, 0.07%)</title><rect x="17.1975%" y="805" width="0.0708%" height="15" fill="rgb(245,102,45)" fg:x="1944" fg:w="8"/><text x="17.4475%" y="815.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::update (8 samples, 0.07%)</title><rect x="17.1975%" y="789" width="0.0708%" height="15" fill="rgb(214,1,49)" fg:x="1944" fg:w="8"/><text x="17.4475%" y="799.50"></text></g><g><title>tiny_keccak::Buffer::xorin (6 samples, 0.05%)</title><rect x="17.2151%" y="773" width="0.0531%" height="15" fill="rgb(226,163,40)" fg:x="1946" fg:w="6"/><text x="17.4651%" y="783.50"></text></g><g><title>tiny_keccak::Buffer::execute (6 samples, 0.05%)</title><rect x="17.2151%" y="757" width="0.0531%" height="15" fill="rgb(239,212,28)" fg:x="1946" fg:w="6"/><text x="17.4651%" y="767.50"></text></g><g><title>tiny_keccak::Buffer::xorin::_{{closure}} (6 samples, 0.05%)</title><rect x="17.2151%" y="741" width="0.0531%" height="15" fill="rgb(220,20,13)" fg:x="1946" fg:w="6"/><text x="17.4651%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.04%)</title><rect x="17.2240%" y="725" width="0.0442%" height="15" fill="rgb(210,164,35)" fg:x="1947" fg:w="5"/><text x="17.4740%" y="735.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.04%)</title><rect x="17.2240%" y="709" width="0.0442%" height="15" fill="rgb(248,109,41)" fg:x="1947" fg:w="5"/><text x="17.4740%" y="719.50"></text></g><g><title>alloy_primitives::utils::keccak256 (489 samples, 4.33%)</title><rect x="12.9777%" y="853" width="4.3259%" height="15" fill="rgb(238,23,50)" fg:x="1467" fg:w="489"/><text x="13.2277%" y="863.50">alloy..</text></g><g><title>alloy_primitives::utils::keccak256::keccak256 (489 samples, 4.33%)</title><rect x="12.9777%" y="837" width="4.3259%" height="15" fill="rgb(211,48,49)" fg:x="1467" fg:w="489"/><text x="13.2277%" y="847.50">alloy..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (4 samples, 0.04%)</title><rect x="17.2682%" y="821" width="0.0354%" height="15" fill="rgb(223,36,21)" fg:x="1952" fg:w="4"/><text x="17.5182%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.03%)</title><rect x="17.3213%" y="837" width="0.0265%" height="15" fill="rgb(207,123,46)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="847.50"></text></g><g><title>alloy_primitives::bits::fixed::&lt;impl core::convert::From&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt; for ruint::Uint&lt;256_usize,4_usize&gt;&gt;::from (3 samples, 0.03%)</title><rect x="17.3213%" y="821" width="0.0265%" height="15" fill="rgb(240,218,32)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="831.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_bytes (3 samples, 0.03%)</title><rect x="17.3213%" y="805" width="0.0265%" height="15" fill="rgb(252,5,43)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="815.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_slice (3 samples, 0.03%)</title><rect x="17.3213%" y="789" width="0.0265%" height="15" fill="rgb(252,84,19)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="799.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_be_slice (3 samples, 0.03%)</title><rect x="17.3213%" y="773" width="0.0265%" height="15" fill="rgb(243,152,39)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (3 samples, 0.03%)</title><rect x="17.3213%" y="757" width="0.0265%" height="15" fill="rgb(234,160,15)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (3 samples, 0.03%)</title><rect x="17.3213%" y="741" width="0.0265%" height="15" fill="rgb(237,34,20)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (3 samples, 0.03%)</title><rect x="17.3213%" y="725" width="0.0265%" height="15" fill="rgb(229,97,13)" fg:x="1958" fg:w="3"/><text x="17.5713%" y="735.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::run (1,047 samples, 9.26%)</title><rect x="8.0945%" y="917" width="9.2622%" height="15" fill="rgb(234,71,50)" fg:x="915" fg:w="1047"/><text x="8.3445%" y="927.50">revm_interpre..</text></g><g><title>revm_interpreter::interpreter::Interpreter::step (1,020 samples, 9.02%)</title><rect x="8.3333%" y="901" width="9.0234%" height="15" fill="rgb(253,155,4)" fg:x="942" fg:w="1020"/><text x="8.5833%" y="911.50">revm_interpre..</text></g><g><title>core::ops::function::Fn::call (990 samples, 8.76%)</title><rect x="8.5987%" y="885" width="8.7580%" height="15" fill="rgb(222,185,37)" fg:x="972" fg:w="990"/><text x="8.8487%" y="895.50">core::ops::f..</text></g><g><title>revm_interpreter::instructions::system::keccak256 (499 samples, 4.41%)</title><rect x="12.9423%" y="869" width="4.4144%" height="15" fill="rgb(251,177,13)" fg:x="1463" fg:w="499"/><text x="13.1923%" y="879.50">revm_..</text></g><g><title>revm_interpreter::interpreter::stack::Stack::push_b256 (4 samples, 0.04%)</title><rect x="17.3213%" y="853" width="0.0354%" height="15" fill="rgb(250,179,40)" fg:x="1958" fg:w="4"/><text x="17.5713%" y="863.50"></text></g><g><title>__folio_throttle_swaprate (5 samples, 0.04%)</title><rect x="17.5336%" y="629" width="0.0442%" height="15" fill="rgb(242,44,2)" fg:x="1982" fg:w="5"/><text x="17.7836%" y="639.50"></text></g><g><title>blk_cgroup_congested (4 samples, 0.04%)</title><rect x="17.5425%" y="613" width="0.0354%" height="15" fill="rgb(216,177,13)" fg:x="1983" fg:w="4"/><text x="17.7925%" y="623.50"></text></g><g><title>charge_memcg (4 samples, 0.04%)</title><rect x="17.5778%" y="613" width="0.0354%" height="15" fill="rgb(216,106,43)" fg:x="1987" fg:w="4"/><text x="17.8278%" y="623.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.03%)</title><rect x="17.5867%" y="597" width="0.0265%" height="15" fill="rgb(216,183,2)" fg:x="1988" fg:w="3"/><text x="17.8367%" y="607.50"></text></g><g><title>__mem_cgroup_charge (13 samples, 0.12%)</title><rect x="17.5778%" y="629" width="0.1150%" height="15" fill="rgb(249,75,3)" fg:x="1987" fg:w="13"/><text x="17.8278%" y="639.50"></text></g><g><title>get_mem_cgroup_from_mm (9 samples, 0.08%)</title><rect x="17.6132%" y="613" width="0.0796%" height="15" fill="rgb(219,67,39)" fg:x="1991" fg:w="9"/><text x="17.8632%" y="623.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="17.7017%" y="629" width="0.0177%" height="15" fill="rgb(253,228,2)" fg:x="2001" fg:w="2"/><text x="17.9517%" y="639.50"></text></g><g><title>_raw_spin_lock (8 samples, 0.07%)</title><rect x="17.7194%" y="629" width="0.0708%" height="15" fill="rgb(235,138,27)" fg:x="2003" fg:w="8"/><text x="17.9694%" y="639.50"></text></g><g><title>lru_add_fn (4 samples, 0.04%)</title><rect x="17.8079%" y="581" width="0.0354%" height="15" fill="rgb(236,97,51)" fg:x="2013" fg:w="4"/><text x="18.0579%" y="591.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="17.8255%" y="565" width="0.0177%" height="15" fill="rgb(240,80,30)" fg:x="2015" fg:w="2"/><text x="18.0755%" y="575.50"></text></g><g><title>folio_add_lru_vma (7 samples, 0.06%)</title><rect x="17.7902%" y="629" width="0.0619%" height="15" fill="rgb(230,178,19)" fg:x="2011" fg:w="7"/><text x="18.0402%" y="639.50"></text></g><g><title>folio_add_lru (7 samples, 0.06%)</title><rect x="17.7902%" y="613" width="0.0619%" height="15" fill="rgb(210,190,27)" fg:x="2011" fg:w="7"/><text x="18.0402%" y="623.50"></text></g><g><title>folio_batch_move_lru (6 samples, 0.05%)</title><rect x="17.7990%" y="597" width="0.0531%" height="15" fill="rgb(222,107,31)" fg:x="2012" fg:w="6"/><text x="18.0490%" y="607.50"></text></g><g><title>folio_add_new_anon_rmap (3 samples, 0.03%)</title><rect x="17.8521%" y="629" width="0.0265%" height="15" fill="rgb(216,127,34)" fg:x="2018" fg:w="3"/><text x="18.1021%" y="639.50"></text></g><g><title>_raw_spin_trylock (2 samples, 0.02%)</title><rect x="17.8875%" y="565" width="0.0177%" height="15" fill="rgb(234,116,52)" fg:x="2022" fg:w="2"/><text x="18.1375%" y="575.50"></text></g><g><title>clear_page_erms (3 samples, 0.03%)</title><rect x="17.9052%" y="565" width="0.0265%" height="15" fill="rgb(222,124,15)" fg:x="2024" fg:w="3"/><text x="18.1552%" y="575.50"></text></g><g><title>do_anonymous_page (51 samples, 0.45%)</title><rect x="17.5071%" y="645" width="0.4512%" height="15" fill="rgb(231,179,28)" fg:x="1979" fg:w="51"/><text x="17.7571%" y="655.50"></text></g><g><title>vma_alloc_folio (8 samples, 0.07%)</title><rect x="17.8875%" y="629" width="0.0708%" height="15" fill="rgb(226,93,45)" fg:x="2022" fg:w="8"/><text x="18.1375%" y="639.50"></text></g><g><title>__folio_alloc (8 samples, 0.07%)</title><rect x="17.8875%" y="613" width="0.0708%" height="15" fill="rgb(215,8,51)" fg:x="2022" fg:w="8"/><text x="18.1375%" y="623.50"></text></g><g><title>__alloc_pages (8 samples, 0.07%)</title><rect x="17.8875%" y="597" width="0.0708%" height="15" fill="rgb(223,106,5)" fg:x="2022" fg:w="8"/><text x="18.1375%" y="607.50"></text></g><g><title>get_page_from_freelist (8 samples, 0.07%)</title><rect x="17.8875%" y="581" width="0.0708%" height="15" fill="rgb(250,191,5)" fg:x="2022" fg:w="8"/><text x="18.1375%" y="591.50"></text></g><g><title>rmqueue (3 samples, 0.03%)</title><rect x="17.9317%" y="565" width="0.0265%" height="15" fill="rgb(242,132,44)" fg:x="2027" fg:w="3"/><text x="18.1817%" y="575.50"></text></g><g><title>__handle_mm_fault (59 samples, 0.52%)</title><rect x="17.4540%" y="677" width="0.5219%" height="15" fill="rgb(251,152,29)" fg:x="1973" fg:w="59"/><text x="17.7040%" y="687.50"></text></g><g><title>handle_pte_fault (55 samples, 0.49%)</title><rect x="17.4894%" y="661" width="0.4866%" height="15" fill="rgb(218,179,5)" fg:x="1977" fg:w="55"/><text x="17.7394%" y="671.50"></text></g><g><title>pte_offset_map_nolock (2 samples, 0.02%)</title><rect x="17.9582%" y="645" width="0.0177%" height="15" fill="rgb(227,67,19)" fg:x="2030" fg:w="2"/><text x="18.2082%" y="655.50"></text></g><g><title>handle_mm_fault (65 samples, 0.58%)</title><rect x="17.4275%" y="693" width="0.5750%" height="15" fill="rgb(233,119,31)" fg:x="1970" fg:w="65"/><text x="17.6775%" y="703.50"></text></g><g><title>do_user_addr_fault (67 samples, 0.59%)</title><rect x="17.4275%" y="709" width="0.5927%" height="15" fill="rgb(241,120,22)" fg:x="1970" fg:w="67"/><text x="17.6775%" y="719.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="18.0025%" y="693" width="0.0177%" height="15" fill="rgb(224,102,30)" fg:x="2035" fg:w="2"/><text x="18.2525%" y="703.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="18.0025%" y="677" width="0.0177%" height="15" fill="rgb(210,164,37)" fg:x="2035" fg:w="2"/><text x="18.2525%" y="687.50"></text></g><g><title>asm_exc_page_fault (69 samples, 0.61%)</title><rect x="17.4186%" y="741" width="0.6104%" height="15" fill="rgb(226,191,16)" fg:x="1969" fg:w="69"/><text x="17.6686%" y="751.50"></text></g><g><title>exc_page_fault (68 samples, 0.60%)</title><rect x="17.4275%" y="725" width="0.6016%" height="15" fill="rgb(214,40,45)" fg:x="1970" fg:w="68"/><text x="17.6775%" y="735.50"></text></g><g><title>sync_regs (9 samples, 0.08%)</title><rect x="18.0379%" y="741" width="0.0796%" height="15" fill="rgb(244,29,26)" fg:x="2039" fg:w="9"/><text x="18.2879%" y="751.50"></text></g><g><title>_int_malloc (88 samples, 0.78%)</title><rect x="17.3567%" y="757" width="0.7785%" height="15" fill="rgb(216,16,5)" fg:x="1962" fg:w="88"/><text x="17.6067%" y="767.50"></text></g><g><title>sysmalloc (2 samples, 0.02%)</title><rect x="18.1175%" y="741" width="0.0177%" height="15" fill="rgb(249,76,35)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="751.50"></text></g><g><title>__glibc_morecore (2 samples, 0.02%)</title><rect x="18.1175%" y="725" width="0.0177%" height="15" fill="rgb(207,11,44)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="735.50"></text></g><g><title>__GI___sbrk (2 samples, 0.02%)</title><rect x="18.1175%" y="709" width="0.0177%" height="15" fill="rgb(228,190,49)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="719.50"></text></g><g><title>__brk (2 samples, 0.02%)</title><rect x="18.1175%" y="693" width="0.0177%" height="15" fill="rgb(214,173,12)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="18.1175%" y="677" width="0.0177%" height="15" fill="rgb(218,26,35)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="687.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="18.1175%" y="661" width="0.0177%" height="15" fill="rgb(220,200,19)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="671.50"></text></g><g><title>__x64_sys_brk (2 samples, 0.02%)</title><rect x="18.1175%" y="645" width="0.0177%" height="15" fill="rgb(239,95,49)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="655.50"></text></g><g><title>__do_sys_brk (2 samples, 0.02%)</title><rect x="18.1175%" y="629" width="0.0177%" height="15" fill="rgb(235,85,53)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="639.50"></text></g><g><title>do_brk_flags (2 samples, 0.02%)</title><rect x="18.1175%" y="613" width="0.0177%" height="15" fill="rgb(233,133,31)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="623.50"></text></g><g><title>perf_event_mmap (2 samples, 0.02%)</title><rect x="18.1175%" y="597" width="0.0177%" height="15" fill="rgb(218,25,20)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="607.50"></text></g><g><title>perf_event_mmap_event (2 samples, 0.02%)</title><rect x="18.1175%" y="581" width="0.0177%" height="15" fill="rgb(252,210,38)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="591.50"></text></g><g><title>perf_iterate_sb.constprop.0 (2 samples, 0.02%)</title><rect x="18.1175%" y="565" width="0.0177%" height="15" fill="rgb(242,134,21)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="575.50"></text></g><g><title>perf_iterate_ctx (2 samples, 0.02%)</title><rect x="18.1175%" y="549" width="0.0177%" height="15" fill="rgb(213,28,48)" fg:x="2048" fg:w="2"/><text x="18.3675%" y="559.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::run_the_loop (1,209 samples, 10.70%)</title><rect x="7.4487%" y="933" width="10.6953%" height="15" fill="rgb(250,196,2)" fg:x="842" fg:w="1209"/><text x="7.6987%" y="943.50">revm::evm::Evm&lt;E..</text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::new (89 samples, 0.79%)</title><rect x="17.3567%" y="917" width="0.7873%" height="15" fill="rgb(227,5,17)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::with_capacity (89 samples, 0.79%)</title><rect x="17.3567%" y="901" width="0.7873%" height="15" fill="rgb(221,226,24)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (89 samples, 0.79%)</title><rect x="17.3567%" y="885" width="0.7873%" height="15" fill="rgb(211,5,48)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (89 samples, 0.79%)</title><rect x="17.3567%" y="869" width="0.7873%" height="15" fill="rgb(219,150,6)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (89 samples, 0.79%)</title><rect x="17.3567%" y="853" width="0.7873%" height="15" fill="rgb(251,46,16)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (89 samples, 0.79%)</title><rect x="17.3567%" y="837" width="0.7873%" height="15" fill="rgb(220,204,40)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.79%)</title><rect x="17.3567%" y="821" width="0.7873%" height="15" fill="rgb(211,85,2)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.79%)</title><rect x="17.3567%" y="805" width="0.7873%" height="15" fill="rgb(229,17,7)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="815.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.79%)</title><rect x="17.3567%" y="789" width="0.7873%" height="15" fill="rgb(239,72,28)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="799.50"></text></g><g><title>__GI___libc_malloc (89 samples, 0.79%)</title><rect x="17.3567%" y="773" width="0.7873%" height="15" fill="rgb(230,47,54)" fg:x="1962" fg:w="89"/><text x="17.6067%" y="783.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::start_the_loop (1,245 samples, 11.01%)</title><rect x="7.2895%" y="949" width="11.0138%" height="15" fill="rgb(214,50,8)" fg:x="824" fg:w="1245"/><text x="7.5395%" y="959.50">revm::evm::Evm&lt;E..</text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::set_instruction_table (18 samples, 0.16%)</title><rect x="18.1440%" y="933" width="0.1592%" height="15" fill="rgb(216,198,43)" fg:x="2051" fg:w="18"/><text x="18.3940%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (18 samples, 0.16%)</title><rect x="18.1440%" y="917" width="0.1592%" height="15" fill="rgb(234,20,35)" fg:x="2051" fg:w="18"/><text x="18.3940%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="18.3475%" y="885" width="0.0177%" height="15" fill="rgb(254,45,19)" fg:x="2074" fg:w="2"/><text x="18.5975%" y="895.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="18.3475%" y="869" width="0.0177%" height="15" fill="rgb(219,14,44)" fg:x="2074" fg:w="2"/><text x="18.5975%" y="879.50"></text></g><g><title>bytes::bytes::shared_clone (2 samples, 0.02%)</title><rect x="18.3475%" y="853" width="0.0177%" height="15" fill="rgb(217,220,26)" fg:x="2074" fg:w="2"/><text x="18.5975%" y="863.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (2 samples, 0.02%)</title><rect x="18.3475%" y="837" width="0.0177%" height="15" fill="rgb(213,158,28)" fg:x="2074" fg:w="2"/><text x="18.5975%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="18.3475%" y="821" width="0.0177%" height="15" fill="rgb(252,51,52)" fg:x="2074" fg:w="2"/><text x="18.5975%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="18.3475%" y="805" width="0.0177%" height="15" fill="rgb(246,89,16)" fg:x="2074" fg:w="2"/><text x="18.5975%" y="815.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallInputs as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="18.3121%" y="901" width="0.0619%" height="15" fill="rgb(216,158,49)" fg:x="2070" fg:w="7"/><text x="18.5621%" y="911.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (8 samples, 0.07%)</title><rect x="18.3121%" y="917" width="0.0708%" height="15" fill="rgb(236,107,19)" fg:x="2070" fg:w="8"/><text x="18.5621%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.08%)</title><rect x="18.3121%" y="933" width="0.0796%" height="15" fill="rgb(228,185,30)" fg:x="2070" fg:w="9"/><text x="18.5621%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (3 samples, 0.03%)</title><rect x="18.3917%" y="901" width="0.0265%" height="15" fill="rgb(246,134,8)" fg:x="2079" fg:w="3"/><text x="18.6417%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::inner_models::CallInputs&gt; (2 samples, 0.02%)</title><rect x="18.4006%" y="885" width="0.0177%" height="15" fill="rgb(214,143,50)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="18.4006%" y="869" width="0.0177%" height="15" fill="rgb(228,75,8)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="18.4006%" y="853" width="0.0177%" height="15" fill="rgb(207,175,4)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="863.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="18.4006%" y="837" width="0.0177%" height="15" fill="rgb(205,108,24)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="847.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.02%)</title><rect x="18.4006%" y="821" width="0.0177%" height="15" fill="rgb(244,120,49)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="831.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="18.4006%" y="805" width="0.0177%" height="15" fill="rgb(223,47,38)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="815.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.02%)</title><rect x="18.4006%" y="789" width="0.0177%" height="15" fill="rgb(229,179,11)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="799.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.02%)</title><rect x="18.4006%" y="773" width="0.0177%" height="15" fill="rgb(231,122,1)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="18.4006%" y="757" width="0.0177%" height="15" fill="rgb(245,119,9)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="18.4006%" y="741" width="0.0177%" height="15" fill="rgb(241,163,25)" fg:x="2080" fg:w="2"/><text x="18.6506%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="18.4713%" y="885" width="0.0265%" height="15" fill="rgb(217,214,3)" fg:x="2088" fg:w="3"/><text x="18.7213%" y="895.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="18.4802%" y="869" width="0.0177%" height="15" fill="rgb(240,86,28)" fg:x="2089" fg:w="2"/><text x="18.7302%" y="879.50"></text></g><g><title>bytes::bytes::shared_clone (2 samples, 0.02%)</title><rect x="18.4802%" y="853" width="0.0177%" height="15" fill="rgb(215,47,9)" fg:x="2089" fg:w="2"/><text x="18.7302%" y="863.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (2 samples, 0.02%)</title><rect x="18.4802%" y="837" width="0.0177%" height="15" fill="rgb(252,25,45)" fg:x="2089" fg:w="2"/><text x="18.7302%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="18.4802%" y="821" width="0.0177%" height="15" fill="rgb(251,164,9)" fg:x="2089" fg:w="2"/><text x="18.7302%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="18.4802%" y="805" width="0.0177%" height="15" fill="rgb(233,194,0)" fg:x="2089" fg:w="2"/><text x="18.7302%" y="815.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="18.4979%" y="885" width="0.0177%" height="15" fill="rgb(249,111,24)" fg:x="2091" fg:w="2"/><text x="18.7479%" y="895.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="18.4979%" y="869" width="0.0177%" height="15" fill="rgb(250,223,3)" fg:x="2091" fg:w="2"/><text x="18.7479%" y="879.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="18.5244%" y="693" width="0.0265%" height="15" fill="rgb(236,178,37)" fg:x="2094" fg:w="3"/><text x="18.7744%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="18.5244%" y="677" width="0.0265%" height="15" fill="rgb(241,158,50)" fg:x="2094" fg:w="3"/><text x="18.7744%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="18.5244%" y="661" width="0.0265%" height="15" fill="rgb(213,121,41)" fg:x="2094" fg:w="3"/><text x="18.7744%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="18.5244%" y="645" width="0.0265%" height="15" fill="rgb(240,92,3)" fg:x="2094" fg:w="3"/><text x="18.7744%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="18.5244%" y="629" width="0.0265%" height="15" fill="rgb(205,123,3)" fg:x="2094" fg:w="3"/><text x="18.7744%" y="639.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::call_precompile (6 samples, 0.05%)</title><rect x="18.5156%" y="885" width="0.0531%" height="15" fill="rgb(205,97,47)" fg:x="2093" fg:w="6"/><text x="18.7656%" y="895.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::call (6 samples, 0.05%)</title><rect x="18.5156%" y="869" width="0.0531%" height="15" fill="rgb(247,152,14)" fg:x="2093" fg:w="6"/><text x="18.7656%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (6 samples, 0.05%)</title><rect x="18.5156%" y="853" width="0.0531%" height="15" fill="rgb(248,195,53)" fg:x="2093" fg:w="6"/><text x="18.7656%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 0.05%)</title><rect x="18.5156%" y="837" width="0.0531%" height="15" fill="rgb(226,201,16)" fg:x="2093" fg:w="6"/><text x="18.7656%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6 samples, 0.05%)</title><rect x="18.5156%" y="821" width="0.0531%" height="15" fill="rgb(205,98,0)" fg:x="2093" fg:w="6"/><text x="18.7656%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="18.5156%" y="805" width="0.0531%" height="15" fill="rgb(214,191,48)" fg:x="2093" fg:w="6"/><text x="18.7656%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="18.5156%" y="789" width="0.0531%" height="15" fill="rgb(237,112,39)" fg:x="2093" fg:w="6"/><text x="18.7656%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="18.5244%" y="773" width="0.0442%" height="15" fill="rgb(247,203,27)" fg:x="2094" fg:w="5"/><text x="18.7744%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="18.5244%" y="757" width="0.0442%" height="15" fill="rgb(235,124,28)" fg:x="2094" fg:w="5"/><text x="18.7744%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="18.5244%" y="741" width="0.0442%" height="15" fill="rgb(208,207,46)" fg:x="2094" fg:w="5"/><text x="18.7744%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.04%)</title><rect x="18.5244%" y="725" width="0.0442%" height="15" fill="rgb(234,176,4)" fg:x="2094" fg:w="5"/><text x="18.7744%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.04%)</title><rect x="18.5244%" y="709" width="0.0442%" height="15" fill="rgb(230,133,28)" fg:x="2094" fg:w="5"/><text x="18.7744%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="18.5510%" y="693" width="0.0177%" height="15" fill="rgb(211,137,40)" fg:x="2097" fg:w="2"/><text x="18.8010%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="18.5510%" y="677" width="0.0177%" height="15" fill="rgb(254,35,13)" fg:x="2097" fg:w="2"/><text x="18.8010%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="18.5510%" y="661" width="0.0177%" height="15" fill="rgb(225,49,51)" fg:x="2097" fg:w="2"/><text x="18.8010%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="18.5510%" y="645" width="0.0177%" height="15" fill="rgb(251,10,15)" fg:x="2097" fg:w="2"/><text x="18.8010%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="18.5686%" y="789" width="0.0177%" height="15" fill="rgb(228,207,15)" fg:x="2099" fg:w="2"/><text x="18.8186%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="18.5686%" y="773" width="0.0177%" height="15" fill="rgb(241,99,19)" fg:x="2099" fg:w="2"/><text x="18.8186%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="18.5686%" y="757" width="0.0177%" height="15" fill="rgb(207,104,49)" fg:x="2099" fg:w="2"/><text x="18.8186%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="18.5686%" y="821" width="0.0354%" height="15" fill="rgb(234,99,18)" fg:x="2099" fg:w="4"/><text x="18.8186%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="18.5686%" y="805" width="0.0354%" height="15" fill="rgb(213,191,49)" fg:x="2099" fg:w="4"/><text x="18.8186%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="18.5863%" y="789" width="0.0177%" height="15" fill="rgb(210,226,19)" fg:x="2101" fg:w="2"/><text x="18.8363%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="18.5863%" y="773" width="0.0177%" height="15" fill="rgb(229,97,18)" fg:x="2101" fg:w="2"/><text x="18.8363%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="18.5863%" y="757" width="0.0177%" height="15" fill="rgb(211,167,15)" fg:x="2101" fg:w="2"/><text x="18.8363%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="18.5863%" y="741" width="0.0177%" height="15" fill="rgb(210,169,34)" fg:x="2101" fg:w="2"/><text x="18.8363%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="18.5863%" y="725" width="0.0177%" height="15" fill="rgb(241,121,31)" fg:x="2101" fg:w="2"/><text x="18.8363%" y="735.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_account (5 samples, 0.04%)</title><rect x="18.5686%" y="885" width="0.0442%" height="15" fill="rgb(232,40,11)" fg:x="2099" fg:w="5"/><text x="18.8186%" y="895.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.04%)</title><rect x="18.5686%" y="869" width="0.0442%" height="15" fill="rgb(205,86,26)" fg:x="2099" fg:w="5"/><text x="18.8186%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.04%)</title><rect x="18.5686%" y="853" width="0.0442%" height="15" fill="rgb(231,126,28)" fg:x="2099" fg:w="5"/><text x="18.8186%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.04%)</title><rect x="18.5686%" y="837" width="0.0442%" height="15" fill="rgb(219,221,18)" fg:x="2099" fg:w="5"/><text x="18.8186%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="18.6217%" y="853" width="0.0354%" height="15" fill="rgb(211,40,0)" fg:x="2105" fg:w="4"/><text x="18.8717%" y="863.50"></text></g><g><title>revm::frame::FrameOrResult::new_call_frame (7 samples, 0.06%)</title><rect x="18.6129%" y="885" width="0.0619%" height="15" fill="rgb(239,85,43)" fg:x="2104" fg:w="7"/><text x="18.8629%" y="895.50"></text></g><g><title>revm::frame::Frame::new_call (6 samples, 0.05%)</title><rect x="18.6217%" y="869" width="0.0531%" height="15" fill="rgb(231,55,21)" fg:x="2105" fg:w="6"/><text x="18.8717%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="18.6571%" y="853" width="0.0177%" height="15" fill="rgb(225,184,43)" fg:x="2109" fg:w="2"/><text x="18.9071%" y="863.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.04%)</title><rect x="18.6837%" y="821" width="0.0354%" height="15" fill="rgb(251,158,41)" fg:x="2112" fg:w="4"/><text x="18.9337%" y="831.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="18.7544%" y="725" width="0.0265%" height="15" fill="rgb(234,159,37)" fg:x="2120" fg:w="3"/><text x="19.0044%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.08%)</title><rect x="18.7279%" y="821" width="0.0796%" height="15" fill="rgb(216,204,22)" fg:x="2117" fg:w="9"/><text x="18.9779%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.07%)</title><rect x="18.7367%" y="805" width="0.0708%" height="15" fill="rgb(214,17,3)" fg:x="2118" fg:w="8"/><text x="18.9867%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.07%)</title><rect x="18.7367%" y="789" width="0.0708%" height="15" fill="rgb(212,111,17)" fg:x="2118" fg:w="8"/><text x="18.9867%" y="799.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.07%)</title><rect x="18.7367%" y="773" width="0.0708%" height="15" fill="rgb(221,157,24)" fg:x="2118" fg:w="8"/><text x="18.9867%" y="783.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.07%)</title><rect x="18.7367%" y="757" width="0.0708%" height="15" fill="rgb(252,16,13)" fg:x="2118" fg:w="8"/><text x="18.9867%" y="767.50"></text></g><g><title>_int_realloc (6 samples, 0.05%)</title><rect x="18.7544%" y="741" width="0.0531%" height="15" fill="rgb(221,62,2)" fg:x="2120" fg:w="6"/><text x="19.0044%" y="751.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="18.7810%" y="725" width="0.0265%" height="15" fill="rgb(247,87,22)" fg:x="2123" fg:w="3"/><text x="19.0310%" y="735.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (16 samples, 0.14%)</title><rect x="18.6748%" y="885" width="0.1415%" height="15" fill="rgb(215,73,9)" fg:x="2111" fg:w="16"/><text x="18.9248%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.13%)</title><rect x="18.6837%" y="869" width="0.1327%" height="15" fill="rgb(207,175,33)" fg:x="2112" fg:w="15"/><text x="18.9337%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.13%)</title><rect x="18.6837%" y="853" width="0.1327%" height="15" fill="rgb(243,129,54)" fg:x="2112" fg:w="15"/><text x="18.9337%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.13%)</title><rect x="18.6837%" y="837" width="0.1327%" height="15" fill="rgb(227,119,45)" fg:x="2112" fg:w="15"/><text x="18.9337%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="18.8163%" y="869" width="0.0177%" height="15" fill="rgb(205,109,36)" fg:x="2127" fg:w="2"/><text x="19.0663%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (7 samples, 0.06%)</title><rect x="18.8606%" y="805" width="0.0619%" height="15" fill="rgb(205,6,39)" fg:x="2132" fg:w="7"/><text x="19.1106%" y="815.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref::_{{closure}} (7 samples, 0.06%)</title><rect x="18.8606%" y="789" width="0.0619%" height="15" fill="rgb(221,32,16)" fg:x="2132" fg:w="7"/><text x="19.1106%" y="799.50"></text></g><g><title>revm::db::in_memory_db::DbAccount::info (7 samples, 0.06%)</title><rect x="18.8606%" y="773" width="0.0619%" height="15" fill="rgb(228,144,50)" fg:x="2132" fg:w="7"/><text x="19.1106%" y="783.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="18.8606%" y="757" width="0.0619%" height="15" fill="rgb(229,201,53)" fg:x="2132" fg:w="7"/><text x="19.1106%" y="767.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="18.8694%" y="741" width="0.0531%" height="15" fill="rgb(249,153,27)" fg:x="2133" fg:w="6"/><text x="19.1194%" y="751.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="18.8694%" y="725" width="0.0531%" height="15" fill="rgb(227,106,25)" fg:x="2133" fg:w="6"/><text x="19.1194%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="18.8783%" y="709" width="0.0442%" height="15" fill="rgb(230,65,29)" fg:x="2134" fg:w="5"/><text x="19.1283%" y="719.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="18.8783%" y="693" width="0.0442%" height="15" fill="rgb(221,57,46)" fg:x="2134" fg:w="5"/><text x="19.1283%" y="703.50"></text></g><g><title>bytes::bytes::shared_clone (5 samples, 0.04%)</title><rect x="18.8783%" y="677" width="0.0442%" height="15" fill="rgb(229,161,17)" fg:x="2134" fg:w="5"/><text x="19.1283%" y="687.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (5 samples, 0.04%)</title><rect x="18.8783%" y="661" width="0.0442%" height="15" fill="rgb(222,213,11)" fg:x="2134" fg:w="5"/><text x="19.1283%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.04%)</title><rect x="18.8871%" y="645" width="0.0354%" height="15" fill="rgb(235,35,13)" fg:x="2135" fg:w="4"/><text x="19.1371%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.04%)</title><rect x="18.8871%" y="629" width="0.0354%" height="15" fill="rgb(233,158,34)" fg:x="2135" fg:w="4"/><text x="19.1371%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="18.9490%" y="613" width="0.0354%" height="15" fill="rgb(215,151,48)" fg:x="2142" fg:w="4"/><text x="19.1990%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="18.9490%" y="597" width="0.0354%" height="15" fill="rgb(229,84,14)" fg:x="2142" fg:w="4"/><text x="19.1990%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="18.9490%" y="581" width="0.0354%" height="15" fill="rgb(229,68,14)" fg:x="2142" fg:w="4"/><text x="19.1990%" y="591.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.05%)</title><rect x="18.9402%" y="645" width="0.0531%" height="15" fill="rgb(243,106,26)" fg:x="2141" fg:w="6"/><text x="19.1902%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.05%)</title><rect x="18.9402%" y="629" width="0.0531%" height="15" fill="rgb(206,45,38)" fg:x="2141" fg:w="6"/><text x="19.1902%" y="639.50"></text></g><g><title>&lt;revm_primitives::db::WrapDatabaseRef&lt;T&gt; as revm_primitives::db::Database&gt;::basic (18 samples, 0.16%)</title><rect x="18.8517%" y="853" width="0.1592%" height="15" fill="rgb(226,6,15)" fg:x="2131" fg:w="18"/><text x="19.1017%" y="863.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for &amp;T&gt;::basic_ref (18 samples, 0.16%)</title><rect x="18.8517%" y="837" width="0.1592%" height="15" fill="rgb(232,22,54)" fg:x="2131" fg:w="18"/><text x="19.1017%" y="847.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (18 samples, 0.16%)</title><rect x="18.8517%" y="821" width="0.1592%" height="15" fill="rgb(229,222,32)" fg:x="2131" fg:w="18"/><text x="19.1017%" y="831.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.09%)</title><rect x="18.9225%" y="805" width="0.0885%" height="15" fill="rgb(228,62,29)" fg:x="2139" fg:w="10"/><text x="19.1725%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.09%)</title><rect x="18.9225%" y="789" width="0.0885%" height="15" fill="rgb(251,103,34)" fg:x="2139" fg:w="10"/><text x="19.1725%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.09%)</title><rect x="18.9225%" y="773" width="0.0885%" height="15" fill="rgb(233,12,30)" fg:x="2139" fg:w="10"/><text x="19.1725%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.08%)</title><rect x="18.9314%" y="757" width="0.0796%" height="15" fill="rgb(238,52,0)" fg:x="2140" fg:w="9"/><text x="19.1814%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.08%)</title><rect x="18.9314%" y="741" width="0.0796%" height="15" fill="rgb(223,98,5)" fg:x="2140" fg:w="9"/><text x="19.1814%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.07%)</title><rect x="18.9402%" y="725" width="0.0708%" height="15" fill="rgb(228,75,37)" fg:x="2141" fg:w="8"/><text x="19.1902%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.07%)</title><rect x="18.9402%" y="709" width="0.0708%" height="15" fill="rgb(205,115,49)" fg:x="2141" fg:w="8"/><text x="19.1902%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.07%)</title><rect x="18.9402%" y="693" width="0.0708%" height="15" fill="rgb(250,154,43)" fg:x="2141" fg:w="8"/><text x="19.1902%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.07%)</title><rect x="18.9402%" y="677" width="0.0708%" height="15" fill="rgb(226,43,29)" fg:x="2141" fg:w="8"/><text x="19.1902%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.07%)</title><rect x="18.9402%" y="661" width="0.0708%" height="15" fill="rgb(249,228,39)" fg:x="2141" fg:w="8"/><text x="19.1902%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="18.9933%" y="645" width="0.0177%" height="15" fill="rgb(216,79,43)" fg:x="2147" fg:w="2"/><text x="19.2433%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="18.9933%" y="629" width="0.0177%" height="15" fill="rgb(228,95,12)" fg:x="2147" fg:w="2"/><text x="19.2433%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="18.9933%" y="613" width="0.0177%" height="15" fill="rgb(249,221,15)" fg:x="2147" fg:w="2"/><text x="19.2433%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="18.9933%" y="597" width="0.0177%" height="15" fill="rgb(233,34,13)" fg:x="2147" fg:w="2"/><text x="19.2433%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="18.9933%" y="581" width="0.0177%" height="15" fill="rgb(214,103,39)" fg:x="2147" fg:w="2"/><text x="19.2433%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="19.0198%" y="789" width="0.0177%" height="15" fill="rgb(251,126,39)" fg:x="2150" fg:w="2"/><text x="19.2698%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="19.0198%" y="773" width="0.0177%" height="15" fill="rgb(214,216,36)" fg:x="2150" fg:w="2"/><text x="19.2698%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="19.0198%" y="757" width="0.0177%" height="15" fill="rgb(220,221,8)" fg:x="2150" fg:w="2"/><text x="19.2698%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="19.0198%" y="821" width="0.0354%" height="15" fill="rgb(240,216,3)" fg:x="2150" fg:w="4"/><text x="19.2698%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="19.0198%" y="805" width="0.0354%" height="15" fill="rgb(232,218,17)" fg:x="2150" fg:w="4"/><text x="19.2698%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="19.0375%" y="789" width="0.0177%" height="15" fill="rgb(229,163,45)" fg:x="2152" fg:w="2"/><text x="19.2875%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="19.0375%" y="773" width="0.0177%" height="15" fill="rgb(231,110,42)" fg:x="2152" fg:w="2"/><text x="19.2875%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="19.0375%" y="757" width="0.0177%" height="15" fill="rgb(208,170,48)" fg:x="2152" fg:w="2"/><text x="19.2875%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="19.0375%" y="741" width="0.0177%" height="15" fill="rgb(239,116,25)" fg:x="2152" fg:w="2"/><text x="19.2875%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="19.0375%" y="725" width="0.0177%" height="15" fill="rgb(219,200,50)" fg:x="2152" fg:w="2"/><text x="19.2875%" y="735.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.06%)</title><rect x="19.0110%" y="837" width="0.0619%" height="15" fill="rgb(245,200,0)" fg:x="2149" fg:w="7"/><text x="19.2610%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="19.0552%" y="821" width="0.0177%" height="15" fill="rgb(245,119,33)" fg:x="2154" fg:w="2"/><text x="19.3052%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="19.0552%" y="805" width="0.0177%" height="15" fill="rgb(231,125,12)" fg:x="2154" fg:w="2"/><text x="19.3052%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="19.0552%" y="789" width="0.0177%" height="15" fill="rgb(216,96,41)" fg:x="2154" fg:w="2"/><text x="19.3052%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="19.0552%" y="773" width="0.0177%" height="15" fill="rgb(248,43,45)" fg:x="2154" fg:w="2"/><text x="19.3052%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.07%)</title><rect x="19.0110%" y="853" width="0.0708%" height="15" fill="rgb(217,222,7)" fg:x="2149" fg:w="8"/><text x="19.2610%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="19.0817%" y="821" width="0.0177%" height="15" fill="rgb(233,28,6)" fg:x="2157" fg:w="2"/><text x="19.3317%" y="831.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (4 samples, 0.04%)</title><rect x="19.0817%" y="853" width="0.0354%" height="15" fill="rgb(231,218,15)" fg:x="2157" fg:w="4"/><text x="19.3317%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.04%)</title><rect x="19.0817%" y="837" width="0.0354%" height="15" fill="rgb(226,171,48)" fg:x="2157" fg:w="4"/><text x="19.3317%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="19.0994%" y="821" width="0.0177%" height="15" fill="rgb(235,201,9)" fg:x="2159" fg:w="2"/><text x="19.3494%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="19.0994%" y="805" width="0.0177%" height="15" fill="rgb(217,80,15)" fg:x="2159" fg:w="2"/><text x="19.3494%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="19.0994%" y="789" width="0.0177%" height="15" fill="rgb(219,152,8)" fg:x="2159" fg:w="2"/><text x="19.3494%" y="799.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="19.0994%" y="773" width="0.0177%" height="15" fill="rgb(243,107,38)" fg:x="2159" fg:w="2"/><text x="19.3494%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="19.0994%" y="757" width="0.0177%" height="15" fill="rgb(231,17,5)" fg:x="2159" fg:w="2"/><text x="19.3494%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="19.1171%" y="757" width="0.0354%" height="15" fill="rgb(209,25,54)" fg:x="2161" fg:w="4"/><text x="19.3671%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="19.1171%" y="741" width="0.0354%" height="15" fill="rgb(219,0,2)" fg:x="2161" fg:w="4"/><text x="19.3671%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="19.1171%" y="725" width="0.0354%" height="15" fill="rgb(246,9,5)" fg:x="2161" fg:w="4"/><text x="19.3671%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="19.1348%" y="709" width="0.0177%" height="15" fill="rgb(226,159,4)" fg:x="2163" fg:w="2"/><text x="19.3848%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="19.1525%" y="677" width="0.0265%" height="15" fill="rgb(219,175,34)" fg:x="2165" fg:w="3"/><text x="19.4025%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="19.1525%" y="661" width="0.0265%" height="15" fill="rgb(236,10,46)" fg:x="2165" fg:w="3"/><text x="19.4025%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.1525%" y="645" width="0.0265%" height="15" fill="rgb(240,211,16)" fg:x="2165" fg:w="3"/><text x="19.4025%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.1525%" y="629" width="0.0265%" height="15" fill="rgb(205,3,43)" fg:x="2165" fg:w="3"/><text x="19.4025%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.1525%" y="613" width="0.0265%" height="15" fill="rgb(245,7,22)" fg:x="2165" fg:w="3"/><text x="19.4025%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="19.1791%" y="597" width="0.0177%" height="15" fill="rgb(239,132,32)" fg:x="2168" fg:w="2"/><text x="19.4291%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.09%)</title><rect x="19.1171%" y="789" width="0.0885%" height="15" fill="rgb(228,202,34)" fg:x="2161" fg:w="10"/><text x="19.3671%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.09%)</title><rect x="19.1171%" y="773" width="0.0885%" height="15" fill="rgb(254,200,22)" fg:x="2161" fg:w="10"/><text x="19.3671%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.05%)</title><rect x="19.1525%" y="757" width="0.0531%" height="15" fill="rgb(219,10,39)" fg:x="2165" fg:w="6"/><text x="19.4025%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="19.1525%" y="741" width="0.0531%" height="15" fill="rgb(226,210,39)" fg:x="2165" fg:w="6"/><text x="19.4025%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="19.1525%" y="725" width="0.0531%" height="15" fill="rgb(208,219,16)" fg:x="2165" fg:w="6"/><text x="19.4025%" y="735.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.05%)</title><rect x="19.1525%" y="709" width="0.0531%" height="15" fill="rgb(216,158,51)" fg:x="2165" fg:w="6"/><text x="19.4025%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.05%)</title><rect x="19.1525%" y="693" width="0.0531%" height="15" fill="rgb(233,14,44)" fg:x="2165" fg:w="6"/><text x="19.4025%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.03%)</title><rect x="19.1791%" y="677" width="0.0265%" height="15" fill="rgb(237,97,39)" fg:x="2168" fg:w="3"/><text x="19.4291%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.1791%" y="661" width="0.0265%" height="15" fill="rgb(218,198,43)" fg:x="2168" fg:w="3"/><text x="19.4291%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.1791%" y="645" width="0.0265%" height="15" fill="rgb(231,104,20)" fg:x="2168" fg:w="3"/><text x="19.4291%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.1791%" y="629" width="0.0265%" height="15" fill="rgb(254,36,13)" fg:x="2168" fg:w="3"/><text x="19.4291%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="19.1791%" y="613" width="0.0265%" height="15" fill="rgb(248,14,50)" fg:x="2168" fg:w="3"/><text x="19.4291%" y="623.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (47 samples, 0.42%)</title><rect x="18.8163%" y="885" width="0.4158%" height="15" fill="rgb(217,107,29)" fg:x="2127" fg:w="47"/><text x="19.0663%" y="895.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (44 samples, 0.39%)</title><rect x="18.8429%" y="869" width="0.3892%" height="15" fill="rgb(251,169,33)" fg:x="2130" fg:w="44"/><text x="19.0929%" y="879.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (13 samples, 0.12%)</title><rect x="19.1171%" y="853" width="0.1150%" height="15" fill="rgb(217,108,32)" fg:x="2161" fg:w="13"/><text x="19.3671%" y="863.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (13 samples, 0.12%)</title><rect x="19.1171%" y="837" width="0.1150%" height="15" fill="rgb(219,66,42)" fg:x="2161" fg:w="13"/><text x="19.3671%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (13 samples, 0.12%)</title><rect x="19.1171%" y="821" width="0.1150%" height="15" fill="rgb(206,180,7)" fg:x="2161" fg:w="13"/><text x="19.3671%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 0.12%)</title><rect x="19.1171%" y="805" width="0.1150%" height="15" fill="rgb(208,226,31)" fg:x="2161" fg:w="13"/><text x="19.3671%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.03%)</title><rect x="19.2056%" y="789" width="0.0265%" height="15" fill="rgb(218,26,49)" fg:x="2171" fg:w="3"/><text x="19.4556%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="19.2056%" y="773" width="0.0265%" height="15" fill="rgb(233,197,48)" fg:x="2171" fg:w="3"/><text x="19.4556%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.03%)</title><rect x="19.2056%" y="757" width="0.0265%" height="15" fill="rgb(252,181,51)" fg:x="2171" fg:w="3"/><text x="19.4556%" y="767.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="19.2144%" y="741" width="0.0177%" height="15" fill="rgb(253,90,19)" fg:x="2172" fg:w="2"/><text x="19.4644%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="19.2321%" y="805" width="0.0177%" height="15" fill="rgb(215,171,30)" fg:x="2174" fg:w="2"/><text x="19.4821%" y="815.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (3 samples, 0.03%)</title><rect x="19.2321%" y="869" width="0.0265%" height="15" fill="rgb(214,222,9)" fg:x="2174" fg:w="3"/><text x="19.4821%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.03%)</title><rect x="19.2321%" y="853" width="0.0265%" height="15" fill="rgb(223,3,22)" fg:x="2174" fg:w="3"/><text x="19.4821%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="19.2321%" y="837" width="0.0265%" height="15" fill="rgb(225,196,46)" fg:x="2174" fg:w="3"/><text x="19.4821%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="19.2321%" y="821" width="0.0265%" height="15" fill="rgb(209,110,37)" fg:x="2174" fg:w="3"/><text x="19.4821%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="19.2587%" y="789" width="0.0177%" height="15" fill="rgb(249,89,12)" fg:x="2177" fg:w="2"/><text x="19.5087%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="19.2587%" y="773" width="0.0177%" height="15" fill="rgb(226,27,33)" fg:x="2177" fg:w="2"/><text x="19.5087%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="19.2587%" y="757" width="0.0177%" height="15" fill="rgb(213,82,22)" fg:x="2177" fg:w="2"/><text x="19.5087%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="19.2587%" y="821" width="0.0354%" height="15" fill="rgb(248,140,0)" fg:x="2177" fg:w="4"/><text x="19.5087%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="19.2587%" y="805" width="0.0354%" height="15" fill="rgb(228,106,3)" fg:x="2177" fg:w="4"/><text x="19.5087%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="19.2764%" y="789" width="0.0177%" height="15" fill="rgb(209,23,37)" fg:x="2179" fg:w="2"/><text x="19.5264%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="19.2764%" y="773" width="0.0177%" height="15" fill="rgb(241,93,50)" fg:x="2179" fg:w="2"/><text x="19.5264%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="19.2764%" y="757" width="0.0177%" height="15" fill="rgb(253,46,43)" fg:x="2179" fg:w="2"/><text x="19.5264%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="19.2764%" y="741" width="0.0177%" height="15" fill="rgb(226,206,43)" fg:x="2179" fg:w="2"/><text x="19.5264%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="19.2764%" y="725" width="0.0177%" height="15" fill="rgb(217,54,7)" fg:x="2179" fg:w="2"/><text x="19.5264%" y="735.50"></text></g><g><title>revm::journaled_state::JournaledState::touch (8 samples, 0.07%)</title><rect x="19.2321%" y="885" width="0.0708%" height="15" fill="rgb(223,5,52)" fg:x="2174" fg:w="8"/><text x="19.4821%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 0.04%)</title><rect x="19.2587%" y="869" width="0.0442%" height="15" fill="rgb(206,52,46)" fg:x="2177" fg:w="5"/><text x="19.5087%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 0.04%)</title><rect x="19.2587%" y="853" width="0.0442%" height="15" fill="rgb(253,136,11)" fg:x="2177" fg:w="5"/><text x="19.5087%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 0.04%)</title><rect x="19.2587%" y="837" width="0.0442%" height="15" fill="rgb(208,106,33)" fg:x="2177" fg:w="5"/><text x="19.5087%" y="847.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="19.3206%" y="709" width="0.0265%" height="15" fill="rgb(206,54,4)" fg:x="2184" fg:w="3"/><text x="19.5706%" y="719.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="19.3206%" y="693" width="0.0265%" height="15" fill="rgb(213,3,15)" fg:x="2184" fg:w="3"/><text x="19.5706%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.3206%" y="677" width="0.0265%" height="15" fill="rgb(252,211,39)" fg:x="2184" fg:w="3"/><text x="19.5706%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.3206%" y="661" width="0.0265%" height="15" fill="rgb(223,6,36)" fg:x="2184" fg:w="3"/><text x="19.5706%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.3206%" y="645" width="0.0265%" height="15" fill="rgb(252,169,45)" fg:x="2184" fg:w="3"/><text x="19.5706%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="19.3471%" y="645" width="0.0177%" height="15" fill="rgb(212,48,26)" fg:x="2187" fg:w="2"/><text x="19.5971%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="19.3471%" y="629" width="0.0177%" height="15" fill="rgb(251,102,48)" fg:x="2187" fg:w="2"/><text x="19.5971%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.06%)</title><rect x="19.3117%" y="821" width="0.0619%" height="15" fill="rgb(243,208,16)" fg:x="2183" fg:w="7"/><text x="19.5617%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.06%)</title><rect x="19.3117%" y="805" width="0.0619%" height="15" fill="rgb(219,96,24)" fg:x="2183" fg:w="7"/><text x="19.5617%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.05%)</title><rect x="19.3206%" y="789" width="0.0531%" height="15" fill="rgb(219,33,29)" fg:x="2184" fg:w="6"/><text x="19.5706%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="19.3206%" y="773" width="0.0531%" height="15" fill="rgb(223,176,5)" fg:x="2184" fg:w="6"/><text x="19.5706%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="19.3206%" y="757" width="0.0531%" height="15" fill="rgb(228,140,14)" fg:x="2184" fg:w="6"/><text x="19.5706%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.05%)</title><rect x="19.3206%" y="741" width="0.0531%" height="15" fill="rgb(217,179,31)" fg:x="2184" fg:w="6"/><text x="19.5706%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.05%)</title><rect x="19.3206%" y="725" width="0.0531%" height="15" fill="rgb(230,9,30)" fg:x="2184" fg:w="6"/><text x="19.5706%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.03%)</title><rect x="19.3471%" y="709" width="0.0265%" height="15" fill="rgb(230,136,20)" fg:x="2187" fg:w="3"/><text x="19.5971%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.3471%" y="693" width="0.0265%" height="15" fill="rgb(215,210,22)" fg:x="2187" fg:w="3"/><text x="19.5971%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.3471%" y="677" width="0.0265%" height="15" fill="rgb(218,43,5)" fg:x="2187" fg:w="3"/><text x="19.5971%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="19.3471%" y="661" width="0.0265%" height="15" fill="rgb(216,11,5)" fg:x="2187" fg:w="3"/><text x="19.5971%" y="671.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (8 samples, 0.07%)</title><rect x="19.3117%" y="869" width="0.0708%" height="15" fill="rgb(209,82,29)" fg:x="2183" fg:w="8"/><text x="19.5617%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.07%)</title><rect x="19.3117%" y="853" width="0.0708%" height="15" fill="rgb(244,115,12)" fg:x="2183" fg:w="8"/><text x="19.5617%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.07%)</title><rect x="19.3117%" y="837" width="0.0708%" height="15" fill="rgb(222,82,18)" fg:x="2183" fg:w="8"/><text x="19.5617%" y="847.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_sub (2 samples, 0.02%)</title><rect x="19.3914%" y="869" width="0.0177%" height="15" fill="rgb(249,227,8)" fg:x="2192" fg:w="2"/><text x="19.6414%" y="879.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (2 samples, 0.02%)</title><rect x="19.3914%" y="853" width="0.0177%" height="15" fill="rgb(253,141,45)" fg:x="2192" fg:w="2"/><text x="19.6414%" y="863.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="19.4179%" y="709" width="0.0177%" height="15" fill="rgb(234,184,4)" fg:x="2195" fg:w="2"/><text x="19.6679%" y="719.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="19.4179%" y="693" width="0.0177%" height="15" fill="rgb(218,194,23)" fg:x="2195" fg:w="2"/><text x="19.6679%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="19.4091%" y="821" width="0.0442%" height="15" fill="rgb(235,66,41)" fg:x="2194" fg:w="5"/><text x="19.6591%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="19.4091%" y="805" width="0.0442%" height="15" fill="rgb(245,217,1)" fg:x="2194" fg:w="5"/><text x="19.6591%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="19.4179%" y="789" width="0.0354%" height="15" fill="rgb(229,91,1)" fg:x="2195" fg:w="4"/><text x="19.6679%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="19.4179%" y="773" width="0.0354%" height="15" fill="rgb(207,101,30)" fg:x="2195" fg:w="4"/><text x="19.6679%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="19.4179%" y="757" width="0.0354%" height="15" fill="rgb(223,82,49)" fg:x="2195" fg:w="4"/><text x="19.6679%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="19.4179%" y="741" width="0.0354%" height="15" fill="rgb(218,167,17)" fg:x="2195" fg:w="4"/><text x="19.6679%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="19.4179%" y="725" width="0.0354%" height="15" fill="rgb(208,103,14)" fg:x="2195" fg:w="4"/><text x="19.6679%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="19.4356%" y="709" width="0.0177%" height="15" fill="rgb(238,20,8)" fg:x="2197" fg:w="2"/><text x="19.6856%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="19.4356%" y="693" width="0.0177%" height="15" fill="rgb(218,80,54)" fg:x="2197" fg:w="2"/><text x="19.6856%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="19.4356%" y="677" width="0.0177%" height="15" fill="rgb(240,144,17)" fg:x="2197" fg:w="2"/><text x="19.6856%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="19.4356%" y="661" width="0.0177%" height="15" fill="rgb(245,27,50)" fg:x="2197" fg:w="2"/><text x="19.6856%" y="671.50"></text></g><g><title>revm::journaled_state::JournaledState::transfer (20 samples, 0.18%)</title><rect x="19.3029%" y="885" width="0.1769%" height="15" fill="rgb(251,51,7)" fg:x="2182" fg:w="20"/><text x="19.5529%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (8 samples, 0.07%)</title><rect x="19.4091%" y="869" width="0.0708%" height="15" fill="rgb(245,217,29)" fg:x="2194" fg:w="8"/><text x="19.6591%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (8 samples, 0.07%)</title><rect x="19.4091%" y="853" width="0.0708%" height="15" fill="rgb(221,176,29)" fg:x="2194" fg:w="8"/><text x="19.6591%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (8 samples, 0.07%)</title><rect x="19.4091%" y="837" width="0.0708%" height="15" fill="rgb(212,180,24)" fg:x="2194" fg:w="8"/><text x="19.6591%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.03%)</title><rect x="19.4533%" y="821" width="0.0265%" height="15" fill="rgb(254,24,2)" fg:x="2199" fg:w="3"/><text x="19.7033%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="19.4533%" y="805" width="0.0265%" height="15" fill="rgb(230,100,2)" fg:x="2199" fg:w="3"/><text x="19.7033%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.03%)</title><rect x="19.4533%" y="789" width="0.0265%" height="15" fill="rgb(219,142,25)" fg:x="2199" fg:w="3"/><text x="19.7033%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="19.4798%" y="869" width="0.0442%" height="15" fill="rgb(240,73,43)" fg:x="2202" fg:w="5"/><text x="19.7298%" y="879.50"></text></g><g><title>charge_memcg (4 samples, 0.04%)</title><rect x="19.5683%" y="581" width="0.0354%" height="15" fill="rgb(214,114,15)" fg:x="2212" fg:w="4"/><text x="19.8183%" y="591.50"></text></g><g><title>try_charge_memcg (3 samples, 0.03%)</title><rect x="19.5771%" y="565" width="0.0265%" height="15" fill="rgb(207,130,4)" fg:x="2213" fg:w="3"/><text x="19.8271%" y="575.50"></text></g><g><title>page_counter_try_charge (2 samples, 0.02%)</title><rect x="19.5860%" y="549" width="0.0177%" height="15" fill="rgb(221,25,40)" fg:x="2214" fg:w="2"/><text x="19.8360%" y="559.50"></text></g><g><title>__mem_cgroup_charge (5 samples, 0.04%)</title><rect x="19.5683%" y="597" width="0.0442%" height="15" fill="rgb(241,184,7)" fg:x="2212" fg:w="5"/><text x="19.8183%" y="607.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.03%)</title><rect x="19.6214%" y="597" width="0.0265%" height="15" fill="rgb(235,159,4)" fg:x="2218" fg:w="3"/><text x="19.8714%" y="607.50"></text></g><g><title>folio_add_lru_vma (3 samples, 0.03%)</title><rect x="19.6479%" y="597" width="0.0265%" height="15" fill="rgb(214,87,48)" fg:x="2221" fg:w="3"/><text x="19.8979%" y="607.50"></text></g><g><title>folio_add_lru (3 samples, 0.03%)</title><rect x="19.6479%" y="581" width="0.0265%" height="15" fill="rgb(246,198,24)" fg:x="2221" fg:w="3"/><text x="19.8979%" y="591.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="19.6568%" y="565" width="0.0177%" height="15" fill="rgb(209,66,40)" fg:x="2222" fg:w="2"/><text x="19.9068%" y="575.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="19.6568%" y="549" width="0.0177%" height="15" fill="rgb(233,147,39)" fg:x="2222" fg:w="2"/><text x="19.9068%" y="559.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="19.6568%" y="533" width="0.0177%" height="15" fill="rgb(231,145,52)" fg:x="2222" fg:w="2"/><text x="19.9068%" y="543.50"></text></g><g><title>__folio_alloc (4 samples, 0.04%)</title><rect x="19.6745%" y="581" width="0.0354%" height="15" fill="rgb(206,20,26)" fg:x="2224" fg:w="4"/><text x="19.9245%" y="591.50"></text></g><g><title>__alloc_pages (4 samples, 0.04%)</title><rect x="19.6745%" y="565" width="0.0354%" height="15" fill="rgb(238,220,4)" fg:x="2224" fg:w="4"/><text x="19.9245%" y="575.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="19.6921%" y="549" width="0.0177%" height="15" fill="rgb(252,195,42)" fg:x="2226" fg:w="2"/><text x="19.9421%" y="559.50"></text></g><g><title>rmqueue (2 samples, 0.02%)</title><rect x="19.6921%" y="533" width="0.0177%" height="15" fill="rgb(209,10,6)" fg:x="2226" fg:w="2"/><text x="19.9421%" y="543.50"></text></g><g><title>asm_exc_page_fault (18 samples, 0.16%)</title><rect x="19.5594%" y="709" width="0.1592%" height="15" fill="rgb(229,3,52)" fg:x="2211" fg:w="18"/><text x="19.8094%" y="719.50"></text></g><g><title>exc_page_fault (18 samples, 0.16%)</title><rect x="19.5594%" y="693" width="0.1592%" height="15" fill="rgb(253,49,37)" fg:x="2211" fg:w="18"/><text x="19.8094%" y="703.50"></text></g><g><title>do_user_addr_fault (18 samples, 0.16%)</title><rect x="19.5594%" y="677" width="0.1592%" height="15" fill="rgb(240,103,49)" fg:x="2211" fg:w="18"/><text x="19.8094%" y="687.50"></text></g><g><title>handle_mm_fault (18 samples, 0.16%)</title><rect x="19.5594%" y="661" width="0.1592%" height="15" fill="rgb(250,182,30)" fg:x="2211" fg:w="18"/><text x="19.8094%" y="671.50"></text></g><g><title>__handle_mm_fault (18 samples, 0.16%)</title><rect x="19.5594%" y="645" width="0.1592%" height="15" fill="rgb(248,8,30)" fg:x="2211" fg:w="18"/><text x="19.8094%" y="655.50"></text></g><g><title>handle_pte_fault (18 samples, 0.16%)</title><rect x="19.5594%" y="629" width="0.1592%" height="15" fill="rgb(237,120,30)" fg:x="2211" fg:w="18"/><text x="19.8094%" y="639.50"></text></g><g><title>do_anonymous_page (18 samples, 0.16%)</title><rect x="19.5594%" y="613" width="0.1592%" height="15" fill="rgb(221,146,34)" fg:x="2211" fg:w="18"/><text x="19.8094%" y="623.50"></text></g><g><title>vma_alloc_folio (5 samples, 0.04%)</title><rect x="19.6745%" y="597" width="0.0442%" height="15" fill="rgb(242,55,13)" fg:x="2224" fg:w="5"/><text x="19.9245%" y="607.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::new (30 samples, 0.27%)</title><rect x="19.4798%" y="885" width="0.2654%" height="15" fill="rgb(242,112,31)" fg:x="2202" fg:w="30"/><text x="19.7298%" y="895.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::new (25 samples, 0.22%)</title><rect x="19.5241%" y="869" width="0.2212%" height="15" fill="rgb(249,192,27)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (25 samples, 0.22%)</title><rect x="19.5241%" y="853" width="0.2212%" height="15" fill="rgb(208,204,44)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (25 samples, 0.22%)</title><rect x="19.5241%" y="837" width="0.2212%" height="15" fill="rgb(208,93,54)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.22%)</title><rect x="19.5241%" y="821" width="0.2212%" height="15" fill="rgb(242,1,31)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.22%)</title><rect x="19.5241%" y="805" width="0.2212%" height="15" fill="rgb(241,83,25)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.22%)</title><rect x="19.5241%" y="789" width="0.2212%" height="15" fill="rgb(205,169,50)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.22%)</title><rect x="19.5241%" y="773" width="0.2212%" height="15" fill="rgb(239,186,37)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="783.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.22%)</title><rect x="19.5241%" y="757" width="0.2212%" height="15" fill="rgb(205,221,10)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="767.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.22%)</title><rect x="19.5241%" y="741" width="0.2212%" height="15" fill="rgb(218,196,15)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="751.50"></text></g><g><title>_int_malloc (25 samples, 0.22%)</title><rect x="19.5241%" y="725" width="0.2212%" height="15" fill="rgb(218,196,35)" fg:x="2207" fg:w="25"/><text x="19.7741%" y="735.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="19.7275%" y="709" width="0.0177%" height="15" fill="rgb(233,63,24)" fg:x="2230" fg:w="2"/><text x="19.9775%" y="719.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.03%)</title><rect x="19.7452%" y="853" width="0.0265%" height="15" fill="rgb(225,8,4)" fg:x="2232" fg:w="3"/><text x="19.9952%" y="863.50"></text></g><g><title>&lt;revm_interpreter::interpreter::analysis::BytecodeLocked as core::convert::TryFrom&lt;revm_primitives::bytecode::Bytecode&gt;&gt;::try_from (3 samples, 0.03%)</title><rect x="19.7452%" y="837" width="0.0265%" height="15" fill="rgb(234,105,35)" fg:x="2232" fg:w="3"/><text x="19.9952%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (11 samples, 0.10%)</title><rect x="23.7527%" y="821" width="0.0973%" height="15" fill="rgb(236,21,32)" fg:x="2685" fg:w="11"/><text x="24.0027%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (11 samples, 0.10%)</title><rect x="23.7527%" y="805" width="0.0973%" height="15" fill="rgb(228,109,6)" fg:x="2685" fg:w="11"/><text x="24.0027%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (11 samples, 0.10%)</title><rect x="23.7527%" y="789" width="0.0973%" height="15" fill="rgb(229,215,31)" fg:x="2685" fg:w="11"/><text x="24.0027%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.10%)</title><rect x="23.7527%" y="773" width="0.0973%" height="15" fill="rgb(221,52,54)" fg:x="2685" fg:w="11"/><text x="24.0027%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.10%)</title><rect x="23.7527%" y="757" width="0.0973%" height="15" fill="rgb(252,129,43)" fg:x="2685" fg:w="11"/><text x="24.0027%" y="767.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.10%)</title><rect x="23.7527%" y="741" width="0.0973%" height="15" fill="rgb(248,183,27)" fg:x="2685" fg:w="11"/><text x="24.0027%" y="751.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.10%)</title><rect x="23.7527%" y="725" width="0.0973%" height="15" fill="rgb(250,0,22)" fg:x="2685" fg:w="11"/><text x="24.0027%" y="735.50"></text></g><g><title>_int_malloc (7 samples, 0.06%)</title><rect x="23.7880%" y="709" width="0.0619%" height="15" fill="rgb(213,166,10)" fg:x="2689" fg:w="7"/><text x="24.0380%" y="719.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="23.8323%" y="693" width="0.0177%" height="15" fill="rgb(207,163,36)" fg:x="2694" fg:w="2"/><text x="24.0823%" y="703.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (11 samples, 0.10%)</title><rect x="23.8500%" y="789" width="0.0973%" height="15" fill="rgb(208,122,22)" fg:x="2696" fg:w="11"/><text x="24.1000%" y="799.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (11 samples, 0.10%)</title><rect x="23.8500%" y="773" width="0.0973%" height="15" fill="rgb(207,104,49)" fg:x="2696" fg:w="11"/><text x="24.1000%" y="783.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (11 samples, 0.10%)</title><rect x="23.8500%" y="757" width="0.0973%" height="15" fill="rgb(248,211,50)" fg:x="2696" fg:w="11"/><text x="24.1000%" y="767.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set_unchecked (26 samples, 0.23%)</title><rect x="23.8500%" y="821" width="0.2300%" height="15" fill="rgb(217,13,45)" fg:x="2696" fg:w="26"/><text x="24.1000%" y="831.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (26 samples, 0.23%)</title><rect x="23.8500%" y="805" width="0.2300%" height="15" fill="rgb(211,216,49)" fg:x="2696" fg:w="26"/><text x="24.1000%" y="815.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (15 samples, 0.13%)</title><rect x="23.9473%" y="789" width="0.1327%" height="15" fill="rgb(221,58,53)" fg:x="2707" fg:w="15"/><text x="24.1973%" y="799.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (15 samples, 0.13%)</title><rect x="23.9473%" y="773" width="0.1327%" height="15" fill="rgb(220,112,41)" fg:x="2707" fg:w="15"/><text x="24.1973%" y="783.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (15 samples, 0.13%)</title><rect x="23.9473%" y="757" width="0.1327%" height="15" fill="rgb(236,38,28)" fg:x="2707" fg:w="15"/><text x="24.1973%" y="767.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::select (7 samples, 0.06%)</title><rect x="24.0180%" y="741" width="0.0619%" height="15" fill="rgb(227,195,22)" fg:x="2715" fg:w="7"/><text x="24.2680%" y="751.50"></text></g><g><title>&lt;bitvec::order::Lsb0 as bitvec::order::BitOrder&gt;::select (7 samples, 0.06%)</title><rect x="24.0180%" y="725" width="0.0619%" height="15" fill="rgb(214,55,33)" fg:x="2715" fg:w="7"/><text x="24.2680%" y="735.50"></text></g><g><title>&lt;u8 as core::ops::bit::Shl&gt;::shl (7 samples, 0.06%)</title><rect x="24.0180%" y="709" width="0.0619%" height="15" fill="rgb(248,80,13)" fg:x="2715" fg:w="7"/><text x="24.2680%" y="719.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::with_capacity (2 samples, 0.02%)</title><rect x="24.0800%" y="805" width="0.0177%" height="15" fill="rgb(238,52,6)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="815.50"></text></g><g><title>tap::pipe::Pipe::pipe (2 samples, 0.02%)</title><rect x="24.0800%" y="789" width="0.0177%" height="15" fill="rgb(224,198,47)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="24.0800%" y="773" width="0.0177%" height="15" fill="rgb(233,171,20)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="24.0800%" y="757" width="0.0177%" height="15" fill="rgb(241,30,25)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="24.0800%" y="741" width="0.0177%" height="15" fill="rgb(207,171,38)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="24.0800%" y="725" width="0.0177%" height="15" fill="rgb(234,70,1)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="24.0800%" y="709" width="0.0177%" height="15" fill="rgb(232,178,18)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="24.0800%" y="693" width="0.0177%" height="15" fill="rgb(241,78,40)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="24.0800%" y="677" width="0.0177%" height="15" fill="rgb(222,35,25)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="687.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="24.0800%" y="661" width="0.0177%" height="15" fill="rgb(207,92,16)" fg:x="2722" fg:w="2"/><text x="24.3300%" y="671.50"></text></g><g><title>revm_interpreter::interpreter::analysis::analyze (487 samples, 4.31%)</title><rect x="19.8071%" y="837" width="4.3082%" height="15" fill="rgb(216,59,51)" fg:x="2239" fg:w="487"/><text x="20.0571%" y="847.50">revm_..</text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::repeat (4 samples, 0.04%)</title><rect x="24.0800%" y="821" width="0.0354%" height="15" fill="rgb(213,80,28)" fg:x="2722" fg:w="4"/><text x="24.3300%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill_with (2 samples, 0.02%)</title><rect x="24.0977%" y="805" width="0.0177%" height="15" fill="rgb(220,93,7)" fg:x="2724" fg:w="2"/><text x="24.3477%" y="815.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="24.0977%" y="789" width="0.0177%" height="15" fill="rgb(225,24,44)" fg:x="2724" fg:w="2"/><text x="24.3477%" y="799.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (9 samples, 0.08%)</title><rect x="24.1242%" y="821" width="0.0796%" height="15" fill="rgb(243,74,40)" fg:x="2727" fg:w="9"/><text x="24.3742%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (9 samples, 0.08%)</title><rect x="24.1242%" y="805" width="0.0796%" height="15" fill="rgb(228,39,7)" fg:x="2727" fg:w="9"/><text x="24.3742%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 0.07%)</title><rect x="24.2038%" y="821" width="0.0708%" height="15" fill="rgb(227,79,8)" fg:x="2736" fg:w="8"/><text x="24.4538%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.07%)</title><rect x="24.2038%" y="805" width="0.0708%" height="15" fill="rgb(236,58,11)" fg:x="2736" fg:w="8"/><text x="24.4538%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.07%)</title><rect x="24.2038%" y="789" width="0.0708%" height="15" fill="rgb(249,63,35)" fg:x="2736" fg:w="8"/><text x="24.4538%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.07%)</title><rect x="24.2038%" y="773" width="0.0708%" height="15" fill="rgb(252,114,16)" fg:x="2736" fg:w="8"/><text x="24.4538%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.07%)</title><rect x="24.2038%" y="757" width="0.0708%" height="15" fill="rgb(254,151,24)" fg:x="2736" fg:w="8"/><text x="24.4538%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="24.2746%" y="821" width="0.0177%" height="15" fill="rgb(253,54,39)" fg:x="2744" fg:w="2"/><text x="24.5246%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="24.2746%" y="805" width="0.0177%" height="15" fill="rgb(243,25,45)" fg:x="2744" fg:w="2"/><text x="24.5246%" y="815.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="24.5400%" y="565" width="0.0177%" height="15" fill="rgb(234,134,9)" fg:x="2774" fg:w="2"/><text x="24.7900%" y="575.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.02%)</title><rect x="24.5400%" y="549" width="0.0177%" height="15" fill="rgb(227,166,31)" fg:x="2774" fg:w="2"/><text x="24.7900%" y="559.50"></text></g><g><title>asm_exc_page_fault (7 samples, 0.06%)</title><rect x="24.5311%" y="677" width="0.0619%" height="15" fill="rgb(245,143,41)" fg:x="2773" fg:w="7"/><text x="24.7811%" y="687.50"></text></g><g><title>exc_page_fault (7 samples, 0.06%)</title><rect x="24.5311%" y="661" width="0.0619%" height="15" fill="rgb(238,181,32)" fg:x="2773" fg:w="7"/><text x="24.7811%" y="671.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.06%)</title><rect x="24.5311%" y="645" width="0.0619%" height="15" fill="rgb(224,113,18)" fg:x="2773" fg:w="7"/><text x="24.7811%" y="655.50"></text></g><g><title>handle_mm_fault (7 samples, 0.06%)</title><rect x="24.5311%" y="629" width="0.0619%" height="15" fill="rgb(240,229,28)" fg:x="2773" fg:w="7"/><text x="24.7811%" y="639.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.05%)</title><rect x="24.5400%" y="613" width="0.0531%" height="15" fill="rgb(250,185,3)" fg:x="2774" fg:w="6"/><text x="24.7900%" y="623.50"></text></g><g><title>handle_pte_fault (6 samples, 0.05%)</title><rect x="24.5400%" y="597" width="0.0531%" height="15" fill="rgb(212,59,25)" fg:x="2774" fg:w="6"/><text x="24.7900%" y="607.50"></text></g><g><title>do_anonymous_page (6 samples, 0.05%)</title><rect x="24.5400%" y="581" width="0.0531%" height="15" fill="rgb(221,87,20)" fg:x="2774" fg:w="6"/><text x="24.7900%" y="591.50"></text></g><g><title>malloc_consolidate (50 samples, 0.44%)</title><rect x="24.5931%" y="677" width="0.4423%" height="15" fill="rgb(213,74,28)" fg:x="2780" fg:w="50"/><text x="24.8431%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (86 samples, 0.76%)</title><rect x="24.2923%" y="821" width="0.7608%" height="15" fill="rgb(224,132,34)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (86 samples, 0.76%)</title><rect x="24.2923%" y="805" width="0.7608%" height="15" fill="rgb(222,101,24)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (86 samples, 0.76%)</title><rect x="24.2923%" y="789" width="0.7608%" height="15" fill="rgb(254,142,4)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (86 samples, 0.76%)</title><rect x="24.2923%" y="773" width="0.7608%" height="15" fill="rgb(230,229,49)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.76%)</title><rect x="24.2923%" y="757" width="0.7608%" height="15" fill="rgb(238,70,47)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.76%)</title><rect x="24.2923%" y="741" width="0.7608%" height="15" fill="rgb(231,160,17)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="751.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.76%)</title><rect x="24.2923%" y="725" width="0.7608%" height="15" fill="rgb(218,68,53)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="735.50"></text></g><g><title>__GI___libc_malloc (86 samples, 0.76%)</title><rect x="24.2923%" y="709" width="0.7608%" height="15" fill="rgb(236,111,10)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="719.50"></text></g><g><title>_int_malloc (86 samples, 0.76%)</title><rect x="24.2923%" y="693" width="0.7608%" height="15" fill="rgb(224,34,41)" fg:x="2746" fg:w="86"/><text x="24.5423%" y="703.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="25.0354%" y="677" width="0.0177%" height="15" fill="rgb(241,118,19)" fg:x="2830" fg:w="2"/><text x="25.2854%" y="687.50"></text></g><g><title>revm_interpreter::interpreter::contract::Contract::new_with_context (601 samples, 5.32%)</title><rect x="19.7452%" y="885" width="5.3167%" height="15" fill="rgb(238,129,25)" fg:x="2232" fg:w="601"/><text x="19.9952%" y="895.50">revm_in..</text></g><g><title>revm_interpreter::interpreter::contract::Contract::new (601 samples, 5.32%)</title><rect x="19.7452%" y="869" width="5.3167%" height="15" fill="rgb(238,22,31)" fg:x="2232" fg:w="601"/><text x="19.9952%" y="879.50">revm_in..</text></g><g><title>revm_interpreter::interpreter::analysis::to_analysed (597 samples, 5.28%)</title><rect x="19.7806%" y="853" width="5.2813%" height="15" fill="rgb(222,174,48)" fg:x="2236" fg:w="597"/><text x="20.0306%" y="863.50">revm_i..</text></g><g><title>revm_primitives::bytecode::Bytecode::to_checked (107 samples, 0.95%)</title><rect x="24.1154%" y="837" width="0.9466%" height="15" fill="rgb(206,152,40)" fg:x="2726" fg:w="107"/><text x="24.3654%" y="847.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (766 samples, 6.78%)</title><rect x="18.3033%" y="949" width="6.7764%" height="15" fill="rgb(218,99,54)" fg:x="2069" fg:w="766"/><text x="18.5533%" y="959.50">revm::han..</text></g><g><title>core::ops::function::Fn::call (756 samples, 6.69%)</title><rect x="18.3917%" y="933" width="6.6879%" height="15" fill="rgb(220,174,26)" fg:x="2079" fg:w="756"/><text x="18.6417%" y="943.50">core::ops..</text></g><g><title>revm::handler::mainnet::execution::call (756 samples, 6.69%)</title><rect x="18.3917%" y="917" width="6.6879%" height="15" fill="rgb(245,116,9)" fg:x="2079" fg:w="756"/><text x="18.6417%" y="927.50">revm::han..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (753 samples, 6.66%)</title><rect x="18.4183%" y="901" width="6.6614%" height="15" fill="rgb(209,72,35)" fg:x="2082" fg:w="753"/><text x="18.6683%" y="911.50">revm::con..</text></g><g><title>revm_primitives::state::AccountInfo::code_hash (2 samples, 0.02%)</title><rect x="25.0619%" y="885" width="0.0177%" height="15" fill="rgb(226,126,21)" fg:x="2833" fg:w="2"/><text x="25.3119%" y="895.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::last_frame_return (3 samples, 0.03%)</title><rect x="25.0796%" y="949" width="0.0265%" height="15" fill="rgb(227,192,1)" fg:x="2835" fg:w="3"/><text x="25.3296%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.03%)</title><rect x="25.0796%" y="933" width="0.0265%" height="15" fill="rgb(237,180,29)" fg:x="2835" fg:w="3"/><text x="25.3296%" y="943.50"></text></g><g><title>revm::handler::mainnet::execution::last_frame_return (3 samples, 0.03%)</title><rect x="25.0796%" y="917" width="0.0265%" height="15" fill="rgb(230,197,35)" fg:x="2835" fg:w="3"/><text x="25.3296%" y="927.50"></text></g><g><title>revm::handler::mainnet::execution::frame_return_with_refund_flag (3 samples, 0.03%)</title><rect x="25.0796%" y="901" width="0.0265%" height="15" fill="rgb(246,193,31)" fg:x="2835" fg:w="3"/><text x="25.3296%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::InterpreterResult&gt; (3 samples, 0.03%)</title><rect x="25.1415%" y="901" width="0.0265%" height="15" fill="rgb(241,36,4)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (3 samples, 0.03%)</title><rect x="25.1415%" y="885" width="0.0265%" height="15" fill="rgb(241,130,17)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.03%)</title><rect x="25.1415%" y="869" width="0.0265%" height="15" fill="rgb(206,137,32)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="879.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="25.1415%" y="853" width="0.0265%" height="15" fill="rgb(237,228,51)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="863.50"></text></g><g><title>bytes::bytes::promotable_even_drop (3 samples, 0.03%)</title><rect x="25.1415%" y="837" width="0.0265%" height="15" fill="rgb(243,6,42)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="847.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3 samples, 0.03%)</title><rect x="25.1415%" y="821" width="0.0265%" height="15" fill="rgb(251,74,28)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="831.50"></text></g><g><title>bytes::bytes::promotable_even_drop::_{{closure}} (3 samples, 0.03%)</title><rect x="25.1415%" y="805" width="0.0265%" height="15" fill="rgb(218,20,49)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="815.50"></text></g><g><title>bytes::bytes::release_shared (3 samples, 0.03%)</title><rect x="25.1415%" y="789" width="0.0265%" height="15" fill="rgb(238,28,14)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="25.1415%" y="773" width="0.0265%" height="15" fill="rgb(229,40,46)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="25.1415%" y="757" width="0.0265%" height="15" fill="rgb(244,195,20)" fg:x="2842" fg:w="3"/><text x="25.3915%" y="767.50"></text></g><g><title>revm::frame::FrameResult::output (7 samples, 0.06%)</title><rect x="25.1769%" y="901" width="0.0619%" height="15" fill="rgb(253,56,35)" fg:x="2846" fg:w="7"/><text x="25.4269%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="25.2477%" y="885" width="0.0177%" height="15" fill="rgb(210,149,44)" fg:x="2854" fg:w="2"/><text x="25.4977%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="25.2477%" y="869" width="0.0177%" height="15" fill="rgb(240,135,12)" fg:x="2854" fg:w="2"/><text x="25.4977%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="25.2477%" y="853" width="0.0177%" height="15" fill="rgb(251,24,50)" fg:x="2854" fg:w="2"/><text x="25.4977%" y="863.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="25.2477%" y="837" width="0.0177%" height="15" fill="rgb(243,200,47)" fg:x="2854" fg:w="2"/><text x="25.4977%" y="847.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="25.2477%" y="821" width="0.0177%" height="15" fill="rgb(224,166,26)" fg:x="2854" fg:w="2"/><text x="25.4977%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="25.2477%" y="805" width="0.0177%" height="15" fill="rgb(233,0,47)" fg:x="2854" fg:w="2"/><text x="25.4977%" y="815.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.03%)</title><rect x="25.2831%" y="741" width="0.0265%" height="15" fill="rgb(253,80,5)" fg:x="2858" fg:w="3"/><text x="25.5331%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="25.2654%" y="789" width="0.0531%" height="15" fill="rgb(214,133,25)" fg:x="2856" fg:w="6"/><text x="25.5154%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="25.2654%" y="773" width="0.0531%" height="15" fill="rgb(209,27,14)" fg:x="2856" fg:w="6"/><text x="25.5154%" y="783.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="25.2742%" y="757" width="0.0442%" height="15" fill="rgb(219,102,51)" fg:x="2857" fg:w="5"/><text x="25.5242%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="25.2654%" y="869" width="0.0619%" height="15" fill="rgb(237,18,16)" fg:x="2856" fg:w="7"/><text x="25.5154%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;]&gt; (7 samples, 0.06%)</title><rect x="25.2654%" y="853" width="0.0619%" height="15" fill="rgb(241,85,17)" fg:x="2856" fg:w="7"/><text x="25.5154%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt; (7 samples, 0.06%)</title><rect x="25.2654%" y="837" width="0.0619%" height="15" fill="rgb(236,90,42)" fg:x="2856" fg:w="7"/><text x="25.5154%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::journaled_state::JournalEntry&gt;&gt; (7 samples, 0.06%)</title><rect x="25.2654%" y="821" width="0.0619%" height="15" fill="rgb(249,57,21)" fg:x="2856" fg:w="7"/><text x="25.5154%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="25.2654%" y="805" width="0.0619%" height="15" fill="rgb(243,12,36)" fg:x="2856" fg:w="7"/><text x="25.5154%" y="815.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::output (26 samples, 0.23%)</title><rect x="25.1062%" y="949" width="0.2300%" height="15" fill="rgb(253,128,47)" fg:x="2838" fg:w="26"/><text x="25.3562%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (25 samples, 0.22%)</title><rect x="25.1150%" y="933" width="0.2212%" height="15" fill="rgb(207,33,20)" fg:x="2839" fg:w="25"/><text x="25.3650%" y="943.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (25 samples, 0.22%)</title><rect x="25.1150%" y="917" width="0.2212%" height="15" fill="rgb(233,215,35)" fg:x="2839" fg:w="25"/><text x="25.3650%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::finalize (11 samples, 0.10%)</title><rect x="25.2389%" y="901" width="0.0973%" height="15" fill="rgb(249,188,52)" fg:x="2853" fg:w="11"/><text x="25.4889%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="25.2654%" y="885" width="0.0708%" height="15" fill="rgb(225,12,32)" fg:x="2856" fg:w="8"/><text x="25.5154%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="25.3539%" y="853" width="0.0177%" height="15" fill="rgb(247,98,14)" fg:x="2866" fg:w="2"/><text x="25.6039%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="25.3539%" y="837" width="0.0177%" height="15" fill="rgb(247,219,48)" fg:x="2866" fg:w="2"/><text x="25.6039%" y="847.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reimburse_caller (6 samples, 0.05%)</title><rect x="25.3362%" y="949" width="0.0531%" height="15" fill="rgb(253,60,48)" fg:x="2864" fg:w="6"/><text x="25.5862%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (6 samples, 0.05%)</title><rect x="25.3362%" y="933" width="0.0531%" height="15" fill="rgb(245,15,52)" fg:x="2864" fg:w="6"/><text x="25.5862%" y="943.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (6 samples, 0.05%)</title><rect x="25.3362%" y="917" width="0.0531%" height="15" fill="rgb(220,133,28)" fg:x="2864" fg:w="6"/><text x="25.5862%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.04%)</title><rect x="25.3450%" y="901" width="0.0442%" height="15" fill="rgb(217,180,4)" fg:x="2865" fg:w="5"/><text x="25.5950%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.04%)</title><rect x="25.3539%" y="885" width="0.0354%" height="15" fill="rgb(251,24,1)" fg:x="2866" fg:w="4"/><text x="25.6039%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.04%)</title><rect x="25.3539%" y="869" width="0.0354%" height="15" fill="rgb(212,185,49)" fg:x="2866" fg:w="4"/><text x="25.6039%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="25.3715%" y="853" width="0.0177%" height="15" fill="rgb(215,175,22)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="25.3715%" y="837" width="0.0177%" height="15" fill="rgb(250,205,14)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="25.3715%" y="821" width="0.0177%" height="15" fill="rgb(225,211,22)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="831.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (2 samples, 0.02%)</title><rect x="25.3715%" y="805" width="0.0177%" height="15" fill="rgb(251,179,42)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="25.3715%" y="789" width="0.0177%" height="15" fill="rgb(208,216,51)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="25.3715%" y="773" width="0.0177%" height="15" fill="rgb(235,36,11)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="783.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="25.3715%" y="757" width="0.0177%" height="15" fill="rgb(213,189,28)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="767.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="25.3715%" y="741" width="0.0177%" height="15" fill="rgb(227,203,42)" fg:x="2868" fg:w="2"/><text x="25.6215%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="25.4069%" y="853" width="0.0177%" height="15" fill="rgb(244,72,36)" fg:x="2872" fg:w="2"/><text x="25.6569%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="25.4069%" y="837" width="0.0177%" height="15" fill="rgb(213,53,17)" fg:x="2872" fg:w="2"/><text x="25.6569%" y="847.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (3 samples, 0.03%)</title><rect x="25.4069%" y="901" width="0.0265%" height="15" fill="rgb(207,167,3)" fg:x="2872" fg:w="3"/><text x="25.6569%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.03%)</title><rect x="25.4069%" y="885" width="0.0265%" height="15" fill="rgb(216,98,30)" fg:x="2872" fg:w="3"/><text x="25.6569%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.03%)</title><rect x="25.4069%" y="869" width="0.0265%" height="15" fill="rgb(236,123,15)" fg:x="2872" fg:w="3"/><text x="25.6569%" y="879.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reward_beneficiary (7 samples, 0.06%)</title><rect x="25.3892%" y="949" width="0.0619%" height="15" fill="rgb(248,81,50)" fg:x="2870" fg:w="7"/><text x="25.6392%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (7 samples, 0.06%)</title><rect x="25.3892%" y="933" width="0.0619%" height="15" fill="rgb(214,120,4)" fg:x="2870" fg:w="7"/><text x="25.6392%" y="943.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (7 samples, 0.06%)</title><rect x="25.3892%" y="917" width="0.0619%" height="15" fill="rgb(208,179,34)" fg:x="2870" fg:w="7"/><text x="25.6392%" y="927.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee (7 samples, 0.06%)</title><rect x="25.4512%" y="885" width="0.0619%" height="15" fill="rgb(227,140,7)" fg:x="2877" fg:w="7"/><text x="25.7012%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.06%)</title><rect x="25.4512%" y="869" width="0.0619%" height="15" fill="rgb(214,22,6)" fg:x="2877" fg:w="7"/><text x="25.7012%" y="879.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee::_{{closure}} (7 samples, 0.06%)</title><rect x="25.4512%" y="853" width="0.0619%" height="15" fill="rgb(207,137,27)" fg:x="2877" fg:w="7"/><text x="25.7012%" y="863.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (6 samples, 0.05%)</title><rect x="25.4600%" y="837" width="0.0531%" height="15" fill="rgb(210,8,46)" fg:x="2878" fg:w="6"/><text x="25.7100%" y="847.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (6 samples, 0.05%)</title><rect x="25.4600%" y="821" width="0.0531%" height="15" fill="rgb(240,16,54)" fg:x="2878" fg:w="6"/><text x="25.7100%" y="831.50"></text></g><g><title>ruint::algorithms::mul::addmul (6 samples, 0.05%)</title><rect x="25.4600%" y="805" width="0.0531%" height="15" fill="rgb(211,209,29)" fg:x="2878" fg:w="6"/><text x="25.7100%" y="815.50"></text></g><g><title>revm_primitives::state::Account::mark_touch (2 samples, 0.02%)</title><rect x="25.5131%" y="885" width="0.0177%" height="15" fill="rgb(226,228,24)" fg:x="2884" fg:w="2"/><text x="25.7631%" y="895.50"></text></g><g><title>revm_primitives::state::_::&lt;impl core::ops::bit::BitOrAssign for revm_primitives::state::AccountStatus&gt;::bitor_assign (2 samples, 0.02%)</title><rect x="25.5131%" y="869" width="0.0177%" height="15" fill="rgb(222,84,9)" fg:x="2884" fg:w="2"/><text x="25.7631%" y="879.50"></text></g><g><title>revm_primitives::state::_::&lt;impl revm_primitives::state::AccountStatus&gt;::insert (2 samples, 0.02%)</title><rect x="25.5131%" y="853" width="0.0177%" height="15" fill="rgb(234,203,30)" fg:x="2884" fg:w="2"/><text x="25.7631%" y="863.50"></text></g><g><title>revm_primitives::state::_::InternalBitFlags::insert (2 samples, 0.02%)</title><rect x="25.5131%" y="837" width="0.0177%" height="15" fill="rgb(238,109,14)" fg:x="2884" fg:w="2"/><text x="25.7631%" y="847.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller_inner (14 samples, 0.12%)</title><rect x="25.4512%" y="901" width="0.1238%" height="15" fill="rgb(233,206,34)" fg:x="2877" fg:w="14"/><text x="25.7012%" y="911.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (3 samples, 0.03%)</title><rect x="25.5485%" y="885" width="0.0265%" height="15" fill="rgb(220,167,47)" fg:x="2888" fg:w="3"/><text x="25.7985%" y="895.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (2 samples, 0.02%)</title><rect x="25.5573%" y="869" width="0.0177%" height="15" fill="rgb(238,105,10)" fg:x="2889" fg:w="2"/><text x="25.8073%" y="879.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="25.5573%" y="853" width="0.0177%" height="15" fill="rgb(213,227,17)" fg:x="2889" fg:w="2"/><text x="25.8073%" y="863.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::deduct_caller (17 samples, 0.15%)</title><rect x="25.4512%" y="949" width="0.1504%" height="15" fill="rgb(217,132,38)" fg:x="2877" fg:w="17"/><text x="25.7012%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (17 samples, 0.15%)</title><rect x="25.4512%" y="933" width="0.1504%" height="15" fill="rgb(242,146,4)" fg:x="2877" fg:w="17"/><text x="25.7012%" y="943.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (17 samples, 0.15%)</title><rect x="25.4512%" y="917" width="0.1504%" height="15" fill="rgb(212,61,9)" fg:x="2877" fg:w="17"/><text x="25.7012%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (3 samples, 0.03%)</title><rect x="25.5750%" y="901" width="0.0265%" height="15" fill="rgb(247,126,22)" fg:x="2891" fg:w="3"/><text x="25.8250%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.02%)</title><rect x="25.5839%" y="885" width="0.0177%" height="15" fill="rgb(220,196,2)" fg:x="2892" fg:w="2"/><text x="25.8339%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.02%)</title><rect x="25.5839%" y="869" width="0.0177%" height="15" fill="rgb(208,46,4)" fg:x="2892" fg:w="2"/><text x="25.8339%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="25.6104%" y="789" width="0.0354%" height="15" fill="rgb(252,104,46)" fg:x="2895" fg:w="4"/><text x="25.8604%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="25.6104%" y="773" width="0.0354%" height="15" fill="rgb(237,152,48)" fg:x="2895" fg:w="4"/><text x="25.8604%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="25.6281%" y="757" width="0.0177%" height="15" fill="rgb(221,59,37)" fg:x="2897" fg:w="2"/><text x="25.8781%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.6281%" y="741" width="0.0177%" height="15" fill="rgb(209,202,51)" fg:x="2897" fg:w="2"/><text x="25.8781%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.6281%" y="725" width="0.0177%" height="15" fill="rgb(228,81,30)" fg:x="2897" fg:w="2"/><text x="25.8781%" y="735.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="25.6281%" y="709" width="0.0177%" height="15" fill="rgb(227,42,39)" fg:x="2897" fg:w="2"/><text x="25.8781%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="25.6281%" y="693" width="0.0177%" height="15" fill="rgb(221,26,2)" fg:x="2897" fg:w="2"/><text x="25.8781%" y="703.50"></text></g><g><title>&lt;revm_primitives::db::WrapDatabaseRef&lt;T&gt; as revm_primitives::db::Database&gt;::basic (5 samples, 0.04%)</title><rect x="25.6104%" y="885" width="0.0442%" height="15" fill="rgb(254,61,31)" fg:x="2895" fg:w="5"/><text x="25.8604%" y="895.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for &amp;T&gt;::basic_ref (5 samples, 0.04%)</title><rect x="25.6104%" y="869" width="0.0442%" height="15" fill="rgb(222,173,38)" fg:x="2895" fg:w="5"/><text x="25.8604%" y="879.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (5 samples, 0.04%)</title><rect x="25.6104%" y="853" width="0.0442%" height="15" fill="rgb(218,50,12)" fg:x="2895" fg:w="5"/><text x="25.8604%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.04%)</title><rect x="25.6104%" y="837" width="0.0442%" height="15" fill="rgb(223,88,40)" fg:x="2895" fg:w="5"/><text x="25.8604%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.04%)</title><rect x="25.6104%" y="821" width="0.0442%" height="15" fill="rgb(237,54,19)" fg:x="2895" fg:w="5"/><text x="25.8604%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.04%)</title><rect x="25.6104%" y="805" width="0.0442%" height="15" fill="rgb(251,129,25)" fg:x="2895" fg:w="5"/><text x="25.8604%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="25.6989%" y="837" width="0.0354%" height="15" fill="rgb(238,97,19)" fg:x="2905" fg:w="4"/><text x="25.9489%" y="847.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="25.6989%" y="821" width="0.0354%" height="15" fill="rgb(240,169,18)" fg:x="2905" fg:w="4"/><text x="25.9489%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.03%)</title><rect x="25.7077%" y="805" width="0.0265%" height="15" fill="rgb(230,187,49)" fg:x="2906" fg:w="3"/><text x="25.9577%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="25.7077%" y="789" width="0.0265%" height="15" fill="rgb(209,44,26)" fg:x="2906" fg:w="3"/><text x="25.9577%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="25.7077%" y="773" width="0.0265%" height="15" fill="rgb(244,0,6)" fg:x="2906" fg:w="3"/><text x="25.9577%" y="783.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="25.7077%" y="757" width="0.0265%" height="15" fill="rgb(248,18,21)" fg:x="2906" fg:w="3"/><text x="25.9577%" y="767.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="25.7077%" y="741" width="0.0265%" height="15" fill="rgb(245,180,19)" fg:x="2906" fg:w="3"/><text x="25.9577%" y="751.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="25.7077%" y="725" width="0.0265%" height="15" fill="rgb(252,118,36)" fg:x="2906" fg:w="3"/><text x="25.9577%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="25.7343%" y="821" width="0.0177%" height="15" fill="rgb(210,224,19)" fg:x="2909" fg:w="2"/><text x="25.9843%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="25.7343%" y="805" width="0.0177%" height="15" fill="rgb(218,30,24)" fg:x="2909" fg:w="2"/><text x="25.9843%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.02%)</title><rect x="25.7343%" y="789" width="0.0177%" height="15" fill="rgb(219,75,50)" fg:x="2909" fg:w="2"/><text x="25.9843%" y="799.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (11 samples, 0.10%)</title><rect x="25.6723%" y="885" width="0.0973%" height="15" fill="rgb(234,72,50)" fg:x="2902" fg:w="11"/><text x="25.9223%" y="895.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (8 samples, 0.07%)</title><rect x="25.6989%" y="869" width="0.0708%" height="15" fill="rgb(219,100,48)" fg:x="2905" fg:w="8"/><text x="25.9489%" y="879.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (8 samples, 0.07%)</title><rect x="25.6989%" y="853" width="0.0708%" height="15" fill="rgb(253,5,41)" fg:x="2905" fg:w="8"/><text x="25.9489%" y="863.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (4 samples, 0.04%)</title><rect x="25.7343%" y="837" width="0.0354%" height="15" fill="rgb(247,181,11)" fg:x="2909" fg:w="4"/><text x="25.9843%" y="847.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (2 samples, 0.02%)</title><rect x="25.7519%" y="821" width="0.0177%" height="15" fill="rgb(222,223,25)" fg:x="2911" fg:w="2"/><text x="26.0019%" y="831.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (2 samples, 0.02%)</title><rect x="25.7519%" y="805" width="0.0177%" height="15" fill="rgb(214,198,28)" fg:x="2911" fg:w="2"/><text x="26.0019%" y="815.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.02%)</title><rect x="25.7696%" y="869" width="0.0177%" height="15" fill="rgb(230,46,43)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="25.7696%" y="853" width="0.0177%" height="15" fill="rgb(233,65,53)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="25.7696%" y="837" width="0.0177%" height="15" fill="rgb(221,121,27)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="25.7696%" y="821" width="0.0177%" height="15" fill="rgb(247,70,47)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.7696%" y="805" width="0.0177%" height="15" fill="rgb(228,85,35)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="25.7696%" y="789" width="0.0177%" height="15" fill="rgb(209,50,18)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="25.7696%" y="773" width="0.0177%" height="15" fill="rgb(250,19,35)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="25.7696%" y="757" width="0.0177%" height="15" fill="rgb(253,107,29)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="767.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="25.7696%" y="741" width="0.0177%" height="15" fill="rgb(252,179,29)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="25.7696%" y="725" width="0.0177%" height="15" fill="rgb(238,194,6)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.7696%" y="709" width="0.0177%" height="15" fill="rgb(238,164,29)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.7696%" y="693" width="0.0177%" height="15" fill="rgb(224,25,9)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="25.7696%" y="677" width="0.0177%" height="15" fill="rgb(244,153,23)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="25.7696%" y="661" width="0.0177%" height="15" fill="rgb(212,203,14)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="25.7696%" y="645" width="0.0177%" height="15" fill="rgb(220,164,20)" fg:x="2913" fg:w="2"/><text x="26.0196%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.04%)</title><rect x="25.7696%" y="885" width="0.0354%" height="15" fill="rgb(222,203,48)" fg:x="2913" fg:w="4"/><text x="26.0196%" y="895.50"></text></g><g><title>std::collections::hash::map::map_entry (2 samples, 0.02%)</title><rect x="25.7873%" y="869" width="0.0177%" height="15" fill="rgb(215,159,22)" fg:x="2915" fg:w="2"/><text x="26.0373%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="25.8050%" y="853" width="0.0265%" height="15" fill="rgb(216,183,47)" fg:x="2917" fg:w="3"/><text x="26.0550%" y="863.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_accounts (31 samples, 0.27%)</title><rect x="25.6016%" y="949" width="0.2742%" height="15" fill="rgb(229,195,25)" fg:x="2894" fg:w="31"/><text x="25.8516%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (31 samples, 0.27%)</title><rect x="25.6016%" y="933" width="0.2742%" height="15" fill="rgb(224,132,51)" fg:x="2894" fg:w="31"/><text x="25.8516%" y="943.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_accounts (31 samples, 0.27%)</title><rect x="25.6016%" y="917" width="0.2742%" height="15" fill="rgb(240,63,7)" fg:x="2894" fg:w="31"/><text x="25.8516%" y="927.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (31 samples, 0.27%)</title><rect x="25.6016%" y="901" width="0.2742%" height="15" fill="rgb(249,182,41)" fg:x="2894" fg:w="31"/><text x="25.8516%" y="911.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.07%)</title><rect x="25.8050%" y="885" width="0.0708%" height="15" fill="rgb(243,47,26)" fg:x="2917" fg:w="8"/><text x="26.0550%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (8 samples, 0.07%)</title><rect x="25.8050%" y="869" width="0.0708%" height="15" fill="rgb(233,48,2)" fg:x="2917" fg:w="8"/><text x="26.0550%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (5 samples, 0.04%)</title><rect x="25.8316%" y="853" width="0.0442%" height="15" fill="rgb(244,165,34)" fg:x="2920" fg:w="5"/><text x="26.0816%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (5 samples, 0.04%)</title><rect x="25.8316%" y="837" width="0.0442%" height="15" fill="rgb(207,89,7)" fg:x="2920" fg:w="5"/><text x="26.0816%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (5 samples, 0.04%)</title><rect x="25.8316%" y="821" width="0.0442%" height="15" fill="rgb(244,117,36)" fg:x="2920" fg:w="5"/><text x="26.0816%" y="831.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="25.8316%" y="805" width="0.0442%" height="15" fill="rgb(226,144,34)" fg:x="2920" fg:w="5"/><text x="26.0816%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="25.8404%" y="789" width="0.0354%" height="15" fill="rgb(213,23,19)" fg:x="2921" fg:w="4"/><text x="26.0904%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="25.9466%" y="725" width="0.0354%" height="15" fill="rgb(217,75,12)" fg:x="2933" fg:w="4"/><text x="26.1966%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="25.9554%" y="709" width="0.0265%" height="15" fill="rgb(224,159,17)" fg:x="2934" fg:w="3"/><text x="26.2054%" y="719.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.02%)</title><rect x="25.9643%" y="693" width="0.0177%" height="15" fill="rgb(217,118,1)" fg:x="2935" fg:w="2"/><text x="26.2143%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="25.9908%" y="677" width="0.0177%" height="15" fill="rgb(232,180,48)" fg:x="2938" fg:w="2"/><text x="26.2408%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="26.1058%" y="565" width="0.0177%" height="15" fill="rgb(230,27,33)" fg:x="2951" fg:w="2"/><text x="26.3558%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.04%)</title><rect x="26.1058%" y="581" width="0.0442%" height="15" fill="rgb(205,31,21)" fg:x="2951" fg:w="5"/><text x="26.3558%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.03%)</title><rect x="26.1235%" y="565" width="0.0265%" height="15" fill="rgb(253,59,4)" fg:x="2953" fg:w="3"/><text x="26.3735%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.03%)</title><rect x="26.1766%" y="565" width="0.0265%" height="15" fill="rgb(224,201,9)" fg:x="2959" fg:w="3"/><text x="26.4266%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (18 samples, 0.16%)</title><rect x="26.0881%" y="629" width="0.1592%" height="15" fill="rgb(229,206,30)" fg:x="2949" fg:w="18"/><text x="26.3381%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18 samples, 0.16%)</title><rect x="26.0881%" y="613" width="0.1592%" height="15" fill="rgb(212,67,47)" fg:x="2949" fg:w="18"/><text x="26.3381%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 0.16%)</title><rect x="26.0881%" y="597" width="0.1592%" height="15" fill="rgb(211,96,50)" fg:x="2949" fg:w="18"/><text x="26.3381%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.10%)</title><rect x="26.1500%" y="581" width="0.0973%" height="15" fill="rgb(252,114,18)" fg:x="2956" fg:w="11"/><text x="26.4000%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.04%)</title><rect x="26.2031%" y="565" width="0.0442%" height="15" fill="rgb(223,58,37)" fg:x="2962" fg:w="5"/><text x="26.4531%" y="575.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.03%)</title><rect x="26.2473%" y="629" width="0.0265%" height="15" fill="rgb(237,70,4)" fg:x="2967" fg:w="3"/><text x="26.4973%" y="639.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="26.2739%" y="549" width="0.0177%" height="15" fill="rgb(244,85,46)" fg:x="2970" fg:w="2"/><text x="26.5239%" y="559.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="26.2739%" y="533" width="0.0177%" height="15" fill="rgb(223,39,52)" fg:x="2970" fg:w="2"/><text x="26.5239%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="26.2739%" y="517" width="0.0177%" height="15" fill="rgb(218,200,14)" fg:x="2970" fg:w="2"/><text x="26.5239%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="26.2739%" y="501" width="0.0177%" height="15" fill="rgb(208,171,16)" fg:x="2970" fg:w="2"/><text x="26.5239%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="26.2739%" y="485" width="0.0177%" height="15" fill="rgb(234,200,18)" fg:x="2970" fg:w="2"/><text x="26.5239%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.06%)</title><rect x="26.3358%" y="485" width="0.0619%" height="15" fill="rgb(228,45,11)" fg:x="2977" fg:w="7"/><text x="26.5858%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.04%)</title><rect x="26.3535%" y="469" width="0.0442%" height="15" fill="rgb(237,182,11)" fg:x="2979" fg:w="5"/><text x="26.6035%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.36%)</title><rect x="26.0881%" y="661" width="0.3627%" height="15" fill="rgb(241,175,49)" fg:x="2949" fg:w="41"/><text x="26.3381%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.36%)</title><rect x="26.0881%" y="645" width="0.3627%" height="15" fill="rgb(247,38,35)" fg:x="2949" fg:w="41"/><text x="26.3381%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20 samples, 0.18%)</title><rect x="26.2739%" y="629" width="0.1769%" height="15" fill="rgb(228,39,49)" fg:x="2970" fg:w="20"/><text x="26.5239%" y="639.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (20 samples, 0.18%)</title><rect x="26.2739%" y="613" width="0.1769%" height="15" fill="rgb(226,101,26)" fg:x="2970" fg:w="20"/><text x="26.5239%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (20 samples, 0.18%)</title><rect x="26.2739%" y="597" width="0.1769%" height="15" fill="rgb(206,141,19)" fg:x="2970" fg:w="20"/><text x="26.5239%" y="607.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (20 samples, 0.18%)</title><rect x="26.2739%" y="581" width="0.1769%" height="15" fill="rgb(211,200,13)" fg:x="2970" fg:w="20"/><text x="26.5239%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (20 samples, 0.18%)</title><rect x="26.2739%" y="565" width="0.1769%" height="15" fill="rgb(241,121,6)" fg:x="2970" fg:w="20"/><text x="26.5239%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (18 samples, 0.16%)</title><rect x="26.2916%" y="549" width="0.1592%" height="15" fill="rgb(234,221,29)" fg:x="2972" fg:w="18"/><text x="26.5416%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.16%)</title><rect x="26.2916%" y="533" width="0.1592%" height="15" fill="rgb(229,136,5)" fg:x="2972" fg:w="18"/><text x="26.5416%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (18 samples, 0.16%)</title><rect x="26.2916%" y="517" width="0.1592%" height="15" fill="rgb(238,36,11)" fg:x="2972" fg:w="18"/><text x="26.5416%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.16%)</title><rect x="26.2916%" y="501" width="0.1592%" height="15" fill="rgb(251,55,41)" fg:x="2972" fg:w="18"/><text x="26.5416%" y="511.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.05%)</title><rect x="26.3977%" y="485" width="0.0531%" height="15" fill="rgb(242,34,40)" fg:x="2984" fg:w="6"/><text x="26.6477%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.03%)</title><rect x="26.4774%" y="629" width="0.0265%" height="15" fill="rgb(215,42,17)" fg:x="2993" fg:w="3"/><text x="26.7274%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.03%)</title><rect x="26.4774%" y="613" width="0.0265%" height="15" fill="rgb(207,44,46)" fg:x="2993" fg:w="3"/><text x="26.7274%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.03%)</title><rect x="26.4774%" y="597" width="0.0265%" height="15" fill="rgb(211,206,28)" fg:x="2993" fg:w="3"/><text x="26.7274%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.07%)</title><rect x="26.4508%" y="661" width="0.0708%" height="15" fill="rgb(237,167,16)" fg:x="2990" fg:w="8"/><text x="26.7008%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (8 samples, 0.07%)</title><rect x="26.4508%" y="645" width="0.0708%" height="15" fill="rgb(233,66,6)" fg:x="2990" fg:w="8"/><text x="26.7008%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (8 samples, 0.07%)</title><rect x="26.5216%" y="645" width="0.0708%" height="15" fill="rgb(246,123,29)" fg:x="2998" fg:w="8"/><text x="26.7716%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8 samples, 0.07%)</title><rect x="26.5216%" y="629" width="0.0708%" height="15" fill="rgb(209,62,40)" fg:x="2998" fg:w="8"/><text x="26.7716%" y="639.50"></text></g><g><title>core::ptr::write (8 samples, 0.07%)</title><rect x="26.5216%" y="613" width="0.0708%" height="15" fill="rgb(218,4,25)" fg:x="2998" fg:w="8"/><text x="26.7716%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (71 samples, 0.63%)</title><rect x="25.9820%" y="725" width="0.6281%" height="15" fill="rgb(253,91,49)" fg:x="2937" fg:w="71"/><text x="26.2320%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (71 samples, 0.63%)</title><rect x="25.9820%" y="709" width="0.6281%" height="15" fill="rgb(228,155,29)" fg:x="2937" fg:w="71"/><text x="26.2320%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (71 samples, 0.63%)</title><rect x="25.9820%" y="693" width="0.6281%" height="15" fill="rgb(243,57,37)" fg:x="2937" fg:w="71"/><text x="26.2320%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (68 samples, 0.60%)</title><rect x="26.0085%" y="677" width="0.6016%" height="15" fill="rgb(244,167,17)" fg:x="2940" fg:w="68"/><text x="26.2585%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (10 samples, 0.09%)</title><rect x="26.5216%" y="661" width="0.0885%" height="15" fill="rgb(207,181,38)" fg:x="2998" fg:w="10"/><text x="26.7716%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2 samples, 0.02%)</title><rect x="26.5924%" y="645" width="0.0177%" height="15" fill="rgb(211,8,23)" fg:x="3006" fg:w="2"/><text x="26.8424%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (77 samples, 0.68%)</title><rect x="25.9377%" y="805" width="0.6812%" height="15" fill="rgb(235,11,44)" fg:x="2932" fg:w="77"/><text x="26.1877%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (77 samples, 0.68%)</title><rect x="25.9377%" y="789" width="0.6812%" height="15" fill="rgb(248,18,52)" fg:x="2932" fg:w="77"/><text x="26.1877%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (76 samples, 0.67%)</title><rect x="25.9466%" y="773" width="0.6723%" height="15" fill="rgb(208,4,7)" fg:x="2933" fg:w="76"/><text x="26.1966%" y="783.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (76 samples, 0.67%)</title><rect x="25.9466%" y="757" width="0.6723%" height="15" fill="rgb(240,17,39)" fg:x="2933" fg:w="76"/><text x="26.1966%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (76 samples, 0.67%)</title><rect x="25.9466%" y="741" width="0.6723%" height="15" fill="rgb(207,170,3)" fg:x="2933" fg:w="76"/><text x="26.1966%" y="751.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (88 samples, 0.78%)</title><rect x="25.8758%" y="901" width="0.7785%" height="15" fill="rgb(236,100,52)" fg:x="2925" fg:w="88"/><text x="26.1258%" y="911.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (88 samples, 0.78%)</title><rect x="25.8758%" y="885" width="0.7785%" height="15" fill="rgb(246,78,51)" fg:x="2925" fg:w="88"/><text x="26.1258%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (88 samples, 0.78%)</title><rect x="25.8758%" y="869" width="0.7785%" height="15" fill="rgb(211,17,15)" fg:x="2925" fg:w="88"/><text x="26.1258%" y="879.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (88 samples, 0.78%)</title><rect x="25.8758%" y="853" width="0.7785%" height="15" fill="rgb(209,59,46)" fg:x="2925" fg:w="88"/><text x="26.1258%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (81 samples, 0.72%)</title><rect x="25.9377%" y="837" width="0.7166%" height="15" fill="rgb(210,92,25)" fg:x="2932" fg:w="81"/><text x="26.1877%" y="847.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (81 samples, 0.72%)</title><rect x="25.9377%" y="821" width="0.7166%" height="15" fill="rgb(238,174,52)" fg:x="2932" fg:w="81"/><text x="26.1877%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4 samples, 0.04%)</title><rect x="26.6189%" y="805" width="0.0354%" height="15" fill="rgb(230,73,7)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.04%)</title><rect x="26.6189%" y="789" width="0.0354%" height="15" fill="rgb(243,124,40)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.04%)</title><rect x="26.6189%" y="773" width="0.0354%" height="15" fill="rgb(244,170,11)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4 samples, 0.04%)</title><rect x="26.6189%" y="757" width="0.0354%" height="15" fill="rgb(207,114,54)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4 samples, 0.04%)</title><rect x="26.6189%" y="741" width="0.0354%" height="15" fill="rgb(205,42,20)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (4 samples, 0.04%)</title><rect x="26.6189%" y="725" width="0.0354%" height="15" fill="rgb(230,30,28)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (4 samples, 0.04%)</title><rect x="26.6189%" y="709" width="0.0354%" height="15" fill="rgb(205,73,54)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="719.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (4 samples, 0.04%)</title><rect x="26.6189%" y="693" width="0.0354%" height="15" fill="rgb(254,227,23)" fg:x="3009" fg:w="4"/><text x="26.8689%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (3 samples, 0.03%)</title><rect x="26.6277%" y="677" width="0.0265%" height="15" fill="rgb(228,202,34)" fg:x="3010" fg:w="3"/><text x="26.8777%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (3 samples, 0.03%)</title><rect x="26.6277%" y="661" width="0.0265%" height="15" fill="rgb(222,225,37)" fg:x="3010" fg:w="3"/><text x="26.8777%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="26.6808%" y="805" width="0.0354%" height="15" fill="rgb(221,14,54)" fg:x="3016" fg:w="4"/><text x="26.9308%" y="815.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.03%)</title><rect x="26.6897%" y="789" width="0.0265%" height="15" fill="rgb(254,102,2)" fg:x="3017" fg:w="3"/><text x="26.9397%" y="799.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (2 samples, 0.02%)</title><rect x="26.6985%" y="773" width="0.0177%" height="15" fill="rgb(232,104,17)" fg:x="3018" fg:w="2"/><text x="26.9485%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.02%)</title><rect x="26.6985%" y="757" width="0.0177%" height="15" fill="rgb(250,220,14)" fg:x="3018" fg:w="2"/><text x="26.9485%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.02%)</title><rect x="26.6985%" y="741" width="0.0177%" height="15" fill="rgb(241,158,9)" fg:x="3018" fg:w="2"/><text x="26.9485%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (9 samples, 0.08%)</title><rect x="26.6631%" y="837" width="0.0796%" height="15" fill="rgb(246,9,43)" fg:x="3014" fg:w="9"/><text x="26.9131%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (9 samples, 0.08%)</title><rect x="26.6631%" y="821" width="0.0796%" height="15" fill="rgb(206,73,33)" fg:x="3014" fg:w="9"/><text x="26.9131%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.03%)</title><rect x="26.7162%" y="805" width="0.0265%" height="15" fill="rgb(222,79,8)" fg:x="3020" fg:w="3"/><text x="26.9662%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.03%)</title><rect x="26.7162%" y="789" width="0.0265%" height="15" fill="rgb(234,8,54)" fg:x="3020" fg:w="3"/><text x="26.9662%" y="799.50"></text></g><g><title>core::ptr::write (3 samples, 0.03%)</title><rect x="26.7162%" y="773" width="0.0265%" height="15" fill="rgb(209,134,38)" fg:x="3020" fg:w="3"/><text x="26.9662%" y="783.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (100 samples, 0.88%)</title><rect x="25.8758%" y="949" width="0.8846%" height="15" fill="rgb(230,127,29)" fg:x="2925" fg:w="100"/><text x="26.1258%" y="959.50"></text></g><g><title>core::ops::function::Fn::call (100 samples, 0.88%)</title><rect x="25.8758%" y="933" width="0.8846%" height="15" fill="rgb(242,44,41)" fg:x="2925" fg:w="100"/><text x="26.1258%" y="943.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (100 samples, 0.88%)</title><rect x="25.8758%" y="917" width="0.8846%" height="15" fill="rgb(222,56,43)" fg:x="2925" fg:w="100"/><text x="26.1258%" y="927.50"></text></g><g><title>&lt;revm_precompile::Precompiles as core::clone::Clone&gt;::clone (12 samples, 0.11%)</title><rect x="26.6543%" y="901" width="0.1062%" height="15" fill="rgb(238,39,47)" fg:x="3013" fg:w="12"/><text x="26.9043%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (12 samples, 0.11%)</title><rect x="26.6543%" y="885" width="0.1062%" height="15" fill="rgb(226,79,43)" fg:x="3013" fg:w="12"/><text x="26.9043%" y="895.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.11%)</title><rect x="26.6543%" y="869" width="0.1062%" height="15" fill="rgb(242,105,53)" fg:x="3013" fg:w="12"/><text x="26.9043%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="26.6631%" y="853" width="0.0973%" height="15" fill="rgb(251,132,46)" fg:x="3014" fg:w="11"/><text x="26.9131%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (2 samples, 0.02%)</title><rect x="26.7427%" y="837" width="0.0177%" height="15" fill="rgb(231,77,14)" fg:x="3023" fg:w="2"/><text x="26.9927%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.02%)</title><rect x="26.7427%" y="821" width="0.0177%" height="15" fill="rgb(240,135,9)" fg:x="3023" fg:w="2"/><text x="26.9927%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="26.7604%" y="933" width="0.0177%" height="15" fill="rgb(248,109,14)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="943.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="26.7604%" y="917" width="0.0177%" height="15" fill="rgb(227,146,52)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="26.7604%" y="901" width="0.0177%" height="15" fill="rgb(232,54,3)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="26.7604%" y="885" width="0.0177%" height="15" fill="rgb(229,201,43)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="26.7604%" y="869" width="0.0177%" height="15" fill="rgb(252,161,33)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="26.7604%" y="853" width="0.0177%" height="15" fill="rgb(226,146,40)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="863.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="26.7604%" y="837" width="0.0177%" height="15" fill="rgb(219,47,25)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="847.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="26.7604%" y="821" width="0.0177%" height="15" fill="rgb(250,135,13)" fg:x="3025" fg:w="2"/><text x="27.0104%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,630 samples, 23.27%)</title><rect x="3.6005%" y="1045" width="23.2661%" height="15" fill="rgb(219,229,18)" fg:x="407" fg:w="2630"/><text x="3.8505%" y="1055.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; ..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,630 samples, 23.27%)</title><rect x="3.6005%" y="1029" width="23.2661%" height="15" fill="rgb(217,152,27)" fg:x="407" fg:w="2630"/><text x="3.8505%" y="1039.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,630 samples, 23.27%)</title><rect x="3.6005%" y="1013" width="23.2661%" height="15" fill="rgb(225,71,47)" fg:x="407" fg:w="2630"/><text x="3.8505%" y="1023.50">core::iter::adapters::map::map_fold::..</text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (2,630 samples, 23.27%)</title><rect x="3.6005%" y="997" width="23.2661%" height="15" fill="rgb(220,139,14)" fg:x="407" fg:w="2630"/><text x="3.8505%" y="1007.50">block_stm_revm::execute_sequential::_..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (2,288 samples, 20.24%)</title><rect x="6.6260%" y="981" width="20.2406%" height="15" fill="rgb(247,54,32)" fg:x="749" fg:w="2288"/><text x="6.8760%" y="991.50">revm::evm::Evm&lt;EXT,DB&gt;::transact</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (2,288 samples, 20.24%)</title><rect x="6.6260%" y="965" width="20.2406%" height="15" fill="rgb(252,131,39)" fg:x="749" fg:w="2288"/><text x="6.8760%" y="975.50">revm::evm::Evm&lt;EXT,DB&gt;::transact..</text></g><g><title>revm_interpreter::inner_models::CallInputs::new_boxed (12 samples, 0.11%)</title><rect x="26.7604%" y="949" width="0.1062%" height="15" fill="rgb(210,108,39)" fg:x="3025" fg:w="12"/><text x="27.0104%" y="959.50"></text></g><g><title>revm_interpreter::inner_models::CallInputs::new (10 samples, 0.09%)</title><rect x="26.7781%" y="933" width="0.0885%" height="15" fill="rgb(205,23,29)" fg:x="3027" fg:w="10"/><text x="27.0281%" y="943.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="26.8401%" y="917" width="0.0265%" height="15" fill="rgb(246,139,46)" fg:x="3034" fg:w="3"/><text x="27.0901%" y="927.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="26.8401%" y="901" width="0.0265%" height="15" fill="rgb(250,81,26)" fg:x="3034" fg:w="3"/><text x="27.0901%" y="911.50"></text></g><g><title>bytes::bytes::shared_clone (2 samples, 0.02%)</title><rect x="26.8489%" y="885" width="0.0177%" height="15" fill="rgb(214,104,7)" fg:x="3035" fg:w="2"/><text x="27.0989%" y="895.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (2 samples, 0.02%)</title><rect x="26.8489%" y="869" width="0.0177%" height="15" fill="rgb(233,189,8)" fg:x="3035" fg:w="2"/><text x="27.0989%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="26.8489%" y="853" width="0.0177%" height="15" fill="rgb(228,141,17)" fg:x="3035" fg:w="2"/><text x="27.0989%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="26.8489%" y="837" width="0.0177%" height="15" fill="rgb(247,157,1)" fg:x="3035" fg:w="2"/><text x="27.0989%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="26.8754%" y="1045" width="0.0177%" height="15" fill="rgb(249,225,5)" fg:x="3038" fg:w="2"/><text x="27.1254%" y="1055.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sload (2 samples, 0.02%)</title><rect x="26.8931%" y="1045" width="0.0177%" height="15" fill="rgb(242,55,13)" fg:x="3040" fg:w="2"/><text x="27.1431%" y="1055.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.12%)</title><rect x="26.9285%" y="1045" width="0.1238%" height="15" fill="rgb(230,49,50)" fg:x="3044" fg:w="14"/><text x="27.1785%" y="1055.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (3 samples, 0.03%)</title><rect x="27.0524%" y="1045" width="0.0265%" height="15" fill="rgb(241,111,38)" fg:x="3058" fg:w="3"/><text x="27.3024%" y="1055.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::finalize (2 samples, 0.02%)</title><rect x="27.0612%" y="1029" width="0.0177%" height="15" fill="rgb(252,155,4)" fg:x="3059" fg:w="2"/><text x="27.3112%" y="1039.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::squeeze (2 samples, 0.02%)</title><rect x="27.0612%" y="1013" width="0.0177%" height="15" fill="rgb(212,69,32)" fg:x="3059" fg:w="2"/><text x="27.3112%" y="1023.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (7 samples, 0.06%)</title><rect x="27.0789%" y="1045" width="0.0619%" height="15" fill="rgb(243,107,47)" fg:x="3061" fg:w="7"/><text x="27.3289%" y="1055.50"></text></g><g><title>__GI___libc_free (19 samples, 0.17%)</title><rect x="27.1408%" y="1045" width="0.1681%" height="15" fill="rgb(247,130,12)" fg:x="3068" fg:w="19"/><text x="27.3908%" y="1055.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.12%)</title><rect x="27.3089%" y="1045" width="0.1238%" height="15" fill="rgb(233,74,16)" fg:x="3087" fg:w="14"/><text x="27.5589%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="27.4682%" y="533" width="0.0354%" height="15" fill="rgb(208,58,18)" fg:x="3105" fg:w="4"/><text x="27.7182%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.04%)</title><rect x="27.4682%" y="517" width="0.0354%" height="15" fill="rgb(242,225,1)" fg:x="3105" fg:w="4"/><text x="27.7182%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.04%)</title><rect x="27.4682%" y="501" width="0.0354%" height="15" fill="rgb(249,39,40)" fg:x="3105" fg:w="4"/><text x="27.7182%" y="511.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="27.4682%" y="485" width="0.0354%" height="15" fill="rgb(207,72,44)" fg:x="3105" fg:w="4"/><text x="27.7182%" y="495.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="27.4682%" y="469" width="0.0354%" height="15" fill="rgb(215,193,12)" fg:x="3105" fg:w="4"/><text x="27.7182%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (6 samples, 0.05%)</title><rect x="27.4682%" y="549" width="0.0531%" height="15" fill="rgb(248,41,39)" fg:x="3105" fg:w="6"/><text x="27.7182%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::Env&gt; (2 samples, 0.02%)</title><rect x="27.5035%" y="533" width="0.0177%" height="15" fill="rgb(253,85,4)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (2 samples, 0.02%)</title><rect x="27.5035%" y="517" width="0.0177%" height="15" fill="rgb(243,70,31)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="27.5035%" y="501" width="0.0177%" height="15" fill="rgb(253,195,26)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="27.5035%" y="485" width="0.0177%" height="15" fill="rgb(243,42,11)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="495.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="27.5035%" y="469" width="0.0177%" height="15" fill="rgb(239,66,17)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="479.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.02%)</title><rect x="27.5035%" y="453" width="0.0177%" height="15" fill="rgb(217,132,21)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="463.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="27.5035%" y="437" width="0.0177%" height="15" fill="rgb(252,202,21)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="447.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.02%)</title><rect x="27.5035%" y="421" width="0.0177%" height="15" fill="rgb(233,98,36)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="431.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.02%)</title><rect x="27.5035%" y="405" width="0.0177%" height="15" fill="rgb(216,153,54)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="27.5035%" y="389" width="0.0177%" height="15" fill="rgb(250,99,7)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="27.5035%" y="373" width="0.0177%" height="15" fill="rgb(207,56,50)" fg:x="3109" fg:w="2"/><text x="27.7535%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (11 samples, 0.10%)</title><rect x="27.4505%" y="597" width="0.0973%" height="15" fill="rgb(244,61,34)" fg:x="3103" fg:w="11"/><text x="27.7005%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (11 samples, 0.10%)</title><rect x="27.4505%" y="581" width="0.0973%" height="15" fill="rgb(241,50,38)" fg:x="3103" fg:w="11"/><text x="27.7005%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (10 samples, 0.09%)</title><rect x="27.4593%" y="565" width="0.0885%" height="15" fill="rgb(212,166,30)" fg:x="3104" fg:w="10"/><text x="27.7093%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::journaled_state::JournaledState&gt; (3 samples, 0.03%)</title><rect x="27.5212%" y="549" width="0.0265%" height="15" fill="rgb(249,127,32)" fg:x="3111" fg:w="3"/><text x="27.7712%" y="559.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="27.5478%" y="565" width="0.0177%" height="15" fill="rgb(209,103,0)" fg:x="3114" fg:w="2"/><text x="27.7978%" y="575.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="27.5478%" y="581" width="0.0265%" height="15" fill="rgb(238,209,51)" fg:x="3114" fg:w="3"/><text x="27.7978%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.06%)</title><rect x="27.5743%" y="581" width="0.0619%" height="15" fill="rgb(237,56,23)" fg:x="3117" fg:w="7"/><text x="27.8243%" y="591.50"></text></g><g><title>core::mem::drop (7 samples, 0.06%)</title><rect x="27.5743%" y="565" width="0.0619%" height="15" fill="rgb(215,153,46)" fg:x="3117" fg:w="7"/><text x="27.8243%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (7 samples, 0.06%)</title><rect x="27.5743%" y="549" width="0.0619%" height="15" fill="rgb(224,49,31)" fg:x="3117" fg:w="7"/><text x="27.8243%" y="559.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="27.5743%" y="533" width="0.0619%" height="15" fill="rgb(250,18,42)" fg:x="3117" fg:w="7"/><text x="27.8243%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.05%)</title><rect x="27.5832%" y="517" width="0.0531%" height="15" fill="rgb(215,176,39)" fg:x="3118" fg:w="6"/><text x="27.8332%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.05%)</title><rect x="27.5832%" y="501" width="0.0531%" height="15" fill="rgb(223,77,29)" fg:x="3118" fg:w="6"/><text x="27.8332%" y="511.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="27.6362%" y="533" width="0.0265%" height="15" fill="rgb(234,94,52)" fg:x="3124" fg:w="3"/><text x="27.8862%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (11 samples, 0.10%)</title><rect x="27.6362%" y="565" width="0.0973%" height="15" fill="rgb(220,154,50)" fg:x="3124" fg:w="11"/><text x="27.8862%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.10%)</title><rect x="27.6362%" y="549" width="0.0973%" height="15" fill="rgb(212,11,10)" fg:x="3124" fg:w="11"/><text x="27.8862%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (7 samples, 0.06%)</title><rect x="27.6716%" y="533" width="0.0619%" height="15" fill="rgb(205,166,19)" fg:x="3128" fg:w="7"/><text x="27.9216%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (7 samples, 0.06%)</title><rect x="27.6716%" y="517" width="0.0619%" height="15" fill="rgb(244,198,16)" fg:x="3128" fg:w="7"/><text x="27.9216%" y="527.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="27.7335%" y="533" width="0.0177%" height="15" fill="rgb(219,69,12)" fg:x="3135" fg:w="2"/><text x="27.9835%" y="543.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="27.7335%" y="517" width="0.0177%" height="15" fill="rgb(245,30,7)" fg:x="3135" fg:w="2"/><text x="27.9835%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="27.7512%" y="533" width="0.0177%" height="15" fill="rgb(218,221,48)" fg:x="3137" fg:w="2"/><text x="28.0012%" y="543.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="27.7512%" y="517" width="0.0177%" height="15" fill="rgb(216,66,15)" fg:x="3137" fg:w="2"/><text x="28.0012%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="27.7512%" y="501" width="0.0177%" height="15" fill="rgb(226,122,50)" fg:x="3137" fg:w="2"/><text x="28.0012%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="27.7512%" y="485" width="0.0177%" height="15" fill="rgb(239,156,16)" fg:x="3137" fg:w="2"/><text x="28.0012%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (16 samples, 0.14%)</title><rect x="27.6362%" y="581" width="0.1415%" height="15" fill="rgb(224,27,38)" fg:x="3124" fg:w="16"/><text x="27.8862%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="27.7335%" y="565" width="0.0442%" height="15" fill="rgb(224,39,27)" fg:x="3135" fg:w="5"/><text x="27.9835%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="27.7335%" y="549" width="0.0442%" height="15" fill="rgb(215,92,29)" fg:x="3135" fg:w="5"/><text x="27.9835%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.05%)</title><rect x="27.7955%" y="533" width="0.0531%" height="15" fill="rgb(207,159,16)" fg:x="3142" fg:w="6"/><text x="28.0455%" y="543.50"></text></g><g><title>core::mem::drop (5 samples, 0.04%)</title><rect x="27.8043%" y="517" width="0.0442%" height="15" fill="rgb(238,163,47)" fg:x="3143" fg:w="5"/><text x="28.0543%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (5 samples, 0.04%)</title><rect x="27.8043%" y="501" width="0.0442%" height="15" fill="rgb(219,91,49)" fg:x="3143" fg:w="5"/><text x="28.0543%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="27.8043%" y="485" width="0.0442%" height="15" fill="rgb(227,167,31)" fg:x="3143" fg:w="5"/><text x="28.0543%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="27.8132%" y="469" width="0.0354%" height="15" fill="rgb(234,80,54)" fg:x="3144" fg:w="4"/><text x="28.0632%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="27.8132%" y="453" width="0.0354%" height="15" fill="rgb(212,114,2)" fg:x="3144" fg:w="4"/><text x="28.0632%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (12 samples, 0.11%)</title><rect x="27.7866%" y="565" width="0.1062%" height="15" fill="rgb(234,50,24)" fg:x="3141" fg:w="12"/><text x="28.0366%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.11%)</title><rect x="27.7866%" y="549" width="0.1062%" height="15" fill="rgb(221,68,8)" fg:x="3141" fg:w="12"/><text x="28.0366%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="27.8485%" y="533" width="0.0442%" height="15" fill="rgb(254,180,31)" fg:x="3148" fg:w="5"/><text x="28.0985%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="27.8485%" y="517" width="0.0442%" height="15" fill="rgb(247,130,50)" fg:x="3148" fg:w="5"/><text x="28.0985%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="27.9105%" y="533" width="0.0265%" height="15" fill="rgb(211,109,4)" fg:x="3155" fg:w="3"/><text x="28.1605%" y="543.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="27.9105%" y="517" width="0.0265%" height="15" fill="rgb(238,50,21)" fg:x="3155" fg:w="3"/><text x="28.1605%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="27.9105%" y="501" width="0.0265%" height="15" fill="rgb(225,57,45)" fg:x="3155" fg:w="3"/><text x="28.1605%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="27.9105%" y="485" width="0.0265%" height="15" fill="rgb(209,196,50)" fg:x="3155" fg:w="3"/><text x="28.1605%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="27.9193%" y="469" width="0.0177%" height="15" fill="rgb(242,140,13)" fg:x="3156" fg:w="2"/><text x="28.1693%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="27.9193%" y="453" width="0.0177%" height="15" fill="rgb(217,111,7)" fg:x="3156" fg:w="2"/><text x="28.1693%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (21 samples, 0.19%)</title><rect x="27.7778%" y="581" width="0.1858%" height="15" fill="rgb(253,193,51)" fg:x="3140" fg:w="21"/><text x="28.0278%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="27.8928%" y="565" width="0.0708%" height="15" fill="rgb(252,70,29)" fg:x="3153" fg:w="8"/><text x="28.1428%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="27.8928%" y="549" width="0.0708%" height="15" fill="rgb(232,127,12)" fg:x="3153" fg:w="8"/><text x="28.1428%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="27.9370%" y="533" width="0.0265%" height="15" fill="rgb(211,180,21)" fg:x="3158" fg:w="3"/><text x="28.1870%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="27.9370%" y="517" width="0.0265%" height="15" fill="rgb(229,72,13)" fg:x="3158" fg:w="3"/><text x="28.1870%" y="527.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="27.9636%" y="533" width="0.0177%" height="15" fill="rgb(240,211,49)" fg:x="3161" fg:w="2"/><text x="28.2136%" y="543.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="27.9636%" y="517" width="0.0177%" height="15" fill="rgb(219,149,40)" fg:x="3161" fg:w="2"/><text x="28.2136%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="27.9901%" y="533" width="0.0177%" height="15" fill="rgb(210,127,46)" fg:x="3164" fg:w="2"/><text x="28.2401%" y="543.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="27.9901%" y="517" width="0.0177%" height="15" fill="rgb(220,106,7)" fg:x="3164" fg:w="2"/><text x="28.2401%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="27.9901%" y="501" width="0.0177%" height="15" fill="rgb(249,31,22)" fg:x="3164" fg:w="2"/><text x="28.2401%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="27.9901%" y="485" width="0.0177%" height="15" fill="rgb(253,1,49)" fg:x="3164" fg:w="2"/><text x="28.2401%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="27.9901%" y="469" width="0.0177%" height="15" fill="rgb(227,144,33)" fg:x="3164" fg:w="2"/><text x="28.2401%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="27.9901%" y="453" width="0.0177%" height="15" fill="rgb(249,163,44)" fg:x="3164" fg:w="2"/><text x="28.2401%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="27.9636%" y="565" width="0.0619%" height="15" fill="rgb(234,15,39)" fg:x="3161" fg:w="7"/><text x="28.2136%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="27.9636%" y="549" width="0.0619%" height="15" fill="rgb(207,66,16)" fg:x="3161" fg:w="7"/><text x="28.2136%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="28.0078%" y="533" width="0.0177%" height="15" fill="rgb(233,112,24)" fg:x="3166" fg:w="2"/><text x="28.2578%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="28.0078%" y="517" width="0.0177%" height="15" fill="rgb(230,90,22)" fg:x="3166" fg:w="2"/><text x="28.2578%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="28.0255%" y="565" width="0.0177%" height="15" fill="rgb(229,61,13)" fg:x="3168" fg:w="2"/><text x="28.2755%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="28.0255%" y="549" width="0.0177%" height="15" fill="rgb(225,57,24)" fg:x="3168" fg:w="2"/><text x="28.2755%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (59 samples, 0.52%)</title><rect x="27.5478%" y="597" width="0.5219%" height="15" fill="rgb(208,169,48)" fg:x="3114" fg:w="59"/><text x="27.7978%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (12 samples, 0.11%)</title><rect x="27.9636%" y="581" width="0.1062%" height="15" fill="rgb(244,218,51)" fg:x="3161" fg:w="12"/><text x="28.2136%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="28.0432%" y="565" width="0.0265%" height="15" fill="rgb(214,148,10)" fg:x="3170" fg:w="3"/><text x="28.2932%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="28.0432%" y="549" width="0.0265%" height="15" fill="rgb(225,174,27)" fg:x="3170" fg:w="3"/><text x="28.2932%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="28.0697%" y="581" width="0.0265%" height="15" fill="rgb(230,96,26)" fg:x="3173" fg:w="3"/><text x="28.3197%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="28.0697%" y="565" width="0.0265%" height="15" fill="rgb(232,10,30)" fg:x="3173" fg:w="3"/><text x="28.3197%" y="575.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="28.0697%" y="549" width="0.0265%" height="15" fill="rgb(222,8,50)" fg:x="3173" fg:w="3"/><text x="28.3197%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="28.0962%" y="581" width="0.0354%" height="15" fill="rgb(213,81,27)" fg:x="3176" fg:w="4"/><text x="28.3462%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="28.0962%" y="565" width="0.0354%" height="15" fill="rgb(245,50,10)" fg:x="3176" fg:w="4"/><text x="28.3462%" y="575.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="28.0962%" y="549" width="0.0354%" height="15" fill="rgb(216,100,18)" fg:x="3176" fg:w="4"/><text x="28.3462%" y="559.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="28.0962%" y="533" width="0.0354%" height="15" fill="rgb(236,147,54)" fg:x="3176" fg:w="4"/><text x="28.3462%" y="543.50"></text></g><g><title>free_perturb (2 samples, 0.02%)</title><rect x="28.1139%" y="517" width="0.0177%" height="15" fill="rgb(205,143,26)" fg:x="3178" fg:w="2"/><text x="28.3639%" y="527.50"></text></g><g><title>__libc_start_call_main (81 samples, 0.72%)</title><rect x="27.4416%" y="1045" width="0.7166%" height="15" fill="rgb(236,26,9)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="1055.50"></text></g><g><title>main (81 samples, 0.72%)</title><rect x="27.4416%" y="1029" width="0.7166%" height="15" fill="rgb(221,165,53)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="1039.50"></text></g><g><title>std::rt::lang_start_internal (81 samples, 0.72%)</title><rect x="27.4416%" y="1013" width="0.7166%" height="15" fill="rgb(214,110,17)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (81 samples, 0.72%)</title><rect x="27.4416%" y="997" width="0.7166%" height="15" fill="rgb(237,197,12)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="1007.50"></text></g><g><title>std::panicking::try (81 samples, 0.72%)</title><rect x="27.4416%" y="981" width="0.7166%" height="15" fill="rgb(205,84,17)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="991.50"></text></g><g><title>std::panicking::try::do_call (81 samples, 0.72%)</title><rect x="27.4416%" y="965" width="0.7166%" height="15" fill="rgb(237,18,45)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="975.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (81 samples, 0.72%)</title><rect x="27.4416%" y="949" width="0.7166%" height="15" fill="rgb(221,87,14)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="959.50"></text></g><g><title>std::panic::catch_unwind (81 samples, 0.72%)</title><rect x="27.4416%" y="933" width="0.7166%" height="15" fill="rgb(238,186,15)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="943.50"></text></g><g><title>std::panicking::try (81 samples, 0.72%)</title><rect x="27.4416%" y="917" width="0.7166%" height="15" fill="rgb(208,115,11)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="927.50"></text></g><g><title>std::panicking::try::do_call (81 samples, 0.72%)</title><rect x="27.4416%" y="901" width="0.7166%" height="15" fill="rgb(254,175,0)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="911.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (81 samples, 0.72%)</title><rect x="27.4416%" y="885" width="0.7166%" height="15" fill="rgb(227,24,42)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="895.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (81 samples, 0.72%)</title><rect x="27.4416%" y="869" width="0.7166%" height="15" fill="rgb(223,211,37)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="879.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (81 samples, 0.72%)</title><rect x="27.4416%" y="853" width="0.7166%" height="15" fill="rgb(235,49,27)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once (81 samples, 0.72%)</title><rect x="27.4416%" y="837" width="0.7166%" height="15" fill="rgb(254,97,51)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="847.50"></text></g><g><title>block_stm_revm::main (81 samples, 0.72%)</title><rect x="27.4416%" y="821" width="0.7166%" height="15" fill="rgb(249,51,40)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="831.50"></text></g><g><title>block_stm_revm::execute_sequential (81 samples, 0.72%)</title><rect x="27.4416%" y="805" width="0.7166%" height="15" fill="rgb(210,128,45)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (81 samples, 0.72%)</title><rect x="27.4416%" y="789" width="0.7166%" height="15" fill="rgb(224,137,50)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (81 samples, 0.72%)</title><rect x="27.4416%" y="773" width="0.7166%" height="15" fill="rgb(242,15,9)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (81 samples, 0.72%)</title><rect x="27.4416%" y="757" width="0.7166%" height="15" fill="rgb(233,187,41)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (81 samples, 0.72%)</title><rect x="27.4416%" y="741" width="0.7166%" height="15" fill="rgb(227,2,29)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (81 samples, 0.72%)</title><rect x="27.4416%" y="725" width="0.7166%" height="15" fill="rgb(222,70,3)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (81 samples, 0.72%)</title><rect x="27.4416%" y="709" width="0.7166%" height="15" fill="rgb(213,11,42)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (81 samples, 0.72%)</title><rect x="27.4416%" y="693" width="0.7166%" height="15" fill="rgb(225,150,9)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (81 samples, 0.72%)</title><rect x="27.4416%" y="677" width="0.7166%" height="15" fill="rgb(230,162,45)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (81 samples, 0.72%)</title><rect x="27.4416%" y="661" width="0.7166%" height="15" fill="rgb(222,14,52)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (81 samples, 0.72%)</title><rect x="27.4416%" y="645" width="0.7166%" height="15" fill="rgb(254,198,14)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="655.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (81 samples, 0.72%)</title><rect x="27.4416%" y="629" width="0.7166%" height="15" fill="rgb(220,217,30)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (81 samples, 0.72%)</title><rect x="27.4416%" y="613" width="0.7166%" height="15" fill="rgb(215,146,41)" fg:x="3102" fg:w="81"/><text x="27.6916%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (10 samples, 0.09%)</title><rect x="28.0697%" y="597" width="0.0885%" height="15" fill="rgb(217,27,36)" fg:x="3173" fg:w="10"/><text x="28.3197%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="28.1582%" y="581" width="0.0177%" height="15" fill="rgb(219,218,39)" fg:x="3183" fg:w="2"/><text x="28.4082%" y="591.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="28.1759%" y="581" width="0.0265%" height="15" fill="rgb(219,4,42)" fg:x="3185" fg:w="3"/><text x="28.4259%" y="591.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="28.1759%" y="565" width="0.0265%" height="15" fill="rgb(249,119,36)" fg:x="3185" fg:w="3"/><text x="28.4259%" y="575.50"></text></g><g><title>bytes::bytes::shared_clone (3 samples, 0.03%)</title><rect x="28.1759%" y="549" width="0.0265%" height="15" fill="rgb(209,23,33)" fg:x="3185" fg:w="3"/><text x="28.4259%" y="559.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (3 samples, 0.03%)</title><rect x="28.1759%" y="533" width="0.0265%" height="15" fill="rgb(211,10,0)" fg:x="3185" fg:w="3"/><text x="28.4259%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.03%)</title><rect x="28.1759%" y="517" width="0.0265%" height="15" fill="rgb(208,99,37)" fg:x="3185" fg:w="3"/><text x="28.4259%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.03%)</title><rect x="28.1759%" y="501" width="0.0265%" height="15" fill="rgb(213,132,31)" fg:x="3185" fg:w="3"/><text x="28.4259%" y="511.50"></text></g><g><title>&lt;revm_primitives::env::TxEnv as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="28.1582%" y="597" width="0.0531%" height="15" fill="rgb(243,129,40)" fg:x="3183" fg:w="6"/><text x="28.4082%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="28.2201%" y="581" width="0.0265%" height="15" fill="rgb(210,66,33)" fg:x="3190" fg:w="3"/><text x="28.4701%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="28.2466%" y="437" width="0.0177%" height="15" fill="rgb(209,189,4)" fg:x="3193" fg:w="2"/><text x="28.4966%" y="447.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.02%)</title><rect x="28.2466%" y="421" width="0.0177%" height="15" fill="rgb(214,107,37)" fg:x="3193" fg:w="2"/><text x="28.4966%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="28.2466%" y="405" width="0.0177%" height="15" fill="rgb(245,88,54)" fg:x="3193" fg:w="2"/><text x="28.4966%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="28.2466%" y="549" width="0.0265%" height="15" fill="rgb(205,146,20)" fg:x="3193" fg:w="3"/><text x="28.4966%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="28.2466%" y="533" width="0.0265%" height="15" fill="rgb(220,161,25)" fg:x="3193" fg:w="3"/><text x="28.4966%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,std::hash::random::RandomState&gt;&gt; (3 samples, 0.03%)</title><rect x="28.2466%" y="517" width="0.0265%" height="15" fill="rgb(215,152,15)" fg:x="3193" fg:w="3"/><text x="28.4966%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;)&gt;&gt; (3 samples, 0.03%)</title><rect x="28.2466%" y="501" width="0.0265%" height="15" fill="rgb(233,192,44)" fg:x="3193" fg:w="3"/><text x="28.4966%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="28.2466%" y="485" width="0.0265%" height="15" fill="rgb(240,170,46)" fg:x="3193" fg:w="3"/><text x="28.4966%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.03%)</title><rect x="28.2466%" y="469" width="0.0265%" height="15" fill="rgb(207,104,33)" fg:x="3193" fg:w="3"/><text x="28.4966%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.03%)</title><rect x="28.2466%" y="453" width="0.0265%" height="15" fill="rgb(219,21,39)" fg:x="3193" fg:w="3"/><text x="28.4966%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="28.2466%" y="581" width="0.0354%" height="15" fill="rgb(214,133,29)" fg:x="3193" fg:w="4"/><text x="28.4966%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="28.2466%" y="565" width="0.0354%" height="15" fill="rgb(226,93,6)" fg:x="3193" fg:w="4"/><text x="28.4966%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="28.2820%" y="581" width="0.0177%" height="15" fill="rgb(252,222,34)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="28.2820%" y="565" width="0.0177%" height="15" fill="rgb(252,92,48)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="575.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="28.2820%" y="549" width="0.0177%" height="15" fill="rgb(245,223,24)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="28.2820%" y="533" width="0.0177%" height="15" fill="rgb(205,176,3)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="543.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="28.2820%" y="517" width="0.0177%" height="15" fill="rgb(235,151,15)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="527.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="28.2820%" y="501" width="0.0177%" height="15" fill="rgb(237,209,11)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="28.2820%" y="485" width="0.0177%" height="15" fill="rgb(243,227,24)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="28.2820%" y="469" width="0.0177%" height="15" fill="rgb(239,193,16)" fg:x="3197" fg:w="2"/><text x="28.5320%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.04%)</title><rect x="28.2997%" y="533" width="0.0354%" height="15" fill="rgb(231,27,9)" fg:x="3199" fg:w="4"/><text x="28.5497%" y="543.50"></text></g><g><title>core::mem::drop (4 samples, 0.04%)</title><rect x="28.2997%" y="517" width="0.0354%" height="15" fill="rgb(219,169,10)" fg:x="3199" fg:w="4"/><text x="28.5497%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (4 samples, 0.04%)</title><rect x="28.2997%" y="501" width="0.0354%" height="15" fill="rgb(244,229,43)" fg:x="3199" fg:w="4"/><text x="28.5497%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="28.2997%" y="485" width="0.0354%" height="15" fill="rgb(254,38,20)" fg:x="3199" fg:w="4"/><text x="28.5497%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="28.3086%" y="469" width="0.0265%" height="15" fill="rgb(250,47,30)" fg:x="3200" fg:w="3"/><text x="28.5586%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="28.3086%" y="453" width="0.0265%" height="15" fill="rgb(224,124,36)" fg:x="3200" fg:w="3"/><text x="28.5586%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="28.2997%" y="565" width="0.0708%" height="15" fill="rgb(246,68,51)" fg:x="3199" fg:w="8"/><text x="28.5497%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="28.2997%" y="549" width="0.0708%" height="15" fill="rgb(253,43,49)" fg:x="3199" fg:w="8"/><text x="28.5497%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="28.3351%" y="533" width="0.0354%" height="15" fill="rgb(219,54,36)" fg:x="3203" fg:w="4"/><text x="28.5851%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="28.3351%" y="517" width="0.0354%" height="15" fill="rgb(227,133,34)" fg:x="3203" fg:w="4"/><text x="28.5851%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="28.3705%" y="565" width="0.0177%" height="15" fill="rgb(247,227,15)" fg:x="3207" fg:w="2"/><text x="28.6205%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="28.3705%" y="549" width="0.0177%" height="15" fill="rgb(229,96,14)" fg:x="3207" fg:w="2"/><text x="28.6205%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="28.3882%" y="533" width="0.0177%" height="15" fill="rgb(220,79,17)" fg:x="3209" fg:w="2"/><text x="28.6382%" y="543.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="28.3882%" y="517" width="0.0177%" height="15" fill="rgb(205,131,53)" fg:x="3209" fg:w="2"/><text x="28.6382%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="28.3882%" y="501" width="0.0177%" height="15" fill="rgb(209,50,29)" fg:x="3209" fg:w="2"/><text x="28.6382%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="28.3882%" y="485" width="0.0177%" height="15" fill="rgb(245,86,46)" fg:x="3209" fg:w="2"/><text x="28.6382%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="28.3882%" y="565" width="0.0531%" height="15" fill="rgb(235,66,46)" fg:x="3209" fg:w="6"/><text x="28.6382%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="28.3882%" y="549" width="0.0531%" height="15" fill="rgb(232,148,31)" fg:x="3209" fg:w="6"/><text x="28.6382%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="28.4059%" y="533" width="0.0354%" height="15" fill="rgb(217,149,8)" fg:x="3211" fg:w="4"/><text x="28.6559%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="28.4059%" y="517" width="0.0354%" height="15" fill="rgb(209,183,11)" fg:x="3211" fg:w="4"/><text x="28.6559%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="28.4413%" y="565" width="0.0265%" height="15" fill="rgb(208,55,20)" fg:x="3215" fg:w="3"/><text x="28.6913%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="28.4413%" y="549" width="0.0265%" height="15" fill="rgb(218,39,14)" fg:x="3215" fg:w="3"/><text x="28.6913%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="28.4678%" y="533" width="0.0177%" height="15" fill="rgb(216,169,33)" fg:x="3218" fg:w="2"/><text x="28.7178%" y="543.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="28.4678%" y="517" width="0.0177%" height="15" fill="rgb(233,80,24)" fg:x="3218" fg:w="2"/><text x="28.7178%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="28.4678%" y="501" width="0.0177%" height="15" fill="rgb(213,179,31)" fg:x="3218" fg:w="2"/><text x="28.7178%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="28.4678%" y="485" width="0.0177%" height="15" fill="rgb(209,19,5)" fg:x="3218" fg:w="2"/><text x="28.7178%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="28.4678%" y="565" width="0.0531%" height="15" fill="rgb(219,18,35)" fg:x="3218" fg:w="6"/><text x="28.7178%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="28.4678%" y="549" width="0.0531%" height="15" fill="rgb(209,169,16)" fg:x="3218" fg:w="6"/><text x="28.7178%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="28.4855%" y="533" width="0.0354%" height="15" fill="rgb(245,90,51)" fg:x="3220" fg:w="4"/><text x="28.7355%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="28.4855%" y="517" width="0.0354%" height="15" fill="rgb(220,99,45)" fg:x="3220" fg:w="4"/><text x="28.7355%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.04%)</title><rect x="28.5297%" y="533" width="0.0442%" height="15" fill="rgb(249,89,25)" fg:x="3225" fg:w="5"/><text x="28.7797%" y="543.50"></text></g><g><title>core::mem::drop (5 samples, 0.04%)</title><rect x="28.5297%" y="517" width="0.0442%" height="15" fill="rgb(239,193,0)" fg:x="3225" fg:w="5"/><text x="28.7797%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (5 samples, 0.04%)</title><rect x="28.5297%" y="501" width="0.0442%" height="15" fill="rgb(231,126,1)" fg:x="3225" fg:w="5"/><text x="28.7797%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="28.5297%" y="485" width="0.0442%" height="15" fill="rgb(243,166,3)" fg:x="3225" fg:w="5"/><text x="28.7797%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="28.5297%" y="469" width="0.0442%" height="15" fill="rgb(223,22,34)" fg:x="3225" fg:w="5"/><text x="28.7797%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="28.5297%" y="453" width="0.0442%" height="15" fill="rgb(251,52,51)" fg:x="3225" fg:w="5"/><text x="28.7797%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (9 samples, 0.08%)</title><rect x="28.5209%" y="565" width="0.0796%" height="15" fill="rgb(221,165,28)" fg:x="3224" fg:w="9"/><text x="28.7709%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="28.5209%" y="549" width="0.0796%" height="15" fill="rgb(218,121,47)" fg:x="3224" fg:w="9"/><text x="28.7709%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="28.5740%" y="533" width="0.0265%" height="15" fill="rgb(209,120,9)" fg:x="3230" fg:w="3"/><text x="28.8240%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="28.5740%" y="517" width="0.0265%" height="15" fill="rgb(236,68,12)" fg:x="3230" fg:w="3"/><text x="28.8240%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="28.6005%" y="533" width="0.0177%" height="15" fill="rgb(225,194,26)" fg:x="3233" fg:w="2"/><text x="28.8505%" y="543.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="28.6005%" y="517" width="0.0177%" height="15" fill="rgb(231,84,39)" fg:x="3233" fg:w="2"/><text x="28.8505%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="28.6005%" y="501" width="0.0177%" height="15" fill="rgb(210,11,45)" fg:x="3233" fg:w="2"/><text x="28.8505%" y="511.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="28.6005%" y="485" width="0.0177%" height="15" fill="rgb(224,54,52)" fg:x="3233" fg:w="2"/><text x="28.8505%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="28.6005%" y="469" width="0.0177%" height="15" fill="rgb(238,102,14)" fg:x="3233" fg:w="2"/><text x="28.8505%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="28.6005%" y="453" width="0.0177%" height="15" fill="rgb(243,160,52)" fg:x="3233" fg:w="2"/><text x="28.8505%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (46 samples, 0.41%)</title><rect x="28.2201%" y="597" width="0.4069%" height="15" fill="rgb(216,114,19)" fg:x="3190" fg:w="46"/><text x="28.4701%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;&gt; (37 samples, 0.33%)</title><rect x="28.2997%" y="581" width="0.3273%" height="15" fill="rgb(244,166,37)" fg:x="3199" fg:w="37"/><text x="28.5497%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;block_stm_revm::storage::Storage&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="28.6005%" y="565" width="0.0265%" height="15" fill="rgb(246,29,44)" fg:x="3233" fg:w="3"/><text x="28.8505%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="28.6005%" y="549" width="0.0265%" height="15" fill="rgb(215,56,53)" fg:x="3233" fg:w="3"/><text x="28.8505%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.03%)</title><rect x="28.6270%" y="597" width="0.0265%" height="15" fill="rgb(217,60,2)" fg:x="3236" fg:w="3"/><text x="28.8770%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="28.6270%" y="581" width="0.0265%" height="15" fill="rgb(207,26,24)" fg:x="3236" fg:w="3"/><text x="28.8770%" y="591.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::build (6 samples, 0.05%)</title><rect x="28.6536%" y="597" width="0.0531%" height="15" fill="rgb(252,210,15)" fg:x="3239" fg:w="6"/><text x="28.9036%" y="607.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::with_tx_env (25 samples, 0.22%)</title><rect x="28.7067%" y="597" width="0.2212%" height="15" fill="rgb(253,209,26)" fg:x="3245" fg:w="25"/><text x="28.9567%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (22 samples, 0.19%)</title><rect x="28.7332%" y="581" width="0.1946%" height="15" fill="rgb(238,170,14)" fg:x="3248" fg:w="22"/><text x="28.9832%" y="591.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::end (2 samples, 0.02%)</title><rect x="28.9367%" y="581" width="0.0177%" height="15" fill="rgb(216,178,15)" fg:x="3271" fg:w="2"/><text x="29.1867%" y="591.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.02%)</title><rect x="28.9367%" y="565" width="0.0177%" height="15" fill="rgb(250,197,2)" fg:x="3271" fg:w="2"/><text x="29.1867%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="28.9367%" y="549" width="0.0177%" height="15" fill="rgb(212,70,42)" fg:x="3271" fg:w="2"/><text x="29.1867%" y="559.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::env (4 samples, 0.04%)</title><rect x="28.9544%" y="581" width="0.0354%" height="15" fill="rgb(227,213,9)" fg:x="3273" fg:w="4"/><text x="29.2044%" y="591.50"></text></g><g><title>core::ops::function::Fn::call (4 samples, 0.04%)</title><rect x="28.9544%" y="565" width="0.0354%" height="15" fill="rgb(245,99,25)" fg:x="3273" fg:w="4"/><text x="29.2044%" y="575.50"></text></g><g><title>revm::handler::mainnet::validation::validate_env (4 samples, 0.04%)</title><rect x="28.9544%" y="549" width="0.0354%" height="15" fill="rgb(250,82,29)" fg:x="3273" fg:w="4"/><text x="29.2044%" y="559.50"></text></g><g><title>revm_primitives::env::Env::validate_tx (3 samples, 0.03%)</title><rect x="28.9632%" y="533" width="0.0265%" height="15" fill="rgb(241,226,54)" fg:x="3274" fg:w="3"/><text x="29.2132%" y="543.50"></text></g><g><title>core::cmp::PartialOrd::gt (2 samples, 0.02%)</title><rect x="28.9720%" y="517" width="0.0177%" height="15" fill="rgb(221,99,41)" fg:x="3275" fg:w="2"/><text x="29.2220%" y="527.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (2 samples, 0.02%)</title><rect x="28.9720%" y="501" width="0.0177%" height="15" fill="rgb(213,90,21)" fg:x="3275" fg:w="2"/><text x="29.2220%" y="511.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (2 samples, 0.02%)</title><rect x="28.9720%" y="485" width="0.0177%" height="15" fill="rgb(205,208,24)" fg:x="3275" fg:w="2"/><text x="29.2220%" y="495.50"></text></g><g><title>ruint::algorithms::cmp (2 samples, 0.02%)</title><rect x="28.9720%" y="469" width="0.0177%" height="15" fill="rgb(246,31,12)" fg:x="3275" fg:w="2"/><text x="29.2220%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (7 samples, 0.06%)</title><rect x="29.0605%" y="421" width="0.0619%" height="15" fill="rgb(213,154,6)" fg:x="3285" fg:w="7"/><text x="29.3105%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (17 samples, 0.15%)</title><rect x="28.9897%" y="517" width="0.1504%" height="15" fill="rgb(222,163,29)" fg:x="3277" fg:w="17"/><text x="29.2397%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (17 samples, 0.15%)</title><rect x="28.9897%" y="501" width="0.1504%" height="15" fill="rgb(227,201,8)" fg:x="3277" fg:w="17"/><text x="29.2397%" y="511.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (17 samples, 0.15%)</title><rect x="28.9897%" y="485" width="0.1504%" height="15" fill="rgb(233,9,32)" fg:x="3277" fg:w="17"/><text x="29.2397%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.15%)</title><rect x="28.9897%" y="469" width="0.1504%" height="15" fill="rgb(217,54,24)" fg:x="3277" fg:w="17"/><text x="29.2397%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.15%)</title><rect x="28.9897%" y="453" width="0.1504%" height="15" fill="rgb(235,192,0)" fg:x="3277" fg:w="17"/><text x="29.2397%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (9 samples, 0.08%)</title><rect x="29.0605%" y="437" width="0.0796%" height="15" fill="rgb(235,45,9)" fg:x="3285" fg:w="9"/><text x="29.3105%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (2 samples, 0.02%)</title><rect x="29.1224%" y="421" width="0.0177%" height="15" fill="rgb(246,42,40)" fg:x="3292" fg:w="2"/><text x="29.3724%" y="431.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (112 samples, 0.99%)</title><rect x="28.1582%" y="613" width="0.9908%" height="15" fill="rgb(248,111,24)" fg:x="3183" fg:w="112"/><text x="28.4082%" y="623.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (25 samples, 0.22%)</title><rect x="28.9278%" y="597" width="0.2212%" height="15" fill="rgb(249,65,22)" fg:x="3270" fg:w="25"/><text x="29.1778%" y="607.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::initial_tx_gas (18 samples, 0.16%)</title><rect x="28.9897%" y="581" width="0.1592%" height="15" fill="rgb(238,111,51)" fg:x="3277" fg:w="18"/><text x="29.2397%" y="591.50"></text></g><g><title>core::ops::function::Fn::call (18 samples, 0.16%)</title><rect x="28.9897%" y="565" width="0.1592%" height="15" fill="rgb(250,118,22)" fg:x="3277" fg:w="18"/><text x="29.2397%" y="575.50"></text></g><g><title>revm::handler::mainnet::validation::validate_initial_tx_gas (18 samples, 0.16%)</title><rect x="28.9897%" y="549" width="0.1592%" height="15" fill="rgb(234,84,26)" fg:x="3277" fg:w="18"/><text x="29.2397%" y="559.50"></text></g><g><title>revm_interpreter::gas::calc::validate_initial_tx_gas (18 samples, 0.16%)</title><rect x="28.9897%" y="533" width="0.1592%" height="15" fill="rgb(243,172,12)" fg:x="3277" fg:w="18"/><text x="29.2397%" y="543.50"></text></g><g><title>__mem_cgroup_charge (5 samples, 0.04%)</title><rect x="29.2109%" y="437" width="0.0442%" height="15" fill="rgb(236,150,49)" fg:x="3302" fg:w="5"/><text x="29.4609%" y="447.50"></text></g><g><title>get_mem_cgroup_from_mm (5 samples, 0.04%)</title><rect x="29.2109%" y="421" width="0.0442%" height="15" fill="rgb(225,197,26)" fg:x="3302" fg:w="5"/><text x="29.4609%" y="431.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.03%)</title><rect x="29.2551%" y="437" width="0.0265%" height="15" fill="rgb(214,17,42)" fg:x="3307" fg:w="3"/><text x="29.5051%" y="447.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="29.2817%" y="437" width="0.0177%" height="15" fill="rgb(224,165,40)" fg:x="3310" fg:w="2"/><text x="29.5317%" y="447.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="29.2817%" y="421" width="0.0177%" height="15" fill="rgb(246,100,4)" fg:x="3310" fg:w="2"/><text x="29.5317%" y="431.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="29.2817%" y="405" width="0.0177%" height="15" fill="rgb(222,103,0)" fg:x="3310" fg:w="2"/><text x="29.5317%" y="415.50"></text></g><g><title>do_user_addr_fault (18 samples, 0.16%)</title><rect x="29.1844%" y="517" width="0.1592%" height="15" fill="rgb(227,189,26)" fg:x="3299" fg:w="18"/><text x="29.4344%" y="527.50"></text></g><g><title>handle_mm_fault (17 samples, 0.15%)</title><rect x="29.1932%" y="501" width="0.1504%" height="15" fill="rgb(214,202,17)" fg:x="3300" fg:w="17"/><text x="29.4432%" y="511.50"></text></g><g><title>__handle_mm_fault (17 samples, 0.15%)</title><rect x="29.1932%" y="485" width="0.1504%" height="15" fill="rgb(229,111,3)" fg:x="3300" fg:w="17"/><text x="29.4432%" y="495.50"></text></g><g><title>handle_pte_fault (16 samples, 0.14%)</title><rect x="29.2021%" y="469" width="0.1415%" height="15" fill="rgb(229,172,15)" fg:x="3301" fg:w="16"/><text x="29.4521%" y="479.50"></text></g><g><title>do_anonymous_page (16 samples, 0.14%)</title><rect x="29.2021%" y="453" width="0.1415%" height="15" fill="rgb(230,224,35)" fg:x="3301" fg:w="16"/><text x="29.4521%" y="463.50"></text></g><g><title>vma_alloc_folio (4 samples, 0.04%)</title><rect x="29.3082%" y="437" width="0.0354%" height="15" fill="rgb(251,141,6)" fg:x="3313" fg:w="4"/><text x="29.5582%" y="447.50"></text></g><g><title>__folio_alloc (4 samples, 0.04%)</title><rect x="29.3082%" y="421" width="0.0354%" height="15" fill="rgb(225,208,6)" fg:x="3313" fg:w="4"/><text x="29.5582%" y="431.50"></text></g><g><title>__alloc_pages (4 samples, 0.04%)</title><rect x="29.3082%" y="405" width="0.0354%" height="15" fill="rgb(246,181,16)" fg:x="3313" fg:w="4"/><text x="29.5582%" y="415.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.04%)</title><rect x="29.3082%" y="389" width="0.0354%" height="15" fill="rgb(227,129,36)" fg:x="3313" fg:w="4"/><text x="29.5582%" y="399.50"></text></g><g><title>asm_exc_page_fault (19 samples, 0.17%)</title><rect x="29.1844%" y="549" width="0.1681%" height="15" fill="rgb(248,117,24)" fg:x="3299" fg:w="19"/><text x="29.4344%" y="559.50"></text></g><g><title>exc_page_fault (19 samples, 0.17%)</title><rect x="29.1844%" y="533" width="0.1681%" height="15" fill="rgb(214,185,35)" fg:x="3299" fg:w="19"/><text x="29.4344%" y="543.50"></text></g><g><title>__libc_start_main_impl (137 samples, 1.21%)</title><rect x="28.1582%" y="1045" width="1.2120%" height="15" fill="rgb(236,150,34)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="1055.50"></text></g><g><title>__libc_start_call_main (137 samples, 1.21%)</title><rect x="28.1582%" y="1029" width="1.2120%" height="15" fill="rgb(243,228,27)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="1039.50"></text></g><g><title>main (137 samples, 1.21%)</title><rect x="28.1582%" y="1013" width="1.2120%" height="15" fill="rgb(245,77,44)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="1023.50"></text></g><g><title>std::rt::lang_start_internal (137 samples, 1.21%)</title><rect x="28.1582%" y="997" width="1.2120%" height="15" fill="rgb(235,214,42)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (137 samples, 1.21%)</title><rect x="28.1582%" y="981" width="1.2120%" height="15" fill="rgb(221,74,3)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="991.50"></text></g><g><title>std::panicking::try (137 samples, 1.21%)</title><rect x="28.1582%" y="965" width="1.2120%" height="15" fill="rgb(206,121,29)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="975.50"></text></g><g><title>std::panicking::try::do_call (137 samples, 1.21%)</title><rect x="28.1582%" y="949" width="1.2120%" height="15" fill="rgb(249,131,53)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="959.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (137 samples, 1.21%)</title><rect x="28.1582%" y="933" width="1.2120%" height="15" fill="rgb(236,170,29)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="943.50"></text></g><g><title>std::panic::catch_unwind (137 samples, 1.21%)</title><rect x="28.1582%" y="917" width="1.2120%" height="15" fill="rgb(247,96,15)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="927.50"></text></g><g><title>std::panicking::try (137 samples, 1.21%)</title><rect x="28.1582%" y="901" width="1.2120%" height="15" fill="rgb(211,210,7)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="911.50"></text></g><g><title>std::panicking::try::do_call (137 samples, 1.21%)</title><rect x="28.1582%" y="885" width="1.2120%" height="15" fill="rgb(240,88,50)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="895.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (137 samples, 1.21%)</title><rect x="28.1582%" y="869" width="1.2120%" height="15" fill="rgb(209,229,26)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="879.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (137 samples, 1.21%)</title><rect x="28.1582%" y="853" width="1.2120%" height="15" fill="rgb(210,68,23)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="863.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (137 samples, 1.21%)</title><rect x="28.1582%" y="837" width="1.2120%" height="15" fill="rgb(229,180,13)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once (137 samples, 1.21%)</title><rect x="28.1582%" y="821" width="1.2120%" height="15" fill="rgb(236,53,44)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="831.50"></text></g><g><title>block_stm_revm::main (137 samples, 1.21%)</title><rect x="28.1582%" y="805" width="1.2120%" height="15" fill="rgb(244,214,29)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="815.50"></text></g><g><title>block_stm_revm::execute_sequential (137 samples, 1.21%)</title><rect x="28.1582%" y="789" width="1.2120%" height="15" fill="rgb(220,75,29)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (137 samples, 1.21%)</title><rect x="28.1582%" y="773" width="1.2120%" height="15" fill="rgb(214,183,37)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (137 samples, 1.21%)</title><rect x="28.1582%" y="757" width="1.2120%" height="15" fill="rgb(239,117,29)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (137 samples, 1.21%)</title><rect x="28.1582%" y="741" width="1.2120%" height="15" fill="rgb(237,171,35)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (137 samples, 1.21%)</title><rect x="28.1582%" y="725" width="1.2120%" height="15" fill="rgb(229,178,53)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (137 samples, 1.21%)</title><rect x="28.1582%" y="709" width="1.2120%" height="15" fill="rgb(210,102,19)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (137 samples, 1.21%)</title><rect x="28.1582%" y="693" width="1.2120%" height="15" fill="rgb(235,127,22)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (137 samples, 1.21%)</title><rect x="28.1582%" y="677" width="1.2120%" height="15" fill="rgb(244,31,31)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (137 samples, 1.21%)</title><rect x="28.1582%" y="661" width="1.2120%" height="15" fill="rgb(231,43,21)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (137 samples, 1.21%)</title><rect x="28.1582%" y="645" width="1.2120%" height="15" fill="rgb(217,131,35)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (137 samples, 1.21%)</title><rect x="28.1582%" y="629" width="1.2120%" height="15" fill="rgb(221,149,4)" fg:x="3183" fg:w="137"/><text x="28.4082%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (25 samples, 0.22%)</title><rect x="29.1490%" y="613" width="0.2212%" height="15" fill="rgb(232,170,28)" fg:x="3295" fg:w="25"/><text x="29.3990%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (25 samples, 0.22%)</title><rect x="29.1490%" y="597" width="0.2212%" height="15" fill="rgb(238,56,10)" fg:x="3295" fg:w="25"/><text x="29.3990%" y="607.50"></text></g><g><title>core::ptr::write (25 samples, 0.22%)</title><rect x="29.1490%" y="581" width="0.2212%" height="15" fill="rgb(235,196,14)" fg:x="3295" fg:w="25"/><text x="29.3990%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (25 samples, 0.22%)</title><rect x="29.1490%" y="565" width="0.2212%" height="15" fill="rgb(216,45,48)" fg:x="3295" fg:w="25"/><text x="29.3990%" y="575.50"></text></g><g><title>sync_regs (2 samples, 0.02%)</title><rect x="29.3524%" y="549" width="0.0177%" height="15" fill="rgb(238,213,17)" fg:x="3318" fg:w="2"/><text x="29.6024%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="29.3701%" y="1045" width="0.0531%" height="15" fill="rgb(212,13,2)" fg:x="3320" fg:w="6"/><text x="29.6201%" y="1055.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (4 samples, 0.04%)</title><rect x="29.4232%" y="1045" width="0.0354%" height="15" fill="rgb(240,114,20)" fg:x="3326" fg:w="4"/><text x="29.6732%" y="1055.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="29.4232%" y="1029" width="0.0354%" height="15" fill="rgb(228,41,40)" fg:x="3326" fg:w="4"/><text x="29.6732%" y="1039.50"></text></g><g><title>_int_free (19 samples, 0.17%)</title><rect x="29.4586%" y="1045" width="0.1681%" height="15" fill="rgb(244,132,35)" fg:x="3330" fg:w="19"/><text x="29.7086%" y="1055.50"></text></g><g><title>_int_free_maybe_consolidate (4 samples, 0.04%)</title><rect x="29.6267%" y="1045" width="0.0354%" height="15" fill="rgb(253,189,4)" fg:x="3349" fg:w="4"/><text x="29.8767%" y="1055.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.02%)</title><rect x="29.6621%" y="1045" width="0.0177%" height="15" fill="rgb(224,37,19)" fg:x="3353" fg:w="2"/><text x="29.9121%" y="1055.50"></text></g><g><title>_int_malloc (12 samples, 0.11%)</title><rect x="29.6798%" y="1045" width="0.1062%" height="15" fill="rgb(235,223,18)" fg:x="3355" fg:w="12"/><text x="29.9298%" y="1055.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="29.7859%" y="1045" width="0.0177%" height="15" fill="rgb(235,163,25)" fg:x="3367" fg:w="2"/><text x="30.0359%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="29.8213%" y="1013" width="0.0265%" height="15" fill="rgb(217,145,28)" fg:x="3371" fg:w="3"/><text x="30.0713%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="29.8213%" y="997" width="0.0265%" height="15" fill="rgb(223,223,32)" fg:x="3371" fg:w="3"/><text x="30.0713%" y="1007.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="29.8213%" y="981" width="0.0265%" height="15" fill="rgb(227,189,39)" fg:x="3371" fg:w="3"/><text x="30.0713%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="29.8213%" y="965" width="0.0265%" height="15" fill="rgb(248,10,22)" fg:x="3371" fg:w="3"/><text x="30.0713%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="29.8213%" y="949" width="0.0265%" height="15" fill="rgb(248,46,39)" fg:x="3371" fg:w="3"/><text x="30.0713%" y="959.50"></text></g><g><title>core::mem::drop (4 samples, 0.04%)</title><rect x="29.8213%" y="1029" width="0.0354%" height="15" fill="rgb(248,113,48)" fg:x="3371" fg:w="4"/><text x="30.0713%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.07%)</title><rect x="29.8125%" y="1045" width="0.0708%" height="15" fill="rgb(245,16,25)" fg:x="3370" fg:w="8"/><text x="30.0625%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="29.8655%" y="1029" width="0.0177%" height="15" fill="rgb(249,152,16)" fg:x="3376" fg:w="2"/><text x="30.1155%" y="1039.50"></text></g><g><title>alloc_perturb (4 samples, 0.04%)</title><rect x="29.8832%" y="1045" width="0.0354%" height="15" fill="rgb(250,16,1)" fg:x="3378" fg:w="4"/><text x="30.1332%" y="1055.50"></text></g><g><title>alloy_primitives::utils::Keccak256::new (2 samples, 0.02%)</title><rect x="29.9452%" y="1029" width="0.0177%" height="15" fill="rgb(249,138,3)" fg:x="3385" fg:w="2"/><text x="30.1952%" y="1039.50"></text></g><g><title>alloy_primitives::utils::keccak256::keccak256 (7 samples, 0.06%)</title><rect x="29.9186%" y="1045" width="0.0619%" height="15" fill="rgb(227,71,41)" fg:x="3382" fg:w="7"/><text x="30.1686%" y="1055.50"></text></g><g><title>alloy_primitives::utils::Keccak256::update (2 samples, 0.02%)</title><rect x="29.9628%" y="1029" width="0.0177%" height="15" fill="rgb(209,184,23)" fg:x="3387" fg:w="2"/><text x="30.2128%" y="1039.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="30.0159%" y="837" width="0.0973%" height="15" fill="rgb(223,215,31)" fg:x="3393" fg:w="11"/><text x="30.2659%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="30.0159%" y="821" width="0.0973%" height="15" fill="rgb(210,146,28)" fg:x="3393" fg:w="11"/><text x="30.2659%" y="831.50"></text></g><g><title>bytes::bytes::shared_clone (10 samples, 0.09%)</title><rect x="30.0248%" y="805" width="0.0885%" height="15" fill="rgb(209,183,41)" fg:x="3394" fg:w="10"/><text x="30.2748%" y="815.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (10 samples, 0.09%)</title><rect x="30.0248%" y="789" width="0.0885%" height="15" fill="rgb(209,224,45)" fg:x="3394" fg:w="10"/><text x="30.2748%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (10 samples, 0.09%)</title><rect x="30.0248%" y="773" width="0.0885%" height="15" fill="rgb(224,209,51)" fg:x="3394" fg:w="10"/><text x="30.2748%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (10 samples, 0.09%)</title><rect x="30.0248%" y="757" width="0.0885%" height="15" fill="rgb(223,17,39)" fg:x="3394" fg:w="10"/><text x="30.2748%" y="767.50"></text></g><g><title>core::clone::Clone::clone (18 samples, 0.16%)</title><rect x="29.9894%" y="917" width="0.1592%" height="15" fill="rgb(234,204,37)" fg:x="3390" fg:w="18"/><text x="30.2394%" y="927.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="29.9982%" y="901" width="0.1504%" height="15" fill="rgb(236,120,5)" fg:x="3391" fg:w="17"/><text x="30.2482%" y="911.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="29.9982%" y="885" width="0.1504%" height="15" fill="rgb(248,97,27)" fg:x="3391" fg:w="17"/><text x="30.2482%" y="895.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.14%)</title><rect x="30.0071%" y="869" width="0.1415%" height="15" fill="rgb(240,66,17)" fg:x="3392" fg:w="16"/><text x="30.2571%" y="879.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (16 samples, 0.14%)</title><rect x="30.0071%" y="853" width="0.1415%" height="15" fill="rgb(210,79,3)" fg:x="3392" fg:w="16"/><text x="30.2571%" y="863.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="30.1132%" y="837" width="0.0354%" height="15" fill="rgb(214,176,27)" fg:x="3404" fg:w="4"/><text x="30.3632%" y="847.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="30.1132%" y="821" width="0.0354%" height="15" fill="rgb(235,185,3)" fg:x="3404" fg:w="4"/><text x="30.3632%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="30.1132%" y="805" width="0.0354%" height="15" fill="rgb(227,24,12)" fg:x="3404" fg:w="4"/><text x="30.3632%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.04%)</title><rect x="30.1132%" y="789" width="0.0354%" height="15" fill="rgb(252,169,48)" fg:x="3404" fg:w="4"/><text x="30.3632%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.04%)</title><rect x="30.1132%" y="773" width="0.0354%" height="15" fill="rgb(212,65,1)" fg:x="3404" fg:w="4"/><text x="30.3632%" y="783.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.04%)</title><rect x="30.1486%" y="917" width="0.0354%" height="15" fill="rgb(242,39,24)" fg:x="3408" fg:w="4"/><text x="30.3986%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.04%)</title><rect x="30.1486%" y="901" width="0.0354%" height="15" fill="rgb(249,32,23)" fg:x="3408" fg:w="4"/><text x="30.3986%" y="911.50"></text></g><g><title>core::ptr::write (4 samples, 0.04%)</title><rect x="30.1486%" y="885" width="0.0354%" height="15" fill="rgb(251,195,23)" fg:x="3408" fg:w="4"/><text x="30.3986%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="30.1486%" y="869" width="0.0354%" height="15" fill="rgb(236,174,8)" fg:x="3408" fg:w="4"/><text x="30.3986%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (24 samples, 0.21%)</title><rect x="29.9805%" y="949" width="0.2123%" height="15" fill="rgb(220,197,8)" fg:x="3389" fg:w="24"/><text x="30.2305%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (24 samples, 0.21%)</title><rect x="29.9805%" y="933" width="0.2123%" height="15" fill="rgb(240,108,37)" fg:x="3389" fg:w="24"/><text x="30.2305%" y="943.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (27 samples, 0.24%)</title><rect x="29.9805%" y="1013" width="0.2389%" height="15" fill="rgb(232,176,24)" fg:x="3389" fg:w="27"/><text x="30.2305%" y="1023.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (27 samples, 0.24%)</title><rect x="29.9805%" y="997" width="0.2389%" height="15" fill="rgb(243,35,29)" fg:x="3389" fg:w="27"/><text x="30.2305%" y="1007.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.24%)</title><rect x="29.9805%" y="981" width="0.2389%" height="15" fill="rgb(210,37,18)" fg:x="3389" fg:w="27"/><text x="30.2305%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.24%)</title><rect x="29.9805%" y="965" width="0.2389%" height="15" fill="rgb(224,184,40)" fg:x="3389" fg:w="27"/><text x="30.2305%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (3 samples, 0.03%)</title><rect x="30.1929%" y="949" width="0.0265%" height="15" fill="rgb(236,39,29)" fg:x="3413" fg:w="3"/><text x="30.4429%" y="959.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.03%)</title><rect x="30.1929%" y="933" width="0.0265%" height="15" fill="rgb(232,48,39)" fg:x="3413" fg:w="3"/><text x="30.4429%" y="943.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.03%)</title><rect x="30.1929%" y="917" width="0.0265%" height="15" fill="rgb(236,34,42)" fg:x="3413" fg:w="3"/><text x="30.4429%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="30.1929%" y="901" width="0.0265%" height="15" fill="rgb(243,106,37)" fg:x="3413" fg:w="3"/><text x="30.4429%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="30.1929%" y="885" width="0.0265%" height="15" fill="rgb(218,96,6)" fg:x="3413" fg:w="3"/><text x="30.4429%" y="895.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="30.1929%" y="869" width="0.0265%" height="15" fill="rgb(235,130,12)" fg:x="3413" fg:w="3"/><text x="30.4429%" y="879.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="30.1929%" y="853" width="0.0265%" height="15" fill="rgb(231,95,0)" fg:x="3413" fg:w="3"/><text x="30.4429%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="30.2371%" y="869" width="0.0177%" height="15" fill="rgb(228,12,23)" fg:x="3418" fg:w="2"/><text x="30.4871%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="30.2371%" y="853" width="0.0177%" height="15" fill="rgb(216,12,1)" fg:x="3418" fg:w="2"/><text x="30.4871%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="30.2371%" y="837" width="0.0177%" height="15" fill="rgb(219,59,3)" fg:x="3418" fg:w="2"/><text x="30.4871%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="30.2371%" y="821" width="0.0177%" height="15" fill="rgb(215,208,46)" fg:x="3418" fg:w="2"/><text x="30.4871%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="30.2371%" y="805" width="0.0177%" height="15" fill="rgb(254,224,29)" fg:x="3418" fg:w="2"/><text x="30.4871%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="30.2371%" y="901" width="0.0354%" height="15" fill="rgb(232,14,29)" fg:x="3418" fg:w="4"/><text x="30.4871%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="30.2371%" y="885" width="0.0354%" height="15" fill="rgb(208,45,52)" fg:x="3418" fg:w="4"/><text x="30.4871%" y="895.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="30.2548%" y="869" width="0.0177%" height="15" fill="rgb(234,191,28)" fg:x="3420" fg:w="2"/><text x="30.5048%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6 samples, 0.05%)</title><rect x="30.2282%" y="917" width="0.0531%" height="15" fill="rgb(244,67,43)" fg:x="3417" fg:w="6"/><text x="30.4782%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7 samples, 0.06%)</title><rect x="30.2282%" y="933" width="0.0619%" height="15" fill="rgb(236,189,24)" fg:x="3417" fg:w="7"/><text x="30.4782%" y="943.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (38 samples, 0.34%)</title><rect x="29.9805%" y="1045" width="0.3362%" height="15" fill="rgb(239,214,33)" fg:x="3389" fg:w="38"/><text x="30.2305%" y="1055.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (38 samples, 0.34%)</title><rect x="29.9805%" y="1029" width="0.3362%" height="15" fill="rgb(226,176,41)" fg:x="3389" fg:w="38"/><text x="30.2305%" y="1039.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (11 samples, 0.10%)</title><rect x="30.2194%" y="1013" width="0.0973%" height="15" fill="rgb(248,47,8)" fg:x="3416" fg:w="11"/><text x="30.4694%" y="1023.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (11 samples, 0.10%)</title><rect x="30.2194%" y="997" width="0.0973%" height="15" fill="rgb(218,81,44)" fg:x="3416" fg:w="11"/><text x="30.4694%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (11 samples, 0.10%)</title><rect x="30.2194%" y="981" width="0.0973%" height="15" fill="rgb(213,98,6)" fg:x="3416" fg:w="11"/><text x="30.4694%" y="991.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (11 samples, 0.10%)</title><rect x="30.2194%" y="965" width="0.0973%" height="15" fill="rgb(222,85,22)" fg:x="3416" fg:w="11"/><text x="30.4694%" y="975.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (11 samples, 0.10%)</title><rect x="30.2194%" y="949" width="0.0973%" height="15" fill="rgb(239,46,39)" fg:x="3416" fg:w="11"/><text x="30.4694%" y="959.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.03%)</title><rect x="30.2902%" y="933" width="0.0265%" height="15" fill="rgb(237,12,29)" fg:x="3424" fg:w="3"/><text x="30.5402%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.03%)</title><rect x="30.2902%" y="917" width="0.0265%" height="15" fill="rgb(214,77,8)" fg:x="3424" fg:w="3"/><text x="30.5402%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.02%)</title><rect x="30.2990%" y="901" width="0.0177%" height="15" fill="rgb(217,168,37)" fg:x="3425" fg:w="2"/><text x="30.5490%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="30.2990%" y="885" width="0.0177%" height="15" fill="rgb(221,217,23)" fg:x="3425" fg:w="2"/><text x="30.5490%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="30.2990%" y="869" width="0.0177%" height="15" fill="rgb(243,229,36)" fg:x="3425" fg:w="2"/><text x="30.5490%" y="879.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="30.2990%" y="853" width="0.0177%" height="15" fill="rgb(251,163,40)" fg:x="3425" fg:w="2"/><text x="30.5490%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="30.2990%" y="837" width="0.0177%" height="15" fill="rgb(237,222,12)" fg:x="3425" fg:w="2"/><text x="30.5490%" y="847.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="30.3255%" y="1029" width="0.0177%" height="15" fill="rgb(248,132,6)" fg:x="3428" fg:w="2"/><text x="30.5755%" y="1039.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (2 samples, 0.02%)</title><rect x="30.3255%" y="1013" width="0.0177%" height="15" fill="rgb(227,167,50)" fg:x="3428" fg:w="2"/><text x="30.5755%" y="1023.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (2 samples, 0.02%)</title><rect x="30.3255%" y="997" width="0.0177%" height="15" fill="rgb(242,84,37)" fg:x="3428" fg:w="2"/><text x="30.5755%" y="1007.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (2 samples, 0.02%)</title><rect x="30.3255%" y="981" width="0.0177%" height="15" fill="rgb(212,4,50)" fg:x="3428" fg:w="2"/><text x="30.5755%" y="991.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (2 samples, 0.02%)</title><rect x="30.3255%" y="965" width="0.0177%" height="15" fill="rgb(230,228,32)" fg:x="3428" fg:w="2"/><text x="30.5755%" y="975.50"></text></g><g><title>block_stm_revm::examples::erc20::generate (5 samples, 0.04%)</title><rect x="30.3167%" y="1045" width="0.0442%" height="15" fill="rgb(248,217,23)" fg:x="3427" fg:w="5"/><text x="30.5667%" y="1055.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.03%)</title><rect x="30.3698%" y="757" width="0.0265%" height="15" fill="rgb(238,197,32)" fg:x="3433" fg:w="3"/><text x="30.6198%" y="767.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::convert::From&lt;revm_primitives::state::AccountInfo&gt;&gt;::from (3 samples, 0.03%)</title><rect x="30.3698%" y="741" width="0.0265%" height="15" fill="rgb(236,106,1)" fg:x="3433" fg:w="3"/><text x="30.6198%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (5 samples, 0.04%)</title><rect x="30.4317%" y="709" width="0.0442%" height="15" fill="rgb(219,228,13)" fg:x="3440" fg:w="5"/><text x="30.6817%" y="719.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref::_{{closure}} (5 samples, 0.04%)</title><rect x="30.4317%" y="693" width="0.0442%" height="15" fill="rgb(238,30,35)" fg:x="3440" fg:w="5"/><text x="30.6817%" y="703.50"></text></g><g><title>revm::db::in_memory_db::DbAccount::info (5 samples, 0.04%)</title><rect x="30.4317%" y="677" width="0.0442%" height="15" fill="rgb(236,70,23)" fg:x="3440" fg:w="5"/><text x="30.6817%" y="687.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="30.4582%" y="661" width="0.0177%" height="15" fill="rgb(249,104,48)" fg:x="3443" fg:w="2"/><text x="30.7082%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.03%)</title><rect x="30.4759%" y="661" width="0.0265%" height="15" fill="rgb(254,117,50)" fg:x="3445" fg:w="3"/><text x="30.7259%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.03%)</title><rect x="30.4759%" y="645" width="0.0265%" height="15" fill="rgb(223,152,4)" fg:x="3445" fg:w="3"/><text x="30.7259%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (53 samples, 0.47%)</title><rect x="30.5025%" y="597" width="0.4689%" height="15" fill="rgb(245,6,2)" fg:x="3448" fg:w="53"/><text x="30.7525%" y="607.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (53 samples, 0.47%)</title><rect x="30.5025%" y="581" width="0.4689%" height="15" fill="rgb(249,150,24)" fg:x="3448" fg:w="53"/><text x="30.7525%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (53 samples, 0.47%)</title><rect x="30.5025%" y="565" width="0.4689%" height="15" fill="rgb(228,185,42)" fg:x="3448" fg:w="53"/><text x="30.7525%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (53 samples, 0.47%)</title><rect x="30.5025%" y="549" width="0.4689%" height="15" fill="rgb(226,39,33)" fg:x="3448" fg:w="53"/><text x="30.7525%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (53 samples, 0.47%)</title><rect x="30.5025%" y="533" width="0.4689%" height="15" fill="rgb(221,166,19)" fg:x="3448" fg:w="53"/><text x="30.7525%" y="543.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (53 samples, 0.47%)</title><rect x="30.5025%" y="517" width="0.4689%" height="15" fill="rgb(209,109,2)" fg:x="3448" fg:w="53"/><text x="30.7525%" y="527.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (53 samples, 0.47%)</title><rect x="30.5025%" y="501" width="0.4689%" height="15" fill="rgb(252,216,26)" fg:x="3448" fg:w="53"/><text x="30.7525%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (54 samples, 0.48%)</title><rect x="30.5025%" y="613" width="0.4777%" height="15" fill="rgb(227,173,36)" fg:x="3448" fg:w="54"/><text x="30.7525%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (13 samples, 0.12%)</title><rect x="30.9890%" y="613" width="0.1150%" height="15" fill="rgb(209,90,7)" fg:x="3503" fg:w="13"/><text x="31.2390%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13 samples, 0.12%)</title><rect x="30.9890%" y="597" width="0.1150%" height="15" fill="rgb(250,194,11)" fg:x="3503" fg:w="13"/><text x="31.2390%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.12%)</title><rect x="30.9890%" y="581" width="0.1150%" height="15" fill="rgb(220,72,50)" fg:x="3503" fg:w="13"/><text x="31.2390%" y="591.50"></text></g><g><title>&lt;revm_primitives::db::WrapDatabaseRef&lt;T&gt; as revm_primitives::db::Database&gt;::basic (82 samples, 0.73%)</title><rect x="30.3963%" y="757" width="0.7254%" height="15" fill="rgb(222,106,48)" fg:x="3436" fg:w="82"/><text x="30.6463%" y="767.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for &amp;T&gt;::basic_ref (82 samples, 0.73%)</title><rect x="30.3963%" y="741" width="0.7254%" height="15" fill="rgb(216,220,45)" fg:x="3436" fg:w="82"/><text x="30.6463%" y="751.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (82 samples, 0.73%)</title><rect x="30.3963%" y="725" width="0.7254%" height="15" fill="rgb(234,112,18)" fg:x="3436" fg:w="82"/><text x="30.6463%" y="735.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (73 samples, 0.65%)</title><rect x="30.4759%" y="709" width="0.6458%" height="15" fill="rgb(206,179,9)" fg:x="3445" fg:w="73"/><text x="30.7259%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (73 samples, 0.65%)</title><rect x="30.4759%" y="693" width="0.6458%" height="15" fill="rgb(215,115,40)" fg:x="3445" fg:w="73"/><text x="30.7259%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (73 samples, 0.65%)</title><rect x="30.4759%" y="677" width="0.6458%" height="15" fill="rgb(222,69,34)" fg:x="3445" fg:w="73"/><text x="30.7259%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (70 samples, 0.62%)</title><rect x="30.5025%" y="661" width="0.6192%" height="15" fill="rgb(209,161,10)" fg:x="3448" fg:w="70"/><text x="30.7525%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (70 samples, 0.62%)</title><rect x="30.5025%" y="645" width="0.6192%" height="15" fill="rgb(217,6,38)" fg:x="3448" fg:w="70"/><text x="30.7525%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (70 samples, 0.62%)</title><rect x="30.5025%" y="629" width="0.6192%" height="15" fill="rgb(229,229,48)" fg:x="3448" fg:w="70"/><text x="30.7525%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="31.1040%" y="613" width="0.0177%" height="15" fill="rgb(225,21,28)" fg:x="3516" fg:w="2"/><text x="31.3540%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="31.1040%" y="597" width="0.0177%" height="15" fill="rgb(206,33,13)" fg:x="3516" fg:w="2"/><text x="31.3540%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.04%)</title><rect x="31.1217%" y="757" width="0.0354%" height="15" fill="rgb(242,178,17)" fg:x="3518" fg:w="4"/><text x="31.3717%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.04%)</title><rect x="31.1217%" y="741" width="0.0354%" height="15" fill="rgb(220,162,5)" fg:x="3518" fg:w="4"/><text x="31.3717%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.04%)</title><rect x="31.1217%" y="725" width="0.0354%" height="15" fill="rgb(210,33,43)" fg:x="3518" fg:w="4"/><text x="31.3717%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="31.1571%" y="757" width="0.0177%" height="15" fill="rgb(216,116,54)" fg:x="3522" fg:w="2"/><text x="31.4071%" y="767.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.11%)</title><rect x="31.1925%" y="533" width="0.1062%" height="15" fill="rgb(249,92,24)" fg:x="3526" fg:w="12"/><text x="31.4425%" y="543.50"></text></g><g><title>_int_malloc (12 samples, 0.11%)</title><rect x="31.1925%" y="517" width="0.1062%" height="15" fill="rgb(231,189,14)" fg:x="3526" fg:w="12"/><text x="31.4425%" y="527.50"></text></g><g><title>unlink_chunk (3 samples, 0.03%)</title><rect x="31.2721%" y="501" width="0.0265%" height="15" fill="rgb(230,8,41)" fg:x="3535" fg:w="3"/><text x="31.5221%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (13 samples, 0.12%)</title><rect x="31.1925%" y="613" width="0.1150%" height="15" fill="rgb(249,7,27)" fg:x="3526" fg:w="13"/><text x="31.4425%" y="623.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (13 samples, 0.12%)</title><rect x="31.1925%" y="597" width="0.1150%" height="15" fill="rgb(232,86,5)" fg:x="3526" fg:w="13"/><text x="31.4425%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.12%)</title><rect x="31.1925%" y="581" width="0.1150%" height="15" fill="rgb(224,175,18)" fg:x="3526" fg:w="13"/><text x="31.4425%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.12%)</title><rect x="31.1925%" y="565" width="0.1150%" height="15" fill="rgb(220,129,12)" fg:x="3526" fg:w="13"/><text x="31.4425%" y="575.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.12%)</title><rect x="31.1925%" y="549" width="0.1150%" height="15" fill="rgb(210,19,36)" fg:x="3526" fg:w="13"/><text x="31.4425%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (16 samples, 0.14%)</title><rect x="31.1837%" y="661" width="0.1415%" height="15" fill="rgb(219,96,14)" fg:x="3525" fg:w="16"/><text x="31.4337%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (16 samples, 0.14%)</title><rect x="31.1837%" y="645" width="0.1415%" height="15" fill="rgb(249,106,1)" fg:x="3525" fg:w="16"/><text x="31.4337%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (16 samples, 0.14%)</title><rect x="31.1837%" y="629" width="0.1415%" height="15" fill="rgb(249,155,20)" fg:x="3525" fg:w="16"/><text x="31.4337%" y="639.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (2 samples, 0.02%)</title><rect x="31.3075%" y="613" width="0.0177%" height="15" fill="rgb(244,168,9)" fg:x="3539" fg:w="2"/><text x="31.5575%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (18 samples, 0.16%)</title><rect x="31.1748%" y="725" width="0.1592%" height="15" fill="rgb(216,23,50)" fg:x="3524" fg:w="18"/><text x="31.4248%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (18 samples, 0.16%)</title><rect x="31.1748%" y="709" width="0.1592%" height="15" fill="rgb(224,219,20)" fg:x="3524" fg:w="18"/><text x="31.4248%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.16%)</title><rect x="31.1748%" y="693" width="0.1592%" height="15" fill="rgb(222,156,15)" fg:x="3524" fg:w="18"/><text x="31.4248%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (18 samples, 0.16%)</title><rect x="31.1748%" y="677" width="0.1592%" height="15" fill="rgb(231,97,17)" fg:x="3524" fg:w="18"/><text x="31.4248%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="31.3340%" y="693" width="0.0177%" height="15" fill="rgb(218,70,48)" fg:x="3542" fg:w="2"/><text x="31.5840%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="31.3340%" y="677" width="0.0177%" height="15" fill="rgb(212,196,52)" fg:x="3542" fg:w="2"/><text x="31.5840%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="31.3340%" y="661" width="0.0177%" height="15" fill="rgb(243,203,18)" fg:x="3542" fg:w="2"/><text x="31.5840%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="31.3517%" y="613" width="0.0177%" height="15" fill="rgb(252,125,41)" fg:x="3544" fg:w="2"/><text x="31.6017%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="31.3517%" y="597" width="0.0177%" height="15" fill="rgb(223,180,33)" fg:x="3544" fg:w="2"/><text x="31.6017%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.3517%" y="581" width="0.0177%" height="15" fill="rgb(254,159,46)" fg:x="3544" fg:w="2"/><text x="31.6017%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.3517%" y="565" width="0.0177%" height="15" fill="rgb(254,38,10)" fg:x="3544" fg:w="2"/><text x="31.6017%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="31.3517%" y="549" width="0.0177%" height="15" fill="rgb(208,217,32)" fg:x="3544" fg:w="2"/><text x="31.6017%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (23 samples, 0.20%)</title><rect x="31.1748%" y="741" width="0.2035%" height="15" fill="rgb(221,120,13)" fg:x="3524" fg:w="23"/><text x="31.4248%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="31.3340%" y="725" width="0.0442%" height="15" fill="rgb(246,54,52)" fg:x="3542" fg:w="5"/><text x="31.5840%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="31.3340%" y="709" width="0.0442%" height="15" fill="rgb(242,34,25)" fg:x="3542" fg:w="5"/><text x="31.5840%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.03%)</title><rect x="31.3517%" y="693" width="0.0265%" height="15" fill="rgb(247,209,9)" fg:x="3544" fg:w="3"/><text x="31.6017%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="31.3517%" y="677" width="0.0265%" height="15" fill="rgb(228,71,26)" fg:x="3544" fg:w="3"/><text x="31.6017%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="31.3517%" y="661" width="0.0265%" height="15" fill="rgb(222,145,49)" fg:x="3544" fg:w="3"/><text x="31.6017%" y="671.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="31.3517%" y="645" width="0.0265%" height="15" fill="rgb(218,121,17)" fg:x="3544" fg:w="3"/><text x="31.6017%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="31.3517%" y="629" width="0.0265%" height="15" fill="rgb(244,50,7)" fg:x="3544" fg:w="3"/><text x="31.6017%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (28 samples, 0.25%)</title><rect x="31.1748%" y="757" width="0.2477%" height="15" fill="rgb(246,229,37)" fg:x="3524" fg:w="28"/><text x="31.4248%" y="767.50"></text></g><g><title>std::collections::hash::map::map_entry (5 samples, 0.04%)</title><rect x="31.3783%" y="741" width="0.0442%" height="15" fill="rgb(225,18,5)" fg:x="3547" fg:w="5"/><text x="31.6283%" y="751.50"></text></g><g><title>block_stm_revm::main (121 samples, 1.07%)</title><rect x="30.3609%" y="1045" width="1.0704%" height="15" fill="rgb(213,204,8)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="1055.50"></text></g><g><title>block_stm_revm::execute_sequential (121 samples, 1.07%)</title><rect x="30.3609%" y="1029" width="1.0704%" height="15" fill="rgb(238,103,6)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (121 samples, 1.07%)</title><rect x="30.3609%" y="1013" width="1.0704%" height="15" fill="rgb(222,25,35)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (121 samples, 1.07%)</title><rect x="30.3609%" y="997" width="1.0704%" height="15" fill="rgb(213,203,35)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (121 samples, 1.07%)</title><rect x="30.3609%" y="981" width="1.0704%" height="15" fill="rgb(221,79,53)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (121 samples, 1.07%)</title><rect x="30.3609%" y="965" width="1.0704%" height="15" fill="rgb(243,200,35)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (121 samples, 1.07%)</title><rect x="30.3609%" y="949" width="1.0704%" height="15" fill="rgb(248,60,25)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (121 samples, 1.07%)</title><rect x="30.3609%" y="933" width="1.0704%" height="15" fill="rgb(227,53,46)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (121 samples, 1.07%)</title><rect x="30.3609%" y="917" width="1.0704%" height="15" fill="rgb(216,120,32)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (121 samples, 1.07%)</title><rect x="30.3609%" y="901" width="1.0704%" height="15" fill="rgb(220,134,1)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (121 samples, 1.07%)</title><rect x="30.3609%" y="885" width="1.0704%" height="15" fill="rgb(237,168,5)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="895.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (121 samples, 1.07%)</title><rect x="30.3609%" y="869" width="1.0704%" height="15" fill="rgb(231,100,33)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="879.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (121 samples, 1.07%)</title><rect x="30.3609%" y="853" width="1.0704%" height="15" fill="rgb(236,177,47)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="863.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (121 samples, 1.07%)</title><rect x="30.3609%" y="837" width="1.0704%" height="15" fill="rgb(235,7,49)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="847.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (121 samples, 1.07%)</title><rect x="30.3609%" y="821" width="1.0704%" height="15" fill="rgb(232,119,22)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="831.50"></text></g><g><title>core::ops::function::Fn::call (121 samples, 1.07%)</title><rect x="30.3609%" y="805" width="1.0704%" height="15" fill="rgb(254,73,53)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="815.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (121 samples, 1.07%)</title><rect x="30.3609%" y="789" width="1.0704%" height="15" fill="rgb(251,35,20)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="799.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (121 samples, 1.07%)</title><rect x="30.3609%" y="773" width="1.0704%" height="15" fill="rgb(241,119,20)" fg:x="3432" fg:w="121"/><text x="30.6109%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (2 samples, 0.02%)</title><rect x="31.4490%" y="853" width="0.0177%" height="15" fill="rgb(207,102,14)" fg:x="3555" fg:w="2"/><text x="31.6990%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2 samples, 0.02%)</title><rect x="31.4490%" y="837" width="0.0177%" height="15" fill="rgb(248,201,50)" fg:x="3555" fg:w="2"/><text x="31.6990%" y="847.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.07%)</title><rect x="31.4756%" y="757" width="0.0708%" height="15" fill="rgb(222,185,44)" fg:x="3558" fg:w="8"/><text x="31.7256%" y="767.50"></text></g><g><title>_int_malloc (6 samples, 0.05%)</title><rect x="31.4933%" y="741" width="0.0531%" height="15" fill="rgb(218,107,18)" fg:x="3560" fg:w="6"/><text x="31.7433%" y="751.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="31.5287%" y="725" width="0.0177%" height="15" fill="rgb(237,177,39)" fg:x="3564" fg:w="2"/><text x="31.7787%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (17 samples, 0.15%)</title><rect x="31.4490%" y="965" width="0.1504%" height="15" fill="rgb(246,69,6)" fg:x="3555" fg:w="17"/><text x="31.6990%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (17 samples, 0.15%)</title><rect x="31.4490%" y="949" width="0.1504%" height="15" fill="rgb(234,208,37)" fg:x="3555" fg:w="17"/><text x="31.6990%" y="959.50"></text></g><g><title>core::clone::Clone::clone (17 samples, 0.15%)</title><rect x="31.4490%" y="933" width="0.1504%" height="15" fill="rgb(225,4,6)" fg:x="3555" fg:w="17"/><text x="31.6990%" y="943.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="31.4490%" y="917" width="0.1504%" height="15" fill="rgb(233,45,0)" fg:x="3555" fg:w="17"/><text x="31.6990%" y="927.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="31.4490%" y="901" width="0.1504%" height="15" fill="rgb(226,136,5)" fg:x="3555" fg:w="17"/><text x="31.6990%" y="911.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="31.4490%" y="885" width="0.1504%" height="15" fill="rgb(211,91,47)" fg:x="3555" fg:w="17"/><text x="31.6990%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="31.4490%" y="869" width="0.1504%" height="15" fill="rgb(242,88,51)" fg:x="3555" fg:w="17"/><text x="31.6990%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (14 samples, 0.12%)</title><rect x="31.4756%" y="853" width="0.1238%" height="15" fill="rgb(230,91,28)" fg:x="3558" fg:w="14"/><text x="31.7256%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (14 samples, 0.12%)</title><rect x="31.4756%" y="837" width="0.1238%" height="15" fill="rgb(254,186,29)" fg:x="3558" fg:w="14"/><text x="31.7256%" y="847.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (14 samples, 0.12%)</title><rect x="31.4756%" y="821" width="0.1238%" height="15" fill="rgb(238,6,4)" fg:x="3558" fg:w="14"/><text x="31.7256%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.12%)</title><rect x="31.4756%" y="805" width="0.1238%" height="15" fill="rgb(221,151,16)" fg:x="3558" fg:w="14"/><text x="31.7256%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.12%)</title><rect x="31.4756%" y="789" width="0.1238%" height="15" fill="rgb(251,143,52)" fg:x="3558" fg:w="14"/><text x="31.7256%" y="799.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.12%)</title><rect x="31.4756%" y="773" width="0.1238%" height="15" fill="rgb(206,90,15)" fg:x="3558" fg:w="14"/><text x="31.7256%" y="783.50"></text></g><g><title>__rust_alloc (5 samples, 0.04%)</title><rect x="31.5552%" y="757" width="0.0442%" height="15" fill="rgb(218,35,8)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="767.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="31.5552%" y="741" width="0.0442%" height="15" fill="rgb(239,215,6)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="31.5552%" y="725" width="0.0442%" height="15" fill="rgb(245,116,39)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="31.5552%" y="709" width="0.0442%" height="15" fill="rgb(242,65,28)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="31.5552%" y="693" width="0.0442%" height="15" fill="rgb(252,132,53)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="31.5552%" y="677" width="0.0442%" height="15" fill="rgb(224,159,50)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="31.5552%" y="661" width="0.0442%" height="15" fill="rgb(224,93,4)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="671.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="31.5552%" y="645" width="0.0442%" height="15" fill="rgb(208,81,34)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="31.5552%" y="629" width="0.0442%" height="15" fill="rgb(233,92,54)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="31.5552%" y="613" width="0.0442%" height="15" fill="rgb(237,21,14)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="31.5552%" y="597" width="0.0442%" height="15" fill="rgb(249,128,51)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="607.50"></text></g><g><title>perf_pmu_nop_void (5 samples, 0.04%)</title><rect x="31.5552%" y="581" width="0.0442%" height="15" fill="rgb(223,129,24)" fg:x="3567" fg:w="5"/><text x="31.8052%" y="591.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (18 samples, 0.16%)</title><rect x="31.4490%" y="1029" width="0.1592%" height="15" fill="rgb(231,168,25)" fg:x="3555" fg:w="18"/><text x="31.6990%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (18 samples, 0.16%)</title><rect x="31.4490%" y="1013" width="0.1592%" height="15" fill="rgb(224,39,20)" fg:x="3555" fg:w="18"/><text x="31.6990%" y="1023.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.16%)</title><rect x="31.4490%" y="997" width="0.1592%" height="15" fill="rgb(225,152,53)" fg:x="3555" fg:w="18"/><text x="31.6990%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.16%)</title><rect x="31.4490%" y="981" width="0.1592%" height="15" fill="rgb(252,17,24)" fg:x="3555" fg:w="18"/><text x="31.6990%" y="991.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="31.6348%" y="901" width="0.0531%" height="15" fill="rgb(250,114,30)" fg:x="3576" fg:w="6"/><text x="31.8848%" y="911.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="31.6879%" y="837" width="0.0177%" height="15" fill="rgb(229,5,4)" fg:x="3582" fg:w="2"/><text x="31.9379%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (11 samples, 0.10%)</title><rect x="31.6260%" y="933" width="0.0973%" height="15" fill="rgb(225,176,49)" fg:x="3575" fg:w="11"/><text x="31.8760%" y="943.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.09%)</title><rect x="31.6348%" y="917" width="0.0885%" height="15" fill="rgb(224,221,49)" fg:x="3576" fg:w="10"/><text x="31.8848%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.04%)</title><rect x="31.6879%" y="901" width="0.0354%" height="15" fill="rgb(253,169,27)" fg:x="3582" fg:w="4"/><text x="31.9379%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="31.6879%" y="885" width="0.0354%" height="15" fill="rgb(211,206,16)" fg:x="3582" fg:w="4"/><text x="31.9379%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="31.6879%" y="869" width="0.0354%" height="15" fill="rgb(244,87,35)" fg:x="3582" fg:w="4"/><text x="31.9379%" y="879.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="31.6879%" y="853" width="0.0354%" height="15" fill="rgb(246,28,10)" fg:x="3582" fg:w="4"/><text x="31.9379%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="31.7233%" y="933" width="0.0177%" height="15" fill="rgb(229,12,44)" fg:x="3586" fg:w="2"/><text x="31.9733%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::new (3 samples, 0.03%)</title><rect x="31.7410%" y="933" width="0.0265%" height="15" fill="rgb(210,145,37)" fg:x="3588" fg:w="3"/><text x="31.9910%" y="943.50"></text></g><g><title>&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (20 samples, 0.18%)</title><rect x="31.6083%" y="997" width="0.1769%" height="15" fill="rgb(227,112,52)" fg:x="3573" fg:w="20"/><text x="31.8583%" y="1007.50"></text></g><g><title>revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::new_empty (20 samples, 0.18%)</title><rect x="31.6083%" y="981" width="0.1769%" height="15" fill="rgb(238,155,34)" fg:x="3573" fg:w="20"/><text x="31.8583%" y="991.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::new (20 samples, 0.18%)</title><rect x="31.6083%" y="965" width="0.1769%" height="15" fill="rgb(239,226,36)" fg:x="3573" fg:w="20"/><text x="31.8583%" y="975.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::new (19 samples, 0.17%)</title><rect x="31.6171%" y="949" width="0.1681%" height="15" fill="rgb(230,16,23)" fg:x="3574" fg:w="19"/><text x="31.8671%" y="959.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="31.7675%" y="933" width="0.0177%" height="15" fill="rgb(236,171,36)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="943.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="31.7675%" y="917" width="0.0177%" height="15" fill="rgb(221,22,14)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="927.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="31.7675%" y="901" width="0.0177%" height="15" fill="rgb(242,43,11)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="911.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="31.7675%" y="885" width="0.0177%" height="15" fill="rgb(232,69,23)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="895.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="31.7675%" y="869" width="0.0177%" height="15" fill="rgb(216,180,54)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="879.50"></text></g><g><title>std::hash::random::RandomState::new (2 samples, 0.02%)</title><rect x="31.7675%" y="853" width="0.0177%" height="15" fill="rgb(216,5,24)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="31.7675%" y="837" width="0.0177%" height="15" fill="rgb(225,89,9)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="31.7675%" y="821" width="0.0177%" height="15" fill="rgb(243,75,33)" fg:x="3591" fg:w="2"/><text x="32.0175%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="31.7852%" y="997" width="0.0354%" height="15" fill="rgb(247,141,45)" fg:x="3593" fg:w="4"/><text x="32.0352%" y="1007.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="31.8206%" y="949" width="0.0531%" height="15" fill="rgb(232,177,36)" fg:x="3597" fg:w="6"/><text x="32.0706%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.09%)</title><rect x="31.8737%" y="933" width="0.0885%" height="15" fill="rgb(219,125,36)" fg:x="3603" fg:w="10"/><text x="32.1237%" y="943.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="32.1568%" y="789" width="0.0442%" height="15" fill="rgb(227,94,9)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="32.1568%" y="773" width="0.0442%" height="15" fill="rgb(240,34,52)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="32.1568%" y="757" width="0.0442%" height="15" fill="rgb(216,45,12)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="32.1568%" y="741" width="0.0442%" height="15" fill="rgb(246,21,19)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="32.1568%" y="725" width="0.0442%" height="15" fill="rgb(213,98,42)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="32.1568%" y="709" width="0.0442%" height="15" fill="rgb(250,136,47)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="719.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="32.1568%" y="693" width="0.0442%" height="15" fill="rgb(251,124,27)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="703.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="32.1568%" y="677" width="0.0442%" height="15" fill="rgb(229,180,14)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="32.1568%" y="661" width="0.0442%" height="15" fill="rgb(245,216,25)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="671.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="32.1568%" y="645" width="0.0442%" height="15" fill="rgb(251,43,5)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="655.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="32.1568%" y="629" width="0.0442%" height="15" fill="rgb(250,128,24)" fg:x="3635" fg:w="5"/><text x="32.4068%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (28 samples, 0.25%)</title><rect x="31.9710%" y="917" width="0.2477%" height="15" fill="rgb(217,117,27)" fg:x="3614" fg:w="28"/><text x="32.2210%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (28 samples, 0.25%)</title><rect x="31.9710%" y="901" width="0.2477%" height="15" fill="rgb(245,147,4)" fg:x="3614" fg:w="28"/><text x="32.2210%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.25%)</title><rect x="31.9710%" y="885" width="0.2477%" height="15" fill="rgb(242,201,35)" fg:x="3614" fg:w="28"/><text x="32.2210%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.25%)</title><rect x="31.9710%" y="869" width="0.2477%" height="15" fill="rgb(218,181,1)" fg:x="3614" fg:w="28"/><text x="32.2210%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.25%)</title><rect x="31.9710%" y="853" width="0.2477%" height="15" fill="rgb(222,6,29)" fg:x="3614" fg:w="28"/><text x="32.2210%" y="863.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.25%)</title><rect x="31.9710%" y="837" width="0.2477%" height="15" fill="rgb(208,186,3)" fg:x="3614" fg:w="28"/><text x="32.2210%" y="847.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.25%)</title><rect x="31.9710%" y="821" width="0.2477%" height="15" fill="rgb(216,36,26)" fg:x="3614" fg:w="28"/><text x="32.2210%" y="831.50"></text></g><g><title>_int_malloc (26 samples, 0.23%)</title><rect x="31.9887%" y="805" width="0.2300%" height="15" fill="rgb(248,201,23)" fg:x="3616" fg:w="26"/><text x="32.2387%" y="815.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="32.2010%" y="789" width="0.0177%" height="15" fill="rgb(251,170,31)" fg:x="3640" fg:w="2"/><text x="32.4510%" y="799.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="32.2187%" y="917" width="0.0442%" height="15" fill="rgb(207,110,25)" fg:x="3642" fg:w="5"/><text x="32.4687%" y="927.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="32.2187%" y="901" width="0.0442%" height="15" fill="rgb(250,54,15)" fg:x="3642" fg:w="5"/><text x="32.4687%" y="911.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="32.2187%" y="885" width="0.0442%" height="15" fill="rgb(227,68,33)" fg:x="3642" fg:w="5"/><text x="32.4687%" y="895.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="32.2187%" y="869" width="0.0442%" height="15" fill="rgb(238,34,41)" fg:x="3642" fg:w="5"/><text x="32.4687%" y="879.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="32.2187%" y="853" width="0.0442%" height="15" fill="rgb(220,11,15)" fg:x="3642" fg:w="5"/><text x="32.4687%" y="863.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="32.2187%" y="837" width="0.0442%" height="15" fill="rgb(246,111,35)" fg:x="3642" fg:w="5"/><text x="32.4687%" y="847.50"></text></g><g><title>schedule (4 samples, 0.04%)</title><rect x="32.2275%" y="821" width="0.0354%" height="15" fill="rgb(209,88,53)" fg:x="3643" fg:w="4"/><text x="32.4775%" y="831.50"></text></g><g><title>__schedule (4 samples, 0.04%)</title><rect x="32.2275%" y="805" width="0.0354%" height="15" fill="rgb(231,185,47)" fg:x="3643" fg:w="4"/><text x="32.4775%" y="815.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.04%)</title><rect x="32.2275%" y="789" width="0.0354%" height="15" fill="rgb(233,154,1)" fg:x="3643" fg:w="4"/><text x="32.4775%" y="799.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="32.2275%" y="773" width="0.0354%" height="15" fill="rgb(225,15,46)" fg:x="3643" fg:w="4"/><text x="32.4775%" y="783.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (39 samples, 0.35%)</title><rect x="31.9621%" y="933" width="0.3450%" height="15" fill="rgb(211,135,41)" fg:x="3613" fg:w="39"/><text x="32.2121%" y="943.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="32.2629%" y="917" width="0.0442%" height="15" fill="rgb(208,54,0)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="927.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="32.2629%" y="901" width="0.0442%" height="15" fill="rgb(244,136,14)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="911.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="32.2629%" y="885" width="0.0442%" height="15" fill="rgb(241,56,14)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="895.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="32.2629%" y="869" width="0.0442%" height="15" fill="rgb(205,80,24)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="879.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="32.2629%" y="853" width="0.0442%" height="15" fill="rgb(220,57,4)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="863.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="32.2629%" y="837" width="0.0442%" height="15" fill="rgb(226,193,50)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="847.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="32.2629%" y="821" width="0.0442%" height="15" fill="rgb(231,168,22)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="831.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="32.2629%" y="805" width="0.0442%" height="15" fill="rgb(254,215,14)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="815.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="32.2629%" y="789" width="0.0442%" height="15" fill="rgb(211,115,16)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="799.50"></text></g><g><title>_raw_spin_unlock (5 samples, 0.04%)</title><rect x="32.2629%" y="773" width="0.0442%" height="15" fill="rgb(236,210,16)" fg:x="3647" fg:w="5"/><text x="32.5129%" y="783.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="32.3071%" y="821" width="0.0265%" height="15" fill="rgb(221,94,12)" fg:x="3652" fg:w="3"/><text x="32.5571%" y="831.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="32.3160%" y="805" width="0.0177%" height="15" fill="rgb(235,218,49)" fg:x="3653" fg:w="2"/><text x="32.5660%" y="815.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="32.3160%" y="789" width="0.0177%" height="15" fill="rgb(217,114,14)" fg:x="3653" fg:w="2"/><text x="32.5660%" y="799.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (4 samples, 0.04%)</title><rect x="32.3071%" y="933" width="0.0354%" height="15" fill="rgb(216,145,22)" fg:x="3652" fg:w="4"/><text x="32.5571%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="32.3071%" y="917" width="0.0354%" height="15" fill="rgb(217,112,39)" fg:x="3652" fg:w="4"/><text x="32.5571%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="32.3071%" y="901" width="0.0354%" height="15" fill="rgb(225,85,32)" fg:x="3652" fg:w="4"/><text x="32.5571%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.04%)</title><rect x="32.3071%" y="885" width="0.0354%" height="15" fill="rgb(245,209,47)" fg:x="3652" fg:w="4"/><text x="32.5571%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="32.3071%" y="869" width="0.0354%" height="15" fill="rgb(218,220,15)" fg:x="3652" fg:w="4"/><text x="32.5571%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="32.3071%" y="853" width="0.0354%" height="15" fill="rgb(222,202,31)" fg:x="3652" fg:w="4"/><text x="32.5571%" y="863.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="32.3071%" y="837" width="0.0354%" height="15" fill="rgb(243,203,4)" fg:x="3652" fg:w="4"/><text x="32.5571%" y="847.50"></text></g><g><title>_int_malloc (28 samples, 0.25%)</title><rect x="32.3691%" y="805" width="0.2477%" height="15" fill="rgb(237,92,17)" fg:x="3659" fg:w="28"/><text x="32.6191%" y="815.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="32.5902%" y="789" width="0.0265%" height="15" fill="rgb(231,119,7)" fg:x="3684" fg:w="3"/><text x="32.8402%" y="799.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.29%)</title><rect x="32.3425%" y="821" width="0.2919%" height="15" fill="rgb(237,82,41)" fg:x="3656" fg:w="33"/><text x="32.5925%" y="831.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="32.6345%" y="821" width="0.0177%" height="15" fill="rgb(226,81,48)" fg:x="3689" fg:w="2"/><text x="32.8845%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="32.6345%" y="805" width="0.0177%" height="15" fill="rgb(234,70,51)" fg:x="3689" fg:w="2"/><text x="32.8845%" y="815.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (37 samples, 0.33%)</title><rect x="32.3425%" y="933" width="0.3273%" height="15" fill="rgb(251,86,4)" fg:x="3656" fg:w="37"/><text x="32.5925%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (37 samples, 0.33%)</title><rect x="32.3425%" y="917" width="0.3273%" height="15" fill="rgb(244,144,28)" fg:x="3656" fg:w="37"/><text x="32.5925%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (37 samples, 0.33%)</title><rect x="32.3425%" y="901" width="0.3273%" height="15" fill="rgb(232,161,39)" fg:x="3656" fg:w="37"/><text x="32.5925%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (37 samples, 0.33%)</title><rect x="32.3425%" y="885" width="0.3273%" height="15" fill="rgb(247,34,51)" fg:x="3656" fg:w="37"/><text x="32.5925%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.33%)</title><rect x="32.3425%" y="869" width="0.3273%" height="15" fill="rgb(225,132,2)" fg:x="3656" fg:w="37"/><text x="32.5925%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.33%)</title><rect x="32.3425%" y="853" width="0.3273%" height="15" fill="rgb(209,159,44)" fg:x="3656" fg:w="37"/><text x="32.5925%" y="863.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.33%)</title><rect x="32.3425%" y="837" width="0.3273%" height="15" fill="rgb(251,214,1)" fg:x="3656" fg:w="37"/><text x="32.5925%" y="847.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="32.6522%" y="821" width="0.0177%" height="15" fill="rgb(247,84,47)" fg:x="3691" fg:w="2"/><text x="32.9022%" y="831.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.05%)</title><rect x="32.6787%" y="821" width="0.0531%" height="15" fill="rgb(240,111,43)" fg:x="3694" fg:w="6"/><text x="32.9287%" y="831.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="32.7318%" y="821" width="0.0177%" height="15" fill="rgb(215,214,35)" fg:x="3700" fg:w="2"/><text x="32.9818%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="32.7318%" y="805" width="0.0177%" height="15" fill="rgb(248,207,23)" fg:x="3700" fg:w="2"/><text x="32.9818%" y="815.50"></text></g><g><title>revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (130 samples, 1.15%)</title><rect x="31.6083%" y="1029" width="1.1500%" height="15" fill="rgb(214,186,4)" fg:x="3573" fg:w="130"/><text x="31.8583%" y="1039.50"></text></g><g><title>&lt;revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt; as core::default::Default&gt;::default (130 samples, 1.15%)</title><rect x="31.6083%" y="1013" width="1.1500%" height="15" fill="rgb(220,133,22)" fg:x="3573" fg:w="130"/><text x="31.8583%" y="1023.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (106 samples, 0.94%)</title><rect x="31.8206%" y="997" width="0.9377%" height="15" fill="rgb(239,134,19)" fg:x="3597" fg:w="106"/><text x="32.0706%" y="1007.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (106 samples, 0.94%)</title><rect x="31.8206%" y="981" width="0.9377%" height="15" fill="rgb(250,140,9)" fg:x="3597" fg:w="106"/><text x="32.0706%" y="991.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (106 samples, 0.94%)</title><rect x="31.8206%" y="965" width="0.9377%" height="15" fill="rgb(225,59,14)" fg:x="3597" fg:w="106"/><text x="32.0706%" y="975.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (100 samples, 0.88%)</title><rect x="31.8737%" y="949" width="0.8846%" height="15" fill="rgb(214,152,51)" fg:x="3603" fg:w="100"/><text x="32.1237%" y="959.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (10 samples, 0.09%)</title><rect x="32.6699%" y="933" width="0.0885%" height="15" fill="rgb(251,227,43)" fg:x="3693" fg:w="10"/><text x="32.9199%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9 samples, 0.08%)</title><rect x="32.6787%" y="917" width="0.0796%" height="15" fill="rgb(241,96,17)" fg:x="3694" fg:w="9"/><text x="32.9287%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.08%)</title><rect x="32.6787%" y="901" width="0.0796%" height="15" fill="rgb(234,198,43)" fg:x="3694" fg:w="9"/><text x="32.9287%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.08%)</title><rect x="32.6787%" y="885" width="0.0796%" height="15" fill="rgb(220,108,29)" fg:x="3694" fg:w="9"/><text x="32.9287%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.08%)</title><rect x="32.6787%" y="869" width="0.0796%" height="15" fill="rgb(226,163,33)" fg:x="3694" fg:w="9"/><text x="32.9287%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.08%)</title><rect x="32.6787%" y="853" width="0.0796%" height="15" fill="rgb(205,194,45)" fg:x="3694" fg:w="9"/><text x="32.9287%" y="863.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.08%)</title><rect x="32.6787%" y="837" width="0.0796%" height="15" fill="rgb(206,143,44)" fg:x="3694" fg:w="9"/><text x="32.9287%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="32.7672%" y="997" width="0.0177%" height="15" fill="rgb(236,136,36)" fg:x="3704" fg:w="2"/><text x="33.0172%" y="1007.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="32.7849%" y="997" width="0.0177%" height="15" fill="rgb(249,172,42)" fg:x="3706" fg:w="2"/><text x="33.0349%" y="1007.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="32.7849%" y="981" width="0.0177%" height="15" fill="rgb(216,139,23)" fg:x="3706" fg:w="2"/><text x="33.0349%" y="991.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.04%)</title><rect x="32.8556%" y="581" width="0.0354%" height="15" fill="rgb(207,166,20)" fg:x="3714" fg:w="4"/><text x="33.1056%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="32.8733%" y="565" width="0.0177%" height="15" fill="rgb(210,209,22)" fg:x="3716" fg:w="2"/><text x="33.1233%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="32.8910%" y="565" width="0.0177%" height="15" fill="rgb(232,118,20)" fg:x="3718" fg:w="2"/><text x="33.1410%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.12%)</title><rect x="32.8468%" y="629" width="0.1150%" height="15" fill="rgb(238,113,42)" fg:x="3713" fg:w="13"/><text x="33.0968%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.12%)</title><rect x="32.8468%" y="613" width="0.1150%" height="15" fill="rgb(231,42,5)" fg:x="3713" fg:w="13"/><text x="33.0968%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.12%)</title><rect x="32.8468%" y="597" width="0.1150%" height="15" fill="rgb(243,166,24)" fg:x="3713" fg:w="13"/><text x="33.0968%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.07%)</title><rect x="32.8910%" y="581" width="0.0708%" height="15" fill="rgb(237,226,12)" fg:x="3718" fg:w="8"/><text x="33.1410%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.05%)</title><rect x="32.9087%" y="565" width="0.0531%" height="15" fill="rgb(229,133,24)" fg:x="3720" fg:w="6"/><text x="33.1587%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="33.0237%" y="469" width="0.0265%" height="15" fill="rgb(238,33,43)" fg:x="3733" fg:w="3"/><text x="33.2737%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="33.0326%" y="453" width="0.0177%" height="15" fill="rgb(227,59,38)" fg:x="3734" fg:w="2"/><text x="33.2826%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.12%)</title><rect x="32.9706%" y="517" width="0.1150%" height="15" fill="rgb(230,97,0)" fg:x="3727" fg:w="13"/><text x="33.2206%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.12%)</title><rect x="32.9706%" y="501" width="0.1150%" height="15" fill="rgb(250,173,50)" fg:x="3727" fg:w="13"/><text x="33.2206%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.12%)</title><rect x="32.9706%" y="485" width="0.1150%" height="15" fill="rgb(240,15,50)" fg:x="3727" fg:w="13"/><text x="33.2206%" y="495.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.04%)</title><rect x="33.0502%" y="469" width="0.0354%" height="15" fill="rgb(221,93,22)" fg:x="3736" fg:w="4"/><text x="33.3002%" y="479.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (14 samples, 0.12%)</title><rect x="32.9706%" y="549" width="0.1238%" height="15" fill="rgb(245,180,53)" fg:x="3727" fg:w="14"/><text x="33.2206%" y="559.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.12%)</title><rect x="32.9706%" y="533" width="0.1238%" height="15" fill="rgb(231,88,51)" fg:x="3727" fg:w="14"/><text x="33.2206%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.04%)</title><rect x="33.1387%" y="485" width="0.0354%" height="15" fill="rgb(240,58,21)" fg:x="3746" fg:w="4"/><text x="33.3887%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="33.1564%" y="469" width="0.0177%" height="15" fill="rgb(237,21,10)" fg:x="3748" fg:w="2"/><text x="33.4064%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.36%)</title><rect x="32.8291%" y="661" width="0.3627%" height="15" fill="rgb(218,43,11)" fg:x="3711" fg:w="41"/><text x="33.0791%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.36%)</title><rect x="32.8291%" y="645" width="0.3627%" height="15" fill="rgb(218,221,29)" fg:x="3711" fg:w="41"/><text x="33.0791%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.22%)</title><rect x="32.9706%" y="629" width="0.2212%" height="15" fill="rgb(214,118,42)" fg:x="3727" fg:w="25"/><text x="33.2206%" y="639.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (25 samples, 0.22%)</title><rect x="32.9706%" y="613" width="0.2212%" height="15" fill="rgb(251,200,26)" fg:x="3727" fg:w="25"/><text x="33.2206%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (25 samples, 0.22%)</title><rect x="32.9706%" y="597" width="0.2212%" height="15" fill="rgb(237,101,39)" fg:x="3727" fg:w="25"/><text x="33.2206%" y="607.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (25 samples, 0.22%)</title><rect x="32.9706%" y="581" width="0.2212%" height="15" fill="rgb(251,117,11)" fg:x="3727" fg:w="25"/><text x="33.2206%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (25 samples, 0.22%)</title><rect x="32.9706%" y="565" width="0.2212%" height="15" fill="rgb(216,223,23)" fg:x="3727" fg:w="25"/><text x="33.2206%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (11 samples, 0.10%)</title><rect x="33.0945%" y="549" width="0.0973%" height="15" fill="rgb(251,54,12)" fg:x="3741" fg:w="11"/><text x="33.3445%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.10%)</title><rect x="33.0945%" y="533" width="0.0973%" height="15" fill="rgb(254,176,54)" fg:x="3741" fg:w="11"/><text x="33.3445%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.10%)</title><rect x="33.0945%" y="517" width="0.0973%" height="15" fill="rgb(210,32,8)" fg:x="3741" fg:w="11"/><text x="33.3445%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.10%)</title><rect x="33.0945%" y="501" width="0.0973%" height="15" fill="rgb(235,52,38)" fg:x="3741" fg:w="11"/><text x="33.3445%" y="511.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="33.1741%" y="485" width="0.0177%" height="15" fill="rgb(231,4,44)" fg:x="3750" fg:w="2"/><text x="33.4241%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.07%)</title><rect x="33.1918%" y="661" width="0.0708%" height="15" fill="rgb(249,2,32)" fg:x="3752" fg:w="8"/><text x="33.4418%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.06%)</title><rect x="33.2006%" y="645" width="0.0619%" height="15" fill="rgb(224,65,26)" fg:x="3753" fg:w="7"/><text x="33.4506%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="33.2626%" y="645" width="0.0177%" height="15" fill="rgb(250,73,40)" fg:x="3760" fg:w="2"/><text x="33.5126%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="33.2626%" y="629" width="0.0177%" height="15" fill="rgb(253,177,16)" fg:x="3760" fg:w="2"/><text x="33.5126%" y="639.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="33.2626%" y="613" width="0.0177%" height="15" fill="rgb(217,32,34)" fg:x="3760" fg:w="2"/><text x="33.5126%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (2 samples, 0.02%)</title><rect x="33.2803%" y="629" width="0.0177%" height="15" fill="rgb(212,7,10)" fg:x="3762" fg:w="2"/><text x="33.5303%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2 samples, 0.02%)</title><rect x="33.2803%" y="613" width="0.0177%" height="15" fill="rgb(245,89,8)" fg:x="3762" fg:w="2"/><text x="33.5303%" y="623.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (56 samples, 0.50%)</title><rect x="32.8202%" y="773" width="0.4954%" height="15" fill="rgb(237,16,53)" fg:x="3710" fg:w="56"/><text x="33.0702%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (56 samples, 0.50%)</title><rect x="32.8202%" y="757" width="0.4954%" height="15" fill="rgb(250,204,30)" fg:x="3710" fg:w="56"/><text x="33.0702%" y="767.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (56 samples, 0.50%)</title><rect x="32.8202%" y="741" width="0.4954%" height="15" fill="rgb(208,77,27)" fg:x="3710" fg:w="56"/><text x="33.0702%" y="751.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (56 samples, 0.50%)</title><rect x="32.8202%" y="725" width="0.4954%" height="15" fill="rgb(250,204,28)" fg:x="3710" fg:w="56"/><text x="33.0702%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (56 samples, 0.50%)</title><rect x="32.8202%" y="709" width="0.4954%" height="15" fill="rgb(244,63,21)" fg:x="3710" fg:w="56"/><text x="33.0702%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (56 samples, 0.50%)</title><rect x="32.8202%" y="693" width="0.4954%" height="15" fill="rgb(236,85,44)" fg:x="3710" fg:w="56"/><text x="33.0702%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.50%)</title><rect x="32.8202%" y="677" width="0.4954%" height="15" fill="rgb(215,98,4)" fg:x="3710" fg:w="56"/><text x="33.0702%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.05%)</title><rect x="33.2626%" y="661" width="0.0531%" height="15" fill="rgb(235,38,11)" fg:x="3760" fg:w="6"/><text x="33.5126%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (4 samples, 0.04%)</title><rect x="33.2803%" y="645" width="0.0354%" height="15" fill="rgb(254,186,25)" fg:x="3762" fg:w="4"/><text x="33.5303%" y="655.50"></text></g><g><title>hashbrown::raw::special_is_empty (2 samples, 0.02%)</title><rect x="33.2979%" y="629" width="0.0177%" height="15" fill="rgb(225,55,31)" fg:x="3764" fg:w="2"/><text x="33.5479%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (59 samples, 0.52%)</title><rect x="32.8114%" y="901" width="0.5219%" height="15" fill="rgb(211,15,21)" fg:x="3709" fg:w="59"/><text x="33.0614%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.52%)</title><rect x="32.8114%" y="885" width="0.5219%" height="15" fill="rgb(215,187,41)" fg:x="3709" fg:w="59"/><text x="33.0614%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.52%)</title><rect x="32.8114%" y="869" width="0.5219%" height="15" fill="rgb(248,69,32)" fg:x="3709" fg:w="59"/><text x="33.0614%" y="879.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.52%)</title><rect x="32.8114%" y="853" width="0.5219%" height="15" fill="rgb(252,102,52)" fg:x="3709" fg:w="59"/><text x="33.0614%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.52%)</title><rect x="32.8114%" y="837" width="0.5219%" height="15" fill="rgb(253,140,32)" fg:x="3709" fg:w="59"/><text x="33.0614%" y="847.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.52%)</title><rect x="32.8114%" y="821" width="0.5219%" height="15" fill="rgb(216,56,42)" fg:x="3709" fg:w="59"/><text x="33.0614%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.52%)</title><rect x="32.8114%" y="805" width="0.5219%" height="15" fill="rgb(216,184,14)" fg:x="3709" fg:w="59"/><text x="33.0614%" y="815.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (58 samples, 0.51%)</title><rect x="32.8202%" y="789" width="0.5131%" height="15" fill="rgb(237,187,27)" fg:x="3710" fg:w="58"/><text x="33.0702%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="33.3156%" y="773" width="0.0177%" height="15" fill="rgb(219,65,3)" fg:x="3766" fg:w="2"/><text x="33.5656%" y="783.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (2 samples, 0.02%)</title><rect x="33.3510%" y="773" width="0.0177%" height="15" fill="rgb(245,83,25)" fg:x="3770" fg:w="2"/><text x="33.6010%" y="783.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="33.3864%" y="693" width="0.0265%" height="15" fill="rgb(214,205,45)" fg:x="3774" fg:w="3"/><text x="33.6364%" y="703.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (6 samples, 0.05%)</title><rect x="33.3687%" y="773" width="0.0531%" height="15" fill="rgb(241,20,18)" fg:x="3772" fg:w="6"/><text x="33.6187%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="33.3687%" y="757" width="0.0531%" height="15" fill="rgb(232,163,23)" fg:x="3772" fg:w="6"/><text x="33.6187%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="33.3687%" y="741" width="0.0531%" height="15" fill="rgb(214,5,46)" fg:x="3772" fg:w="6"/><text x="33.6187%" y="751.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="33.3687%" y="725" width="0.0531%" height="15" fill="rgb(229,78,17)" fg:x="3772" fg:w="6"/><text x="33.6187%" y="735.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.05%)</title><rect x="33.3687%" y="709" width="0.0531%" height="15" fill="rgb(248,89,10)" fg:x="3772" fg:w="6"/><text x="33.6187%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (9 samples, 0.08%)</title><rect x="33.3510%" y="789" width="0.0796%" height="15" fill="rgb(248,54,15)" fg:x="3770" fg:w="9"/><text x="33.6010%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (71 samples, 0.63%)</title><rect x="32.8114%" y="981" width="0.6281%" height="15" fill="rgb(223,116,6)" fg:x="3709" fg:w="71"/><text x="33.0614%" y="991.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (71 samples, 0.63%)</title><rect x="32.8114%" y="965" width="0.6281%" height="15" fill="rgb(205,125,38)" fg:x="3709" fg:w="71"/><text x="33.0614%" y="975.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (71 samples, 0.63%)</title><rect x="32.8114%" y="949" width="0.6281%" height="15" fill="rgb(251,78,38)" fg:x="3709" fg:w="71"/><text x="33.0614%" y="959.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (71 samples, 0.63%)</title><rect x="32.8114%" y="933" width="0.6281%" height="15" fill="rgb(253,78,28)" fg:x="3709" fg:w="71"/><text x="33.0614%" y="943.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (71 samples, 0.63%)</title><rect x="32.8114%" y="917" width="0.6281%" height="15" fill="rgb(209,120,3)" fg:x="3709" fg:w="71"/><text x="33.0614%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (12 samples, 0.11%)</title><rect x="33.3333%" y="901" width="0.1062%" height="15" fill="rgb(238,229,9)" fg:x="3768" fg:w="12"/><text x="33.5833%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (12 samples, 0.11%)</title><rect x="33.3333%" y="885" width="0.1062%" height="15" fill="rgb(253,159,18)" fg:x="3768" fg:w="12"/><text x="33.5833%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.10%)</title><rect x="33.3422%" y="869" width="0.0973%" height="15" fill="rgb(244,42,34)" fg:x="3769" fg:w="11"/><text x="33.5922%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (11 samples, 0.10%)</title><rect x="33.3422%" y="853" width="0.0973%" height="15" fill="rgb(224,8,7)" fg:x="3769" fg:w="11"/><text x="33.5922%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (11 samples, 0.10%)</title><rect x="33.3422%" y="837" width="0.0973%" height="15" fill="rgb(210,201,45)" fg:x="3769" fg:w="11"/><text x="33.5922%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (10 samples, 0.09%)</title><rect x="33.3510%" y="821" width="0.0885%" height="15" fill="rgb(252,185,21)" fg:x="3770" fg:w="10"/><text x="33.6010%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (10 samples, 0.09%)</title><rect x="33.3510%" y="805" width="0.0885%" height="15" fill="rgb(223,131,1)" fg:x="3770" fg:w="10"/><text x="33.6010%" y="815.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::set_precompiles (73 samples, 0.65%)</title><rect x="32.8025%" y="997" width="0.6458%" height="15" fill="rgb(245,141,16)" fg:x="3708" fg:w="73"/><text x="33.0525%" y="1007.50"></text></g><g><title>__GI___libc_free (14 samples, 0.12%)</title><rect x="33.4483%" y="981" width="0.1238%" height="15" fill="rgb(229,55,45)" fg:x="3781" fg:w="14"/><text x="33.6983%" y="991.50"></text></g><g><title>_int_free (14 samples, 0.12%)</title><rect x="33.4483%" y="965" width="0.1238%" height="15" fill="rgb(208,92,15)" fg:x="3781" fg:w="14"/><text x="33.6983%" y="975.50"></text></g><g><title>_int_free_merge_chunk (6 samples, 0.05%)</title><rect x="33.5191%" y="949" width="0.0531%" height="15" fill="rgb(234,185,47)" fg:x="3789" fg:w="6"/><text x="33.7691%" y="959.50"></text></g><g><title>unlink_chunk (5 samples, 0.04%)</title><rect x="33.5280%" y="933" width="0.0442%" height="15" fill="rgb(253,104,50)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="943.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="33.5280%" y="917" width="0.0442%" height="15" fill="rgb(205,70,7)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="927.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="33.5280%" y="901" width="0.0442%" height="15" fill="rgb(240,178,43)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="911.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="33.5280%" y="885" width="0.0442%" height="15" fill="rgb(214,112,2)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="895.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="33.5280%" y="869" width="0.0442%" height="15" fill="rgb(206,46,17)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="879.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="33.5280%" y="853" width="0.0442%" height="15" fill="rgb(225,220,16)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="863.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="33.5280%" y="837" width="0.0442%" height="15" fill="rgb(238,65,40)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="847.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="33.5280%" y="821" width="0.0442%" height="15" fill="rgb(230,151,21)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="831.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="33.5280%" y="805" width="0.0442%" height="15" fill="rgb(218,58,49)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="815.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="33.5280%" y="789" width="0.0442%" height="15" fill="rgb(219,179,14)" fg:x="3790" fg:w="5"/><text x="33.7780%" y="799.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="33.5368%" y="773" width="0.0354%" height="15" fill="rgb(223,72,1)" fg:x="3791" fg:w="4"/><text x="33.7868%" y="783.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.04%)</title><rect x="33.5368%" y="757" width="0.0354%" height="15" fill="rgb(238,126,10)" fg:x="3791" fg:w="4"/><text x="33.7868%" y="767.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.04%)</title><rect x="33.5368%" y="741" width="0.0354%" height="15" fill="rgb(224,206,38)" fg:x="3791" fg:w="4"/><text x="33.7868%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (13 samples, 0.12%)</title><rect x="33.5722%" y="981" width="0.1150%" height="15" fill="rgb(212,201,54)" fg:x="3795" fg:w="13"/><text x="33.8222%" y="991.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="33.6430%" y="965" width="0.0442%" height="15" fill="rgb(218,154,48)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="975.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="33.6430%" y="949" width="0.0442%" height="15" fill="rgb(232,93,24)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="959.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="33.6430%" y="933" width="0.0442%" height="15" fill="rgb(245,30,21)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="943.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="33.6430%" y="917" width="0.0442%" height="15" fill="rgb(242,148,29)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="927.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="33.6430%" y="901" width="0.0442%" height="15" fill="rgb(244,153,54)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="911.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="33.6430%" y="885" width="0.0442%" height="15" fill="rgb(252,87,22)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="895.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="33.6430%" y="869" width="0.0442%" height="15" fill="rgb(210,51,29)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="879.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="33.6430%" y="853" width="0.0442%" height="15" fill="rgb(242,136,47)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="863.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="33.6430%" y="837" width="0.0442%" height="15" fill="rgb(238,68,4)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="847.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="33.6430%" y="821" width="0.0442%" height="15" fill="rgb(242,161,30)" fg:x="3803" fg:w="5"/><text x="33.8930%" y="831.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.04%)</title><rect x="33.6518%" y="805" width="0.0354%" height="15" fill="rgb(218,58,44)" fg:x="3804" fg:w="4"/><text x="33.9018%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (5 samples, 0.04%)</title><rect x="33.6872%" y="981" width="0.0442%" height="15" fill="rgb(252,125,32)" fg:x="3808" fg:w="5"/><text x="33.9372%" y="991.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="33.6872%" y="965" width="0.0442%" height="15" fill="rgb(219,178,0)" fg:x="3808" fg:w="5"/><text x="33.9372%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.14%)</title><rect x="33.7845%" y="965" width="0.1415%" height="15" fill="rgb(213,152,7)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.14%)</title><rect x="33.7845%" y="949" width="0.1415%" height="15" fill="rgb(249,109,34)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.14%)</title><rect x="33.7845%" y="933" width="0.1415%" height="15" fill="rgb(232,96,21)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.14%)</title><rect x="33.7845%" y="917" width="0.1415%" height="15" fill="rgb(228,27,39)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.14%)</title><rect x="33.7845%" y="901" width="0.1415%" height="15" fill="rgb(211,182,52)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.14%)</title><rect x="33.7845%" y="885" width="0.1415%" height="15" fill="rgb(234,178,38)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="895.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.14%)</title><rect x="33.7845%" y="869" width="0.1415%" height="15" fill="rgb(221,111,3)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="879.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.14%)</title><rect x="33.7845%" y="853" width="0.1415%" height="15" fill="rgb(228,175,21)" fg:x="3819" fg:w="16"/><text x="34.0345%" y="863.50"></text></g><g><title>_int_malloc (9 samples, 0.08%)</title><rect x="33.8464%" y="837" width="0.0796%" height="15" fill="rgb(228,174,43)" fg:x="3826" fg:w="9"/><text x="34.0964%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::shared_memory::SharedMemory&gt; (7 samples, 0.06%)</title><rect x="33.9260%" y="965" width="0.0619%" height="15" fill="rgb(211,191,0)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.06%)</title><rect x="33.9260%" y="949" width="0.0619%" height="15" fill="rgb(253,117,3)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.06%)</title><rect x="33.9260%" y="933" width="0.0619%" height="15" fill="rgb(241,127,19)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="943.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="33.9260%" y="917" width="0.0619%" height="15" fill="rgb(218,103,12)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.06%)</title><rect x="33.9260%" y="901" width="0.0619%" height="15" fill="rgb(236,214,43)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.06%)</title><rect x="33.9260%" y="885" width="0.0619%" height="15" fill="rgb(244,144,19)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="895.50"></text></g><g><title>__GI___libc_free (7 samples, 0.06%)</title><rect x="33.9260%" y="869" width="0.0619%" height="15" fill="rgb(246,188,10)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="879.50"></text></g><g><title>_int_free (7 samples, 0.06%)</title><rect x="33.9260%" y="853" width="0.0619%" height="15" fill="rgb(212,193,33)" fg:x="3835" fg:w="7"/><text x="34.1760%" y="863.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.03%)</title><rect x="33.9614%" y="837" width="0.0265%" height="15" fill="rgb(241,51,29)" fg:x="3839" fg:w="3"/><text x="34.2114%" y="847.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.02%)</title><rect x="33.9703%" y="821" width="0.0177%" height="15" fill="rgb(211,58,19)" fg:x="3840" fg:w="2"/><text x="34.2203%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (9 samples, 0.08%)</title><rect x="34.0057%" y="837" width="0.0796%" height="15" fill="rgb(229,111,26)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (9 samples, 0.08%)</title><rect x="34.0057%" y="821" width="0.0796%" height="15" fill="rgb(213,115,40)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="831.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="34.0057%" y="805" width="0.0796%" height="15" fill="rgb(209,56,44)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="815.50"></text></g><g><title>bytes::bytes::shared_drop (9 samples, 0.08%)</title><rect x="34.0057%" y="789" width="0.0796%" height="15" fill="rgb(230,108,32)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="799.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (9 samples, 0.08%)</title><rect x="34.0057%" y="773" width="0.0796%" height="15" fill="rgb(216,165,31)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="783.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (9 samples, 0.08%)</title><rect x="34.0057%" y="757" width="0.0796%" height="15" fill="rgb(218,122,21)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="767.50"></text></g><g><title>bytes::bytes::release_shared (9 samples, 0.08%)</title><rect x="34.0057%" y="741" width="0.0796%" height="15" fill="rgb(223,224,47)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.08%)</title><rect x="34.0057%" y="725" width="0.0796%" height="15" fill="rgb(238,102,44)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.08%)</title><rect x="34.0057%" y="709" width="0.0796%" height="15" fill="rgb(236,46,40)" fg:x="3844" fg:w="9"/><text x="34.2557%" y="719.50"></text></g><g><title>__GI___libc_free (7 samples, 0.06%)</title><rect x="34.0941%" y="773" width="0.0619%" height="15" fill="rgb(247,202,50)" fg:x="3854" fg:w="7"/><text x="34.3441%" y="783.50"></text></g><g><title>_int_free (6 samples, 0.05%)</title><rect x="34.1030%" y="757" width="0.0531%" height="15" fill="rgb(209,99,20)" fg:x="3855" fg:w="6"/><text x="34.3530%" y="767.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.04%)</title><rect x="34.1207%" y="741" width="0.0354%" height="15" fill="rgb(252,27,34)" fg:x="3857" fg:w="4"/><text x="34.3707%" y="751.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.03%)</title><rect x="34.1295%" y="725" width="0.0265%" height="15" fill="rgb(215,206,23)" fg:x="3858" fg:w="3"/><text x="34.3795%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (9 samples, 0.08%)</title><rect x="34.0853%" y="821" width="0.0796%" height="15" fill="rgb(212,135,36)" fg:x="3853" fg:w="9"/><text x="34.3353%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (9 samples, 0.08%)</title><rect x="34.0853%" y="805" width="0.0796%" height="15" fill="rgb(240,189,1)" fg:x="3853" fg:w="9"/><text x="34.3353%" y="815.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="34.0853%" y="789" width="0.0796%" height="15" fill="rgb(242,56,20)" fg:x="3853" fg:w="9"/><text x="34.3353%" y="799.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="34.1649%" y="773" width="0.0177%" height="15" fill="rgb(247,132,33)" fg:x="3862" fg:w="2"/><text x="34.4149%" y="783.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="34.1649%" y="757" width="0.0177%" height="15" fill="rgb(208,149,11)" fg:x="3862" fg:w="2"/><text x="34.4149%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::contract::Contract&gt; (24 samples, 0.21%)</title><rect x="34.0057%" y="853" width="0.2123%" height="15" fill="rgb(211,33,11)" fg:x="3844" fg:w="24"/><text x="34.2557%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::analysis::BytecodeLocked&gt; (15 samples, 0.13%)</title><rect x="34.0853%" y="837" width="0.1327%" height="15" fill="rgb(221,29,38)" fg:x="3853" fg:w="15"/><text x="34.3353%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (6 samples, 0.05%)</title><rect x="34.1649%" y="821" width="0.0531%" height="15" fill="rgb(206,182,49)" fg:x="3862" fg:w="6"/><text x="34.4149%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="34.1649%" y="805" width="0.0531%" height="15" fill="rgb(216,140,1)" fg:x="3862" fg:w="6"/><text x="34.4149%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="34.1649%" y="789" width="0.0531%" height="15" fill="rgb(232,57,40)" fg:x="3862" fg:w="6"/><text x="34.4149%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="34.1914%" y="773" width="0.0265%" height="15" fill="rgb(224,186,18)" fg:x="3865" fg:w="3"/><text x="34.4414%" y="783.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="34.1914%" y="757" width="0.0265%" height="15" fill="rgb(215,121,11)" fg:x="3865" fg:w="3"/><text x="34.4414%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;bitvec::vec::BitVec&lt;u8&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="34.1914%" y="741" width="0.0265%" height="15" fill="rgb(245,147,10)" fg:x="3865" fg:w="3"/><text x="34.4414%" y="751.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="34.1914%" y="725" width="0.0265%" height="15" fill="rgb(238,153,13)" fg:x="3865" fg:w="3"/><text x="34.4414%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="34.2003%" y="709" width="0.0177%" height="15" fill="rgb(233,108,0)" fg:x="3866" fg:w="2"/><text x="34.4503%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="34.2003%" y="693" width="0.0177%" height="15" fill="rgb(212,157,17)" fg:x="3866" fg:w="2"/><text x="34.4503%" y="703.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call_return (31 samples, 0.27%)</title><rect x="33.9880%" y="965" width="0.2742%" height="15" fill="rgb(225,213,38)" fg:x="3842" fg:w="31"/><text x="34.2380%" y="975.50"></text></g><g><title>core::ops::function::Fn::call (31 samples, 0.27%)</title><rect x="33.9880%" y="949" width="0.2742%" height="15" fill="rgb(248,16,11)" fg:x="3842" fg:w="31"/><text x="34.2380%" y="959.50"></text></g><g><title>revm::handler::mainnet::execution::call_return (31 samples, 0.27%)</title><rect x="33.9880%" y="933" width="0.2742%" height="15" fill="rgb(241,33,4)" fg:x="3842" fg:w="31"/><text x="34.2380%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm::frame::CallFrame&gt;&gt; (30 samples, 0.27%)</title><rect x="33.9968%" y="917" width="0.2654%" height="15" fill="rgb(222,26,43)" fg:x="3843" fg:w="30"/><text x="34.2468%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::CallFrame&gt; (29 samples, 0.26%)</title><rect x="34.0057%" y="901" width="0.2565%" height="15" fill="rgb(243,29,36)" fg:x="3844" fg:w="29"/><text x="34.2557%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::FrameData&gt; (29 samples, 0.26%)</title><rect x="34.0057%" y="885" width="0.2565%" height="15" fill="rgb(241,9,27)" fg:x="3844" fg:w="29"/><text x="34.2557%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::Interpreter&gt; (29 samples, 0.26%)</title><rect x="34.0057%" y="869" width="0.2565%" height="15" fill="rgb(205,117,26)" fg:x="3844" fg:w="29"/><text x="34.2557%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::stack::Stack&gt; (5 samples, 0.04%)</title><rect x="34.2180%" y="853" width="0.0442%" height="15" fill="rgb(209,80,39)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ruint::Uint&lt;256_usize,4_usize&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="34.2180%" y="837" width="0.0442%" height="15" fill="rgb(239,155,6)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;ruint::Uint&lt;256_usize,4_usize&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="34.2180%" y="821" width="0.0442%" height="15" fill="rgb(212,104,12)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="34.2180%" y="805" width="0.0442%" height="15" fill="rgb(234,204,3)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="34.2180%" y="789" width="0.0442%" height="15" fill="rgb(251,218,7)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="34.2180%" y="773" width="0.0442%" height="15" fill="rgb(221,81,32)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="783.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="34.2180%" y="757" width="0.0442%" height="15" fill="rgb(214,152,26)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="767.50"></text></g><g><title>_int_free (5 samples, 0.04%)</title><rect x="34.2180%" y="741" width="0.0442%" height="15" fill="rgb(223,22,3)" fg:x="3868" fg:w="5"/><text x="34.4680%" y="751.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="34.7930%" y="933" width="0.0442%" height="15" fill="rgb(207,174,7)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="943.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="34.7930%" y="917" width="0.0442%" height="15" fill="rgb(224,19,52)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="927.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="34.7930%" y="901" width="0.0442%" height="15" fill="rgb(228,24,14)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="911.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="34.7930%" y="885" width="0.0442%" height="15" fill="rgb(230,153,43)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="895.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="34.7930%" y="869" width="0.0442%" height="15" fill="rgb(231,106,12)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="879.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="34.7930%" y="853" width="0.0442%" height="15" fill="rgb(215,92,2)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="863.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="34.7930%" y="837" width="0.0442%" height="15" fill="rgb(249,143,25)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="847.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="34.7930%" y="821" width="0.0442%" height="15" fill="rgb(252,7,35)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="831.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="34.7930%" y="805" width="0.0442%" height="15" fill="rgb(216,69,40)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="815.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="34.7930%" y="789" width="0.0442%" height="15" fill="rgb(240,36,33)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="799.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="34.7930%" y="773" width="0.0442%" height="15" fill="rgb(231,128,14)" fg:x="3933" fg:w="5"/><text x="35.0430%" y="783.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::wrapping_add (2 samples, 0.02%)</title><rect x="34.8461%" y="917" width="0.0177%" height="15" fill="rgb(245,143,14)" fg:x="3939" fg:w="2"/><text x="35.0961%" y="927.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (2 samples, 0.02%)</title><rect x="34.8726%" y="901" width="0.0177%" height="15" fill="rgb(222,130,28)" fg:x="3942" fg:w="2"/><text x="35.1226%" y="911.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::wrapping_sub (7 samples, 0.06%)</title><rect x="34.8638%" y="917" width="0.0619%" height="15" fill="rgb(212,10,48)" fg:x="3941" fg:w="7"/><text x="35.1138%" y="927.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_sub (3 samples, 0.03%)</title><rect x="34.8992%" y="901" width="0.0265%" height="15" fill="rgb(254,118,45)" fg:x="3945" fg:w="3"/><text x="35.1492%" y="911.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (3 samples, 0.03%)</title><rect x="34.8992%" y="885" width="0.0265%" height="15" fill="rgb(228,6,45)" fg:x="3945" fg:w="3"/><text x="35.1492%" y="895.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (2 samples, 0.02%)</title><rect x="34.9257%" y="901" width="0.0177%" height="15" fill="rgb(241,18,35)" fg:x="3948" fg:w="2"/><text x="35.1757%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.02%)</title><rect x="34.9434%" y="853" width="0.0177%" height="15" fill="rgb(227,214,53)" fg:x="3950" fg:w="2"/><text x="35.1934%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="34.9434%" y="837" width="0.0177%" height="15" fill="rgb(224,107,51)" fg:x="3950" fg:w="2"/><text x="35.1934%" y="847.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (3 samples, 0.03%)</title><rect x="34.9434%" y="885" width="0.0265%" height="15" fill="rgb(248,60,28)" fg:x="3950" fg:w="3"/><text x="35.1934%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.03%)</title><rect x="34.9434%" y="869" width="0.0265%" height="15" fill="rgb(249,101,23)" fg:x="3950" fg:w="3"/><text x="35.1934%" y="879.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_top_unsafe (8 samples, 0.07%)</title><rect x="34.9434%" y="901" width="0.0708%" height="15" fill="rgb(228,51,19)" fg:x="3950" fg:w="8"/><text x="35.1934%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::top_unsafe (5 samples, 0.04%)</title><rect x="34.9699%" y="885" width="0.0442%" height="15" fill="rgb(213,20,6)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="895.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="34.9699%" y="869" width="0.0442%" height="15" fill="rgb(212,124,10)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="879.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="34.9699%" y="853" width="0.0442%" height="15" fill="rgb(248,3,40)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="863.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="34.9699%" y="837" width="0.0442%" height="15" fill="rgb(223,178,23)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="847.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="34.9699%" y="821" width="0.0442%" height="15" fill="rgb(240,132,45)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="831.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="34.9699%" y="805" width="0.0442%" height="15" fill="rgb(245,164,36)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="815.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="34.9699%" y="789" width="0.0442%" height="15" fill="rgb(231,188,53)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="799.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="34.9699%" y="773" width="0.0442%" height="15" fill="rgb(237,198,39)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="783.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="34.9699%" y="757" width="0.0442%" height="15" fill="rgb(223,120,35)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="767.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="34.9699%" y="741" width="0.0442%" height="15" fill="rgb(253,107,49)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="751.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="34.9699%" y="725" width="0.0442%" height="15" fill="rgb(216,44,31)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="735.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="34.9699%" y="709" width="0.0442%" height="15" fill="rgb(253,87,21)" fg:x="3953" fg:w="5"/><text x="35.2199%" y="719.50"></text></g><g><title>revm_interpreter::instructions::bitwise::bitand (11 samples, 0.10%)</title><rect x="34.9257%" y="917" width="0.0973%" height="15" fill="rgb(226,18,2)" fg:x="3948" fg:w="11"/><text x="35.1757%" y="927.50"></text></g><g><title>revm_interpreter::instructions::bitwise::eq (4 samples, 0.04%)</title><rect x="35.0230%" y="917" width="0.0354%" height="15" fill="rgb(216,8,46)" fg:x="3959" fg:w="4"/><text x="35.2730%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.02%)</title><rect x="35.0407%" y="901" width="0.0177%" height="15" fill="rgb(226,140,39)" fg:x="3961" fg:w="2"/><text x="35.2907%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (2 samples, 0.02%)</title><rect x="35.0407%" y="885" width="0.0177%" height="15" fill="rgb(221,194,54)" fg:x="3961" fg:w="2"/><text x="35.2907%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.02%)</title><rect x="35.0407%" y="869" width="0.0177%" height="15" fill="rgb(213,92,11)" fg:x="3961" fg:w="2"/><text x="35.2907%" y="879.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="35.0407%" y="853" width="0.0177%" height="15" fill="rgb(229,162,46)" fg:x="3961" fg:w="2"/><text x="35.2907%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="35.2088%" y="837" width="0.0265%" height="15" fill="rgb(214,111,36)" fg:x="3980" fg:w="3"/><text x="35.4588%" y="847.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (3 samples, 0.03%)</title><rect x="35.2088%" y="821" width="0.0265%" height="15" fill="rgb(207,6,21)" fg:x="3980" fg:w="3"/><text x="35.4588%" y="831.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (3 samples, 0.03%)</title><rect x="35.2088%" y="805" width="0.0265%" height="15" fill="rgb(213,127,38)" fg:x="3980" fg:w="3"/><text x="35.4588%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.02%)</title><rect x="35.2176%" y="789" width="0.0177%" height="15" fill="rgb(238,118,32)" fg:x="3981" fg:w="2"/><text x="35.4676%" y="799.50"></text></g><g><title>revm_interpreter::instructions::bitwise::shl (23 samples, 0.20%)</title><rect x="35.0672%" y="917" width="0.2035%" height="15" fill="rgb(240,139,39)" fg:x="3964" fg:w="23"/><text x="35.3172%" y="927.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::ShlAssign&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shl_assign (22 samples, 0.19%)</title><rect x="35.0761%" y="901" width="0.1946%" height="15" fill="rgb(235,10,37)" fg:x="3965" fg:w="22"/><text x="35.3261%" y="911.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::Shl&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shl (19 samples, 0.17%)</title><rect x="35.1026%" y="885" width="0.1681%" height="15" fill="rgb(249,171,38)" fg:x="3968" fg:w="19"/><text x="35.3526%" y="895.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_shl (19 samples, 0.17%)</title><rect x="35.1026%" y="869" width="0.1681%" height="15" fill="rgb(242,144,32)" fg:x="3968" fg:w="19"/><text x="35.3526%" y="879.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_shl (18 samples, 0.16%)</title><rect x="35.1115%" y="853" width="0.1592%" height="15" fill="rgb(217,117,21)" fg:x="3969" fg:w="18"/><text x="35.3615%" y="863.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.03%)</title><rect x="35.2442%" y="837" width="0.0265%" height="15" fill="rgb(249,87,1)" fg:x="3984" fg:w="3"/><text x="35.4942%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.03%)</title><rect x="35.2442%" y="821" width="0.0265%" height="15" fill="rgb(248,196,48)" fg:x="3984" fg:w="3"/><text x="35.4942%" y="831.50"></text></g><g><title>revm_interpreter::instructions::control::jump_inner (9 samples, 0.08%)</title><rect x="35.2795%" y="901" width="0.0796%" height="15" fill="rgb(251,206,33)" fg:x="3988" fg:w="9"/><text x="35.5295%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::contract::Contract::is_valid_jump (4 samples, 0.04%)</title><rect x="35.3238%" y="885" width="0.0354%" height="15" fill="rgb(232,141,28)" fg:x="3993" fg:w="4"/><text x="35.5738%" y="895.50"></text></g><g><title>revm_primitives::bytecode::JumpMap::is_valid (4 samples, 0.04%)</title><rect x="35.3238%" y="869" width="0.0354%" height="15" fill="rgb(209,167,14)" fg:x="3993" fg:w="4"/><text x="35.5738%" y="879.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::index (3 samples, 0.03%)</title><rect x="35.3326%" y="853" width="0.0265%" height="15" fill="rgb(225,11,50)" fg:x="3994" fg:w="3"/><text x="35.5826%" y="863.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::as_bitslice (3 samples, 0.03%)</title><rect x="35.3326%" y="837" width="0.0265%" height="15" fill="rgb(209,50,20)" fg:x="3994" fg:w="3"/><text x="35.5826%" y="847.50"></text></g><g><title>revm_interpreter::instructions::control::jump (10 samples, 0.09%)</title><rect x="35.2795%" y="917" width="0.0885%" height="15" fill="rgb(212,17,46)" fg:x="3988" fg:w="10"/><text x="35.5295%" y="927.50"></text></g><g><title>revm_interpreter::instructions::control::jumpdest (4 samples, 0.04%)</title><rect x="35.3680%" y="917" width="0.0354%" height="15" fill="rgb(216,101,39)" fg:x="3998" fg:w="4"/><text x="35.6180%" y="927.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (4 samples, 0.04%)</title><rect x="35.3680%" y="901" width="0.0354%" height="15" fill="rgb(212,228,48)" fg:x="3998" fg:w="4"/><text x="35.6180%" y="911.50"></text></g><g><title>revm_interpreter::instructions::control::jump_inner (5 samples, 0.04%)</title><rect x="35.4211%" y="901" width="0.0442%" height="15" fill="rgb(250,6,50)" fg:x="4004" fg:w="5"/><text x="35.6711%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::contract::Contract::is_valid_jump (5 samples, 0.04%)</title><rect x="35.4211%" y="885" width="0.0442%" height="15" fill="rgb(250,160,48)" fg:x="4004" fg:w="5"/><text x="35.6711%" y="895.50"></text></g><g><title>revm_primitives::bytecode::JumpMap::is_valid (4 samples, 0.04%)</title><rect x="35.4299%" y="869" width="0.0354%" height="15" fill="rgb(244,216,33)" fg:x="4005" fg:w="4"/><text x="35.6799%" y="879.50"></text></g><g><title>revm_interpreter::instructions::control::jumpi (9 samples, 0.08%)</title><rect x="35.4034%" y="917" width="0.0796%" height="15" fill="rgb(207,157,5)" fg:x="4002" fg:w="9"/><text x="35.6534%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop2_unsafe (2 samples, 0.02%)</title><rect x="35.4653%" y="901" width="0.0177%" height="15" fill="rgb(228,199,8)" fg:x="4009" fg:w="2"/><text x="35.7153%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (2 samples, 0.02%)</title><rect x="35.4653%" y="885" width="0.0177%" height="15" fill="rgb(227,80,20)" fg:x="4009" fg:w="2"/><text x="35.7153%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.02%)</title><rect x="35.4653%" y="869" width="0.0177%" height="15" fill="rgb(222,9,33)" fg:x="4009" fg:w="2"/><text x="35.7153%" y="879.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="35.4830%" y="885" width="0.0177%" height="15" fill="rgb(239,44,28)" fg:x="4011" fg:w="2"/><text x="35.7330%" y="895.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (2 samples, 0.02%)</title><rect x="35.4830%" y="869" width="0.0177%" height="15" fill="rgb(249,187,43)" fg:x="4011" fg:w="2"/><text x="35.7330%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.06%)</title><rect x="35.5007%" y="885" width="0.0619%" height="15" fill="rgb(216,141,28)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.06%)</title><rect x="35.5007%" y="869" width="0.0619%" height="15" fill="rgb(230,154,53)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.06%)</title><rect x="35.5007%" y="853" width="0.0619%" height="15" fill="rgb(227,82,4)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.06%)</title><rect x="35.5007%" y="837" width="0.0619%" height="15" fill="rgb(220,107,16)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.06%)</title><rect x="35.5007%" y="821" width="0.0619%" height="15" fill="rgb(207,187,2)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.06%)</title><rect x="35.5007%" y="805" width="0.0619%" height="15" fill="rgb(210,162,52)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.06%)</title><rect x="35.5007%" y="789" width="0.0619%" height="15" fill="rgb(217,216,49)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.06%)</title><rect x="35.5007%" y="773" width="0.0619%" height="15" fill="rgb(218,146,49)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.06%)</title><rect x="35.5007%" y="757" width="0.0619%" height="15" fill="rgb(216,55,40)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="767.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.06%)</title><rect x="35.5007%" y="741" width="0.0619%" height="15" fill="rgb(208,196,21)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="751.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.06%)</title><rect x="35.5007%" y="725" width="0.0619%" height="15" fill="rgb(242,117,42)" fg:x="4013" fg:w="7"/><text x="35.7507%" y="735.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="35.5361%" y="709" width="0.0265%" height="15" fill="rgb(210,11,23)" fg:x="4017" fg:w="3"/><text x="35.7861%" y="719.50"></text></g><g><title>revm_interpreter::instructions::control::ret (10 samples, 0.09%)</title><rect x="35.4830%" y="917" width="0.0885%" height="15" fill="rgb(217,110,2)" fg:x="4011" fg:w="10"/><text x="35.7330%" y="927.50"></text></g><g><title>revm_interpreter::instructions::control::return_inner (10 samples, 0.09%)</title><rect x="35.4830%" y="901" width="0.0885%" height="15" fill="rgb(229,77,54)" fg:x="4011" fg:w="10"/><text x="35.7330%" y="911.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="35.5803%" y="805" width="0.0177%" height="15" fill="rgb(218,53,16)" fg:x="4022" fg:w="2"/><text x="35.8303%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="35.5803%" y="853" width="0.0265%" height="15" fill="rgb(215,38,13)" fg:x="4022" fg:w="3"/><text x="35.8303%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="35.5803%" y="837" width="0.0265%" height="15" fill="rgb(235,42,18)" fg:x="4022" fg:w="3"/><text x="35.8303%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="35.5803%" y="821" width="0.0265%" height="15" fill="rgb(219,66,54)" fg:x="4022" fg:w="3"/><text x="35.8303%" y="831.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::log (4 samples, 0.04%)</title><rect x="35.5803%" y="901" width="0.0354%" height="15" fill="rgb(222,205,4)" fg:x="4022" fg:w="4"/><text x="35.8303%" y="911.50"></text></g><g><title>revm::journaled_state::JournaledState::log (4 samples, 0.04%)</title><rect x="35.5803%" y="885" width="0.0354%" height="15" fill="rgb(227,213,46)" fg:x="4022" fg:w="4"/><text x="35.8303%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.04%)</title><rect x="35.5803%" y="869" width="0.0354%" height="15" fill="rgb(250,145,42)" fg:x="4022" fg:w="4"/><text x="35.8303%" y="879.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="35.6157%" y="709" width="0.0265%" height="15" fill="rgb(219,15,2)" fg:x="4026" fg:w="3"/><text x="35.8657%" y="719.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="35.6246%" y="693" width="0.0177%" height="15" fill="rgb(231,181,52)" fg:x="4027" fg:w="2"/><text x="35.8746%" y="703.50"></text></g><g><title>alloy_primitives::bytes_::Bytes::copy_from_slice (4 samples, 0.04%)</title><rect x="35.6157%" y="901" width="0.0354%" height="15" fill="rgb(235,1,42)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="911.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (4 samples, 0.04%)</title><rect x="35.6157%" y="885" width="0.0354%" height="15" fill="rgb(249,88,27)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.04%)</title><rect x="35.6157%" y="869" width="0.0354%" height="15" fill="rgb(235,145,16)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.04%)</title><rect x="35.6157%" y="853" width="0.0354%" height="15" fill="rgb(237,114,19)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.04%)</title><rect x="35.6157%" y="837" width="0.0354%" height="15" fill="rgb(238,51,50)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.04%)</title><rect x="35.6157%" y="821" width="0.0354%" height="15" fill="rgb(205,194,25)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="35.6157%" y="805" width="0.0354%" height="15" fill="rgb(215,203,17)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="35.6157%" y="789" width="0.0354%" height="15" fill="rgb(233,112,49)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="35.6157%" y="773" width="0.0354%" height="15" fill="rgb(241,130,26)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="35.6157%" y="757" width="0.0354%" height="15" fill="rgb(252,223,19)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="35.6157%" y="741" width="0.0354%" height="15" fill="rgb(211,95,25)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="751.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="35.6157%" y="725" width="0.0354%" height="15" fill="rgb(251,182,27)" fg:x="4026" fg:w="4"/><text x="35.8657%" y="735.50"></text></g><g><title>alloy_primitives::log::LogData::new (3 samples, 0.03%)</title><rect x="35.6511%" y="901" width="0.0265%" height="15" fill="rgb(238,24,4)" fg:x="4030" fg:w="3"/><text x="35.9011%" y="911.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then_some (3 samples, 0.03%)</title><rect x="35.6511%" y="885" width="0.0265%" height="15" fill="rgb(224,220,25)" fg:x="4030" fg:w="3"/><text x="35.9011%" y="895.50"></text></g><g><title>revm_interpreter::instructions::host::log (15 samples, 0.13%)</title><rect x="35.5715%" y="917" width="0.1327%" height="15" fill="rgb(239,133,26)" fg:x="4021" fg:w="15"/><text x="35.8215%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (2 samples, 0.02%)</title><rect x="35.6865%" y="901" width="0.0177%" height="15" fill="rgb(211,94,48)" fg:x="4034" fg:w="2"/><text x="35.9365%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.02%)</title><rect x="35.6865%" y="885" width="0.0177%" height="15" fill="rgb(239,87,6)" fg:x="4034" fg:w="2"/><text x="35.9365%" y="895.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="35.6865%" y="869" width="0.0177%" height="15" fill="rgb(227,62,0)" fg:x="4034" fg:w="2"/><text x="35.9365%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.04%)</title><rect x="35.7307%" y="805" width="0.0354%" height="15" fill="rgb(211,226,4)" fg:x="4039" fg:w="4"/><text x="35.9807%" y="815.50"></text></g><g><title>core::ptr::write (4 samples, 0.04%)</title><rect x="35.7307%" y="789" width="0.0354%" height="15" fill="rgb(253,38,52)" fg:x="4039" fg:w="4"/><text x="35.9807%" y="799.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (3 samples, 0.03%)</title><rect x="35.7838%" y="757" width="0.0265%" height="15" fill="rgb(229,126,40)" fg:x="4045" fg:w="3"/><text x="36.0338%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (3 samples, 0.03%)</title><rect x="35.7838%" y="741" width="0.0265%" height="15" fill="rgb(229,165,44)" fg:x="4045" fg:w="3"/><text x="36.0338%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (3 samples, 0.03%)</title><rect x="35.7838%" y="725" width="0.0265%" height="15" fill="rgb(247,95,47)" fg:x="4045" fg:w="3"/><text x="36.0338%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (3 samples, 0.03%)</title><rect x="35.7838%" y="709" width="0.0265%" height="15" fill="rgb(216,140,30)" fg:x="4045" fg:w="3"/><text x="36.0338%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.02%)</title><rect x="35.7926%" y="693" width="0.0177%" height="15" fill="rgb(246,214,8)" fg:x="4046" fg:w="2"/><text x="36.0426%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="35.7926%" y="677" width="0.0177%" height="15" fill="rgb(227,224,15)" fg:x="4046" fg:w="2"/><text x="36.0426%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8192%" y="709" width="0.0177%" height="15" fill="rgb(233,175,4)" fg:x="4049" fg:w="2"/><text x="36.0692%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8192%" y="693" width="0.0177%" height="15" fill="rgb(221,66,45)" fg:x="4049" fg:w="2"/><text x="36.0692%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8192%" y="677" width="0.0177%" height="15" fill="rgb(221,178,18)" fg:x="4049" fg:w="2"/><text x="36.0692%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="35.8192%" y="661" width="0.0177%" height="15" fill="rgb(213,81,29)" fg:x="4049" fg:w="2"/><text x="36.0692%" y="671.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="35.8369%" y="693" width="0.0265%" height="15" fill="rgb(220,89,49)" fg:x="4051" fg:w="3"/><text x="36.0869%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="35.8369%" y="677" width="0.0265%" height="15" fill="rgb(227,60,33)" fg:x="4051" fg:w="3"/><text x="36.0869%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="35.8369%" y="661" width="0.0265%" height="15" fill="rgb(205,113,12)" fg:x="4051" fg:w="3"/><text x="36.0869%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="35.8369%" y="645" width="0.0265%" height="15" fill="rgb(211,32,1)" fg:x="4051" fg:w="3"/><text x="36.0869%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="35.8457%" y="629" width="0.0177%" height="15" fill="rgb(246,2,12)" fg:x="4052" fg:w="2"/><text x="36.0957%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8457%" y="613" width="0.0177%" height="15" fill="rgb(243,37,27)" fg:x="4052" fg:w="2"/><text x="36.0957%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8457%" y="597" width="0.0177%" height="15" fill="rgb(248,211,31)" fg:x="4052" fg:w="2"/><text x="36.0957%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8457%" y="581" width="0.0177%" height="15" fill="rgb(242,146,47)" fg:x="4052" fg:w="2"/><text x="36.0957%" y="591.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (13 samples, 0.12%)</title><rect x="35.7661%" y="805" width="0.1150%" height="15" fill="rgb(206,70,20)" fg:x="4043" fg:w="13"/><text x="36.0161%" y="815.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (12 samples, 0.11%)</title><rect x="35.7749%" y="789" width="0.1062%" height="15" fill="rgb(215,10,51)" fg:x="4044" fg:w="12"/><text x="36.0249%" y="799.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (12 samples, 0.11%)</title><rect x="35.7749%" y="773" width="0.1062%" height="15" fill="rgb(243,178,53)" fg:x="4044" fg:w="12"/><text x="36.0249%" y="783.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (8 samples, 0.07%)</title><rect x="35.8103%" y="757" width="0.0708%" height="15" fill="rgb(233,221,20)" fg:x="4048" fg:w="8"/><text x="36.0603%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.06%)</title><rect x="35.8192%" y="741" width="0.0619%" height="15" fill="rgb(218,95,35)" fg:x="4049" fg:w="7"/><text x="36.0692%" y="751.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (7 samples, 0.06%)</title><rect x="35.8192%" y="725" width="0.0619%" height="15" fill="rgb(229,13,5)" fg:x="4049" fg:w="7"/><text x="36.0692%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (5 samples, 0.04%)</title><rect x="35.8369%" y="709" width="0.0442%" height="15" fill="rgb(252,164,30)" fg:x="4051" fg:w="5"/><text x="36.0869%" y="719.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="35.8634%" y="693" width="0.0177%" height="15" fill="rgb(232,68,36)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="35.8634%" y="677" width="0.0177%" height="15" fill="rgb(219,59,54)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="35.8634%" y="661" width="0.0177%" height="15" fill="rgb(250,92,33)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="35.8634%" y="645" width="0.0177%" height="15" fill="rgb(229,162,54)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="35.8634%" y="629" width="0.0177%" height="15" fill="rgb(244,114,52)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8634%" y="613" width="0.0177%" height="15" fill="rgb(212,211,43)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8634%" y="597" width="0.0177%" height="15" fill="rgb(226,147,8)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="35.8634%" y="581" width="0.0177%" height="15" fill="rgb(226,23,13)" fg:x="4054" fg:w="2"/><text x="36.1134%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="35.8900%" y="693" width="0.0354%" height="15" fill="rgb(240,63,4)" fg:x="4057" fg:w="4"/><text x="36.1400%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="35.8900%" y="677" width="0.0354%" height="15" fill="rgb(221,1,32)" fg:x="4057" fg:w="4"/><text x="36.1400%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.03%)</title><rect x="35.8988%" y="661" width="0.0265%" height="15" fill="rgb(242,117,10)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="671.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="35.8988%" y="645" width="0.0265%" height="15" fill="rgb(249,172,44)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="655.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="35.8988%" y="629" width="0.0265%" height="15" fill="rgb(244,46,45)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="35.8988%" y="613" width="0.0265%" height="15" fill="rgb(206,43,17)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (3 samples, 0.03%)</title><rect x="35.8988%" y="597" width="0.0265%" height="15" fill="rgb(239,218,39)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="35.8988%" y="581" width="0.0265%" height="15" fill="rgb(208,169,54)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="35.8988%" y="565" width="0.0265%" height="15" fill="rgb(247,25,42)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="35.8988%" y="549" width="0.0265%" height="15" fill="rgb(226,23,31)" fg:x="4058" fg:w="3"/><text x="36.1488%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="35.9076%" y="533" width="0.0177%" height="15" fill="rgb(247,16,28)" fg:x="4059" fg:w="2"/><text x="36.1576%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (39 samples, 0.35%)</title><rect x="35.9342%" y="645" width="0.3450%" height="15" fill="rgb(231,147,38)" fg:x="4062" fg:w="39"/><text x="36.1842%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (39 samples, 0.35%)</title><rect x="35.9342%" y="629" width="0.3450%" height="15" fill="rgb(253,81,48)" fg:x="4062" fg:w="39"/><text x="36.1842%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (39 samples, 0.35%)</title><rect x="35.9342%" y="613" width="0.3450%" height="15" fill="rgb(249,222,43)" fg:x="4062" fg:w="39"/><text x="36.1842%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39 samples, 0.35%)</title><rect x="35.9342%" y="597" width="0.3450%" height="15" fill="rgb(221,3,27)" fg:x="4062" fg:w="39"/><text x="36.1842%" y="607.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (39 samples, 0.35%)</title><rect x="35.9342%" y="581" width="0.3450%" height="15" fill="rgb(228,180,5)" fg:x="4062" fg:w="39"/><text x="36.1842%" y="591.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (39 samples, 0.35%)</title><rect x="35.9342%" y="565" width="0.3450%" height="15" fill="rgb(227,131,42)" fg:x="4062" fg:w="39"/><text x="36.1842%" y="575.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (39 samples, 0.35%)</title><rect x="35.9342%" y="549" width="0.3450%" height="15" fill="rgb(212,3,39)" fg:x="4062" fg:w="39"/><text x="36.1842%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (54 samples, 0.48%)</title><rect x="35.8900%" y="773" width="0.4777%" height="15" fill="rgb(226,45,5)" fg:x="4057" fg:w="54"/><text x="36.1400%" y="783.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::storage_ref::_{{closure}} (54 samples, 0.48%)</title><rect x="35.8900%" y="757" width="0.4777%" height="15" fill="rgb(215,167,45)" fg:x="4057" fg:w="54"/><text x="36.1400%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (54 samples, 0.48%)</title><rect x="35.8900%" y="741" width="0.4777%" height="15" fill="rgb(250,218,53)" fg:x="4057" fg:w="54"/><text x="36.1400%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (54 samples, 0.48%)</title><rect x="35.8900%" y="725" width="0.4777%" height="15" fill="rgb(207,140,0)" fg:x="4057" fg:w="54"/><text x="36.1400%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (54 samples, 0.48%)</title><rect x="35.8900%" y="709" width="0.4777%" height="15" fill="rgb(238,133,51)" fg:x="4057" fg:w="54"/><text x="36.1400%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (50 samples, 0.44%)</title><rect x="35.9253%" y="693" width="0.4423%" height="15" fill="rgb(218,203,53)" fg:x="4061" fg:w="50"/><text x="36.1753%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (50 samples, 0.44%)</title><rect x="35.9253%" y="677" width="0.4423%" height="15" fill="rgb(226,184,25)" fg:x="4061" fg:w="50"/><text x="36.1753%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (50 samples, 0.44%)</title><rect x="35.9253%" y="661" width="0.4423%" height="15" fill="rgb(231,121,21)" fg:x="4061" fg:w="50"/><text x="36.1753%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (10 samples, 0.09%)</title><rect x="36.2792%" y="645" width="0.0885%" height="15" fill="rgb(251,14,34)" fg:x="4101" fg:w="10"/><text x="36.5292%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (10 samples, 0.09%)</title><rect x="36.2792%" y="629" width="0.0885%" height="15" fill="rgb(249,193,11)" fg:x="4101" fg:w="10"/><text x="36.5292%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.09%)</title><rect x="36.2792%" y="613" width="0.0885%" height="15" fill="rgb(220,172,37)" fg:x="4101" fg:w="10"/><text x="36.5292%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="36.4119%" y="581" width="0.0265%" height="15" fill="rgb(231,229,43)" fg:x="4116" fg:w="3"/><text x="36.6619%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="36.4119%" y="565" width="0.0265%" height="15" fill="rgb(250,161,5)" fg:x="4116" fg:w="3"/><text x="36.6619%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="36.4119%" y="549" width="0.0265%" height="15" fill="rgb(218,225,18)" fg:x="4116" fg:w="3"/><text x="36.6619%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="36.4207%" y="533" width="0.0177%" height="15" fill="rgb(245,45,42)" fg:x="4117" fg:w="2"/><text x="36.6707%" y="543.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::storage (83 samples, 0.73%)</title><rect x="35.7130%" y="853" width="0.7343%" height="15" fill="rgb(211,115,1)" fg:x="4037" fg:w="83"/><text x="35.9630%" y="863.50"></text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::storage (83 samples, 0.73%)</title><rect x="35.7130%" y="837" width="0.7343%" height="15" fill="rgb(248,133,52)" fg:x="4037" fg:w="83"/><text x="35.9630%" y="847.50"></text></g><g><title>block_stm_revm::vm::VmDb::read (82 samples, 0.73%)</title><rect x="35.7219%" y="821" width="0.7254%" height="15" fill="rgb(238,100,21)" fg:x="4038" fg:w="82"/><text x="35.9719%" y="831.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for alloc::sync::Arc&lt;T&gt;&gt;::storage_ref (64 samples, 0.57%)</title><rect x="35.8811%" y="805" width="0.5662%" height="15" fill="rgb(247,144,11)" fg:x="4056" fg:w="64"/><text x="36.1311%" y="815.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::storage_ref (64 samples, 0.57%)</title><rect x="35.8811%" y="789" width="0.5662%" height="15" fill="rgb(206,164,16)" fg:x="4056" fg:w="64"/><text x="36.1311%" y="799.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9 samples, 0.08%)</title><rect x="36.3677%" y="773" width="0.0796%" height="15" fill="rgb(222,34,3)" fg:x="4111" fg:w="9"/><text x="36.6177%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (9 samples, 0.08%)</title><rect x="36.3677%" y="757" width="0.0796%" height="15" fill="rgb(248,82,4)" fg:x="4111" fg:w="9"/><text x="36.6177%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 0.08%)</title><rect x="36.3677%" y="741" width="0.0796%" height="15" fill="rgb(228,81,46)" fg:x="4111" fg:w="9"/><text x="36.6177%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="36.4119%" y="725" width="0.0354%" height="15" fill="rgb(227,67,47)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="36.4119%" y="709" width="0.0354%" height="15" fill="rgb(215,93,53)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="36.4119%" y="693" width="0.0354%" height="15" fill="rgb(248,194,39)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="36.4119%" y="677" width="0.0354%" height="15" fill="rgb(215,5,19)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="36.4119%" y="661" width="0.0354%" height="15" fill="rgb(226,215,51)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="671.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="36.4119%" y="645" width="0.0354%" height="15" fill="rgb(225,56,26)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="36.4119%" y="629" width="0.0354%" height="15" fill="rgb(222,75,29)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="639.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.04%)</title><rect x="36.4119%" y="613" width="0.0354%" height="15" fill="rgb(236,139,6)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.04%)</title><rect x="36.4119%" y="597" width="0.0354%" height="15" fill="rgb(223,137,36)" fg:x="4116" fg:w="4"/><text x="36.6619%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (5 samples, 0.04%)</title><rect x="36.4473%" y="821" width="0.0442%" height="15" fill="rgb(226,99,2)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.04%)</title><rect x="36.4473%" y="805" width="0.0442%" height="15" fill="rgb(206,133,23)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.04%)</title><rect x="36.4473%" y="789" width="0.0442%" height="15" fill="rgb(243,173,15)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5 samples, 0.04%)</title><rect x="36.4473%" y="773" width="0.0442%" height="15" fill="rgb(228,69,28)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5 samples, 0.04%)</title><rect x="36.4473%" y="757" width="0.0442%" height="15" fill="rgb(212,51,22)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5 samples, 0.04%)</title><rect x="36.4473%" y="741" width="0.0442%" height="15" fill="rgb(227,113,0)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 0.04%)</title><rect x="36.4473%" y="725" width="0.0442%" height="15" fill="rgb(252,84,27)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.04%)</title><rect x="36.4473%" y="709" width="0.0442%" height="15" fill="rgb(223,145,39)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="719.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.04%)</title><rect x="36.4473%" y="693" width="0.0442%" height="15" fill="rgb(239,219,30)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="36.4473%" y="677" width="0.0442%" height="15" fill="rgb(224,196,39)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="36.4473%" y="661" width="0.0442%" height="15" fill="rgb(205,35,43)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="671.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="36.4473%" y="645" width="0.0442%" height="15" fill="rgb(228,201,21)" fg:x="4120" fg:w="5"/><text x="36.6973%" y="655.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="36.4561%" y="629" width="0.0354%" height="15" fill="rgb(237,118,16)" fg:x="4121" fg:w="4"/><text x="36.7061%" y="639.50"></text></g><g><title>tcache_get (4 samples, 0.04%)</title><rect x="36.4561%" y="613" width="0.0354%" height="15" fill="rgb(241,17,19)" fg:x="4121" fg:w="4"/><text x="36.7061%" y="623.50"></text></g><g><title>tcache_get_n (4 samples, 0.04%)</title><rect x="36.4561%" y="597" width="0.0354%" height="15" fill="rgb(214,10,25)" fg:x="4121" fg:w="4"/><text x="36.7061%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="36.5092%" y="725" width="0.0177%" height="15" fill="rgb(238,37,29)" fg:x="4127" fg:w="2"/><text x="36.7592%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="36.4915%" y="789" width="0.0531%" height="15" fill="rgb(253,83,25)" fg:x="4125" fg:w="6"/><text x="36.7415%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="36.4915%" y="773" width="0.0531%" height="15" fill="rgb(234,192,12)" fg:x="4125" fg:w="6"/><text x="36.7415%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="36.4915%" y="757" width="0.0531%" height="15" fill="rgb(241,216,45)" fg:x="4125" fg:w="6"/><text x="36.7415%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.04%)</title><rect x="36.5092%" y="741" width="0.0354%" height="15" fill="rgb(242,22,33)" fg:x="4127" fg:w="4"/><text x="36.7592%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="36.5269%" y="725" width="0.0177%" height="15" fill="rgb(231,105,49)" fg:x="4129" fg:w="2"/><text x="36.7769%" y="735.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="36.5534%" y="725" width="0.0177%" height="15" fill="rgb(218,204,15)" fg:x="4132" fg:w="2"/><text x="36.8034%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="36.5534%" y="709" width="0.0177%" height="15" fill="rgb(235,138,41)" fg:x="4132" fg:w="2"/><text x="36.8034%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="36.5534%" y="693" width="0.0177%" height="15" fill="rgb(246,0,9)" fg:x="4132" fg:w="2"/><text x="36.8034%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="36.5534%" y="677" width="0.0177%" height="15" fill="rgb(210,74,4)" fg:x="4132" fg:w="2"/><text x="36.8034%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="36.5534%" y="661" width="0.0177%" height="15" fill="rgb(250,60,41)" fg:x="4132" fg:w="2"/><text x="36.8034%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.12%)</title><rect x="36.4915%" y="821" width="0.1150%" height="15" fill="rgb(220,115,12)" fg:x="4125" fg:w="13"/><text x="36.7415%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.12%)</title><rect x="36.4915%" y="805" width="0.1150%" height="15" fill="rgb(237,100,13)" fg:x="4125" fg:w="13"/><text x="36.7415%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.05%)</title><rect x="36.5534%" y="789" width="0.0531%" height="15" fill="rgb(213,55,26)" fg:x="4132" fg:w="6"/><text x="36.8034%" y="799.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="36.5534%" y="773" width="0.0531%" height="15" fill="rgb(216,17,4)" fg:x="4132" fg:w="6"/><text x="36.8034%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.05%)</title><rect x="36.5534%" y="757" width="0.0531%" height="15" fill="rgb(220,153,47)" fg:x="4132" fg:w="6"/><text x="36.8034%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.05%)</title><rect x="36.5534%" y="741" width="0.0531%" height="15" fill="rgb(215,131,9)" fg:x="4132" fg:w="6"/><text x="36.8034%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (4 samples, 0.04%)</title><rect x="36.5711%" y="725" width="0.0354%" height="15" fill="rgb(233,46,42)" fg:x="4134" fg:w="4"/><text x="36.8211%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="36.5711%" y="709" width="0.0354%" height="15" fill="rgb(226,86,7)" fg:x="4134" fg:w="4"/><text x="36.8211%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="36.5711%" y="693" width="0.0354%" height="15" fill="rgb(239,226,21)" fg:x="4134" fg:w="4"/><text x="36.8211%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="36.5711%" y="677" width="0.0354%" height="15" fill="rgb(244,137,22)" fg:x="4134" fg:w="4"/><text x="36.8211%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (19 samples, 0.17%)</title><rect x="36.4473%" y="853" width="0.1681%" height="15" fill="rgb(211,139,35)" fg:x="4120" fg:w="19"/><text x="36.6973%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (19 samples, 0.17%)</title><rect x="36.4473%" y="837" width="0.1681%" height="15" fill="rgb(214,62,50)" fg:x="4120" fg:w="19"/><text x="36.6973%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="36.6154%" y="773" width="0.0265%" height="15" fill="rgb(212,113,44)" fg:x="4139" fg:w="3"/><text x="36.8654%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="36.6154%" y="757" width="0.0265%" height="15" fill="rgb(226,150,43)" fg:x="4139" fg:w="3"/><text x="36.8654%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="36.6154%" y="741" width="0.0265%" height="15" fill="rgb(250,71,37)" fg:x="4139" fg:w="3"/><text x="36.8654%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="36.6242%" y="725" width="0.0177%" height="15" fill="rgb(219,76,19)" fg:x="4140" fg:w="2"/><text x="36.8742%" y="735.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5 samples, 0.04%)</title><rect x="36.6419%" y="693" width="0.0442%" height="15" fill="rgb(250,39,11)" fg:x="4142" fg:w="5"/><text x="36.8919%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.04%)</title><rect x="36.6419%" y="677" width="0.0442%" height="15" fill="rgb(230,64,31)" fg:x="4142" fg:w="5"/><text x="36.8919%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="36.6419%" y="661" width="0.0442%" height="15" fill="rgb(208,222,23)" fg:x="4142" fg:w="5"/><text x="36.8919%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="36.6419%" y="645" width="0.0442%" height="15" fill="rgb(227,125,18)" fg:x="4142" fg:w="5"/><text x="36.8919%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="36.6419%" y="629" width="0.0442%" height="15" fill="rgb(234,210,9)" fg:x="4142" fg:w="5"/><text x="36.8919%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.08%)</title><rect x="36.6154%" y="805" width="0.0796%" height="15" fill="rgb(217,127,24)" fg:x="4139" fg:w="9"/><text x="36.8654%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.08%)</title><rect x="36.6154%" y="789" width="0.0796%" height="15" fill="rgb(239,141,48)" fg:x="4139" fg:w="9"/><text x="36.8654%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.05%)</title><rect x="36.6419%" y="773" width="0.0531%" height="15" fill="rgb(227,109,8)" fg:x="4142" fg:w="6"/><text x="36.8919%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="36.6419%" y="757" width="0.0531%" height="15" fill="rgb(235,184,23)" fg:x="4142" fg:w="6"/><text x="36.8919%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="36.6419%" y="741" width="0.0531%" height="15" fill="rgb(227,226,48)" fg:x="4142" fg:w="6"/><text x="36.8919%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.05%)</title><rect x="36.6419%" y="725" width="0.0531%" height="15" fill="rgb(206,150,11)" fg:x="4142" fg:w="6"/><text x="36.8919%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.05%)</title><rect x="36.6419%" y="709" width="0.0531%" height="15" fill="rgb(254,2,33)" fg:x="4142" fg:w="6"/><text x="36.8919%" y="719.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sload (115 samples, 1.02%)</title><rect x="35.7042%" y="901" width="1.0173%" height="15" fill="rgb(243,160,20)" fg:x="4036" fg:w="115"/><text x="35.9542%" y="911.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::sload (114 samples, 1.01%)</title><rect x="35.7130%" y="885" width="1.0085%" height="15" fill="rgb(218,208,30)" fg:x="4037" fg:w="114"/><text x="35.9630%" y="895.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (114 samples, 1.01%)</title><rect x="35.7130%" y="869" width="1.0085%" height="15" fill="rgb(224,120,49)" fg:x="4037" fg:w="114"/><text x="35.9630%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (12 samples, 0.11%)</title><rect x="36.6154%" y="853" width="0.1062%" height="15" fill="rgb(246,12,2)" fg:x="4139" fg:w="12"/><text x="36.8654%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (12 samples, 0.11%)</title><rect x="36.6154%" y="837" width="0.1062%" height="15" fill="rgb(236,117,3)" fg:x="4139" fg:w="12"/><text x="36.8654%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (12 samples, 0.11%)</title><rect x="36.6154%" y="821" width="0.1062%" height="15" fill="rgb(216,128,52)" fg:x="4139" fg:w="12"/><text x="36.8654%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.03%)</title><rect x="36.6950%" y="805" width="0.0265%" height="15" fill="rgb(246,145,19)" fg:x="4148" fg:w="3"/><text x="36.9450%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="36.6950%" y="789" width="0.0265%" height="15" fill="rgb(222,11,46)" fg:x="4148" fg:w="3"/><text x="36.9450%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.03%)</title><rect x="36.6950%" y="773" width="0.0265%" height="15" fill="rgb(245,82,36)" fg:x="4148" fg:w="3"/><text x="36.9450%" y="783.50"></text></g><g><title>revm_interpreter::instructions::host::sload (116 samples, 1.03%)</title><rect x="35.7042%" y="917" width="1.0262%" height="15" fill="rgb(250,73,51)" fg:x="4036" fg:w="116"/><text x="35.9542%" y="927.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="36.7569%" y="885" width="0.0177%" height="15" fill="rgb(221,189,23)" fg:x="4155" fg:w="2"/><text x="37.0069%" y="895.50"></text></g><g><title>__GI_memcpy (2 samples, 0.02%)</title><rect x="36.8454%" y="709" width="0.0177%" height="15" fill="rgb(210,33,7)" fg:x="4165" fg:w="2"/><text x="37.0954%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="36.8454%" y="693" width="0.0177%" height="15" fill="rgb(210,107,22)" fg:x="4165" fg:w="2"/><text x="37.0954%" y="703.50"></text></g><g><title>charge_memcg (3 samples, 0.03%)</title><rect x="37.0488%" y="549" width="0.0265%" height="15" fill="rgb(222,116,37)" fg:x="4188" fg:w="3"/><text x="37.2988%" y="559.50"></text></g><g><title>__mem_cgroup_charge (9 samples, 0.08%)</title><rect x="37.0488%" y="565" width="0.0796%" height="15" fill="rgb(254,17,48)" fg:x="4188" fg:w="9"/><text x="37.2988%" y="575.50"></text></g><g><title>get_mem_cgroup_from_mm (6 samples, 0.05%)</title><rect x="37.0754%" y="549" width="0.0531%" height="15" fill="rgb(224,36,32)" fg:x="4191" fg:w="6"/><text x="37.3254%" y="559.50"></text></g><g><title>folio_add_lru_vma (5 samples, 0.04%)</title><rect x="37.1373%" y="565" width="0.0442%" height="15" fill="rgb(232,90,46)" fg:x="4198" fg:w="5"/><text x="37.3873%" y="575.50"></text></g><g><title>folio_add_lru (5 samples, 0.04%)</title><rect x="37.1373%" y="549" width="0.0442%" height="15" fill="rgb(241,66,40)" fg:x="4198" fg:w="5"/><text x="37.3873%" y="559.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="37.1638%" y="533" width="0.0177%" height="15" fill="rgb(249,184,29)" fg:x="4201" fg:w="2"/><text x="37.4138%" y="543.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="37.1638%" y="517" width="0.0177%" height="15" fill="rgb(231,181,1)" fg:x="4201" fg:w="2"/><text x="37.4138%" y="527.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="37.1638%" y="501" width="0.0177%" height="15" fill="rgb(224,94,2)" fg:x="4201" fg:w="2"/><text x="37.4138%" y="511.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.02%)</title><rect x="37.1904%" y="565" width="0.0177%" height="15" fill="rgb(229,170,15)" fg:x="4204" fg:w="2"/><text x="37.4404%" y="575.50"></text></g><g><title>inc_mm_counter (2 samples, 0.02%)</title><rect x="37.2081%" y="565" width="0.0177%" height="15" fill="rgb(240,127,35)" fg:x="4206" fg:w="2"/><text x="37.4581%" y="575.50"></text></g><g><title>percpu_counter_add_batch (2 samples, 0.02%)</title><rect x="37.2081%" y="549" width="0.0177%" height="15" fill="rgb(248,196,34)" fg:x="4206" fg:w="2"/><text x="37.4581%" y="559.50"></text></g><g><title>__handle_mm_fault (39 samples, 0.35%)</title><rect x="36.9958%" y="613" width="0.3450%" height="15" fill="rgb(236,137,7)" fg:x="4182" fg:w="39"/><text x="37.2458%" y="623.50"></text></g><g><title>handle_pte_fault (37 samples, 0.33%)</title><rect x="37.0134%" y="597" width="0.3273%" height="15" fill="rgb(235,127,16)" fg:x="4184" fg:w="37"/><text x="37.2634%" y="607.50"></text></g><g><title>do_anonymous_page (36 samples, 0.32%)</title><rect x="37.0223%" y="581" width="0.3185%" height="15" fill="rgb(250,192,54)" fg:x="4185" fg:w="36"/><text x="37.2723%" y="591.50"></text></g><g><title>vma_alloc_folio (12 samples, 0.11%)</title><rect x="37.2346%" y="565" width="0.1062%" height="15" fill="rgb(218,98,20)" fg:x="4209" fg:w="12"/><text x="37.4846%" y="575.50"></text></g><g><title>__folio_alloc (12 samples, 0.11%)</title><rect x="37.2346%" y="549" width="0.1062%" height="15" fill="rgb(230,176,47)" fg:x="4209" fg:w="12"/><text x="37.4846%" y="559.50"></text></g><g><title>__alloc_pages (12 samples, 0.11%)</title><rect x="37.2346%" y="533" width="0.1062%" height="15" fill="rgb(244,2,33)" fg:x="4209" fg:w="12"/><text x="37.4846%" y="543.50"></text></g><g><title>get_page_from_freelist (11 samples, 0.10%)</title><rect x="37.2435%" y="517" width="0.0973%" height="15" fill="rgb(231,100,17)" fg:x="4210" fg:w="11"/><text x="37.4935%" y="527.50"></text></g><g><title>rmqueue (8 samples, 0.07%)</title><rect x="37.2700%" y="501" width="0.0708%" height="15" fill="rgb(245,23,12)" fg:x="4213" fg:w="8"/><text x="37.5200%" y="511.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="37.3231%" y="485" width="0.0177%" height="15" fill="rgb(249,55,22)" fg:x="4219" fg:w="2"/><text x="37.5731%" y="495.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="37.3231%" y="469" width="0.0177%" height="15" fill="rgb(207,134,9)" fg:x="4219" fg:w="2"/><text x="37.5731%" y="479.50"></text></g><g><title>handle_mm_fault (41 samples, 0.36%)</title><rect x="36.9869%" y="629" width="0.3627%" height="15" fill="rgb(218,134,0)" fg:x="4181" fg:w="41"/><text x="37.2369%" y="639.50"></text></g><g><title>asm_exc_page_fault (46 samples, 0.41%)</title><rect x="36.9781%" y="677" width="0.4069%" height="15" fill="rgb(213,212,33)" fg:x="4180" fg:w="46"/><text x="37.2281%" y="687.50"></text></g><g><title>exc_page_fault (45 samples, 0.40%)</title><rect x="36.9869%" y="661" width="0.3981%" height="15" fill="rgb(252,106,18)" fg:x="4181" fg:w="45"/><text x="37.2369%" y="671.50"></text></g><g><title>do_user_addr_fault (45 samples, 0.40%)</title><rect x="36.9869%" y="645" width="0.3981%" height="15" fill="rgb(208,126,42)" fg:x="4181" fg:w="45"/><text x="37.2369%" y="655.50"></text></g><g><title>lock_vma_under_rcu (4 samples, 0.04%)</title><rect x="37.3496%" y="629" width="0.0354%" height="15" fill="rgb(246,175,29)" fg:x="4222" fg:w="4"/><text x="37.5996%" y="639.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="37.3673%" y="613" width="0.0177%" height="15" fill="rgb(215,13,50)" fg:x="4224" fg:w="2"/><text x="37.6173%" y="623.50"></text></g><g><title>mtree_range_walk (2 samples, 0.02%)</title><rect x="37.3673%" y="597" width="0.0177%" height="15" fill="rgb(216,172,15)" fg:x="4224" fg:w="2"/><text x="37.6173%" y="607.50"></text></g><g><title>_raw_spin_lock_irq (2 samples, 0.02%)</title><rect x="37.4469%" y="549" width="0.0177%" height="15" fill="rgb(212,103,13)" fg:x="4233" fg:w="2"/><text x="37.6969%" y="559.50"></text></g><g><title>osq_lock (456 samples, 4.03%)</title><rect x="37.4912%" y="533" width="4.0340%" height="15" fill="rgb(231,171,36)" fg:x="4238" fg:w="456"/><text x="37.7412%" y="543.50">osq_..</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="41.5074%" y="517" width="0.0177%" height="15" fill="rgb(250,123,20)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="41.5074%" y="501" width="0.0177%" height="15" fill="rgb(212,53,50)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="41.5074%" y="485" width="0.0177%" height="15" fill="rgb(243,54,12)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="495.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.02%)</title><rect x="41.5074%" y="469" width="0.0177%" height="15" fill="rgb(234,101,34)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="479.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.02%)</title><rect x="41.5074%" y="453" width="0.0177%" height="15" fill="rgb(254,67,22)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="463.50"></text></g><g><title>tick_sched_timer (2 samples, 0.02%)</title><rect x="41.5074%" y="437" width="0.0177%" height="15" fill="rgb(250,35,47)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="447.50"></text></g><g><title>tick_sched_handle (2 samples, 0.02%)</title><rect x="41.5074%" y="421" width="0.0177%" height="15" fill="rgb(226,126,38)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="431.50"></text></g><g><title>update_process_times (2 samples, 0.02%)</title><rect x="41.5074%" y="405" width="0.0177%" height="15" fill="rgb(216,138,53)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="415.50"></text></g><g><title>scheduler_tick (2 samples, 0.02%)</title><rect x="41.5074%" y="389" width="0.0177%" height="15" fill="rgb(246,199,43)" fg:x="4692" fg:w="2"/><text x="41.7574%" y="399.50"></text></g><g><title>osq_unlock (4 samples, 0.04%)</title><rect x="41.5251%" y="533" width="0.0354%" height="15" fill="rgb(232,125,11)" fg:x="4694" fg:w="4"/><text x="41.7751%" y="543.50"></text></g><g><title>rwsem_optimistic_spin (548 samples, 4.85%)</title><rect x="37.4646%" y="549" width="4.8478%" height="15" fill="rgb(218,219,45)" fg:x="4235" fg:w="548"/><text x="37.7146%" y="559.50">rwsem_..</text></g><g><title>rwsem_spin_on_owner (85 samples, 0.75%)</title><rect x="41.5605%" y="533" width="0.7519%" height="15" fill="rgb(216,102,54)" fg:x="4698" fg:w="85"/><text x="41.8105%" y="543.50"></text></g><g><title>dequeue_task (4 samples, 0.04%)</title><rect x="42.3567%" y="501" width="0.0354%" height="15" fill="rgb(250,228,7)" fg:x="4788" fg:w="4"/><text x="42.6067%" y="511.50"></text></g><g><title>dequeue_task_fair (4 samples, 0.04%)</title><rect x="42.3567%" y="485" width="0.0354%" height="15" fill="rgb(226,125,25)" fg:x="4788" fg:w="4"/><text x="42.6067%" y="495.50"></text></g><g><title>dequeue_entity (3 samples, 0.03%)</title><rect x="42.3655%" y="469" width="0.0265%" height="15" fill="rgb(224,165,27)" fg:x="4789" fg:w="3"/><text x="42.6155%" y="479.50"></text></g><g><title>update_curr (2 samples, 0.02%)</title><rect x="42.3744%" y="453" width="0.0177%" height="15" fill="rgb(233,86,3)" fg:x="4790" fg:w="2"/><text x="42.6244%" y="463.50"></text></g><g><title>perf_ctx_enable (57 samples, 0.50%)</title><rect x="42.4894%" y="469" width="0.5042%" height="15" fill="rgb(228,116,20)" fg:x="4803" fg:w="57"/><text x="42.7394%" y="479.50"></text></g><g><title>x86_pmu_enable (16 samples, 0.14%)</title><rect x="42.8521%" y="453" width="0.1415%" height="15" fill="rgb(209,192,17)" fg:x="4844" fg:w="16"/><text x="43.1021%" y="463.50"></text></g><g><title>perf_pmu_nop_void (97 samples, 0.86%)</title><rect x="42.9936%" y="469" width="0.8581%" height="15" fill="rgb(224,88,34)" fg:x="4860" fg:w="97"/><text x="43.2436%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (169 samples, 1.50%)</title><rect x="42.4275%" y="485" width="1.4950%" height="15" fill="rgb(233,38,6)" fg:x="4796" fg:w="169"/><text x="42.6775%" y="495.50"></text></g><g><title>x86_pmu_enable (8 samples, 0.07%)</title><rect x="43.8517%" y="469" width="0.0708%" height="15" fill="rgb(212,59,30)" fg:x="4957" fg:w="8"/><text x="44.1017%" y="479.50"></text></g><g><title>finish_task_switch.isra.0 (181 samples, 1.60%)</title><rect x="42.4009%" y="501" width="1.6012%" height="15" fill="rgb(213,80,3)" fg:x="4793" fg:w="181"/><text x="42.6509%" y="511.50"></text></g><g><title>perf_ctx_enable (9 samples, 0.08%)</title><rect x="43.9225%" y="485" width="0.0796%" height="15" fill="rgb(251,178,7)" fg:x="4965" fg:w="9"/><text x="44.1725%" y="495.50"></text></g><g><title>load_balance (3 samples, 0.03%)</title><rect x="44.0021%" y="453" width="0.0265%" height="15" fill="rgb(213,154,26)" fg:x="4974" fg:w="3"/><text x="44.2521%" y="463.50"></text></g><g><title>find_busiest_group (2 samples, 0.02%)</title><rect x="44.0110%" y="437" width="0.0177%" height="15" fill="rgb(238,165,49)" fg:x="4975" fg:w="2"/><text x="44.2610%" y="447.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (2 samples, 0.02%)</title><rect x="44.0110%" y="421" width="0.0177%" height="15" fill="rgb(248,91,46)" fg:x="4975" fg:w="2"/><text x="44.2610%" y="431.50"></text></g><g><title>update_sg_lb_stats (2 samples, 0.02%)</title><rect x="44.0110%" y="405" width="0.0177%" height="15" fill="rgb(244,21,52)" fg:x="4975" fg:w="2"/><text x="44.2610%" y="415.50"></text></g><g><title>newidle_balance (5 samples, 0.04%)</title><rect x="44.0021%" y="469" width="0.0442%" height="15" fill="rgb(247,122,20)" fg:x="4974" fg:w="5"/><text x="44.2521%" y="479.50"></text></g><g><title>pick_next_task_fair (6 samples, 0.05%)</title><rect x="44.0021%" y="485" width="0.0531%" height="15" fill="rgb(218,27,9)" fg:x="4974" fg:w="6"/><text x="44.2521%" y="495.50"></text></g><g><title>pick_next_task_idle (2 samples, 0.02%)</title><rect x="44.0552%" y="485" width="0.0177%" height="15" fill="rgb(246,7,6)" fg:x="4980" fg:w="2"/><text x="44.3052%" y="495.50"></text></g><g><title>pick_next_task (9 samples, 0.08%)</title><rect x="44.0021%" y="501" width="0.0796%" height="15" fill="rgb(227,135,54)" fg:x="4974" fg:w="9"/><text x="44.2521%" y="511.50"></text></g><g><title>down_write_killable (760 samples, 6.72%)</title><rect x="37.4204%" y="581" width="6.7233%" height="15" fill="rgb(247,14,11)" fg:x="4230" fg:w="760"/><text x="37.6704%" y="591.50">down_writ..</text></g><g><title>rwsem_down_write_slowpath (759 samples, 6.71%)</title><rect x="37.4292%" y="565" width="6.7144%" height="15" fill="rgb(206,149,34)" fg:x="4231" fg:w="759"/><text x="37.6792%" y="575.50">rwsem_dow..</text></g><g><title>schedule_preempt_disabled (206 samples, 1.82%)</title><rect x="42.3213%" y="549" width="1.8224%" height="15" fill="rgb(227,228,4)" fg:x="4784" fg:w="206"/><text x="42.5713%" y="559.50">s..</text></g><g><title>schedule (205 samples, 1.81%)</title><rect x="42.3301%" y="533" width="1.8135%" height="15" fill="rgb(238,218,28)" fg:x="4785" fg:w="205"/><text x="42.5801%" y="543.50">s..</text></g><g><title>__schedule (204 samples, 1.80%)</title><rect x="42.3390%" y="517" width="1.8047%" height="15" fill="rgb(252,86,40)" fg:x="4786" fg:w="204"/><text x="42.5890%" y="527.50">_..</text></g><g><title>psi_task_switch (5 samples, 0.04%)</title><rect x="44.0994%" y="501" width="0.0442%" height="15" fill="rgb(251,225,11)" fg:x="4985" fg:w="5"/><text x="44.3494%" y="511.50"></text></g><g><title>psi_group_change (4 samples, 0.04%)</title><rect x="44.1083%" y="485" width="0.0354%" height="15" fill="rgb(206,46,49)" fg:x="4986" fg:w="4"/><text x="44.3583%" y="495.50"></text></g><g><title>mas_find (5 samples, 0.04%)</title><rect x="44.1437%" y="581" width="0.0442%" height="15" fill="rgb(245,128,24)" fg:x="4990" fg:w="5"/><text x="44.3937%" y="591.50"></text></g><g><title>mas_walk (5 samples, 0.04%)</title><rect x="44.1437%" y="565" width="0.0442%" height="15" fill="rgb(219,177,34)" fg:x="4990" fg:w="5"/><text x="44.3937%" y="575.50"></text></g><g><title>mtree_range_walk (3 samples, 0.03%)</title><rect x="44.1614%" y="549" width="0.0265%" height="15" fill="rgb(218,60,48)" fg:x="4992" fg:w="3"/><text x="44.4114%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="44.2321%" y="453" width="0.0354%" height="15" fill="rgb(221,11,5)" fg:x="5000" fg:w="4"/><text x="44.4821%" y="463.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.04%)</title><rect x="44.2321%" y="437" width="0.0354%" height="15" fill="rgb(220,148,13)" fg:x="5000" fg:w="4"/><text x="44.4821%" y="447.50"></text></g><g><title>change_protection (10 samples, 0.09%)</title><rect x="44.1879%" y="565" width="0.0885%" height="15" fill="rgb(210,16,3)" fg:x="4995" fg:w="10"/><text x="44.4379%" y="575.50"></text></g><g><title>change_protection_range (10 samples, 0.09%)</title><rect x="44.1879%" y="549" width="0.0885%" height="15" fill="rgb(236,80,2)" fg:x="4995" fg:w="10"/><text x="44.4379%" y="559.50"></text></g><g><title>change_p4d_range (9 samples, 0.08%)</title><rect x="44.1967%" y="533" width="0.0796%" height="15" fill="rgb(239,129,19)" fg:x="4996" fg:w="9"/><text x="44.4467%" y="543.50"></text></g><g><title>change_pmd_range.isra.0 (6 samples, 0.05%)</title><rect x="44.2233%" y="517" width="0.0531%" height="15" fill="rgb(220,106,35)" fg:x="4999" fg:w="6"/><text x="44.4733%" y="527.50"></text></g><g><title>__cond_resched (5 samples, 0.04%)</title><rect x="44.2321%" y="501" width="0.0442%" height="15" fill="rgb(252,139,45)" fg:x="5000" fg:w="5"/><text x="44.4821%" y="511.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="44.2321%" y="485" width="0.0442%" height="15" fill="rgb(229,8,36)" fg:x="5000" fg:w="5"/><text x="44.4821%" y="495.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="44.2321%" y="469" width="0.0442%" height="15" fill="rgb(230,126,33)" fg:x="5000" fg:w="5"/><text x="44.4821%" y="479.50"></text></g><g><title>perf_event_mmap (22 samples, 0.19%)</title><rect x="44.2852%" y="565" width="0.1946%" height="15" fill="rgb(239,140,21)" fg:x="5006" fg:w="22"/><text x="44.5352%" y="575.50"></text></g><g><title>perf_event_mmap_event (22 samples, 0.19%)</title><rect x="44.2852%" y="549" width="0.1946%" height="15" fill="rgb(254,104,9)" fg:x="5006" fg:w="22"/><text x="44.5352%" y="559.50"></text></g><g><title>perf_iterate_sb.constprop.0 (21 samples, 0.19%)</title><rect x="44.2941%" y="533" width="0.1858%" height="15" fill="rgb(239,52,14)" fg:x="5007" fg:w="21"/><text x="44.5441%" y="543.50"></text></g><g><title>perf_iterate_ctx (19 samples, 0.17%)</title><rect x="44.3117%" y="517" width="0.1681%" height="15" fill="rgb(208,227,44)" fg:x="5009" fg:w="19"/><text x="44.5617%" y="527.50"></text></g><g><title>perf_event_mmap_output (6 samples, 0.05%)</title><rect x="44.4268%" y="501" width="0.0531%" height="15" fill="rgb(246,18,19)" fg:x="5022" fg:w="6"/><text x="44.6768%" y="511.50"></text></g><g><title>security_vm_enough_memory_mm (3 samples, 0.03%)</title><rect x="44.4798%" y="565" width="0.0265%" height="15" fill="rgb(235,228,25)" fg:x="5028" fg:w="3"/><text x="44.7298%" y="575.50"></text></g><g><title>mas_preallocate (6 samples, 0.05%)</title><rect x="44.5329%" y="549" width="0.0531%" height="15" fill="rgb(240,156,20)" fg:x="5034" fg:w="6"/><text x="44.7829%" y="559.50"></text></g><g><title>mas_alloc_nodes (6 samples, 0.05%)</title><rect x="44.5329%" y="533" width="0.0531%" height="15" fill="rgb(224,8,20)" fg:x="5034" fg:w="6"/><text x="44.7829%" y="543.50"></text></g><g><title>kmem_cache_alloc_bulk (5 samples, 0.04%)</title><rect x="44.5418%" y="517" width="0.0442%" height="15" fill="rgb(214,12,52)" fg:x="5035" fg:w="5"/><text x="44.7918%" y="527.50"></text></g><g><title>__kmem_cache_alloc_bulk (3 samples, 0.03%)</title><rect x="44.5594%" y="501" width="0.0265%" height="15" fill="rgb(211,220,47)" fg:x="5037" fg:w="3"/><text x="44.8094%" y="511.50"></text></g><g><title>mas_destroy (5 samples, 0.04%)</title><rect x="44.5860%" y="533" width="0.0442%" height="15" fill="rgb(250,173,5)" fg:x="5040" fg:w="5"/><text x="44.8360%" y="543.50"></text></g><g><title>kmem_cache_free_bulk (4 samples, 0.04%)</title><rect x="44.5948%" y="517" width="0.0354%" height="15" fill="rgb(250,125,52)" fg:x="5041" fg:w="4"/><text x="44.8448%" y="527.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (4 samples, 0.04%)</title><rect x="44.5948%" y="501" width="0.0354%" height="15" fill="rgb(209,133,18)" fg:x="5041" fg:w="4"/><text x="44.8448%" y="511.50"></text></g><g><title>build_detached_freelist (3 samples, 0.03%)</title><rect x="44.6037%" y="485" width="0.0265%" height="15" fill="rgb(216,173,22)" fg:x="5042" fg:w="3"/><text x="44.8537%" y="495.50"></text></g><g><title>mas_store_prealloc (7 samples, 0.06%)</title><rect x="44.5860%" y="549" width="0.0619%" height="15" fill="rgb(205,3,22)" fg:x="5040" fg:w="7"/><text x="44.8360%" y="559.50"></text></g><g><title>mas_wr_store_entry.isra.0 (2 samples, 0.02%)</title><rect x="44.6302%" y="533" width="0.0177%" height="15" fill="rgb(248,22,20)" fg:x="5045" fg:w="2"/><text x="44.8802%" y="543.50"></text></g><g><title>vma_complete (2 samples, 0.02%)</title><rect x="44.6568%" y="549" width="0.0177%" height="15" fill="rgb(233,6,29)" fg:x="5048" fg:w="2"/><text x="44.9068%" y="559.50"></text></g><g><title>up_write (2 samples, 0.02%)</title><rect x="44.6568%" y="533" width="0.0177%" height="15" fill="rgb(240,22,54)" fg:x="5048" fg:w="2"/><text x="44.9068%" y="543.50"></text></g><g><title>vma_merge (23 samples, 0.20%)</title><rect x="44.5152%" y="565" width="0.2035%" height="15" fill="rgb(231,133,32)" fg:x="5032" fg:w="23"/><text x="44.7652%" y="575.50"></text></g><g><title>vma_prepare (5 samples, 0.04%)</title><rect x="44.6745%" y="549" width="0.0442%" height="15" fill="rgb(248,193,4)" fg:x="5050" fg:w="5"/><text x="44.9245%" y="559.50"></text></g><g><title>mprotect_fixup (61 samples, 0.54%)</title><rect x="44.1879%" y="581" width="0.5396%" height="15" fill="rgb(211,178,46)" fg:x="4995" fg:w="61"/><text x="44.4379%" y="591.50"></text></g><g><title>wake_q_add (4 samples, 0.04%)</title><rect x="44.7718%" y="549" width="0.0354%" height="15" fill="rgb(224,5,42)" fg:x="5061" fg:w="4"/><text x="45.0218%" y="559.50"></text></g><g><title>_raw_spin_lock_irqsave (3 samples, 0.03%)</title><rect x="44.8071%" y="517" width="0.0265%" height="15" fill="rgb(239,176,25)" fg:x="5065" fg:w="3"/><text x="45.0571%" y="527.50"></text></g><g><title>__raw_spin_lock_irqsave (3 samples, 0.03%)</title><rect x="44.8071%" y="501" width="0.0265%" height="15" fill="rgb(245,187,50)" fg:x="5065" fg:w="3"/><text x="45.0571%" y="511.50"></text></g><g><title>native_queued_spin_lock_slowpath (2 samples, 0.02%)</title><rect x="44.8160%" y="485" width="0.0177%" height="15" fill="rgb(248,24,15)" fg:x="5066" fg:w="2"/><text x="45.0660%" y="495.50"></text></g><g><title>up_write (12 samples, 0.11%)</title><rect x="44.7364%" y="581" width="0.1062%" height="15" fill="rgb(205,166,13)" fg:x="5057" fg:w="12"/><text x="44.9864%" y="591.50"></text></g><g><title>rwsem_wake.isra.0 (8 samples, 0.07%)</title><rect x="44.7718%" y="565" width="0.0708%" height="15" fill="rgb(208,114,23)" fg:x="5061" fg:w="8"/><text x="45.0218%" y="575.50"></text></g><g><title>wake_up_q (4 samples, 0.04%)</title><rect x="44.8071%" y="549" width="0.0354%" height="15" fill="rgb(239,127,18)" fg:x="5065" fg:w="4"/><text x="45.0571%" y="559.50"></text></g><g><title>try_to_wake_up (4 samples, 0.04%)</title><rect x="44.8071%" y="533" width="0.0354%" height="15" fill="rgb(219,154,28)" fg:x="5065" fg:w="4"/><text x="45.0571%" y="543.50"></text></g><g><title>__x64_sys_mprotect (842 samples, 7.45%)</title><rect x="37.4027%" y="613" width="7.4487%" height="15" fill="rgb(225,157,23)" fg:x="4228" fg:w="842"/><text x="37.6527%" y="623.50">__x64_sys_..</text></g><g><title>do_mprotect_pkey (842 samples, 7.45%)</title><rect x="37.4027%" y="597" width="7.4487%" height="15" fill="rgb(219,8,6)" fg:x="4228" fg:w="842"/><text x="37.6527%" y="607.50">do_mprotec..</text></g><g><title>do_syscall_64 (843 samples, 7.46%)</title><rect x="37.4027%" y="629" width="7.4575%" height="15" fill="rgb(212,47,6)" fg:x="4228" fg:w="843"/><text x="37.6527%" y="639.50">do_syscall..</text></g><g><title>entry_SYSCALL_64_after_hwframe (845 samples, 7.48%)</title><rect x="37.3938%" y="645" width="7.4752%" height="15" fill="rgb(224,190,4)" fg:x="4227" fg:w="845"/><text x="37.6438%" y="655.50">entry_SYSC..</text></g><g><title>grow_heap (848 samples, 7.50%)</title><rect x="37.3850%" y="677" width="7.5018%" height="15" fill="rgb(239,183,29)" fg:x="4226" fg:w="848"/><text x="37.6350%" y="687.50">grow_heap</text></g><g><title>__GI_mprotect (848 samples, 7.50%)</title><rect x="37.3850%" y="661" width="7.5018%" height="15" fill="rgb(213,57,7)" fg:x="4226" fg:w="848"/><text x="37.6350%" y="671.50">__GI_mprot..</text></g><g><title>error_entry (2 samples, 0.02%)</title><rect x="44.8691%" y="645" width="0.0177%" height="15" fill="rgb(216,148,1)" fg:x="5072" fg:w="2"/><text x="45.1191%" y="655.50"></text></g><g><title>_int_realloc (917 samples, 8.11%)</title><rect x="36.8365%" y="725" width="8.1122%" height="15" fill="rgb(236,182,29)" fg:x="4164" fg:w="917"/><text x="37.0865%" y="735.50">_int_realloc</text></g><g><title>_int_malloc (913 samples, 8.08%)</title><rect x="36.8719%" y="709" width="8.0768%" height="15" fill="rgb(244,120,48)" fg:x="4168" fg:w="913"/><text x="37.1219%" y="719.50">_int_malloc</text></g><g><title>sysmalloc (910 samples, 8.05%)</title><rect x="36.8984%" y="693" width="8.0502%" height="15" fill="rgb(206,71,34)" fg:x="4171" fg:w="910"/><text x="37.1484%" y="703.50">sysmalloc</text></g><g><title>sync_regs (7 samples, 0.06%)</title><rect x="44.8868%" y="677" width="0.0619%" height="15" fill="rgb(242,32,6)" fg:x="5074" fg:w="7"/><text x="45.1368%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (923 samples, 8.17%)</title><rect x="36.7923%" y="789" width="8.1653%" height="15" fill="rgb(241,35,3)" fg:x="4159" fg:w="923"/><text x="37.0423%" y="799.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::grow_impl (923 samples, 8.17%)</title><rect x="36.7923%" y="773" width="8.1653%" height="15" fill="rgb(222,62,19)" fg:x="4159" fg:w="923"/><text x="37.0423%" y="783.50">alloc::allo..</text></g><g><title>alloc::alloc::realloc (923 samples, 8.17%)</title><rect x="36.7923%" y="757" width="8.1653%" height="15" fill="rgb(223,110,41)" fg:x="4159" fg:w="923"/><text x="37.0423%" y="767.50">alloc::allo..</text></g><g><title>__GI___libc_realloc (923 samples, 8.17%)</title><rect x="36.7923%" y="741" width="8.1653%" height="15" fill="rgb(208,224,4)" fg:x="4159" fg:w="923"/><text x="37.0423%" y="751.50">__GI___libc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (925 samples, 8.18%)</title><rect x="36.7923%" y="853" width="8.1829%" height="15" fill="rgb(241,137,19)" fg:x="4159" fg:w="925"/><text x="37.0423%" y="863.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (925 samples, 8.18%)</title><rect x="36.7923%" y="837" width="8.1829%" height="15" fill="rgb(244,24,17)" fg:x="4159" fg:w="925"/><text x="37.0423%" y="847.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (925 samples, 8.18%)</title><rect x="36.7923%" y="821" width="8.1829%" height="15" fill="rgb(245,178,49)" fg:x="4159" fg:w="925"/><text x="37.0423%" y="831.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::finish_grow (925 samples, 8.18%)</title><rect x="36.7923%" y="805" width="8.1829%" height="15" fill="rgb(219,160,38)" fg:x="4159" fg:w="925"/><text x="37.0423%" y="815.50">alloc::raw_..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="44.9575%" y="789" width="0.0177%" height="15" fill="rgb(228,137,14)" fg:x="5082" fg:w="2"/><text x="45.2075%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="45.0018%" y="725" width="0.0177%" height="15" fill="rgb(237,134,11)" fg:x="5087" fg:w="2"/><text x="45.2518%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="44.9929%" y="773" width="0.0354%" height="15" fill="rgb(211,126,44)" fg:x="5086" fg:w="4"/><text x="45.2429%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="44.9929%" y="757" width="0.0354%" height="15" fill="rgb(226,171,33)" fg:x="5086" fg:w="4"/><text x="45.2429%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="44.9929%" y="741" width="0.0354%" height="15" fill="rgb(253,99,13)" fg:x="5086" fg:w="4"/><text x="45.2429%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="45.0372%" y="645" width="0.0177%" height="15" fill="rgb(244,48,7)" fg:x="5091" fg:w="2"/><text x="45.2872%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.08%)</title><rect x="44.9841%" y="805" width="0.0796%" height="15" fill="rgb(244,217,54)" fg:x="5085" fg:w="9"/><text x="45.2341%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.08%)</title><rect x="44.9841%" y="789" width="0.0796%" height="15" fill="rgb(224,15,18)" fg:x="5085" fg:w="9"/><text x="45.2341%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="45.0283%" y="773" width="0.0354%" height="15" fill="rgb(244,99,12)" fg:x="5090" fg:w="4"/><text x="45.2783%" y="783.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="45.0283%" y="757" width="0.0354%" height="15" fill="rgb(233,226,8)" fg:x="5090" fg:w="4"/><text x="45.2783%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="45.0283%" y="741" width="0.0354%" height="15" fill="rgb(229,211,3)" fg:x="5090" fg:w="4"/><text x="45.2783%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="45.0283%" y="725" width="0.0354%" height="15" fill="rgb(216,140,21)" fg:x="5090" fg:w="4"/><text x="45.2783%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (3 samples, 0.03%)</title><rect x="45.0372%" y="709" width="0.0265%" height="15" fill="rgb(234,122,30)" fg:x="5091" fg:w="3"/><text x="45.2872%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="45.0372%" y="693" width="0.0265%" height="15" fill="rgb(236,25,46)" fg:x="5091" fg:w="3"/><text x="45.2872%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="45.0372%" y="677" width="0.0265%" height="15" fill="rgb(217,52,54)" fg:x="5091" fg:w="3"/><text x="45.2872%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="45.0372%" y="661" width="0.0265%" height="15" fill="rgb(222,29,26)" fg:x="5091" fg:w="3"/><text x="45.2872%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.03%)</title><rect x="45.0637%" y="773" width="0.0265%" height="15" fill="rgb(216,177,29)" fg:x="5094" fg:w="3"/><text x="45.3137%" y="783.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (2 samples, 0.02%)</title><rect x="45.0725%" y="757" width="0.0177%" height="15" fill="rgb(247,136,51)" fg:x="5095" fg:w="2"/><text x="45.3225%" y="767.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="45.0725%" y="741" width="0.0177%" height="15" fill="rgb(231,47,47)" fg:x="5095" fg:w="2"/><text x="45.3225%" y="751.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="45.0725%" y="725" width="0.0177%" height="15" fill="rgb(211,192,36)" fg:x="5095" fg:w="2"/><text x="45.3225%" y="735.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="45.0725%" y="709" width="0.0177%" height="15" fill="rgb(229,156,32)" fg:x="5095" fg:w="2"/><text x="45.3225%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (13 samples, 0.12%)</title><rect x="44.9841%" y="837" width="0.1150%" height="15" fill="rgb(248,213,20)" fg:x="5085" fg:w="13"/><text x="45.2341%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (13 samples, 0.12%)</title><rect x="44.9841%" y="821" width="0.1150%" height="15" fill="rgb(217,64,7)" fg:x="5085" fg:w="13"/><text x="45.2341%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.04%)</title><rect x="45.0637%" y="805" width="0.0354%" height="15" fill="rgb(232,142,8)" fg:x="5094" fg:w="4"/><text x="45.3137%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.04%)</title><rect x="45.0637%" y="789" width="0.0354%" height="15" fill="rgb(224,92,44)" fg:x="5094" fg:w="4"/><text x="45.3137%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="45.0991%" y="757" width="0.0177%" height="15" fill="rgb(214,169,17)" fg:x="5098" fg:w="2"/><text x="45.3491%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="45.0991%" y="741" width="0.0177%" height="15" fill="rgb(210,59,37)" fg:x="5098" fg:w="2"/><text x="45.3491%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="45.0991%" y="725" width="0.0177%" height="15" fill="rgb(214,116,48)" fg:x="5098" fg:w="2"/><text x="45.3491%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="45.0991%" y="789" width="0.0442%" height="15" fill="rgb(244,191,6)" fg:x="5098" fg:w="5"/><text x="45.3491%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="45.0991%" y="773" width="0.0442%" height="15" fill="rgb(241,50,52)" fg:x="5098" fg:w="5"/><text x="45.3491%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.03%)</title><rect x="45.1168%" y="757" width="0.0265%" height="15" fill="rgb(236,75,39)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="45.1168%" y="741" width="0.0265%" height="15" fill="rgb(236,99,0)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="45.1168%" y="725" width="0.0265%" height="15" fill="rgb(207,202,15)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="735.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="45.1168%" y="709" width="0.0265%" height="15" fill="rgb(233,207,14)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="45.1168%" y="693" width="0.0265%" height="15" fill="rgb(226,27,51)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="703.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="45.1168%" y="677" width="0.0265%" height="15" fill="rgb(206,104,42)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="45.1168%" y="661" width="0.0265%" height="15" fill="rgb(212,225,4)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="45.1168%" y="645" width="0.0265%" height="15" fill="rgb(233,96,42)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="45.1168%" y="629" width="0.0265%" height="15" fill="rgb(229,21,32)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="45.1168%" y="613" width="0.0265%" height="15" fill="rgb(226,216,24)" fg:x="5100" fg:w="3"/><text x="45.3668%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="45.1433%" y="741" width="0.0177%" height="15" fill="rgb(221,163,17)" fg:x="5103" fg:w="2"/><text x="45.3933%" y="751.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (23 samples, 0.20%)</title><rect x="44.9752%" y="853" width="0.2035%" height="15" fill="rgb(216,216,42)" fg:x="5084" fg:w="23"/><text x="45.2252%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (9 samples, 0.08%)</title><rect x="45.0991%" y="837" width="0.0796%" height="15" fill="rgb(240,118,7)" fg:x="5098" fg:w="9"/><text x="45.3491%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (9 samples, 0.08%)</title><rect x="45.0991%" y="821" width="0.0796%" height="15" fill="rgb(221,67,37)" fg:x="5098" fg:w="9"/><text x="45.3491%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (9 samples, 0.08%)</title><rect x="45.0991%" y="805" width="0.0796%" height="15" fill="rgb(241,32,44)" fg:x="5098" fg:w="9"/><text x="45.3491%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4 samples, 0.04%)</title><rect x="45.1433%" y="789" width="0.0354%" height="15" fill="rgb(235,204,43)" fg:x="5103" fg:w="4"/><text x="45.3933%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.04%)</title><rect x="45.1433%" y="773" width="0.0354%" height="15" fill="rgb(213,116,10)" fg:x="5103" fg:w="4"/><text x="45.3933%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.04%)</title><rect x="45.1433%" y="757" width="0.0354%" height="15" fill="rgb(239,15,48)" fg:x="5103" fg:w="4"/><text x="45.3933%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="45.1610%" y="741" width="0.0177%" height="15" fill="rgb(207,123,36)" fg:x="5105" fg:w="2"/><text x="45.4110%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="45.1787%" y="773" width="0.0177%" height="15" fill="rgb(209,103,30)" fg:x="5107" fg:w="2"/><text x="45.4287%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="45.1787%" y="757" width="0.0177%" height="15" fill="rgb(238,100,19)" fg:x="5107" fg:w="2"/><text x="45.4287%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="45.1787%" y="741" width="0.0177%" height="15" fill="rgb(244,30,14)" fg:x="5107" fg:w="2"/><text x="45.4287%" y="751.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="45.1964%" y="773" width="0.0177%" height="15" fill="rgb(249,174,6)" fg:x="5109" fg:w="2"/><text x="45.4464%" y="783.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="45.2141%" y="693" width="0.0177%" height="15" fill="rgb(235,213,41)" fg:x="5111" fg:w="2"/><text x="45.4641%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="45.2141%" y="677" width="0.0177%" height="15" fill="rgb(213,118,6)" fg:x="5111" fg:w="2"/><text x="45.4641%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="45.2141%" y="661" width="0.0177%" height="15" fill="rgb(235,44,51)" fg:x="5111" fg:w="2"/><text x="45.4641%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="45.2141%" y="645" width="0.0177%" height="15" fill="rgb(217,9,53)" fg:x="5111" fg:w="2"/><text x="45.4641%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="45.2141%" y="629" width="0.0177%" height="15" fill="rgb(237,172,34)" fg:x="5111" fg:w="2"/><text x="45.4641%" y="639.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.07%)</title><rect x="45.2141%" y="757" width="0.0708%" height="15" fill="rgb(206,206,11)" fg:x="5111" fg:w="8"/><text x="45.4641%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.07%)</title><rect x="45.2141%" y="741" width="0.0708%" height="15" fill="rgb(214,149,29)" fg:x="5111" fg:w="8"/><text x="45.4641%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.07%)</title><rect x="45.2141%" y="725" width="0.0708%" height="15" fill="rgb(208,123,3)" fg:x="5111" fg:w="8"/><text x="45.4641%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.07%)</title><rect x="45.2141%" y="709" width="0.0708%" height="15" fill="rgb(229,126,4)" fg:x="5111" fg:w="8"/><text x="45.4641%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (6 samples, 0.05%)</title><rect x="45.2318%" y="693" width="0.0531%" height="15" fill="rgb(222,92,36)" fg:x="5113" fg:w="6"/><text x="45.4818%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="45.2318%" y="677" width="0.0531%" height="15" fill="rgb(216,39,41)" fg:x="5113" fg:w="6"/><text x="45.4818%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="45.2318%" y="661" width="0.0531%" height="15" fill="rgb(253,127,28)" fg:x="5113" fg:w="6"/><text x="45.4818%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="45.2318%" y="645" width="0.0531%" height="15" fill="rgb(249,152,51)" fg:x="5113" fg:w="6"/><text x="45.4818%" y="655.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="45.2849%" y="709" width="0.0177%" height="15" fill="rgb(209,123,42)" fg:x="5119" fg:w="2"/><text x="45.5349%" y="719.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="45.2849%" y="693" width="0.0177%" height="15" fill="rgb(241,118,22)" fg:x="5119" fg:w="2"/><text x="45.5349%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.17%)</title><rect x="45.1787%" y="805" width="0.1681%" height="15" fill="rgb(208,25,7)" fg:x="5107" fg:w="19"/><text x="45.4287%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.17%)</title><rect x="45.1787%" y="789" width="0.1681%" height="15" fill="rgb(243,144,39)" fg:x="5107" fg:w="19"/><text x="45.4287%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.13%)</title><rect x="45.2141%" y="773" width="0.1327%" height="15" fill="rgb(250,50,5)" fg:x="5111" fg:w="15"/><text x="45.4641%" y="783.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (7 samples, 0.06%)</title><rect x="45.2849%" y="757" width="0.0619%" height="15" fill="rgb(207,67,11)" fg:x="5119" fg:w="7"/><text x="45.5349%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (7 samples, 0.06%)</title><rect x="45.2849%" y="741" width="0.0619%" height="15" fill="rgb(245,204,40)" fg:x="5119" fg:w="7"/><text x="45.5349%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (7 samples, 0.06%)</title><rect x="45.2849%" y="725" width="0.0619%" height="15" fill="rgb(238,228,24)" fg:x="5119" fg:w="7"/><text x="45.5349%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (5 samples, 0.04%)</title><rect x="45.3025%" y="709" width="0.0442%" height="15" fill="rgb(217,116,22)" fg:x="5121" fg:w="5"/><text x="45.5525%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="45.3025%" y="693" width="0.0442%" height="15" fill="rgb(234,98,12)" fg:x="5121" fg:w="5"/><text x="45.5525%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="45.3025%" y="677" width="0.0442%" height="15" fill="rgb(242,170,50)" fg:x="5121" fg:w="5"/><text x="45.5525%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="45.3025%" y="661" width="0.0442%" height="15" fill="rgb(235,7,5)" fg:x="5121" fg:w="5"/><text x="45.5525%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="45.3202%" y="645" width="0.0265%" height="15" fill="rgb(241,114,28)" fg:x="5123" fg:w="3"/><text x="45.5702%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="45.3291%" y="629" width="0.0177%" height="15" fill="rgb(246,112,42)" fg:x="5124" fg:w="2"/><text x="45.5791%" y="639.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sstore (974 samples, 8.62%)</title><rect x="36.7481%" y="901" width="8.6164%" height="15" fill="rgb(248,228,14)" fg:x="4154" fg:w="974"/><text x="36.9981%" y="911.50">&lt;revm::evm::..</text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::sstore (971 samples, 8.59%)</title><rect x="36.7746%" y="885" width="8.5899%" height="15" fill="rgb(208,133,18)" fg:x="4157" fg:w="971"/><text x="37.0246%" y="895.50">revm::contex..</text></g><g><title>revm::journaled_state::JournaledState::sstore (971 samples, 8.59%)</title><rect x="36.7746%" y="869" width="8.5899%" height="15" fill="rgb(207,35,49)" fg:x="4157" fg:w="971"/><text x="37.0246%" y="879.50">revm::journa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (21 samples, 0.19%)</title><rect x="45.1787%" y="853" width="0.1858%" height="15" fill="rgb(205,68,36)" fg:x="5107" fg:w="21"/><text x="45.4287%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (21 samples, 0.19%)</title><rect x="45.1787%" y="837" width="0.1858%" height="15" fill="rgb(245,62,40)" fg:x="5107" fg:w="21"/><text x="45.4287%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (21 samples, 0.19%)</title><rect x="45.1787%" y="821" width="0.1858%" height="15" fill="rgb(228,27,24)" fg:x="5107" fg:w="21"/><text x="45.4287%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.02%)</title><rect x="45.3468%" y="805" width="0.0177%" height="15" fill="rgb(253,19,12)" fg:x="5126" fg:w="2"/><text x="45.5968%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="45.3468%" y="789" width="0.0177%" height="15" fill="rgb(232,28,20)" fg:x="5126" fg:w="2"/><text x="45.5968%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="45.3468%" y="773" width="0.0177%" height="15" fill="rgb(218,35,51)" fg:x="5126" fg:w="2"/><text x="45.5968%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.02%)</title><rect x="45.3468%" y="757" width="0.0177%" height="15" fill="rgb(212,90,40)" fg:x="5126" fg:w="2"/><text x="45.5968%" y="767.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="45.3733%" y="885" width="0.0177%" height="15" fill="rgb(220,172,12)" fg:x="5129" fg:w="2"/><text x="45.6233%" y="895.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.02%)</title><rect x="45.3733%" y="869" width="0.0177%" height="15" fill="rgb(226,159,20)" fg:x="5129" fg:w="2"/><text x="45.6233%" y="879.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.02%)</title><rect x="45.3733%" y="853" width="0.0177%" height="15" fill="rgb(234,205,16)" fg:x="5129" fg:w="2"/><text x="45.6233%" y="863.50"></text></g><g><title>revm_interpreter::gas::calc::sstore_refund (3 samples, 0.03%)</title><rect x="45.3733%" y="901" width="0.0265%" height="15" fill="rgb(207,9,39)" fg:x="5129" fg:w="3"/><text x="45.6233%" y="911.50"></text></g><g><title>revm_interpreter::instructions::host::sstore (981 samples, 8.68%)</title><rect x="36.7304%" y="917" width="8.6783%" height="15" fill="rgb(249,143,15)" fg:x="4152" fg:w="981"/><text x="36.9804%" y="927.50">revm_interpr..</text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::get_u256 (3 samples, 0.03%)</title><rect x="45.4352%" y="901" width="0.0265%" height="15" fill="rgb(253,133,29)" fg:x="5136" fg:w="3"/><text x="45.6852%" y="911.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="45.4441%" y="885" width="0.0177%" height="15" fill="rgb(221,187,0)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="895.50"></text></g><g><title>alloy_primitives::bits::fixed::&lt;impl core::convert::From&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt; for ruint::Uint&lt;256_usize,4_usize&gt;&gt;::from (2 samples, 0.02%)</title><rect x="45.4441%" y="869" width="0.0177%" height="15" fill="rgb(205,204,26)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="879.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_bytes (2 samples, 0.02%)</title><rect x="45.4441%" y="853" width="0.0177%" height="15" fill="rgb(224,68,54)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="863.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_slice (2 samples, 0.02%)</title><rect x="45.4441%" y="837" width="0.0177%" height="15" fill="rgb(209,67,4)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="847.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_be_slice (2 samples, 0.02%)</title><rect x="45.4441%" y="821" width="0.0177%" height="15" fill="rgb(228,229,18)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (2 samples, 0.02%)</title><rect x="45.4441%" y="805" width="0.0177%" height="15" fill="rgb(231,89,13)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (2 samples, 0.02%)</title><rect x="45.4441%" y="789" width="0.0177%" height="15" fill="rgb(210,182,18)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (2 samples, 0.02%)</title><rect x="45.4441%" y="773" width="0.0177%" height="15" fill="rgb(240,105,2)" fg:x="5137" fg:w="2"/><text x="45.6941%" y="783.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::pop_unsafe (2 samples, 0.02%)</title><rect x="45.4706%" y="901" width="0.0177%" height="15" fill="rgb(207,170,50)" fg:x="5140" fg:w="2"/><text x="45.7206%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.02%)</title><rect x="45.4706%" y="885" width="0.0177%" height="15" fill="rgb(232,133,24)" fg:x="5140" fg:w="2"/><text x="45.7206%" y="895.50"></text></g><g><title>revm_interpreter::instructions::memory::mload (10 samples, 0.09%)</title><rect x="45.4087%" y="917" width="0.0885%" height="15" fill="rgb(235,166,27)" fg:x="5133" fg:w="10"/><text x="45.6587%" y="927.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (5 samples, 0.04%)</title><rect x="45.5326%" y="901" width="0.0442%" height="15" fill="rgb(209,19,13)" fg:x="5147" fg:w="5"/><text x="45.7826%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::len (3 samples, 0.03%)</title><rect x="45.5768%" y="901" width="0.0265%" height="15" fill="rgb(226,79,39)" fg:x="5152" fg:w="3"/><text x="45.8268%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::resize (5 samples, 0.04%)</title><rect x="45.6033%" y="901" width="0.0442%" height="15" fill="rgb(222,163,10)" fg:x="5155" fg:w="5"/><text x="45.8533%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (5 samples, 0.04%)</title><rect x="45.6033%" y="885" width="0.0442%" height="15" fill="rgb(214,44,19)" fg:x="5155" fg:w="5"/><text x="45.8533%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.04%)</title><rect x="45.6033%" y="869" width="0.0442%" height="15" fill="rgb(210,217,13)" fg:x="5155" fg:w="5"/><text x="45.8533%" y="879.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="45.6033%" y="853" width="0.0442%" height="15" fill="rgb(237,61,54)" fg:x="5155" fg:w="5"/><text x="45.8533%" y="863.50"></text></g><g><title>__memset_avx2_unaligned_erms (5 samples, 0.04%)</title><rect x="45.6033%" y="837" width="0.0442%" height="15" fill="rgb(226,184,24)" fg:x="5155" fg:w="5"/><text x="45.8533%" y="847.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::set (5 samples, 0.04%)</title><rect x="45.6476%" y="885" width="0.0442%" height="15" fill="rgb(223,226,4)" fg:x="5160" fg:w="5"/><text x="45.8976%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5 samples, 0.04%)</title><rect x="45.6476%" y="869" width="0.0442%" height="15" fill="rgb(210,26,41)" fg:x="5160" fg:w="5"/><text x="45.8976%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="45.6476%" y="853" width="0.0442%" height="15" fill="rgb(220,221,6)" fg:x="5160" fg:w="5"/><text x="45.8976%" y="863.50"></text></g><g><title>revm_interpreter::instructions::memory::mstore (25 samples, 0.22%)</title><rect x="45.4972%" y="917" width="0.2212%" height="15" fill="rgb(225,89,49)" fg:x="5143" fg:w="25"/><text x="45.7472%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::set_u256 (8 samples, 0.07%)</title><rect x="45.6476%" y="901" width="0.0708%" height="15" fill="rgb(218,70,45)" fg:x="5160" fg:w="8"/><text x="45.8976%" y="911.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::to_be_bytes (3 samples, 0.03%)</title><rect x="45.6918%" y="885" width="0.0265%" height="15" fill="rgb(238,166,21)" fg:x="5165" fg:w="3"/><text x="45.9418%" y="895.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (11 samples, 0.10%)</title><rect x="45.7183%" y="901" width="0.0973%" height="15" fill="rgb(224,141,44)" fg:x="5168" fg:w="11"/><text x="45.9683%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.04%)</title><rect x="45.8333%" y="885" width="0.0354%" height="15" fill="rgb(230,12,49)" fg:x="5181" fg:w="4"/><text x="46.0833%" y="895.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="45.8687%" y="885" width="0.0442%" height="15" fill="rgb(212,174,12)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="895.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="45.8687%" y="869" width="0.0442%" height="15" fill="rgb(246,67,9)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="879.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="45.8687%" y="853" width="0.0442%" height="15" fill="rgb(239,35,23)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="863.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="45.8687%" y="837" width="0.0442%" height="15" fill="rgb(211,167,0)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="847.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="45.8687%" y="821" width="0.0442%" height="15" fill="rgb(225,119,45)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="831.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="45.8687%" y="805" width="0.0442%" height="15" fill="rgb(210,162,6)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="815.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="45.8687%" y="789" width="0.0442%" height="15" fill="rgb(208,118,35)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="799.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="45.8687%" y="773" width="0.0442%" height="15" fill="rgb(239,4,53)" fg:x="5185" fg:w="5"/><text x="46.1187%" y="783.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.04%)</title><rect x="45.8776%" y="757" width="0.0354%" height="15" fill="rgb(213,130,21)" fg:x="5186" fg:w="4"/><text x="46.1276%" y="767.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="45.8776%" y="741" width="0.0354%" height="15" fill="rgb(235,148,0)" fg:x="5186" fg:w="4"/><text x="46.1276%" y="751.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.04%)</title><rect x="45.8776%" y="725" width="0.0354%" height="15" fill="rgb(244,224,18)" fg:x="5186" fg:w="4"/><text x="46.1276%" y="735.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.04%)</title><rect x="45.8776%" y="709" width="0.0354%" height="15" fill="rgb(211,214,4)" fg:x="5186" fg:w="4"/><text x="46.1276%" y="719.50"></text></g><g><title>revm_interpreter::instructions::stack::dup (26 samples, 0.23%)</title><rect x="45.7183%" y="917" width="0.2300%" height="15" fill="rgb(206,119,25)" fg:x="5168" fg:w="26"/><text x="45.9683%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::dup (15 samples, 0.13%)</title><rect x="45.8156%" y="901" width="0.1327%" height="15" fill="rgb(243,93,47)" fg:x="5179" fg:w="15"/><text x="46.0656%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="45.9130%" y="885" width="0.0354%" height="15" fill="rgb(224,194,6)" fg:x="5190" fg:w="4"/><text x="46.1630%" y="895.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (10 samples, 0.09%)</title><rect x="45.9572%" y="901" width="0.0885%" height="15" fill="rgb(243,229,6)" fg:x="5195" fg:w="10"/><text x="46.2072%" y="911.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_sub (5 samples, 0.04%)</title><rect x="46.0014%" y="885" width="0.0442%" height="15" fill="rgb(207,23,50)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="895.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="46.0014%" y="869" width="0.0442%" height="15" fill="rgb(253,192,32)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="879.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="46.0014%" y="853" width="0.0442%" height="15" fill="rgb(213,21,6)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="863.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="46.0014%" y="837" width="0.0442%" height="15" fill="rgb(243,151,13)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="847.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="46.0014%" y="821" width="0.0442%" height="15" fill="rgb(233,165,41)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="831.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="46.0014%" y="805" width="0.0442%" height="15" fill="rgb(246,176,45)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="815.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="46.0014%" y="789" width="0.0442%" height="15" fill="rgb(217,170,52)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="799.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="46.0014%" y="773" width="0.0442%" height="15" fill="rgb(214,203,54)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="783.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="46.0014%" y="757" width="0.0442%" height="15" fill="rgb(248,215,49)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="767.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="46.0014%" y="741" width="0.0442%" height="15" fill="rgb(208,46,10)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="751.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="46.0014%" y="725" width="0.0442%" height="15" fill="rgb(254,5,31)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="735.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="46.0014%" y="709" width="0.0442%" height="15" fill="rgb(222,104,33)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="719.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.04%)</title><rect x="46.0014%" y="693" width="0.0442%" height="15" fill="rgb(248,49,16)" fg:x="5200" fg:w="5"/><text x="46.2514%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.03%)</title><rect x="46.1164%" y="885" width="0.0265%" height="15" fill="rgb(232,198,41)" fg:x="5213" fg:w="3"/><text x="46.3664%" y="895.50"></text></g><g><title>core::ptr::write (3 samples, 0.03%)</title><rect x="46.1164%" y="869" width="0.0265%" height="15" fill="rgb(214,125,3)" fg:x="5213" fg:w="3"/><text x="46.3664%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.02%)</title><rect x="46.1430%" y="885" width="0.0177%" height="15" fill="rgb(229,220,28)" fg:x="5216" fg:w="2"/><text x="46.3930%" y="895.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.02%)</title><rect x="46.1430%" y="869" width="0.0177%" height="15" fill="rgb(222,64,37)" fg:x="5216" fg:w="2"/><text x="46.3930%" y="879.50"></text></g><g><title>revm_interpreter::instructions::stack::push (25 samples, 0.22%)</title><rect x="45.9483%" y="917" width="0.2212%" height="15" fill="rgb(249,184,13)" fg:x="5194" fg:w="25"/><text x="46.1983%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::push_slice (14 samples, 0.12%)</title><rect x="46.0456%" y="901" width="0.1238%" height="15" fill="rgb(252,176,6)" fg:x="5205" fg:w="14"/><text x="46.2956%" y="911.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (4 samples, 0.04%)</title><rect x="46.1783%" y="901" width="0.0354%" height="15" fill="rgb(228,153,7)" fg:x="5220" fg:w="4"/><text x="46.4283%" y="911.50"></text></g><g><title>core::intrinsics::copy (4 samples, 0.04%)</title><rect x="46.2226%" y="853" width="0.0354%" height="15" fill="rgb(242,193,5)" fg:x="5225" fg:w="4"/><text x="46.4726%" y="863.50"></text></g><g><title>revm_interpreter::instructions::stack::swap (32 samples, 0.28%)</title><rect x="46.1695%" y="917" width="0.2831%" height="15" fill="rgb(232,140,9)" fg:x="5219" fg:w="32"/><text x="46.4195%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::swap (27 samples, 0.24%)</title><rect x="46.2137%" y="901" width="0.2389%" height="15" fill="rgb(213,222,16)" fg:x="5224" fg:w="27"/><text x="46.4637%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (26 samples, 0.23%)</title><rect x="46.2226%" y="885" width="0.2300%" height="15" fill="rgb(222,75,50)" fg:x="5225" fg:w="26"/><text x="46.4726%" y="895.50"></text></g><g><title>core::ptr::swap (26 samples, 0.23%)</title><rect x="46.2226%" y="869" width="0.2300%" height="15" fill="rgb(205,180,2)" fg:x="5225" fg:w="26"/><text x="46.4726%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.19%)</title><rect x="46.2580%" y="853" width="0.1946%" height="15" fill="rgb(216,34,7)" fg:x="5229" fg:w="22"/><text x="46.5080%" y="863.50"></text></g><g><title>revm_interpreter::instructions::system::calldataload (8 samples, 0.07%)</title><rect x="46.4526%" y="917" width="0.0708%" height="15" fill="rgb(253,16,32)" fg:x="5251" fg:w="8"/><text x="46.7026%" y="927.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::push_b256 (2 samples, 0.02%)</title><rect x="46.5057%" y="901" width="0.0177%" height="15" fill="rgb(208,97,28)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="911.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="46.5057%" y="885" width="0.0177%" height="15" fill="rgb(225,92,11)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="895.50"></text></g><g><title>alloy_primitives::bits::fixed::&lt;impl core::convert::From&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt; for ruint::Uint&lt;256_usize,4_usize&gt;&gt;::from (2 samples, 0.02%)</title><rect x="46.5057%" y="869" width="0.0177%" height="15" fill="rgb(243,38,12)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="879.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_bytes (2 samples, 0.02%)</title><rect x="46.5057%" y="853" width="0.0177%" height="15" fill="rgb(208,139,16)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="863.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_be_slice (2 samples, 0.02%)</title><rect x="46.5057%" y="837" width="0.0177%" height="15" fill="rgb(227,24,9)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="847.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_be_slice (2 samples, 0.02%)</title><rect x="46.5057%" y="821" width="0.0177%" height="15" fill="rgb(206,62,11)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (2 samples, 0.02%)</title><rect x="46.5057%" y="805" width="0.0177%" height="15" fill="rgb(228,134,27)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (2 samples, 0.02%)</title><rect x="46.5057%" y="789" width="0.0177%" height="15" fill="rgb(205,55,33)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (2 samples, 0.02%)</title><rect x="46.5057%" y="773" width="0.0177%" height="15" fill="rgb(243,75,43)" fg:x="5257" fg:w="2"/><text x="46.7557%" y="783.50"></text></g><g><title>revm_interpreter::instructions::system::codecopy (5 samples, 0.04%)</title><rect x="46.5322%" y="917" width="0.0442%" height="15" fill="rgb(223,27,42)" fg:x="5260" fg:w="5"/><text x="46.7822%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="46.6561%" y="869" width="0.0265%" height="15" fill="rgb(232,189,33)" fg:x="5274" fg:w="3"/><text x="46.9061%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="46.6914%" y="821" width="0.0354%" height="15" fill="rgb(210,9,39)" fg:x="5278" fg:w="4"/><text x="46.9414%" y="831.50"></text></g><g><title>tiny_keccak::Buffer::setout (2 samples, 0.02%)</title><rect x="46.7357%" y="789" width="0.0177%" height="15" fill="rgb(242,85,26)" fg:x="5283" fg:w="2"/><text x="46.9857%" y="799.50"></text></g><g><title>tiny_keccak::Buffer::execute (2 samples, 0.02%)</title><rect x="46.7357%" y="773" width="0.0177%" height="15" fill="rgb(248,44,4)" fg:x="5283" fg:w="2"/><text x="46.9857%" y="783.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="50.0177%" y="725" width="0.0442%" height="15" fill="rgb(250,96,46)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="735.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="50.0177%" y="709" width="0.0442%" height="15" fill="rgb(229,116,26)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="719.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="50.0177%" y="693" width="0.0442%" height="15" fill="rgb(246,94,34)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="703.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="50.0177%" y="677" width="0.0442%" height="15" fill="rgb(251,73,21)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="687.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="50.0177%" y="661" width="0.0442%" height="15" fill="rgb(254,121,25)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="671.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="50.0177%" y="645" width="0.0442%" height="15" fill="rgb(215,161,49)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="655.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="50.0177%" y="629" width="0.0442%" height="15" fill="rgb(221,43,13)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="639.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="50.0177%" y="613" width="0.0442%" height="15" fill="rgb(249,5,37)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="623.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="50.0177%" y="597" width="0.0442%" height="15" fill="rgb(226,25,44)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="607.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="50.0177%" y="581" width="0.0442%" height="15" fill="rgb(238,189,16)" fg:x="5654" fg:w="5"/><text x="50.2677%" y="591.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.04%)</title><rect x="50.0265%" y="565" width="0.0354%" height="15" fill="rgb(251,186,8)" fg:x="5655" fg:w="4"/><text x="50.2765%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.05%)</title><rect x="50.0619%" y="725" width="0.0531%" height="15" fill="rgb(254,34,31)" fg:x="5659" fg:w="6"/><text x="50.3119%" y="735.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.05%)</title><rect x="50.0619%" y="709" width="0.0531%" height="15" fill="rgb(225,215,27)" fg:x="5659" fg:w="6"/><text x="50.3119%" y="719.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::fill_block (495 samples, 4.38%)</title><rect x="46.7534%" y="789" width="4.3790%" height="15" fill="rgb(221,192,48)" fg:x="5285" fg:w="495"/><text x="47.0034%" y="799.50">tiny_..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::keccak (495 samples, 4.38%)</title><rect x="46.7534%" y="773" width="4.3790%" height="15" fill="rgb(219,137,20)" fg:x="5285" fg:w="495"/><text x="47.0034%" y="783.50">tiny_..</text></g><g><title>&lt;tiny_keccak::keccakf::KeccakF as tiny_keccak::Permutation&gt;::execute (495 samples, 4.38%)</title><rect x="46.7534%" y="757" width="4.3790%" height="15" fill="rgb(219,84,11)" fg:x="5285" fg:w="495"/><text x="47.0034%" y="767.50">&lt;tiny..</text></g><g><title>tiny_keccak::keccakf::keccakf (495 samples, 4.38%)</title><rect x="46.7534%" y="741" width="4.3790%" height="15" fill="rgb(224,10,23)" fg:x="5285" fg:w="495"/><text x="47.0034%" y="751.50">tiny_..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (115 samples, 1.02%)</title><rect x="50.1150%" y="725" width="1.0173%" height="15" fill="rgb(248,22,39)" fg:x="5665" fg:w="115"/><text x="50.3650%" y="735.50"></text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_raw (505 samples, 4.47%)</title><rect x="46.6826%" y="869" width="4.4674%" height="15" fill="rgb(212,154,20)" fg:x="5277" fg:w="505"/><text x="46.9326%" y="879.50">alloy..</text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_array (505 samples, 4.47%)</title><rect x="46.6826%" y="853" width="4.4674%" height="15" fill="rgb(236,199,50)" fg:x="5277" fg:w="505"/><text x="46.9326%" y="863.50">alloy..</text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (505 samples, 4.47%)</title><rect x="46.6826%" y="837" width="4.4674%" height="15" fill="rgb(211,9,17)" fg:x="5277" fg:w="505"/><text x="46.9326%" y="847.50">&lt;tiny..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::finalize (500 samples, 4.42%)</title><rect x="46.7268%" y="821" width="4.4232%" height="15" fill="rgb(243,216,36)" fg:x="5282" fg:w="500"/><text x="46.9768%" y="831.50">tiny_..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::squeeze (500 samples, 4.42%)</title><rect x="46.7268%" y="805" width="4.4232%" height="15" fill="rgb(250,2,10)" fg:x="5282" fg:w="500"/><text x="46.9768%" y="815.50">tiny_..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::pad (2 samples, 0.02%)</title><rect x="51.1323%" y="789" width="0.0177%" height="15" fill="rgb(226,50,48)" fg:x="5780" fg:w="2"/><text x="51.3823%" y="799.50"></text></g><g><title>alloy_primitives::utils::keccak256 (514 samples, 4.55%)</title><rect x="46.6384%" y="901" width="4.5471%" height="15" fill="rgb(243,81,16)" fg:x="5272" fg:w="514"/><text x="46.8884%" y="911.50">alloy..</text></g><g><title>alloy_primitives::utils::keccak256::keccak256 (513 samples, 4.54%)</title><rect x="46.6472%" y="885" width="4.5382%" height="15" fill="rgb(250,14,2)" fg:x="5273" fg:w="513"/><text x="46.8972%" y="895.50">alloy..</text></g><g><title>alloy_primitives::utils::Keccak256::update (3 samples, 0.03%)</title><rect x="51.1589%" y="869" width="0.0265%" height="15" fill="rgb(233,135,29)" fg:x="5783" fg:w="3"/><text x="51.4089%" y="879.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (3 samples, 0.03%)</title><rect x="51.1589%" y="853" width="0.0265%" height="15" fill="rgb(224,64,43)" fg:x="5783" fg:w="3"/><text x="51.4089%" y="863.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::update (3 samples, 0.03%)</title><rect x="51.1589%" y="837" width="0.0265%" height="15" fill="rgb(238,84,13)" fg:x="5783" fg:w="3"/><text x="51.4089%" y="847.50"></text></g><g><title>tiny_keccak::Buffer::xorin (3 samples, 0.03%)</title><rect x="51.1589%" y="821" width="0.0265%" height="15" fill="rgb(253,48,26)" fg:x="5783" fg:w="3"/><text x="51.4089%" y="831.50"></text></g><g><title>tiny_keccak::Buffer::execute (3 samples, 0.03%)</title><rect x="51.1589%" y="805" width="0.0265%" height="15" fill="rgb(205,223,31)" fg:x="5783" fg:w="3"/><text x="51.4089%" y="815.50"></text></g><g><title>tiny_keccak::Buffer::xorin::_{{closure}} (2 samples, 0.02%)</title><rect x="51.1677%" y="789" width="0.0177%" height="15" fill="rgb(221,41,32)" fg:x="5784" fg:w="2"/><text x="51.4177%" y="799.50"></text></g><g><title>revm_interpreter::gas::calc::keccak256_cost (2 samples, 0.02%)</title><rect x="51.1854%" y="901" width="0.0177%" height="15" fill="rgb(213,158,31)" fg:x="5786" fg:w="2"/><text x="51.4354%" y="911.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::run (1,917 samples, 16.96%)</title><rect x="34.2622%" y="965" width="16.9586%" height="15" fill="rgb(245,126,43)" fg:x="3873" fg:w="1917"/><text x="34.5122%" y="975.50">revm_interpreter::interpre..</text></g><g><title>revm_interpreter::interpreter::Interpreter::step (1,885 samples, 16.68%)</title><rect x="34.5453%" y="949" width="16.6755%" height="15" fill="rgb(227,7,22)" fg:x="3905" fg:w="1885"/><text x="34.7953%" y="959.50">revm_interpreter::interpre..</text></g><g><title>core::ops::function::Fn::call (1,852 samples, 16.38%)</title><rect x="34.8372%" y="933" width="16.3836%" height="15" fill="rgb(252,90,44)" fg:x="3938" fg:w="1852"/><text x="35.0872%" y="943.50">core::ops::function::Fn::..</text></g><g><title>revm_interpreter::instructions::system::keccak256 (525 samples, 4.64%)</title><rect x="46.5764%" y="917" width="4.6444%" height="15" fill="rgb(253,91,0)" fg:x="5265" fg:w="525"/><text x="46.8264%" y="927.50">revm_..</text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="51.2916%" y="677" width="0.0177%" height="15" fill="rgb(252,175,49)" fg:x="5798" fg:w="2"/><text x="51.5416%" y="687.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.03%)</title><rect x="51.2916%" y="789" width="0.0265%" height="15" fill="rgb(246,150,1)" fg:x="5798" fg:w="3"/><text x="51.5416%" y="799.50"></text></g><g><title>exc_page_fault (3 samples, 0.03%)</title><rect x="51.2916%" y="773" width="0.0265%" height="15" fill="rgb(241,192,25)" fg:x="5798" fg:w="3"/><text x="51.5416%" y="783.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.03%)</title><rect x="51.2916%" y="757" width="0.0265%" height="15" fill="rgb(239,187,11)" fg:x="5798" fg:w="3"/><text x="51.5416%" y="767.50"></text></g><g><title>handle_mm_fault (3 samples, 0.03%)</title><rect x="51.2916%" y="741" width="0.0265%" height="15" fill="rgb(218,202,51)" fg:x="5798" fg:w="3"/><text x="51.5416%" y="751.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.03%)</title><rect x="51.2916%" y="725" width="0.0265%" height="15" fill="rgb(225,176,8)" fg:x="5798" fg:w="3"/><text x="51.5416%" y="735.50"></text></g><g><title>handle_pte_fault (3 samples, 0.03%)</title><rect x="51.2916%" y="709" width="0.0265%" height="15" fill="rgb(219,122,41)" fg:x="5798" fg:w="3"/><text x="51.5416%" y="719.50"></text></g><g><title>do_anonymous_page (3 samples, 0.03%)</title><rect x="51.2916%" y="693" width="0.0265%" height="15" fill="rgb(248,140,20)" fg:x="5798" fg:w="3"/><text x="51.5416%" y="703.50"></text></g><g><title>__count_memcg_events (2 samples, 0.02%)</title><rect x="51.5216%" y="629" width="0.0177%" height="15" fill="rgb(245,41,37)" fg:x="5824" fg:w="2"/><text x="51.7716%" y="639.50"></text></g><g><title>consume_stock (2 samples, 0.02%)</title><rect x="51.5481%" y="613" width="0.0177%" height="15" fill="rgb(235,82,39)" fg:x="5827" fg:w="2"/><text x="51.7981%" y="623.50"></text></g><g><title>charge_memcg (10 samples, 0.09%)</title><rect x="51.4862%" y="645" width="0.0885%" height="15" fill="rgb(230,108,42)" fg:x="5820" fg:w="10"/><text x="51.7362%" y="655.50"></text></g><g><title>try_charge_memcg (4 samples, 0.04%)</title><rect x="51.5393%" y="629" width="0.0354%" height="15" fill="rgb(215,150,50)" fg:x="5826" fg:w="4"/><text x="51.7893%" y="639.50"></text></g><g><title>__mem_cgroup_charge (36 samples, 0.32%)</title><rect x="51.4685%" y="661" width="0.3185%" height="15" fill="rgb(233,212,5)" fg:x="5818" fg:w="36"/><text x="51.7185%" y="671.50"></text></g><g><title>get_mem_cgroup_from_mm (24 samples, 0.21%)</title><rect x="51.5747%" y="645" width="0.2123%" height="15" fill="rgb(245,80,22)" fg:x="5830" fg:w="24"/><text x="51.8247%" y="655.50"></text></g><g><title>__rcu_read_unlock (2 samples, 0.02%)</title><rect x="51.8047%" y="661" width="0.0177%" height="15" fill="rgb(238,129,16)" fg:x="5856" fg:w="2"/><text x="52.0547%" y="671.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="51.8401%" y="613" width="0.0177%" height="15" fill="rgb(240,19,0)" fg:x="5860" fg:w="2"/><text x="52.0901%" y="623.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="51.8401%" y="597" width="0.0177%" height="15" fill="rgb(232,42,35)" fg:x="5860" fg:w="2"/><text x="52.0901%" y="607.50"></text></g><g><title>folio_add_lru_vma (4 samples, 0.04%)</title><rect x="51.8312%" y="661" width="0.0354%" height="15" fill="rgb(223,130,24)" fg:x="5859" fg:w="4"/><text x="52.0812%" y="671.50"></text></g><g><title>folio_add_lru (4 samples, 0.04%)</title><rect x="51.8312%" y="645" width="0.0354%" height="15" fill="rgb(237,16,22)" fg:x="5859" fg:w="4"/><text x="52.0812%" y="655.50"></text></g><g><title>folio_batch_move_lru (4 samples, 0.04%)</title><rect x="51.8312%" y="629" width="0.0354%" height="15" fill="rgb(248,192,20)" fg:x="5859" fg:w="4"/><text x="52.0812%" y="639.50"></text></g><g><title>__mod_lruvec_page_state (3 samples, 0.03%)</title><rect x="51.8666%" y="645" width="0.0265%" height="15" fill="rgb(233,167,2)" fg:x="5863" fg:w="3"/><text x="52.1166%" y="655.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.02%)</title><rect x="51.8754%" y="629" width="0.0177%" height="15" fill="rgb(252,71,44)" fg:x="5864" fg:w="2"/><text x="52.1254%" y="639.50"></text></g><g><title>folio_add_new_anon_rmap (4 samples, 0.04%)</title><rect x="51.8666%" y="661" width="0.0354%" height="15" fill="rgb(238,37,47)" fg:x="5863" fg:w="4"/><text x="52.1166%" y="671.50"></text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.03%)</title><rect x="51.9020%" y="661" width="0.0265%" height="15" fill="rgb(214,202,54)" fg:x="5867" fg:w="3"/><text x="52.1520%" y="671.50"></text></g><g><title>inc_mm_counter (3 samples, 0.03%)</title><rect x="51.9285%" y="661" width="0.0265%" height="15" fill="rgb(254,165,40)" fg:x="5870" fg:w="3"/><text x="52.1785%" y="671.50"></text></g><g><title>percpu_counter_add_batch (3 samples, 0.03%)</title><rect x="51.9285%" y="645" width="0.0265%" height="15" fill="rgb(246,173,38)" fg:x="5870" fg:w="3"/><text x="52.1785%" y="655.50"></text></g><g><title>_raw_spin_trylock (2 samples, 0.02%)</title><rect x="51.9816%" y="597" width="0.0177%" height="15" fill="rgb(215,3,27)" fg:x="5876" fg:w="2"/><text x="52.2316%" y="607.50"></text></g><g><title>__alloc_pages (17 samples, 0.15%)</title><rect x="51.9728%" y="629" width="0.1504%" height="15" fill="rgb(239,169,51)" fg:x="5875" fg:w="17"/><text x="52.2228%" y="639.50"></text></g><g><title>get_page_from_freelist (17 samples, 0.15%)</title><rect x="51.9728%" y="613" width="0.1504%" height="15" fill="rgb(212,5,25)" fg:x="5875" fg:w="17"/><text x="52.2228%" y="623.50"></text></g><g><title>rmqueue (13 samples, 0.12%)</title><rect x="52.0081%" y="597" width="0.1150%" height="15" fill="rgb(243,45,17)" fg:x="5879" fg:w="13"/><text x="52.2581%" y="607.50"></text></g><g><title>__rmqueue_pcplist (6 samples, 0.05%)</title><rect x="52.0701%" y="581" width="0.0531%" height="15" fill="rgb(242,97,9)" fg:x="5886" fg:w="6"/><text x="52.3201%" y="591.50"></text></g><g><title>rmqueue_bulk (3 samples, 0.03%)</title><rect x="52.0966%" y="565" width="0.0265%" height="15" fill="rgb(228,71,31)" fg:x="5889" fg:w="3"/><text x="52.3466%" y="575.50"></text></g><g><title>__folio_alloc (19 samples, 0.17%)</title><rect x="51.9728%" y="645" width="0.1681%" height="15" fill="rgb(252,184,16)" fg:x="5875" fg:w="19"/><text x="52.2228%" y="655.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.02%)</title><rect x="52.1231%" y="629" width="0.0177%" height="15" fill="rgb(236,169,46)" fg:x="5892" fg:w="2"/><text x="52.3731%" y="639.50"></text></g><g><title>do_anonymous_page (79 samples, 0.70%)</title><rect x="51.4508%" y="677" width="0.6989%" height="15" fill="rgb(207,17,47)" fg:x="5816" fg:w="79"/><text x="51.7008%" y="687.50"></text></g><g><title>vma_alloc_folio (22 samples, 0.19%)</title><rect x="51.9551%" y="661" width="0.1946%" height="15" fill="rgb(206,201,28)" fg:x="5873" fg:w="22"/><text x="52.2051%" y="671.50"></text></g><g><title>handle_mm_fault (84 samples, 0.74%)</title><rect x="51.4154%" y="725" width="0.7431%" height="15" fill="rgb(224,184,23)" fg:x="5812" fg:w="84"/><text x="51.6654%" y="735.50"></text></g><g><title>__handle_mm_fault (82 samples, 0.73%)</title><rect x="51.4331%" y="709" width="0.7254%" height="15" fill="rgb(208,139,48)" fg:x="5814" fg:w="82"/><text x="51.6831%" y="719.50"></text></g><g><title>handle_pte_fault (81 samples, 0.72%)</title><rect x="51.4420%" y="693" width="0.7166%" height="15" fill="rgb(208,130,10)" fg:x="5815" fg:w="81"/><text x="51.6920%" y="703.50"></text></g><g><title>lock_vma_under_rcu (7 samples, 0.06%)</title><rect x="52.1585%" y="725" width="0.0619%" height="15" fill="rgb(211,213,45)" fg:x="5896" fg:w="7"/><text x="52.4085%" y="735.50"></text></g><g><title>mas_walk (2 samples, 0.02%)</title><rect x="52.2028%" y="709" width="0.0177%" height="15" fill="rgb(235,100,30)" fg:x="5901" fg:w="2"/><text x="52.4528%" y="719.50"></text></g><g><title>mtree_range_walk (2 samples, 0.02%)</title><rect x="52.2028%" y="693" width="0.0177%" height="15" fill="rgb(206,144,31)" fg:x="5901" fg:w="2"/><text x="52.4528%" y="703.50"></text></g><g><title>do_user_addr_fault (94 samples, 0.83%)</title><rect x="51.3977%" y="741" width="0.8316%" height="15" fill="rgb(224,200,26)" fg:x="5810" fg:w="94"/><text x="51.6477%" y="751.50"></text></g><g><title>asm_exc_page_fault (97 samples, 0.86%)</title><rect x="51.3800%" y="773" width="0.8581%" height="15" fill="rgb(247,104,53)" fg:x="5808" fg:w="97"/><text x="51.6300%" y="783.50"></text></g><g><title>exc_page_fault (95 samples, 0.84%)</title><rect x="51.3977%" y="757" width="0.8404%" height="15" fill="rgb(220,14,17)" fg:x="5810" fg:w="95"/><text x="51.6477%" y="767.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.02%)</title><rect x="52.2381%" y="773" width="0.0177%" height="15" fill="rgb(230,140,40)" fg:x="5905" fg:w="2"/><text x="52.4881%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.02%)</title><rect x="52.2824%" y="741" width="0.0177%" height="15" fill="rgb(229,2,41)" fg:x="5910" fg:w="2"/><text x="52.5324%" y="751.50"></text></g><g><title>_raw_spin_lock_irq (5 samples, 0.04%)</title><rect x="52.4416%" y="645" width="0.0442%" height="15" fill="rgb(232,89,16)" fg:x="5928" fg:w="5"/><text x="52.6916%" y="655.50"></text></g><g><title>native_queued_spin_lock_slowpath (3 samples, 0.03%)</title><rect x="52.4593%" y="629" width="0.0265%" height="15" fill="rgb(247,59,52)" fg:x="5930" fg:w="3"/><text x="52.7093%" y="639.50"></text></g><g><title>osq_lock (746 samples, 6.60%)</title><rect x="52.5389%" y="629" width="6.5994%" height="15" fill="rgb(226,110,21)" fg:x="5939" fg:w="746"/><text x="52.7889%" y="639.50">osq_lock</text></g><g><title>osq_unlock (4 samples, 0.04%)</title><rect x="59.1384%" y="629" width="0.0354%" height="15" fill="rgb(224,176,43)" fg:x="6685" fg:w="4"/><text x="59.3884%" y="639.50"></text></g><g><title>rwsem_optimistic_spin (900 samples, 7.96%)</title><rect x="52.4858%" y="645" width="7.9618%" height="15" fill="rgb(221,73,6)" fg:x="5933" fg:w="900"/><text x="52.7358%" y="655.50">rwsem_optim..</text></g><g><title>rwsem_spin_on_owner (144 samples, 1.27%)</title><rect x="59.1737%" y="629" width="1.2739%" height="15" fill="rgb(232,78,19)" fg:x="6689" fg:w="144"/><text x="59.4237%" y="639.50"></text></g><g><title>rwsem_spin_on_owner (12 samples, 0.11%)</title><rect x="60.4476%" y="645" width="0.1062%" height="15" fill="rgb(233,112,48)" fg:x="6833" fg:w="12"/><text x="60.6976%" y="655.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.02%)</title><rect x="60.6069%" y="597" width="0.0177%" height="15" fill="rgb(243,131,47)" fg:x="6851" fg:w="2"/><text x="60.8569%" y="607.50"></text></g><g><title>asm_sysvec_irq_work (5 samples, 0.04%)</title><rect x="60.6334%" y="597" width="0.0442%" height="15" fill="rgb(226,51,1)" fg:x="6854" fg:w="5"/><text x="60.8834%" y="607.50"></text></g><g><title>update_cfs_group (2 samples, 0.02%)</title><rect x="60.7130%" y="549" width="0.0177%" height="15" fill="rgb(247,58,7)" fg:x="6863" fg:w="2"/><text x="60.9630%" y="559.50"></text></g><g><title>reweight_entity (2 samples, 0.02%)</title><rect x="60.7130%" y="533" width="0.0177%" height="15" fill="rgb(209,7,32)" fg:x="6863" fg:w="2"/><text x="60.9630%" y="543.50"></text></g><g><title>update_curr (4 samples, 0.04%)</title><rect x="60.7307%" y="549" width="0.0354%" height="15" fill="rgb(209,39,41)" fg:x="6865" fg:w="4"/><text x="60.9807%" y="559.50"></text></g><g><title>cpuacct_charge (2 samples, 0.02%)</title><rect x="60.7484%" y="533" width="0.0177%" height="15" fill="rgb(226,182,46)" fg:x="6867" fg:w="2"/><text x="60.9984%" y="543.50"></text></g><g><title>update_load_avg (2 samples, 0.02%)</title><rect x="60.7661%" y="549" width="0.0177%" height="15" fill="rgb(230,219,10)" fg:x="6869" fg:w="2"/><text x="61.0161%" y="559.50"></text></g><g><title>dequeue_entity (11 samples, 0.10%)</title><rect x="60.6953%" y="565" width="0.0973%" height="15" fill="rgb(227,175,30)" fg:x="6861" fg:w="11"/><text x="60.9453%" y="575.50"></text></g><g><title>dequeue_task (14 samples, 0.12%)</title><rect x="60.6776%" y="597" width="0.1238%" height="15" fill="rgb(217,2,50)" fg:x="6859" fg:w="14"/><text x="60.9276%" y="607.50"></text></g><g><title>dequeue_task_fair (14 samples, 0.12%)</title><rect x="60.6776%" y="581" width="0.1238%" height="15" fill="rgb(229,160,0)" fg:x="6859" fg:w="14"/><text x="60.9276%" y="591.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.04%)</title><rect x="61.9692%" y="549" width="0.0442%" height="15" fill="rgb(207,78,37)" fg:x="7005" fg:w="5"/><text x="62.2192%" y="559.50"></text></g><g><title>perf_ctx_enable (145 samples, 1.28%)</title><rect x="60.9784%" y="565" width="1.2827%" height="15" fill="rgb(225,57,0)" fg:x="6893" fg:w="145"/><text x="61.2284%" y="575.50"></text></g><g><title>x86_pmu_enable (27 samples, 0.24%)</title><rect x="62.0223%" y="549" width="0.2389%" height="15" fill="rgb(232,154,2)" fg:x="7011" fg:w="27"/><text x="62.2723%" y="559.50"></text></g><g><title>perf_pmu_nop_void (155 samples, 1.37%)</title><rect x="62.2611%" y="565" width="1.3712%" height="15" fill="rgb(241,212,25)" fg:x="7038" fg:w="155"/><text x="62.5111%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (334 samples, 2.95%)</title><rect x="60.8634%" y="581" width="2.9547%" height="15" fill="rgb(226,69,20)" fg:x="6880" fg:w="334"/><text x="61.1134%" y="591.50">__p..</text></g><g><title>x86_pmu_enable (21 samples, 0.19%)</title><rect x="63.6323%" y="565" width="0.1858%" height="15" fill="rgb(247,184,54)" fg:x="7193" fg:w="21"/><text x="63.8823%" y="575.50"></text></g><g><title>_raw_spin_unlock (20 samples, 0.18%)</title><rect x="63.8181%" y="581" width="0.1769%" height="15" fill="rgb(210,145,0)" fg:x="7214" fg:w="20"/><text x="64.0681%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (366 samples, 3.24%)</title><rect x="60.8015%" y="597" width="3.2378%" height="15" fill="rgb(253,82,12)" fg:x="6873" fg:w="366"/><text x="61.0515%" y="607.50">fin..</text></g><g><title>perf_ctx_enable (4 samples, 0.04%)</title><rect x="64.0039%" y="581" width="0.0354%" height="15" fill="rgb(245,42,11)" fg:x="7235" fg:w="4"/><text x="64.2539%" y="591.50"></text></g><g><title>load_balance (5 samples, 0.04%)</title><rect x="64.0393%" y="549" width="0.0442%" height="15" fill="rgb(219,147,32)" fg:x="7239" fg:w="5"/><text x="64.2893%" y="559.50"></text></g><g><title>find_busiest_group (4 samples, 0.04%)</title><rect x="64.0481%" y="533" width="0.0354%" height="15" fill="rgb(246,12,7)" fg:x="7240" fg:w="4"/><text x="64.2981%" y="543.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (4 samples, 0.04%)</title><rect x="64.0481%" y="517" width="0.0354%" height="15" fill="rgb(243,50,9)" fg:x="7240" fg:w="4"/><text x="64.2981%" y="527.50"></text></g><g><title>update_sg_lb_stats (2 samples, 0.02%)</title><rect x="64.0658%" y="501" width="0.0177%" height="15" fill="rgb(219,149,6)" fg:x="7242" fg:w="2"/><text x="64.3158%" y="511.50"></text></g><g><title>pick_next_task_fair (7 samples, 0.06%)</title><rect x="64.0393%" y="581" width="0.0619%" height="15" fill="rgb(241,51,42)" fg:x="7239" fg:w="7"/><text x="64.2893%" y="591.50"></text></g><g><title>newidle_balance (7 samples, 0.06%)</title><rect x="64.0393%" y="565" width="0.0619%" height="15" fill="rgb(226,128,27)" fg:x="7239" fg:w="7"/><text x="64.2893%" y="575.50"></text></g><g><title>pick_next_task (10 samples, 0.09%)</title><rect x="64.0393%" y="597" width="0.0885%" height="15" fill="rgb(244,144,4)" fg:x="7239" fg:w="10"/><text x="64.2893%" y="607.50"></text></g><g><title>put_prev_task_fair (3 samples, 0.03%)</title><rect x="64.1012%" y="581" width="0.0265%" height="15" fill="rgb(221,4,13)" fg:x="7246" fg:w="3"/><text x="64.3512%" y="591.50"></text></g><g><title>put_prev_entity (2 samples, 0.02%)</title><rect x="64.1100%" y="565" width="0.0177%" height="15" fill="rgb(208,170,28)" fg:x="7247" fg:w="2"/><text x="64.3600%" y="575.50"></text></g><g><title>prepare_task_switch (3 samples, 0.03%)</title><rect x="64.1277%" y="597" width="0.0265%" height="15" fill="rgb(226,131,13)" fg:x="7249" fg:w="3"/><text x="64.3777%" y="607.50"></text></g><g><title>psi_group_change (5 samples, 0.04%)</title><rect x="64.1720%" y="581" width="0.0442%" height="15" fill="rgb(215,72,41)" fg:x="7254" fg:w="5"/><text x="64.4220%" y="591.50"></text></g><g><title>psi_task_switch (7 samples, 0.06%)</title><rect x="64.1631%" y="597" width="0.0619%" height="15" fill="rgb(243,108,20)" fg:x="7253" fg:w="7"/><text x="64.4131%" y="607.50"></text></g><g><title>down_write_killable (1,342 samples, 11.87%)</title><rect x="52.3620%" y="677" width="11.8719%" height="15" fill="rgb(230,189,17)" fg:x="5919" fg:w="1342"/><text x="52.6120%" y="687.50">down_write_killable</text></g><g><title>rwsem_down_write_slowpath (1,341 samples, 11.86%)</title><rect x="52.3708%" y="661" width="11.8631%" height="15" fill="rgb(220,50,17)" fg:x="5920" fg:w="1341"/><text x="52.6208%" y="671.50">rwsem_down_write_s..</text></g><g><title>schedule_preempt_disabled (416 samples, 3.68%)</title><rect x="60.5538%" y="645" width="3.6801%" height="15" fill="rgb(248,152,48)" fg:x="6845" fg:w="416"/><text x="60.8038%" y="655.50">sche..</text></g><g><title>schedule (414 samples, 3.66%)</title><rect x="60.5715%" y="629" width="3.6624%" height="15" fill="rgb(244,91,11)" fg:x="6847" fg:w="414"/><text x="60.8215%" y="639.50">sche..</text></g><g><title>__schedule (413 samples, 3.65%)</title><rect x="60.5803%" y="613" width="3.6536%" height="15" fill="rgb(220,157,5)" fg:x="6848" fg:w="413"/><text x="60.8303%" y="623.50">__sc..</text></g><g><title>mas_find (4 samples, 0.04%)</title><rect x="64.2339%" y="677" width="0.0354%" height="15" fill="rgb(253,137,8)" fg:x="7261" fg:w="4"/><text x="64.4839%" y="687.50"></text></g><g><title>mas_walk (3 samples, 0.03%)</title><rect x="64.2427%" y="661" width="0.0265%" height="15" fill="rgb(217,137,51)" fg:x="7262" fg:w="3"/><text x="64.4927%" y="671.50"></text></g><g><title>__cond_resched (5 samples, 0.04%)</title><rect x="64.3224%" y="597" width="0.0442%" height="15" fill="rgb(218,209,53)" fg:x="7271" fg:w="5"/><text x="64.5724%" y="607.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="64.3224%" y="581" width="0.0442%" height="15" fill="rgb(249,137,25)" fg:x="7271" fg:w="5"/><text x="64.5724%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="64.3224%" y="565" width="0.0442%" height="15" fill="rgb(239,155,26)" fg:x="7271" fg:w="5"/><text x="64.5724%" y="575.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.04%)</title><rect x="64.3312%" y="549" width="0.0354%" height="15" fill="rgb(227,85,46)" fg:x="7272" fg:w="4"/><text x="64.5812%" y="559.50"></text></g><g><title>change_protection (10 samples, 0.09%)</title><rect x="64.2870%" y="661" width="0.0885%" height="15" fill="rgb(251,107,43)" fg:x="7267" fg:w="10"/><text x="64.5370%" y="671.50"></text></g><g><title>change_protection_range (10 samples, 0.09%)</title><rect x="64.2870%" y="645" width="0.0885%" height="15" fill="rgb(234,170,33)" fg:x="7267" fg:w="10"/><text x="64.5370%" y="655.50"></text></g><g><title>change_p4d_range (10 samples, 0.09%)</title><rect x="64.2870%" y="629" width="0.0885%" height="15" fill="rgb(206,29,35)" fg:x="7267" fg:w="10"/><text x="64.5370%" y="639.50"></text></g><g><title>change_pmd_range.isra.0 (10 samples, 0.09%)</title><rect x="64.2870%" y="613" width="0.0885%" height="15" fill="rgb(227,138,25)" fg:x="7267" fg:w="10"/><text x="64.5370%" y="623.50"></text></g><g><title>perf_event_mmap_output (2 samples, 0.02%)</title><rect x="64.4197%" y="613" width="0.0177%" height="15" fill="rgb(249,131,35)" fg:x="7282" fg:w="2"/><text x="64.6697%" y="623.50"></text></g><g><title>__perf_event__output_id_sample (3 samples, 0.03%)</title><rect x="64.6674%" y="581" width="0.0265%" height="15" fill="rgb(239,6,40)" fg:x="7310" fg:w="3"/><text x="64.9174%" y="591.50"></text></g><g><title>perf_output_copy (3 samples, 0.03%)</title><rect x="64.6674%" y="565" width="0.0265%" height="15" fill="rgb(246,136,47)" fg:x="7310" fg:w="3"/><text x="64.9174%" y="575.50"></text></g><g><title>__output_copy (2 samples, 0.02%)</title><rect x="64.6762%" y="549" width="0.0177%" height="15" fill="rgb(253,58,26)" fg:x="7311" fg:w="2"/><text x="64.9262%" y="559.50"></text></g><g><title>__task_pid_nr_ns (2 samples, 0.02%)</title><rect x="64.6939%" y="565" width="0.0177%" height="15" fill="rgb(237,141,10)" fg:x="7313" fg:w="2"/><text x="64.9439%" y="575.50"></text></g><g><title>__perf_event_header__init_id (3 samples, 0.03%)</title><rect x="64.6939%" y="581" width="0.0265%" height="15" fill="rgb(234,156,12)" fg:x="7313" fg:w="3"/><text x="64.9439%" y="591.50"></text></g><g><title>perf_output_begin (4 samples, 0.04%)</title><rect x="64.7205%" y="581" width="0.0354%" height="15" fill="rgb(243,224,36)" fg:x="7316" fg:w="4"/><text x="64.9705%" y="591.50"></text></g><g><title>__memcpy (3 samples, 0.03%)</title><rect x="64.7558%" y="565" width="0.0265%" height="15" fill="rgb(205,229,51)" fg:x="7320" fg:w="3"/><text x="65.0058%" y="575.50"></text></g><g><title>perf_output_copy (6 samples, 0.05%)</title><rect x="64.7558%" y="581" width="0.0531%" height="15" fill="rgb(223,189,4)" fg:x="7320" fg:w="6"/><text x="65.0058%" y="591.50"></text></g><g><title>__output_copy (3 samples, 0.03%)</title><rect x="64.7824%" y="565" width="0.0265%" height="15" fill="rgb(249,167,54)" fg:x="7323" fg:w="3"/><text x="65.0324%" y="575.50"></text></g><g><title>perf_event_mmap_output (20 samples, 0.18%)</title><rect x="64.6408%" y="597" width="0.1769%" height="15" fill="rgb(218,34,28)" fg:x="7307" fg:w="20"/><text x="64.8908%" y="607.50"></text></g><g><title>perf_event_mmap (50 samples, 0.44%)</title><rect x="64.3931%" y="661" width="0.4423%" height="15" fill="rgb(232,109,42)" fg:x="7279" fg:w="50"/><text x="64.6431%" y="671.50"></text></g><g><title>perf_event_mmap_event (50 samples, 0.44%)</title><rect x="64.3931%" y="645" width="0.4423%" height="15" fill="rgb(248,214,46)" fg:x="7279" fg:w="50"/><text x="64.6431%" y="655.50"></text></g><g><title>perf_iterate_sb.constprop.0 (48 samples, 0.42%)</title><rect x="64.4108%" y="629" width="0.4246%" height="15" fill="rgb(244,216,40)" fg:x="7281" fg:w="48"/><text x="64.6608%" y="639.50"></text></g><g><title>perf_iterate_ctx (45 samples, 0.40%)</title><rect x="64.4374%" y="613" width="0.3981%" height="15" fill="rgb(231,226,31)" fg:x="7284" fg:w="45"/><text x="64.6874%" y="623.50"></text></g><g><title>vm_get_page_prot (3 samples, 0.03%)</title><rect x="64.8443%" y="661" width="0.0265%" height="15" fill="rgb(238,38,43)" fg:x="7330" fg:w="3"/><text x="65.0943%" y="671.50"></text></g><g><title>__memset (3 samples, 0.03%)</title><rect x="64.9062%" y="613" width="0.0265%" height="15" fill="rgb(208,88,43)" fg:x="7337" fg:w="3"/><text x="65.1562%" y="623.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.04%)</title><rect x="65.0035%" y="533" width="0.0354%" height="15" fill="rgb(205,136,37)" fg:x="7348" fg:w="4"/><text x="65.2535%" y="543.50"></text></g><g><title>kmem_cache_alloc (21 samples, 0.19%)</title><rect x="64.9328%" y="613" width="0.1858%" height="15" fill="rgb(237,34,14)" fg:x="7340" fg:w="21"/><text x="65.1828%" y="623.50"></text></g><g><title>__cond_resched (18 samples, 0.16%)</title><rect x="64.9593%" y="597" width="0.1592%" height="15" fill="rgb(236,193,44)" fg:x="7343" fg:w="18"/><text x="65.2093%" y="607.50"></text></g><g><title>__schedule (18 samples, 0.16%)</title><rect x="64.9593%" y="581" width="0.1592%" height="15" fill="rgb(231,48,10)" fg:x="7343" fg:w="18"/><text x="65.2093%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (17 samples, 0.15%)</title><rect x="64.9682%" y="565" width="0.1504%" height="15" fill="rgb(213,141,34)" fg:x="7344" fg:w="17"/><text x="65.2182%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (17 samples, 0.15%)</title><rect x="64.9682%" y="549" width="0.1504%" height="15" fill="rgb(249,130,34)" fg:x="7344" fg:w="17"/><text x="65.2182%" y="559.50"></text></g><g><title>perf_ctx_enable (9 samples, 0.08%)</title><rect x="65.0389%" y="533" width="0.0796%" height="15" fill="rgb(219,42,41)" fg:x="7352" fg:w="9"/><text x="65.2889%" y="543.50"></text></g><g><title>__kmem_cache_alloc_bulk (9 samples, 0.08%)</title><rect x="65.1362%" y="597" width="0.0796%" height="15" fill="rgb(224,100,54)" fg:x="7363" fg:w="9"/><text x="65.3862%" y="607.50"></text></g><g><title>kmem_cache_alloc_bulk (12 samples, 0.11%)</title><rect x="65.1185%" y="613" width="0.1062%" height="15" fill="rgb(229,200,27)" fg:x="7361" fg:w="12"/><text x="65.3685%" y="623.50"></text></g><g><title>mas_preallocate (37 samples, 0.33%)</title><rect x="64.9062%" y="645" width="0.3273%" height="15" fill="rgb(217,118,10)" fg:x="7337" fg:w="37"/><text x="65.1562%" y="655.50"></text></g><g><title>mas_alloc_nodes (37 samples, 0.33%)</title><rect x="64.9062%" y="629" width="0.3273%" height="15" fill="rgb(206,22,3)" fg:x="7337" fg:w="37"/><text x="65.1562%" y="639.50"></text></g><g><title>kmem_cache_free (2 samples, 0.02%)</title><rect x="65.2512%" y="613" width="0.0177%" height="15" fill="rgb(232,163,46)" fg:x="7376" fg:w="2"/><text x="65.5012%" y="623.50"></text></g><g><title>mas_destroy (9 samples, 0.08%)</title><rect x="65.2512%" y="629" width="0.0796%" height="15" fill="rgb(206,95,13)" fg:x="7376" fg:w="9"/><text x="65.5012%" y="639.50"></text></g><g><title>kmem_cache_free_bulk (7 samples, 0.06%)</title><rect x="65.2689%" y="613" width="0.0619%" height="15" fill="rgb(253,154,18)" fg:x="7378" fg:w="7"/><text x="65.5189%" y="623.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (7 samples, 0.06%)</title><rect x="65.2689%" y="597" width="0.0619%" height="15" fill="rgb(219,32,23)" fg:x="7378" fg:w="7"/><text x="65.5189%" y="607.50"></text></g><g><title>build_detached_freelist (3 samples, 0.03%)</title><rect x="65.3043%" y="581" width="0.0265%" height="15" fill="rgb(230,191,45)" fg:x="7382" fg:w="3"/><text x="65.5543%" y="591.50"></text></g><g><title>mas_store_prealloc (12 samples, 0.11%)</title><rect x="65.2424%" y="645" width="0.1062%" height="15" fill="rgb(229,64,36)" fg:x="7375" fg:w="12"/><text x="65.4924%" y="655.50"></text></g><g><title>mas_wr_store_entry.isra.0 (2 samples, 0.02%)</title><rect x="65.3309%" y="629" width="0.0177%" height="15" fill="rgb(205,129,25)" fg:x="7385" fg:w="2"/><text x="65.5809%" y="639.50"></text></g><g><title>vma_complete (3 samples, 0.03%)</title><rect x="65.3751%" y="645" width="0.0265%" height="15" fill="rgb(254,112,7)" fg:x="7390" fg:w="3"/><text x="65.6251%" y="655.50"></text></g><g><title>down_write (3 samples, 0.03%)</title><rect x="65.4370%" y="629" width="0.0265%" height="15" fill="rgb(226,53,48)" fg:x="7397" fg:w="3"/><text x="65.6870%" y="639.50"></text></g><g><title>mprotect_fixup (136 samples, 1.20%)</title><rect x="64.2693%" y="677" width="1.2031%" height="15" fill="rgb(214,153,38)" fg:x="7265" fg:w="136"/><text x="64.5193%" y="687.50"></text></g><g><title>vma_merge (67 samples, 0.59%)</title><rect x="64.8797%" y="661" width="0.5927%" height="15" fill="rgb(243,101,7)" fg:x="7334" fg:w="67"/><text x="65.1297%" y="671.50"></text></g><g><title>vma_prepare (8 samples, 0.07%)</title><rect x="65.4016%" y="645" width="0.0708%" height="15" fill="rgb(240,140,22)" fg:x="7393" fg:w="8"/><text x="65.6516%" y="655.50"></text></g><g><title>tlb_gather_mmu (3 samples, 0.03%)</title><rect x="65.4812%" y="677" width="0.0265%" height="15" fill="rgb(235,114,2)" fg:x="7402" fg:w="3"/><text x="65.7312%" y="687.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="65.5343%" y="645" width="0.0177%" height="15" fill="rgb(242,59,12)" fg:x="7408" fg:w="2"/><text x="65.7843%" y="655.50"></text></g><g><title>__raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="65.5343%" y="629" width="0.0177%" height="15" fill="rgb(252,134,9)" fg:x="7408" fg:w="2"/><text x="65.7843%" y="639.50"></text></g><g><title>rwsem_mark_wake (3 samples, 0.03%)</title><rect x="65.5609%" y="645" width="0.0265%" height="15" fill="rgb(236,4,44)" fg:x="7411" fg:w="3"/><text x="65.8109%" y="655.50"></text></g><g><title>wake_q_add (3 samples, 0.03%)</title><rect x="65.5874%" y="645" width="0.0265%" height="15" fill="rgb(254,172,41)" fg:x="7414" fg:w="3"/><text x="65.8374%" y="655.50"></text></g><g><title>_raw_spin_lock_irqsave (3 samples, 0.03%)</title><rect x="65.6405%" y="613" width="0.0265%" height="15" fill="rgb(244,63,20)" fg:x="7420" fg:w="3"/><text x="65.8905%" y="623.50"></text></g><g><title>__raw_spin_lock_irqsave (3 samples, 0.03%)</title><rect x="65.6405%" y="597" width="0.0265%" height="15" fill="rgb(250,73,31)" fg:x="7420" fg:w="3"/><text x="65.8905%" y="607.50"></text></g><g><title>do_mprotect_pkey (1,511 samples, 13.37%)</title><rect x="52.3178%" y="693" width="13.3669%" height="15" fill="rgb(241,38,36)" fg:x="5914" fg:w="1511"/><text x="52.5678%" y="703.50">do_mprotect_pkey</text></g><g><title>up_write (20 samples, 0.18%)</title><rect x="65.5078%" y="677" width="0.1769%" height="15" fill="rgb(245,211,2)" fg:x="7405" fg:w="20"/><text x="65.7578%" y="687.50"></text></g><g><title>rwsem_wake.isra.0 (18 samples, 0.16%)</title><rect x="65.5255%" y="661" width="0.1592%" height="15" fill="rgb(206,120,28)" fg:x="7407" fg:w="18"/><text x="65.7755%" y="671.50"></text></g><g><title>wake_up_q (8 samples, 0.07%)</title><rect x="65.6139%" y="645" width="0.0708%" height="15" fill="rgb(211,59,34)" fg:x="7417" fg:w="8"/><text x="65.8639%" y="655.50"></text></g><g><title>try_to_wake_up (7 samples, 0.06%)</title><rect x="65.6228%" y="629" width="0.0619%" height="15" fill="rgb(233,168,5)" fg:x="7418" fg:w="7"/><text x="65.8728%" y="639.50"></text></g><g><title>__x64_sys_mprotect (1,514 samples, 13.39%)</title><rect x="52.3089%" y="709" width="13.3935%" height="15" fill="rgb(234,33,13)" fg:x="5913" fg:w="1514"/><text x="52.5589%" y="719.50">__x64_sys_mprotect</text></g><g><title>exit_to_user_mode_loop (9 samples, 0.08%)</title><rect x="65.7289%" y="677" width="0.0796%" height="15" fill="rgb(231,150,26)" fg:x="7430" fg:w="9"/><text x="65.9789%" y="687.50"></text></g><g><title>schedule (9 samples, 0.08%)</title><rect x="65.7289%" y="661" width="0.0796%" height="15" fill="rgb(217,191,4)" fg:x="7430" fg:w="9"/><text x="65.9789%" y="671.50"></text></g><g><title>__schedule (9 samples, 0.08%)</title><rect x="65.7289%" y="645" width="0.0796%" height="15" fill="rgb(246,198,38)" fg:x="7430" fg:w="9"/><text x="65.9789%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (9 samples, 0.08%)</title><rect x="65.7289%" y="629" width="0.0796%" height="15" fill="rgb(245,64,37)" fg:x="7430" fg:w="9"/><text x="65.9789%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.08%)</title><rect x="65.7289%" y="613" width="0.0796%" height="15" fill="rgb(250,30,36)" fg:x="7430" fg:w="9"/><text x="65.9789%" y="623.50"></text></g><g><title>perf_pmu_nop_void (9 samples, 0.08%)</title><rect x="65.7289%" y="597" width="0.0796%" height="15" fill="rgb(217,86,53)" fg:x="7430" fg:w="9"/><text x="65.9789%" y="607.50"></text></g><g><title>do_syscall_64 (1,528 samples, 13.52%)</title><rect x="52.3001%" y="725" width="13.5173%" height="15" fill="rgb(228,157,16)" fg:x="5912" fg:w="1528"/><text x="52.5501%" y="735.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (12 samples, 0.11%)</title><rect x="65.7113%" y="709" width="0.1062%" height="15" fill="rgb(217,59,31)" fg:x="7428" fg:w="12"/><text x="65.9613%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (11 samples, 0.10%)</title><rect x="65.7201%" y="693" width="0.0973%" height="15" fill="rgb(237,138,41)" fg:x="7429" fg:w="11"/><text x="65.9701%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,529 samples, 13.53%)</title><rect x="52.3001%" y="741" width="13.5262%" height="15" fill="rgb(227,91,49)" fg:x="5912" fg:w="1529"/><text x="52.5501%" y="751.50">entry_SYSCALL_64_aft..</text></g><g><title>grow_heap (1,536 samples, 13.59%)</title><rect x="52.2558%" y="773" width="13.5881%" height="15" fill="rgb(247,21,44)" fg:x="5907" fg:w="1536"/><text x="52.5058%" y="783.50">grow_heap</text></g><g><title>__GI_mprotect (1,536 samples, 13.59%)</title><rect x="52.2558%" y="757" width="13.5881%" height="15" fill="rgb(219,210,51)" fg:x="5907" fg:w="1536"/><text x="52.5058%" y="767.50">__GI_mprotect</text></g><g><title>error_entry (2 samples, 0.02%)</title><rect x="65.8263%" y="741" width="0.0177%" height="15" fill="rgb(209,140,6)" fg:x="7441" fg:w="2"/><text x="66.0763%" y="751.50"></text></g><g><title>_int_malloc (1,655 samples, 14.64%)</title><rect x="51.2739%" y="805" width="14.6408%" height="15" fill="rgb(221,188,24)" fg:x="5796" fg:w="1655"/><text x="51.5239%" y="815.50">_int_malloc</text></g><g><title>sysmalloc (1,650 samples, 14.60%)</title><rect x="51.3181%" y="789" width="14.5966%" height="15" fill="rgb(232,154,20)" fg:x="5801" fg:w="1650"/><text x="51.5681%" y="799.50">sysmalloc</text></g><g><title>sync_regs (8 samples, 0.07%)</title><rect x="65.8439%" y="773" width="0.0708%" height="15" fill="rgb(244,137,50)" fg:x="7443" fg:w="8"/><text x="66.0939%" y="783.50"></text></g><g><title>__GI___libc_malloc (1,660 samples, 14.69%)</title><rect x="51.2385%" y="821" width="14.6851%" height="15" fill="rgb(225,185,43)" fg:x="5792" fg:w="1660"/><text x="51.4885%" y="831.50">__GI___libc_malloc</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::run_the_loop (3,641 samples, 32.21%)</title><rect x="33.7314%" y="981" width="32.2098%" height="15" fill="rgb(213,205,38)" fg:x="3813" fg:w="3641"/><text x="33.9814%" y="991.50">revm::evm::Evm&lt;EXT,DB&gt;::run_the_loop</text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::new (1,663 samples, 14.71%)</title><rect x="51.2297%" y="965" width="14.7116%" height="15" fill="rgb(236,73,12)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="975.50">revm_interpreter::inte..</text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::with_capacity (1,663 samples, 14.71%)</title><rect x="51.2297%" y="949" width="14.7116%" height="15" fill="rgb(235,219,13)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="959.50">revm_interpreter::inte..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,663 samples, 14.71%)</title><rect x="51.2297%" y="933" width="14.7116%" height="15" fill="rgb(218,59,36)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="943.50">alloc::vec::Vec&lt;T&gt;::wi..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,663 samples, 14.71%)</title><rect x="51.2297%" y="917" width="14.7116%" height="15" fill="rgb(205,110,39)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="927.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,663 samples, 14.71%)</title><rect x="51.2297%" y="901" width="14.7116%" height="15" fill="rgb(218,206,42)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="911.50">alloc::raw_vec::RawVec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,663 samples, 14.71%)</title><rect x="51.2297%" y="885" width="14.7116%" height="15" fill="rgb(248,125,24)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="895.50">alloc::raw_vec::RawVec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,663 samples, 14.71%)</title><rect x="51.2297%" y="869" width="14.7116%" height="15" fill="rgb(242,28,27)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="879.50">&lt;alloc::alloc::Global ..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,663 samples, 14.71%)</title><rect x="51.2297%" y="853" width="14.7116%" height="15" fill="rgb(216,228,15)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="863.50">alloc::alloc::Global::..</text></g><g><title>alloc::alloc::alloc (1,663 samples, 14.71%)</title><rect x="51.2297%" y="837" width="14.7116%" height="15" fill="rgb(235,116,46)" fg:x="5791" fg:w="1663"/><text x="51.4797%" y="847.50">alloc::alloc::alloc</text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="65.9236%" y="821" width="0.0177%" height="15" fill="rgb(224,18,32)" fg:x="7452" fg:w="2"/><text x="66.1736%" y="831.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="65.9236%" y="805" width="0.0177%" height="15" fill="rgb(252,5,12)" fg:x="7452" fg:w="2"/><text x="66.1736%" y="815.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::start_the_loop (3,683 samples, 32.58%)</title><rect x="33.4483%" y="997" width="32.5814%" height="15" fill="rgb(251,36,5)" fg:x="3781" fg:w="3683"/><text x="33.6983%" y="1007.50">revm::evm::Evm&lt;EXT,DB&gt;::start_the_loop</text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::set_instruction_table (10 samples, 0.09%)</title><rect x="65.9413%" y="981" width="0.0885%" height="15" fill="rgb(217,53,14)" fg:x="7454" fg:w="10"/><text x="66.1913%" y="991.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.09%)</title><rect x="65.9413%" y="965" width="0.0885%" height="15" fill="rgb(215,86,45)" fg:x="7454" fg:w="10"/><text x="66.1913%" y="975.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (3 samples, 0.03%)</title><rect x="66.0297%" y="965" width="0.0265%" height="15" fill="rgb(242,169,11)" fg:x="7464" fg:w="3"/><text x="66.2797%" y="975.50"></text></g><g><title>&lt;revm_interpreter::inner_models::CallInputs as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="66.0297%" y="949" width="0.0265%" height="15" fill="rgb(211,213,45)" fg:x="7464" fg:w="3"/><text x="66.2797%" y="959.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="66.0297%" y="981" width="0.0531%" height="15" fill="rgb(205,88,11)" fg:x="7464" fg:w="6"/><text x="66.2797%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (3 samples, 0.03%)</title><rect x="66.0563%" y="965" width="0.0265%" height="15" fill="rgb(252,69,26)" fg:x="7467" fg:w="3"/><text x="66.3063%" y="975.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (3 samples, 0.03%)</title><rect x="66.0563%" y="949" width="0.0265%" height="15" fill="rgb(246,123,37)" fg:x="7467" fg:w="3"/><text x="66.3063%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="66.0563%" y="933" width="0.0265%" height="15" fill="rgb(212,205,5)" fg:x="7467" fg:w="3"/><text x="66.3063%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="66.0563%" y="917" width="0.0265%" height="15" fill="rgb(253,148,0)" fg:x="7467" fg:w="3"/><text x="66.3063%" y="927.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="66.0563%" y="901" width="0.0265%" height="15" fill="rgb(239,22,4)" fg:x="7467" fg:w="3"/><text x="66.3063%" y="911.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="66.0651%" y="885" width="0.0177%" height="15" fill="rgb(226,26,53)" fg:x="7468" fg:w="2"/><text x="66.3151%" y="895.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="66.0651%" y="869" width="0.0177%" height="15" fill="rgb(225,229,45)" fg:x="7468" fg:w="2"/><text x="66.3151%" y="879.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="66.0651%" y="853" width="0.0177%" height="15" fill="rgb(220,60,37)" fg:x="7468" fg:w="2"/><text x="66.3151%" y="863.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="66.0828%" y="965" width="0.0442%" height="15" fill="rgb(217,180,35)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="975.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="66.0828%" y="949" width="0.0442%" height="15" fill="rgb(229,7,53)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="959.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="66.0828%" y="933" width="0.0442%" height="15" fill="rgb(254,137,3)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="943.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="66.0828%" y="917" width="0.0442%" height="15" fill="rgb(215,140,41)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="927.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="66.0828%" y="901" width="0.0442%" height="15" fill="rgb(250,80,15)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="911.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="66.0828%" y="885" width="0.0442%" height="15" fill="rgb(252,191,6)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="895.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="66.0828%" y="869" width="0.0442%" height="15" fill="rgb(246,217,18)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="879.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="66.0828%" y="853" width="0.0442%" height="15" fill="rgb(223,93,7)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="863.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="66.0828%" y="837" width="0.0442%" height="15" fill="rgb(225,55,52)" fg:x="7470" fg:w="5"/><text x="66.3328%" y="847.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="66.0916%" y="821" width="0.0354%" height="15" fill="rgb(240,31,24)" fg:x="7471" fg:w="4"/><text x="66.3416%" y="831.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.04%)</title><rect x="66.0916%" y="805" width="0.0354%" height="15" fill="rgb(205,56,52)" fg:x="7471" fg:w="4"/><text x="66.3416%" y="815.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="66.1270%" y="933" width="0.0177%" height="15" fill="rgb(246,146,12)" fg:x="7475" fg:w="2"/><text x="66.3770%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="66.1270%" y="917" width="0.0177%" height="15" fill="rgb(239,84,36)" fg:x="7475" fg:w="2"/><text x="66.3770%" y="927.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="66.1270%" y="901" width="0.0177%" height="15" fill="rgb(207,41,40)" fg:x="7475" fg:w="2"/><text x="66.3770%" y="911.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="66.1270%" y="885" width="0.0177%" height="15" fill="rgb(241,179,25)" fg:x="7475" fg:w="2"/><text x="66.3770%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (7 samples, 0.06%)</title><rect x="66.1270%" y="949" width="0.0619%" height="15" fill="rgb(210,0,34)" fg:x="7475" fg:w="7"/><text x="66.3770%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::inner_models::CallInputs&gt; (5 samples, 0.04%)</title><rect x="66.1447%" y="933" width="0.0442%" height="15" fill="rgb(225,217,29)" fg:x="7477" fg:w="5"/><text x="66.3947%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (5 samples, 0.04%)</title><rect x="66.1447%" y="917" width="0.0442%" height="15" fill="rgb(216,191,38)" fg:x="7477" fg:w="5"/><text x="66.3947%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (5 samples, 0.04%)</title><rect x="66.1447%" y="901" width="0.0442%" height="15" fill="rgb(232,140,52)" fg:x="7477" fg:w="5"/><text x="66.3947%" y="911.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="66.1447%" y="885" width="0.0442%" height="15" fill="rgb(223,158,51)" fg:x="7477" fg:w="5"/><text x="66.3947%" y="895.50"></text></g><g><title>bytes::bytes::shared_drop (4 samples, 0.04%)</title><rect x="66.1536%" y="869" width="0.0354%" height="15" fill="rgb(235,29,51)" fg:x="7478" fg:w="4"/><text x="66.4036%" y="879.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (4 samples, 0.04%)</title><rect x="66.1536%" y="853" width="0.0354%" height="15" fill="rgb(215,181,18)" fg:x="7478" fg:w="4"/><text x="66.4036%" y="863.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (4 samples, 0.04%)</title><rect x="66.1536%" y="837" width="0.0354%" height="15" fill="rgb(227,125,34)" fg:x="7478" fg:w="4"/><text x="66.4036%" y="847.50"></text></g><g><title>bytes::bytes::release_shared (3 samples, 0.03%)</title><rect x="66.1624%" y="821" width="0.0265%" height="15" fill="rgb(230,197,49)" fg:x="7479" fg:w="3"/><text x="66.4124%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="66.1624%" y="805" width="0.0265%" height="15" fill="rgb(239,141,16)" fg:x="7479" fg:w="3"/><text x="66.4124%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="66.1624%" y="789" width="0.0265%" height="15" fill="rgb(225,105,43)" fg:x="7479" fg:w="3"/><text x="66.4124%" y="799.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="66.2332%" y="709" width="0.0442%" height="15" fill="rgb(214,131,14)" fg:x="7487" fg:w="5"/><text x="66.4832%" y="719.50"></text></g><g><title>asm_sysvec_reschedule_ipi (10 samples, 0.09%)</title><rect x="66.2243%" y="869" width="0.0885%" height="15" fill="rgb(229,177,11)" fg:x="7486" fg:w="10"/><text x="66.4743%" y="879.50"></text></g><g><title>sysvec_reschedule_ipi (10 samples, 0.09%)</title><rect x="66.2243%" y="853" width="0.0885%" height="15" fill="rgb(231,180,14)" fg:x="7486" fg:w="10"/><text x="66.4743%" y="863.50"></text></g><g><title>irqentry_exit (10 samples, 0.09%)</title><rect x="66.2243%" y="837" width="0.0885%" height="15" fill="rgb(232,88,2)" fg:x="7486" fg:w="10"/><text x="66.4743%" y="847.50"></text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.09%)</title><rect x="66.2243%" y="821" width="0.0885%" height="15" fill="rgb(205,220,8)" fg:x="7486" fg:w="10"/><text x="66.4743%" y="831.50"></text></g><g><title>exit_to_user_mode_prepare (10 samples, 0.09%)</title><rect x="66.2243%" y="805" width="0.0885%" height="15" fill="rgb(225,23,53)" fg:x="7486" fg:w="10"/><text x="66.4743%" y="815.50"></text></g><g><title>exit_to_user_mode_loop (10 samples, 0.09%)</title><rect x="66.2243%" y="789" width="0.0885%" height="15" fill="rgb(213,62,29)" fg:x="7486" fg:w="10"/><text x="66.4743%" y="799.50"></text></g><g><title>schedule (9 samples, 0.08%)</title><rect x="66.2332%" y="773" width="0.0796%" height="15" fill="rgb(227,75,7)" fg:x="7487" fg:w="9"/><text x="66.4832%" y="783.50"></text></g><g><title>__schedule (9 samples, 0.08%)</title><rect x="66.2332%" y="757" width="0.0796%" height="15" fill="rgb(207,105,14)" fg:x="7487" fg:w="9"/><text x="66.4832%" y="767.50"></text></g><g><title>finish_task_switch.isra.0 (9 samples, 0.08%)</title><rect x="66.2332%" y="741" width="0.0796%" height="15" fill="rgb(245,62,29)" fg:x="7487" fg:w="9"/><text x="66.4832%" y="751.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.08%)</title><rect x="66.2332%" y="725" width="0.0796%" height="15" fill="rgb(236,202,4)" fg:x="7487" fg:w="9"/><text x="66.4832%" y="735.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.04%)</title><rect x="66.2774%" y="709" width="0.0354%" height="15" fill="rgb(250,67,1)" fg:x="7492" fg:w="4"/><text x="66.5274%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (14 samples, 0.12%)</title><rect x="66.2155%" y="933" width="0.1238%" height="15" fill="rgb(253,115,44)" fg:x="7485" fg:w="14"/><text x="66.4655%" y="943.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (13 samples, 0.12%)</title><rect x="66.2243%" y="917" width="0.1150%" height="15" fill="rgb(251,139,18)" fg:x="7486" fg:w="13"/><text x="66.4743%" y="927.50"></text></g><g><title>bytes::bytes::shared_clone (13 samples, 0.12%)</title><rect x="66.2243%" y="901" width="0.1150%" height="15" fill="rgb(218,22,32)" fg:x="7486" fg:w="13"/><text x="66.4743%" y="911.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (13 samples, 0.12%)</title><rect x="66.2243%" y="885" width="0.1150%" height="15" fill="rgb(243,53,5)" fg:x="7486" fg:w="13"/><text x="66.4743%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.03%)</title><rect x="66.3128%" y="869" width="0.0265%" height="15" fill="rgb(227,56,16)" fg:x="7496" fg:w="3"/><text x="66.5628%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.03%)</title><rect x="66.3128%" y="853" width="0.0265%" height="15" fill="rgb(245,53,0)" fg:x="7496" fg:w="3"/><text x="66.5628%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="66.3393%" y="933" width="0.0177%" height="15" fill="rgb(216,170,35)" fg:x="7499" fg:w="2"/><text x="66.5893%" y="943.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="66.3659%" y="853" width="0.0531%" height="15" fill="rgb(211,200,8)" fg:x="7502" fg:w="6"/><text x="66.6159%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="66.3659%" y="837" width="0.0531%" height="15" fill="rgb(228,204,44)" fg:x="7502" fg:w="6"/><text x="66.6159%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.05%)</title><rect x="66.3659%" y="821" width="0.0531%" height="15" fill="rgb(214,121,17)" fg:x="7502" fg:w="6"/><text x="66.6159%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="66.3659%" y="805" width="0.0531%" height="15" fill="rgb(233,64,38)" fg:x="7502" fg:w="6"/><text x="66.6159%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="66.3659%" y="789" width="0.0531%" height="15" fill="rgb(253,54,19)" fg:x="7502" fg:w="6"/><text x="66.6159%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.05%)</title><rect x="66.3659%" y="773" width="0.0531%" height="15" fill="rgb(253,94,18)" fg:x="7502" fg:w="6"/><text x="66.6159%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.05%)</title><rect x="66.3659%" y="757" width="0.0531%" height="15" fill="rgb(227,57,52)" fg:x="7502" fg:w="6"/><text x="66.6159%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (5 samples, 0.04%)</title><rect x="66.3747%" y="741" width="0.0442%" height="15" fill="rgb(230,228,50)" fg:x="7503" fg:w="5"/><text x="66.6247%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="66.3747%" y="725" width="0.0442%" height="15" fill="rgb(217,205,27)" fg:x="7503" fg:w="5"/><text x="66.6247%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="66.3747%" y="709" width="0.0442%" height="15" fill="rgb(252,71,50)" fg:x="7503" fg:w="5"/><text x="66.6247%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="66.3747%" y="693" width="0.0442%" height="15" fill="rgb(209,86,4)" fg:x="7503" fg:w="5"/><text x="66.6247%" y="703.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::call_precompile (7 samples, 0.06%)</title><rect x="66.3659%" y="933" width="0.0619%" height="15" fill="rgb(229,94,0)" fg:x="7502" fg:w="7"/><text x="66.6159%" y="943.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::call (7 samples, 0.06%)</title><rect x="66.3659%" y="917" width="0.0619%" height="15" fill="rgb(252,223,21)" fg:x="7502" fg:w="7"/><text x="66.6159%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (7 samples, 0.06%)</title><rect x="66.3659%" y="901" width="0.0619%" height="15" fill="rgb(230,210,4)" fg:x="7502" fg:w="7"/><text x="66.6159%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7 samples, 0.06%)</title><rect x="66.3659%" y="885" width="0.0619%" height="15" fill="rgb(240,149,38)" fg:x="7502" fg:w="7"/><text x="66.6159%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (7 samples, 0.06%)</title><rect x="66.3659%" y="869" width="0.0619%" height="15" fill="rgb(254,105,20)" fg:x="7502" fg:w="7"/><text x="66.6159%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="66.4278%" y="837" width="0.0177%" height="15" fill="rgb(253,87,46)" fg:x="7509" fg:w="2"/><text x="66.6778%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="66.4278%" y="821" width="0.0177%" height="15" fill="rgb(253,116,33)" fg:x="7509" fg:w="2"/><text x="66.6778%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="66.4278%" y="805" width="0.0177%" height="15" fill="rgb(229,198,5)" fg:x="7509" fg:w="2"/><text x="66.6778%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="66.4278%" y="789" width="0.0177%" height="15" fill="rgb(242,38,37)" fg:x="7509" fg:w="2"/><text x="66.6778%" y="799.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::load_account (4 samples, 0.04%)</title><rect x="66.4278%" y="933" width="0.0354%" height="15" fill="rgb(242,69,53)" fg:x="7509" fg:w="4"/><text x="66.6778%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (4 samples, 0.04%)</title><rect x="66.4278%" y="917" width="0.0354%" height="15" fill="rgb(249,80,16)" fg:x="7509" fg:w="4"/><text x="66.6778%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.04%)</title><rect x="66.4278%" y="901" width="0.0354%" height="15" fill="rgb(206,128,11)" fg:x="7509" fg:w="4"/><text x="66.6778%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.04%)</title><rect x="66.4278%" y="885" width="0.0354%" height="15" fill="rgb(212,35,20)" fg:x="7509" fg:w="4"/><text x="66.6778%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="66.4278%" y="869" width="0.0354%" height="15" fill="rgb(236,79,13)" fg:x="7509" fg:w="4"/><text x="66.6778%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="66.4278%" y="853" width="0.0354%" height="15" fill="rgb(233,123,3)" fg:x="7509" fg:w="4"/><text x="66.6778%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="66.4455%" y="837" width="0.0177%" height="15" fill="rgb(214,93,52)" fg:x="7511" fg:w="2"/><text x="66.6955%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="66.4455%" y="821" width="0.0177%" height="15" fill="rgb(251,37,40)" fg:x="7511" fg:w="2"/><text x="66.6955%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="66.4455%" y="805" width="0.0177%" height="15" fill="rgb(227,80,54)" fg:x="7511" fg:w="2"/><text x="66.6955%" y="815.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="66.4455%" y="789" width="0.0177%" height="15" fill="rgb(254,48,11)" fg:x="7511" fg:w="2"/><text x="66.6955%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="66.4455%" y="773" width="0.0177%" height="15" fill="rgb(235,193,26)" fg:x="7511" fg:w="2"/><text x="66.6955%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="66.4632%" y="901" width="0.0265%" height="15" fill="rgb(229,99,21)" fg:x="7513" fg:w="3"/><text x="66.7132%" y="911.50"></text></g><g><title>revm::frame::FrameOrResult::new_call_frame (5 samples, 0.04%)</title><rect x="66.4632%" y="933" width="0.0442%" height="15" fill="rgb(211,140,41)" fg:x="7513" fg:w="5"/><text x="66.7132%" y="943.50"></text></g><g><title>revm::frame::Frame::new_call (5 samples, 0.04%)</title><rect x="66.4632%" y="917" width="0.0442%" height="15" fill="rgb(240,227,30)" fg:x="7513" fg:w="5"/><text x="66.7132%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="66.4897%" y="901" width="0.0177%" height="15" fill="rgb(215,224,45)" fg:x="7516" fg:w="2"/><text x="66.7397%" y="911.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="66.4897%" y="885" width="0.0177%" height="15" fill="rgb(206,123,31)" fg:x="7516" fg:w="2"/><text x="66.7397%" y="895.50"></text></g><g><title>_int_realloc (8 samples, 0.07%)</title><rect x="66.5251%" y="789" width="0.0708%" height="15" fill="rgb(210,138,16)" fg:x="7520" fg:w="8"/><text x="66.7751%" y="799.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="66.5605%" y="773" width="0.0354%" height="15" fill="rgb(228,57,28)" fg:x="7524" fg:w="4"/><text x="66.8105%" y="783.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="66.5959%" y="789" width="0.0177%" height="15" fill="rgb(242,170,10)" fg:x="7528" fg:w="2"/><text x="66.8459%" y="799.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="66.5959%" y="773" width="0.0177%" height="15" fill="rgb(228,214,39)" fg:x="7528" fg:w="2"/><text x="66.8459%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.15%)</title><rect x="66.5074%" y="901" width="0.1504%" height="15" fill="rgb(218,179,33)" fg:x="7518" fg:w="17"/><text x="66.7574%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.15%)</title><rect x="66.5074%" y="885" width="0.1504%" height="15" fill="rgb(235,193,39)" fg:x="7518" fg:w="17"/><text x="66.7574%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.14%)</title><rect x="66.5163%" y="869" width="0.1415%" height="15" fill="rgb(219,221,36)" fg:x="7519" fg:w="16"/><text x="66.7663%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (16 samples, 0.14%)</title><rect x="66.5163%" y="853" width="0.1415%" height="15" fill="rgb(248,218,19)" fg:x="7519" fg:w="16"/><text x="66.7663%" y="863.50"></text></g><g><title>alloc::alloc::Global::grow_impl (16 samples, 0.14%)</title><rect x="66.5163%" y="837" width="0.1415%" height="15" fill="rgb(205,50,9)" fg:x="7519" fg:w="16"/><text x="66.7663%" y="847.50"></text></g><g><title>alloc::alloc::realloc (16 samples, 0.14%)</title><rect x="66.5163%" y="821" width="0.1415%" height="15" fill="rgb(238,81,28)" fg:x="7519" fg:w="16"/><text x="66.7663%" y="831.50"></text></g><g><title>__GI___libc_realloc (16 samples, 0.14%)</title><rect x="66.5163%" y="805" width="0.1415%" height="15" fill="rgb(235,110,19)" fg:x="7519" fg:w="16"/><text x="66.7663%" y="815.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="66.6136%" y="789" width="0.0442%" height="15" fill="rgb(214,7,14)" fg:x="7530" fg:w="5"/><text x="66.8636%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="66.6136%" y="773" width="0.0442%" height="15" fill="rgb(211,77,3)" fg:x="7530" fg:w="5"/><text x="66.8636%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="66.6136%" y="757" width="0.0442%" height="15" fill="rgb(229,5,9)" fg:x="7530" fg:w="5"/><text x="66.8636%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="66.6136%" y="741" width="0.0442%" height="15" fill="rgb(225,90,11)" fg:x="7530" fg:w="5"/><text x="66.8636%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="66.6136%" y="725" width="0.0442%" height="15" fill="rgb(242,56,8)" fg:x="7530" fg:w="5"/><text x="66.8636%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="66.6136%" y="709" width="0.0442%" height="15" fill="rgb(249,212,39)" fg:x="7530" fg:w="5"/><text x="66.8636%" y="719.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="66.6136%" y="693" width="0.0442%" height="15" fill="rgb(236,90,9)" fg:x="7530" fg:w="5"/><text x="66.8636%" y="703.50"></text></g><g><title>__schedule (4 samples, 0.04%)</title><rect x="66.6224%" y="677" width="0.0354%" height="15" fill="rgb(206,88,35)" fg:x="7531" fg:w="4"/><text x="66.8724%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.04%)</title><rect x="66.6224%" y="661" width="0.0354%" height="15" fill="rgb(205,126,30)" fg:x="7531" fg:w="4"/><text x="66.8724%" y="671.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="66.6224%" y="645" width="0.0354%" height="15" fill="rgb(230,176,12)" fg:x="7531" fg:w="4"/><text x="66.8724%" y="655.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.04%)</title><rect x="66.6224%" y="629" width="0.0354%" height="15" fill="rgb(243,19,9)" fg:x="7531" fg:w="4"/><text x="66.8724%" y="639.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (19 samples, 0.17%)</title><rect x="66.5074%" y="933" width="0.1681%" height="15" fill="rgb(245,171,17)" fg:x="7518" fg:w="19"/><text x="66.7574%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.17%)</title><rect x="66.5074%" y="917" width="0.1681%" height="15" fill="rgb(227,52,21)" fg:x="7518" fg:w="19"/><text x="66.7574%" y="927.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="66.6844%" y="901" width="0.0177%" height="15" fill="rgb(238,69,14)" fg:x="7538" fg:w="2"/><text x="66.9344%" y="911.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::convert::From&lt;revm_primitives::state::AccountInfo&gt;&gt;::from (2 samples, 0.02%)</title><rect x="66.6844%" y="885" width="0.0177%" height="15" fill="rgb(241,156,39)" fg:x="7538" fg:w="2"/><text x="66.9344%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (3 samples, 0.03%)</title><rect x="66.7109%" y="741" width="0.0265%" height="15" fill="rgb(212,227,28)" fg:x="7541" fg:w="3"/><text x="66.9609%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.03%)</title><rect x="66.7109%" y="725" width="0.0265%" height="15" fill="rgb(209,118,27)" fg:x="7541" fg:w="3"/><text x="66.9609%" y="735.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (12 samples, 0.11%)</title><rect x="66.7109%" y="805" width="0.1062%" height="15" fill="rgb(226,102,5)" fg:x="7541" fg:w="12"/><text x="66.9609%" y="815.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (12 samples, 0.11%)</title><rect x="66.7109%" y="789" width="0.1062%" height="15" fill="rgb(223,34,3)" fg:x="7541" fg:w="12"/><text x="66.9609%" y="799.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (12 samples, 0.11%)</title><rect x="66.7109%" y="773" width="0.1062%" height="15" fill="rgb(221,81,38)" fg:x="7541" fg:w="12"/><text x="66.9609%" y="783.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (12 samples, 0.11%)</title><rect x="66.7109%" y="757" width="0.1062%" height="15" fill="rgb(236,219,28)" fg:x="7541" fg:w="12"/><text x="66.9609%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.08%)</title><rect x="66.7374%" y="741" width="0.0796%" height="15" fill="rgb(213,200,14)" fg:x="7544" fg:w="9"/><text x="66.9874%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.08%)</title><rect x="66.7374%" y="725" width="0.0796%" height="15" fill="rgb(240,33,19)" fg:x="7544" fg:w="9"/><text x="66.9874%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="66.8171%" y="805" width="0.0265%" height="15" fill="rgb(233,113,27)" fg:x="7553" fg:w="3"/><text x="67.0671%" y="815.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="66.8171%" y="789" width="0.0265%" height="15" fill="rgb(220,221,18)" fg:x="7553" fg:w="3"/><text x="67.0671%" y="799.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (3 samples, 0.03%)</title><rect x="66.8171%" y="773" width="0.0265%" height="15" fill="rgb(238,92,8)" fg:x="7553" fg:w="3"/><text x="67.0671%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="66.8171%" y="757" width="0.0265%" height="15" fill="rgb(222,164,16)" fg:x="7553" fg:w="3"/><text x="67.0671%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="66.8171%" y="741" width="0.0265%" height="15" fill="rgb(241,119,3)" fg:x="7553" fg:w="3"/><text x="67.0671%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="66.8436%" y="757" width="0.0177%" height="15" fill="rgb(241,44,8)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="66.8436%" y="741" width="0.0177%" height="15" fill="rgb(230,36,40)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="66.8436%" y="725" width="0.0177%" height="15" fill="rgb(243,16,36)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="66.8436%" y="709" width="0.0177%" height="15" fill="rgb(231,4,26)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="719.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="66.8436%" y="693" width="0.0177%" height="15" fill="rgb(240,9,31)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="66.8436%" y="677" width="0.0177%" height="15" fill="rgb(207,173,15)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="66.8436%" y="661" width="0.0177%" height="15" fill="rgb(224,192,53)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="66.8436%" y="645" width="0.0177%" height="15" fill="rgb(223,67,28)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="66.8436%" y="629" width="0.0177%" height="15" fill="rgb(211,20,47)" fg:x="7556" fg:w="2"/><text x="67.0936%" y="639.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (20 samples, 0.18%)</title><rect x="66.7109%" y="853" width="0.1769%" height="15" fill="rgb(240,228,2)" fg:x="7541" fg:w="20"/><text x="66.9609%" y="863.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (20 samples, 0.18%)</title><rect x="66.7109%" y="837" width="0.1769%" height="15" fill="rgb(248,151,12)" fg:x="7541" fg:w="20"/><text x="66.9609%" y="847.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (20 samples, 0.18%)</title><rect x="66.7109%" y="821" width="0.1769%" height="15" fill="rgb(244,8,39)" fg:x="7541" fg:w="20"/><text x="66.9609%" y="831.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (5 samples, 0.04%)</title><rect x="66.8436%" y="805" width="0.0442%" height="15" fill="rgb(222,26,8)" fg:x="7556" fg:w="5"/><text x="67.0936%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="66.8436%" y="789" width="0.0442%" height="15" fill="rgb(213,106,44)" fg:x="7556" fg:w="5"/><text x="67.0936%" y="799.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="66.8436%" y="773" width="0.0442%" height="15" fill="rgb(214,129,20)" fg:x="7556" fg:w="5"/><text x="67.0936%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="66.8613%" y="757" width="0.0265%" height="15" fill="rgb(212,32,13)" fg:x="7558" fg:w="3"/><text x="67.1113%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="66.8613%" y="741" width="0.0265%" height="15" fill="rgb(208,168,33)" fg:x="7558" fg:w="3"/><text x="67.1113%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="66.8613%" y="725" width="0.0265%" height="15" fill="rgb(231,207,8)" fg:x="7558" fg:w="3"/><text x="67.1113%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="66.8701%" y="709" width="0.0177%" height="15" fill="rgb(235,219,23)" fg:x="7559" fg:w="2"/><text x="67.1201%" y="719.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (9 samples, 0.08%)</title><rect x="66.9321%" y="677" width="0.0796%" height="15" fill="rgb(226,216,26)" fg:x="7566" fg:w="9"/><text x="67.1821%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.08%)</title><rect x="66.9321%" y="661" width="0.0796%" height="15" fill="rgb(239,137,16)" fg:x="7566" fg:w="9"/><text x="67.1821%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.08%)</title><rect x="66.9321%" y="645" width="0.0796%" height="15" fill="rgb(207,12,36)" fg:x="7566" fg:w="9"/><text x="67.1821%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (14 samples, 0.12%)</title><rect x="66.8967%" y="821" width="0.1238%" height="15" fill="rgb(210,214,24)" fg:x="7562" fg:w="14"/><text x="67.1467%" y="831.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref::_{{closure}} (14 samples, 0.12%)</title><rect x="66.8967%" y="805" width="0.1238%" height="15" fill="rgb(206,56,30)" fg:x="7562" fg:w="14"/><text x="67.1467%" y="815.50"></text></g><g><title>revm::db::in_memory_db::DbAccount::info (14 samples, 0.12%)</title><rect x="66.8967%" y="789" width="0.1238%" height="15" fill="rgb(228,143,26)" fg:x="7562" fg:w="14"/><text x="67.1467%" y="799.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (14 samples, 0.12%)</title><rect x="66.8967%" y="773" width="0.1238%" height="15" fill="rgb(216,218,46)" fg:x="7562" fg:w="14"/><text x="67.1467%" y="783.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="66.9321%" y="757" width="0.0885%" height="15" fill="rgb(206,6,19)" fg:x="7566" fg:w="10"/><text x="67.1821%" y="767.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="66.9321%" y="741" width="0.0885%" height="15" fill="rgb(239,177,51)" fg:x="7566" fg:w="10"/><text x="67.1821%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="66.9321%" y="725" width="0.0885%" height="15" fill="rgb(216,55,25)" fg:x="7566" fg:w="10"/><text x="67.1821%" y="735.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="66.9321%" y="709" width="0.0885%" height="15" fill="rgb(231,163,29)" fg:x="7566" fg:w="10"/><text x="67.1821%" y="719.50"></text></g><g><title>bytes::bytes::shared_clone (10 samples, 0.09%)</title><rect x="66.9321%" y="693" width="0.0885%" height="15" fill="rgb(232,149,50)" fg:x="7566" fg:w="10"/><text x="67.1821%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.0205%" y="741" width="0.0265%" height="15" fill="rgb(223,142,48)" fg:x="7576" fg:w="3"/><text x="67.2705%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.0205%" y="725" width="0.0265%" height="15" fill="rgb(245,83,23)" fg:x="7576" fg:w="3"/><text x="67.2705%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.0205%" y="709" width="0.0265%" height="15" fill="rgb(224,63,2)" fg:x="7576" fg:w="3"/><text x="67.2705%" y="719.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (41 samples, 0.36%)</title><rect x="66.7109%" y="901" width="0.3627%" height="15" fill="rgb(218,65,53)" fg:x="7541" fg:w="41"/><text x="66.9609%" y="911.50"></text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (41 samples, 0.36%)</title><rect x="66.7109%" y="885" width="0.3627%" height="15" fill="rgb(221,84,29)" fg:x="7541" fg:w="41"/><text x="66.9609%" y="895.50"></text></g><g><title>block_stm_revm::vm::VmDb::read (41 samples, 0.36%)</title><rect x="66.7109%" y="869" width="0.3627%" height="15" fill="rgb(234,0,32)" fg:x="7541" fg:w="41"/><text x="66.9609%" y="879.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for alloc::sync::Arc&lt;T&gt;&gt;::basic_ref (21 samples, 0.19%)</title><rect x="66.8878%" y="853" width="0.1858%" height="15" fill="rgb(206,20,16)" fg:x="7561" fg:w="21"/><text x="67.1378%" y="863.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (21 samples, 0.19%)</title><rect x="66.8878%" y="837" width="0.1858%" height="15" fill="rgb(244,172,18)" fg:x="7561" fg:w="21"/><text x="67.1378%" y="847.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 0.05%)</title><rect x="67.0205%" y="821" width="0.0531%" height="15" fill="rgb(254,133,1)" fg:x="7576" fg:w="6"/><text x="67.2705%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 0.05%)</title><rect x="67.0205%" y="805" width="0.0531%" height="15" fill="rgb(222,206,41)" fg:x="7576" fg:w="6"/><text x="67.2705%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.05%)</title><rect x="67.0205%" y="789" width="0.0531%" height="15" fill="rgb(212,3,42)" fg:x="7576" fg:w="6"/><text x="67.2705%" y="799.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="67.0205%" y="773" width="0.0531%" height="15" fill="rgb(241,11,4)" fg:x="7576" fg:w="6"/><text x="67.2705%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="67.0205%" y="757" width="0.0531%" height="15" fill="rgb(205,19,26)" fg:x="7576" fg:w="6"/><text x="67.2705%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="67.0559%" y="741" width="0.0177%" height="15" fill="rgb(210,179,32)" fg:x="7580" fg:w="2"/><text x="67.3059%" y="751.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="67.0559%" y="725" width="0.0177%" height="15" fill="rgb(227,116,49)" fg:x="7580" fg:w="2"/><text x="67.3059%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="67.0559%" y="709" width="0.0177%" height="15" fill="rgb(211,146,6)" fg:x="7580" fg:w="2"/><text x="67.3059%" y="719.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="67.0559%" y="693" width="0.0177%" height="15" fill="rgb(219,44,39)" fg:x="7580" fg:w="2"/><text x="67.3059%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="67.0559%" y="677" width="0.0177%" height="15" fill="rgb(234,128,11)" fg:x="7580" fg:w="2"/><text x="67.3059%" y="687.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="67.0736%" y="757" width="0.0265%" height="15" fill="rgb(220,183,53)" fg:x="7582" fg:w="3"/><text x="67.3236%" y="767.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="67.0736%" y="741" width="0.0265%" height="15" fill="rgb(213,219,32)" fg:x="7582" fg:w="3"/><text x="67.3236%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.0736%" y="725" width="0.0265%" height="15" fill="rgb(232,156,16)" fg:x="7582" fg:w="3"/><text x="67.3236%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.0736%" y="709" width="0.0265%" height="15" fill="rgb(246,135,34)" fg:x="7582" fg:w="3"/><text x="67.3236%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.0736%" y="693" width="0.0265%" height="15" fill="rgb(241,99,0)" fg:x="7582" fg:w="3"/><text x="67.3236%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="67.0736%" y="869" width="0.0531%" height="15" fill="rgb(222,103,45)" fg:x="7582" fg:w="6"/><text x="67.3236%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="67.0736%" y="853" width="0.0531%" height="15" fill="rgb(212,57,4)" fg:x="7582" fg:w="6"/><text x="67.3236%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.05%)</title><rect x="67.0736%" y="837" width="0.0531%" height="15" fill="rgb(215,68,47)" fg:x="7582" fg:w="6"/><text x="67.3236%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="67.0736%" y="821" width="0.0531%" height="15" fill="rgb(230,84,2)" fg:x="7582" fg:w="6"/><text x="67.3236%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="67.0736%" y="805" width="0.0531%" height="15" fill="rgb(220,102,14)" fg:x="7582" fg:w="6"/><text x="67.3236%" y="815.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (6 samples, 0.05%)</title><rect x="67.0736%" y="789" width="0.0531%" height="15" fill="rgb(240,10,32)" fg:x="7582" fg:w="6"/><text x="67.3236%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.05%)</title><rect x="67.0736%" y="773" width="0.0531%" height="15" fill="rgb(215,47,27)" fg:x="7582" fg:w="6"/><text x="67.3236%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.03%)</title><rect x="67.1001%" y="757" width="0.0265%" height="15" fill="rgb(233,188,43)" fg:x="7585" fg:w="3"/><text x="67.3501%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.1001%" y="741" width="0.0265%" height="15" fill="rgb(253,190,1)" fg:x="7585" fg:w="3"/><text x="67.3501%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.1001%" y="725" width="0.0265%" height="15" fill="rgb(206,114,52)" fg:x="7585" fg:w="3"/><text x="67.3501%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.1001%" y="709" width="0.0265%" height="15" fill="rgb(233,120,37)" fg:x="7585" fg:w="3"/><text x="67.3501%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="67.1090%" y="693" width="0.0177%" height="15" fill="rgb(214,52,39)" fg:x="7586" fg:w="2"/><text x="67.3590%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7 samples, 0.06%)</title><rect x="67.0736%" y="901" width="0.0619%" height="15" fill="rgb(223,80,29)" fg:x="7582" fg:w="7"/><text x="67.3236%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.06%)</title><rect x="67.0736%" y="885" width="0.0619%" height="15" fill="rgb(230,101,40)" fg:x="7582" fg:w="7"/><text x="67.3236%" y="895.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="67.1355%" y="853" width="0.0177%" height="15" fill="rgb(219,211,8)" fg:x="7589" fg:w="2"/><text x="67.3855%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="67.1355%" y="837" width="0.0177%" height="15" fill="rgb(252,126,28)" fg:x="7589" fg:w="2"/><text x="67.3855%" y="847.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="67.1355%" y="821" width="0.0177%" height="15" fill="rgb(215,56,38)" fg:x="7589" fg:w="2"/><text x="67.3855%" y="831.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.03%)</title><rect x="67.1355%" y="901" width="0.0265%" height="15" fill="rgb(249,55,44)" fg:x="7589" fg:w="3"/><text x="67.3855%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.03%)</title><rect x="67.1355%" y="885" width="0.0265%" height="15" fill="rgb(220,221,32)" fg:x="7589" fg:w="3"/><text x="67.3855%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.03%)</title><rect x="67.1355%" y="869" width="0.0265%" height="15" fill="rgb(212,216,41)" fg:x="7589" fg:w="3"/><text x="67.3855%" y="879.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4 samples, 0.04%)</title><rect x="67.1709%" y="725" width="0.0354%" height="15" fill="rgb(228,213,43)" fg:x="7593" fg:w="4"/><text x="67.4209%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.04%)</title><rect x="67.1709%" y="709" width="0.0354%" height="15" fill="rgb(211,31,26)" fg:x="7593" fg:w="4"/><text x="67.4209%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.1798%" y="693" width="0.0265%" height="15" fill="rgb(229,202,19)" fg:x="7594" fg:w="3"/><text x="67.4298%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.1798%" y="677" width="0.0265%" height="15" fill="rgb(229,105,46)" fg:x="7594" fg:w="3"/><text x="67.4298%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="67.1798%" y="661" width="0.0265%" height="15" fill="rgb(235,108,1)" fg:x="7594" fg:w="3"/><text x="67.4298%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="67.1621%" y="837" width="0.0531%" height="15" fill="rgb(245,111,35)" fg:x="7592" fg:w="6"/><text x="67.4121%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="67.1621%" y="821" width="0.0531%" height="15" fill="rgb(219,185,31)" fg:x="7592" fg:w="6"/><text x="67.4121%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="67.1709%" y="805" width="0.0442%" height="15" fill="rgb(214,4,43)" fg:x="7593" fg:w="5"/><text x="67.4209%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="67.1709%" y="789" width="0.0442%" height="15" fill="rgb(235,227,40)" fg:x="7593" fg:w="5"/><text x="67.4209%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="67.1709%" y="773" width="0.0442%" height="15" fill="rgb(230,88,30)" fg:x="7593" fg:w="5"/><text x="67.4209%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.04%)</title><rect x="67.1709%" y="757" width="0.0442%" height="15" fill="rgb(216,217,1)" fg:x="7593" fg:w="5"/><text x="67.4209%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.04%)</title><rect x="67.1709%" y="741" width="0.0442%" height="15" fill="rgb(248,139,50)" fg:x="7593" fg:w="5"/><text x="67.4209%" y="751.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (63 samples, 0.56%)</title><rect x="66.6755%" y="933" width="0.5573%" height="15" fill="rgb(233,1,21)" fg:x="7537" fg:w="63"/><text x="66.9255%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (62 samples, 0.55%)</title><rect x="66.6844%" y="917" width="0.5485%" height="15" fill="rgb(215,183,12)" fg:x="7538" fg:w="62"/><text x="66.9344%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (8 samples, 0.07%)</title><rect x="67.1621%" y="901" width="0.0708%" height="15" fill="rgb(229,104,42)" fg:x="7592" fg:w="8"/><text x="67.4121%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (8 samples, 0.07%)</title><rect x="67.1621%" y="885" width="0.0708%" height="15" fill="rgb(243,34,48)" fg:x="7592" fg:w="8"/><text x="67.4121%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (8 samples, 0.07%)</title><rect x="67.1621%" y="869" width="0.0708%" height="15" fill="rgb(239,11,44)" fg:x="7592" fg:w="8"/><text x="67.4121%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8 samples, 0.07%)</title><rect x="67.1621%" y="853" width="0.0708%" height="15" fill="rgb(231,98,35)" fg:x="7592" fg:w="8"/><text x="67.4121%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.02%)</title><rect x="67.2151%" y="837" width="0.0177%" height="15" fill="rgb(233,28,25)" fg:x="7598" fg:w="2"/><text x="67.4651%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="67.2151%" y="821" width="0.0177%" height="15" fill="rgb(234,123,11)" fg:x="7598" fg:w="2"/><text x="67.4651%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="67.2151%" y="805" width="0.0177%" height="15" fill="rgb(220,69,3)" fg:x="7598" fg:w="2"/><text x="67.4651%" y="815.50"></text></g><g><title>revm::journaled_state::JournaledState::touch_account (3 samples, 0.03%)</title><rect x="67.2328%" y="917" width="0.0265%" height="15" fill="rgb(214,64,36)" fg:x="7600" fg:w="3"/><text x="67.4828%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.03%)</title><rect x="67.2328%" y="901" width="0.0265%" height="15" fill="rgb(211,138,32)" fg:x="7600" fg:w="3"/><text x="67.4828%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="67.2328%" y="885" width="0.0265%" height="15" fill="rgb(213,118,47)" fg:x="7600" fg:w="3"/><text x="67.4828%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="67.2328%" y="869" width="0.0265%" height="15" fill="rgb(243,124,49)" fg:x="7600" fg:w="3"/><text x="67.4828%" y="879.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="67.2328%" y="853" width="0.0265%" height="15" fill="rgb(221,30,28)" fg:x="7600" fg:w="3"/><text x="67.4828%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="67.2771%" y="693" width="0.0177%" height="15" fill="rgb(246,37,13)" fg:x="7605" fg:w="2"/><text x="67.5271%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="67.2594%" y="869" width="0.0442%" height="15" fill="rgb(249,66,14)" fg:x="7603" fg:w="5"/><text x="67.5094%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="67.2594%" y="853" width="0.0442%" height="15" fill="rgb(213,166,5)" fg:x="7603" fg:w="5"/><text x="67.5094%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="67.2682%" y="837" width="0.0354%" height="15" fill="rgb(221,66,24)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="67.2682%" y="821" width="0.0354%" height="15" fill="rgb(210,132,17)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="67.2682%" y="805" width="0.0354%" height="15" fill="rgb(243,202,5)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="815.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="67.2682%" y="789" width="0.0354%" height="15" fill="rgb(233,70,48)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="67.2682%" y="773" width="0.0354%" height="15" fill="rgb(238,41,26)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.04%)</title><rect x="67.2682%" y="757" width="0.0354%" height="15" fill="rgb(241,19,31)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="67.2682%" y="741" width="0.0354%" height="15" fill="rgb(214,76,10)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="67.2682%" y="725" width="0.0354%" height="15" fill="rgb(254,202,22)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="67.2682%" y="709" width="0.0354%" height="15" fill="rgb(214,72,24)" fg:x="7604" fg:w="4"/><text x="67.5182%" y="719.50"></text></g><g><title>revm::journaled_state::JournaledState::touch (9 samples, 0.08%)</title><rect x="67.2328%" y="933" width="0.0796%" height="15" fill="rgb(221,92,46)" fg:x="7600" fg:w="9"/><text x="67.4828%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (6 samples, 0.05%)</title><rect x="67.2594%" y="917" width="0.0531%" height="15" fill="rgb(246,13,50)" fg:x="7603" fg:w="6"/><text x="67.5094%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 0.05%)</title><rect x="67.2594%" y="901" width="0.0531%" height="15" fill="rgb(240,165,38)" fg:x="7603" fg:w="6"/><text x="67.5094%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6 samples, 0.05%)</title><rect x="67.2594%" y="885" width="0.0531%" height="15" fill="rgb(241,24,51)" fg:x="7603" fg:w="6"/><text x="67.5094%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.3125%" y="837" width="0.0265%" height="15" fill="rgb(227,51,44)" fg:x="7609" fg:w="3"/><text x="67.5625%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.3125%" y="821" width="0.0265%" height="15" fill="rgb(231,121,3)" fg:x="7609" fg:w="3"/><text x="67.5625%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.3125%" y="805" width="0.0265%" height="15" fill="rgb(245,3,41)" fg:x="7609" fg:w="3"/><text x="67.5625%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.03%)</title><rect x="67.3125%" y="789" width="0.0265%" height="15" fill="rgb(214,13,26)" fg:x="7609" fg:w="3"/><text x="67.5625%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="67.3567%" y="693" width="0.0177%" height="15" fill="rgb(252,75,11)" fg:x="7614" fg:w="2"/><text x="67.6067%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.07%)</title><rect x="67.3125%" y="869" width="0.0708%" height="15" fill="rgb(218,226,17)" fg:x="7609" fg:w="8"/><text x="67.5625%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.07%)</title><rect x="67.3125%" y="853" width="0.0708%" height="15" fill="rgb(248,89,38)" fg:x="7609" fg:w="8"/><text x="67.5625%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="67.3390%" y="837" width="0.0442%" height="15" fill="rgb(237,73,46)" fg:x="7612" fg:w="5"/><text x="67.5890%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="67.3390%" y="821" width="0.0442%" height="15" fill="rgb(242,78,33)" fg:x="7612" fg:w="5"/><text x="67.5890%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="67.3390%" y="805" width="0.0442%" height="15" fill="rgb(235,60,3)" fg:x="7612" fg:w="5"/><text x="67.5890%" y="815.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.04%)</title><rect x="67.3390%" y="789" width="0.0442%" height="15" fill="rgb(216,172,19)" fg:x="7612" fg:w="5"/><text x="67.5890%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.04%)</title><rect x="67.3390%" y="773" width="0.0442%" height="15" fill="rgb(227,6,42)" fg:x="7612" fg:w="5"/><text x="67.5890%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.04%)</title><rect x="67.3478%" y="757" width="0.0354%" height="15" fill="rgb(223,207,42)" fg:x="7613" fg:w="4"/><text x="67.5978%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="67.3478%" y="741" width="0.0354%" height="15" fill="rgb(246,138,30)" fg:x="7613" fg:w="4"/><text x="67.5978%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="67.3478%" y="725" width="0.0354%" height="15" fill="rgb(251,199,47)" fg:x="7613" fg:w="4"/><text x="67.5978%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="67.3478%" y="709" width="0.0354%" height="15" fill="rgb(228,218,44)" fg:x="7613" fg:w="4"/><text x="67.5978%" y="719.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (10 samples, 0.09%)</title><rect x="67.3125%" y="917" width="0.0885%" height="15" fill="rgb(220,68,6)" fg:x="7609" fg:w="10"/><text x="67.5625%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (10 samples, 0.09%)</title><rect x="67.3125%" y="901" width="0.0885%" height="15" fill="rgb(240,60,26)" fg:x="7609" fg:w="10"/><text x="67.5625%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10 samples, 0.09%)</title><rect x="67.3125%" y="885" width="0.0885%" height="15" fill="rgb(211,200,19)" fg:x="7609" fg:w="10"/><text x="67.5625%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="67.3832%" y="869" width="0.0177%" height="15" fill="rgb(242,145,30)" fg:x="7617" fg:w="2"/><text x="67.6332%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.02%)</title><rect x="67.3832%" y="853" width="0.0177%" height="15" fill="rgb(225,64,13)" fg:x="7617" fg:w="2"/><text x="67.6332%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="67.4275%" y="789" width="0.0177%" height="15" fill="rgb(218,103,35)" fg:x="7622" fg:w="2"/><text x="67.6775%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="67.4275%" y="773" width="0.0177%" height="15" fill="rgb(216,93,46)" fg:x="7622" fg:w="2"/><text x="67.6775%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.4275%" y="837" width="0.0265%" height="15" fill="rgb(225,159,27)" fg:x="7622" fg:w="3"/><text x="67.6775%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.4275%" y="821" width="0.0265%" height="15" fill="rgb(225,204,11)" fg:x="7622" fg:w="3"/><text x="67.6775%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="67.4275%" y="805" width="0.0265%" height="15" fill="rgb(205,56,4)" fg:x="7622" fg:w="3"/><text x="67.6775%" y="815.50"></text></g><g><title>revm::journaled_state::JournaledState::transfer (18 samples, 0.16%)</title><rect x="67.3125%" y="933" width="0.1592%" height="15" fill="rgb(206,6,35)" fg:x="7609" fg:w="18"/><text x="67.5625%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (6 samples, 0.05%)</title><rect x="67.4186%" y="917" width="0.0531%" height="15" fill="rgb(247,73,52)" fg:x="7621" fg:w="6"/><text x="67.6686%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 0.05%)</title><rect x="67.4186%" y="901" width="0.0531%" height="15" fill="rgb(246,97,4)" fg:x="7621" fg:w="6"/><text x="67.6686%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6 samples, 0.05%)</title><rect x="67.4186%" y="885" width="0.0531%" height="15" fill="rgb(212,37,15)" fg:x="7621" fg:w="6"/><text x="67.6686%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="67.4275%" y="869" width="0.0442%" height="15" fill="rgb(208,130,40)" fg:x="7622" fg:w="5"/><text x="67.6775%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="67.4275%" y="853" width="0.0442%" height="15" fill="rgb(236,55,29)" fg:x="7622" fg:w="5"/><text x="67.6775%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="67.4540%" y="837" width="0.0177%" height="15" fill="rgb(209,156,45)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="847.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="67.4540%" y="821" width="0.0177%" height="15" fill="rgb(249,107,4)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="831.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="67.4540%" y="805" width="0.0177%" height="15" fill="rgb(227,7,13)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="815.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="67.4540%" y="789" width="0.0177%" height="15" fill="rgb(250,129,14)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="67.4540%" y="773" width="0.0177%" height="15" fill="rgb(229,92,13)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="783.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="67.4540%" y="757" width="0.0177%" height="15" fill="rgb(245,98,39)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="767.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="67.4540%" y="741" width="0.0177%" height="15" fill="rgb(234,135,48)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="67.4540%" y="725" width="0.0177%" height="15" fill="rgb(230,98,28)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="67.4540%" y="709" width="0.0177%" height="15" fill="rgb(223,121,0)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="67.4540%" y="693" width="0.0177%" height="15" fill="rgb(234,173,33)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="67.4540%" y="677" width="0.0177%" height="15" fill="rgb(245,47,8)" fg:x="7625" fg:w="2"/><text x="67.7040%" y="687.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.06%)</title><rect x="67.4805%" y="789" width="0.0619%" height="15" fill="rgb(205,17,20)" fg:x="7628" fg:w="7"/><text x="67.7305%" y="799.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="67.5071%" y="773" width="0.0354%" height="15" fill="rgb(232,151,16)" fg:x="7631" fg:w="4"/><text x="67.7571%" y="783.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="67.5248%" y="757" width="0.0177%" height="15" fill="rgb(208,30,32)" fg:x="7633" fg:w="2"/><text x="67.7748%" y="767.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::new (9 samples, 0.08%)</title><rect x="67.4717%" y="933" width="0.0796%" height="15" fill="rgb(254,26,3)" fg:x="7627" fg:w="9"/><text x="67.7217%" y="943.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::new (8 samples, 0.07%)</title><rect x="67.4805%" y="917" width="0.0708%" height="15" fill="rgb(240,177,30)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.07%)</title><rect x="67.4805%" y="901" width="0.0708%" height="15" fill="rgb(248,76,44)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.07%)</title><rect x="67.4805%" y="885" width="0.0708%" height="15" fill="rgb(241,186,54)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.07%)</title><rect x="67.4805%" y="869" width="0.0708%" height="15" fill="rgb(249,171,29)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.07%)</title><rect x="67.4805%" y="853" width="0.0708%" height="15" fill="rgb(237,151,44)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.07%)</title><rect x="67.4805%" y="837" width="0.0708%" height="15" fill="rgb(228,174,30)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.07%)</title><rect x="67.4805%" y="821" width="0.0708%" height="15" fill="rgb(252,14,37)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="831.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.07%)</title><rect x="67.4805%" y="805" width="0.0708%" height="15" fill="rgb(207,111,40)" fg:x="7628" fg:w="8"/><text x="67.7305%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (2 samples, 0.02%)</title><rect x="67.5513%" y="901" width="0.0177%" height="15" fill="rgb(248,171,54)" fg:x="7636" fg:w="2"/><text x="67.8013%" y="911.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="70.3114%" y="757" width="0.0265%" height="15" fill="rgb(211,127,2)" fg:x="7948" fg:w="3"/><text x="70.5614%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (12 samples, 0.11%)</title><rect x="70.2760%" y="869" width="0.1062%" height="15" fill="rgb(236,87,47)" fg:x="7944" fg:w="12"/><text x="70.5260%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.11%)</title><rect x="70.2760%" y="853" width="0.1062%" height="15" fill="rgb(223,190,45)" fg:x="7944" fg:w="12"/><text x="70.5260%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.11%)</title><rect x="70.2760%" y="837" width="0.1062%" height="15" fill="rgb(215,5,16)" fg:x="7944" fg:w="12"/><text x="70.5260%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.11%)</title><rect x="70.2760%" y="821" width="0.1062%" height="15" fill="rgb(252,82,33)" fg:x="7944" fg:w="12"/><text x="70.5260%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.11%)</title><rect x="70.2760%" y="805" width="0.1062%" height="15" fill="rgb(247,213,44)" fg:x="7944" fg:w="12"/><text x="70.5260%" y="815.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.11%)</title><rect x="70.2760%" y="789" width="0.1062%" height="15" fill="rgb(205,196,44)" fg:x="7944" fg:w="12"/><text x="70.5260%" y="799.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.11%)</title><rect x="70.2760%" y="773" width="0.1062%" height="15" fill="rgb(237,96,54)" fg:x="7944" fg:w="12"/><text x="70.5260%" y="783.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="70.3379%" y="757" width="0.0442%" height="15" fill="rgb(230,113,34)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="767.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="70.3379%" y="741" width="0.0442%" height="15" fill="rgb(221,224,12)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="751.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="70.3379%" y="725" width="0.0442%" height="15" fill="rgb(219,112,44)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="735.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="70.3379%" y="709" width="0.0442%" height="15" fill="rgb(210,31,13)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="70.3379%" y="693" width="0.0442%" height="15" fill="rgb(230,25,16)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="703.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="70.3379%" y="677" width="0.0442%" height="15" fill="rgb(246,108,53)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="687.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="70.3379%" y="661" width="0.0442%" height="15" fill="rgb(241,172,50)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="671.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="70.3379%" y="645" width="0.0442%" height="15" fill="rgb(235,141,10)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="655.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="70.3379%" y="629" width="0.0442%" height="15" fill="rgb(220,174,43)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="70.3379%" y="613" width="0.0442%" height="15" fill="rgb(215,181,40)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="623.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="70.3379%" y="597" width="0.0442%" height="15" fill="rgb(230,97,2)" fg:x="7951" fg:w="5"/><text x="70.5879%" y="607.50"></text></g><g><title>perf_ctx_enable (8 samples, 0.07%)</title><rect x="70.4352%" y="709" width="0.0708%" height="15" fill="rgb(211,25,27)" fg:x="7962" fg:w="8"/><text x="70.6852%" y="719.50"></text></g><g><title>exit_to_user_mode_loop (14 samples, 0.12%)</title><rect x="70.3910%" y="789" width="0.1238%" height="15" fill="rgb(230,87,26)" fg:x="7957" fg:w="14"/><text x="70.6410%" y="799.50"></text></g><g><title>schedule (14 samples, 0.12%)</title><rect x="70.3910%" y="773" width="0.1238%" height="15" fill="rgb(227,160,17)" fg:x="7957" fg:w="14"/><text x="70.6410%" y="783.50"></text></g><g><title>__schedule (14 samples, 0.12%)</title><rect x="70.3910%" y="757" width="0.1238%" height="15" fill="rgb(244,85,34)" fg:x="7957" fg:w="14"/><text x="70.6410%" y="767.50"></text></g><g><title>finish_task_switch.isra.0 (14 samples, 0.12%)</title><rect x="70.3910%" y="741" width="0.1238%" height="15" fill="rgb(207,70,0)" fg:x="7957" fg:w="14"/><text x="70.6410%" y="751.50"></text></g><g><title>__perf_event_task_sched_in (13 samples, 0.12%)</title><rect x="70.3999%" y="725" width="0.1150%" height="15" fill="rgb(223,129,7)" fg:x="7958" fg:w="13"/><text x="70.6499%" y="735.50"></text></g><g><title>asm_sysvec_reschedule_ipi (15 samples, 0.13%)</title><rect x="70.3910%" y="869" width="0.1327%" height="15" fill="rgb(246,105,7)" fg:x="7957" fg:w="15"/><text x="70.6410%" y="879.50"></text></g><g><title>sysvec_reschedule_ipi (15 samples, 0.13%)</title><rect x="70.3910%" y="853" width="0.1327%" height="15" fill="rgb(215,154,42)" fg:x="7957" fg:w="15"/><text x="70.6410%" y="863.50"></text></g><g><title>irqentry_exit (15 samples, 0.13%)</title><rect x="70.3910%" y="837" width="0.1327%" height="15" fill="rgb(220,215,30)" fg:x="7957" fg:w="15"/><text x="70.6410%" y="847.50"></text></g><g><title>irqentry_exit_to_user_mode (15 samples, 0.13%)</title><rect x="70.3910%" y="821" width="0.1327%" height="15" fill="rgb(228,81,51)" fg:x="7957" fg:w="15"/><text x="70.6410%" y="831.50"></text></g><g><title>exit_to_user_mode_prepare (15 samples, 0.13%)</title><rect x="70.3910%" y="805" width="0.1327%" height="15" fill="rgb(247,71,54)" fg:x="7957" fg:w="15"/><text x="70.6410%" y="815.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (9 samples, 0.08%)</title><rect x="70.5237%" y="837" width="0.0796%" height="15" fill="rgb(234,176,34)" fg:x="7972" fg:w="9"/><text x="70.7737%" y="847.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (9 samples, 0.08%)</title><rect x="70.5237%" y="821" width="0.0796%" height="15" fill="rgb(241,103,54)" fg:x="7972" fg:w="9"/><text x="70.7737%" y="831.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (9 samples, 0.08%)</title><rect x="70.5237%" y="805" width="0.0796%" height="15" fill="rgb(228,22,34)" fg:x="7972" fg:w="9"/><text x="70.7737%" y="815.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set_unchecked (21 samples, 0.19%)</title><rect x="70.5237%" y="869" width="0.1858%" height="15" fill="rgb(241,179,48)" fg:x="7972" fg:w="21"/><text x="70.7737%" y="879.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (21 samples, 0.19%)</title><rect x="70.5237%" y="853" width="0.1858%" height="15" fill="rgb(235,167,37)" fg:x="7972" fg:w="21"/><text x="70.7737%" y="863.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (12 samples, 0.11%)</title><rect x="70.6033%" y="837" width="0.1062%" height="15" fill="rgb(213,109,30)" fg:x="7981" fg:w="12"/><text x="70.8533%" y="847.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (12 samples, 0.11%)</title><rect x="70.6033%" y="821" width="0.1062%" height="15" fill="rgb(222,172,16)" fg:x="7981" fg:w="12"/><text x="70.8533%" y="831.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (12 samples, 0.11%)</title><rect x="70.6033%" y="805" width="0.1062%" height="15" fill="rgb(233,192,5)" fg:x="7981" fg:w="12"/><text x="70.8533%" y="815.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::select (3 samples, 0.03%)</title><rect x="70.6829%" y="789" width="0.0265%" height="15" fill="rgb(247,189,41)" fg:x="7990" fg:w="3"/><text x="70.9329%" y="799.50"></text></g><g><title>&lt;bitvec::order::Lsb0 as bitvec::order::BitOrder&gt;::select (3 samples, 0.03%)</title><rect x="70.6829%" y="773" width="0.0265%" height="15" fill="rgb(218,134,47)" fg:x="7990" fg:w="3"/><text x="70.9329%" y="783.50"></text></g><g><title>&lt;u8 as core::ops::bit::Shl&gt;::shl (3 samples, 0.03%)</title><rect x="70.6829%" y="757" width="0.0265%" height="15" fill="rgb(216,29,3)" fg:x="7990" fg:w="3"/><text x="70.9329%" y="767.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::repeat (2 samples, 0.02%)</title><rect x="70.7095%" y="869" width="0.0177%" height="15" fill="rgb(246,140,12)" fg:x="7993" fg:w="2"/><text x="70.9595%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill_with (2 samples, 0.02%)</title><rect x="70.7095%" y="853" width="0.0177%" height="15" fill="rgb(230,136,11)" fg:x="7993" fg:w="2"/><text x="70.9595%" y="863.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="70.7095%" y="837" width="0.0177%" height="15" fill="rgb(247,22,47)" fg:x="7993" fg:w="2"/><text x="70.9595%" y="847.50"></text></g><g><title>revm_interpreter::interpreter::analysis::analyze (355 samples, 3.14%)</title><rect x="67.5955%" y="885" width="3.1405%" height="15" fill="rgb(218,84,22)" fg:x="7641" fg:w="355"/><text x="67.8455%" y="895.50">rev..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (11 samples, 0.10%)</title><rect x="70.7360%" y="869" width="0.0973%" height="15" fill="rgb(216,87,39)" fg:x="7996" fg:w="11"/><text x="70.9860%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (11 samples, 0.10%)</title><rect x="70.7360%" y="853" width="0.0973%" height="15" fill="rgb(221,178,8)" fg:x="7996" fg:w="11"/><text x="70.9860%" y="863.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.04%)</title><rect x="70.9660%" y="645" width="0.0354%" height="15" fill="rgb(230,42,11)" fg:x="8022" fg:w="4"/><text x="71.2160%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (20 samples, 0.18%)</title><rect x="70.8333%" y="869" width="0.1769%" height="15" fill="rgb(237,229,4)" fg:x="8007" fg:w="20"/><text x="71.0833%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (20 samples, 0.18%)</title><rect x="70.8333%" y="853" width="0.1769%" height="15" fill="rgb(222,31,33)" fg:x="8007" fg:w="20"/><text x="71.0833%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (20 samples, 0.18%)</title><rect x="70.8333%" y="837" width="0.1769%" height="15" fill="rgb(210,17,39)" fg:x="8007" fg:w="20"/><text x="71.0833%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.18%)</title><rect x="70.8333%" y="821" width="0.1769%" height="15" fill="rgb(244,93,20)" fg:x="8007" fg:w="20"/><text x="71.0833%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.18%)</title><rect x="70.8333%" y="805" width="0.1769%" height="15" fill="rgb(210,40,47)" fg:x="8007" fg:w="20"/><text x="71.0833%" y="815.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="70.9660%" y="789" width="0.0442%" height="15" fill="rgb(239,211,47)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="799.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="70.9660%" y="773" width="0.0442%" height="15" fill="rgb(251,223,49)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="783.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="70.9660%" y="757" width="0.0442%" height="15" fill="rgb(221,149,5)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="767.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="70.9660%" y="741" width="0.0442%" height="15" fill="rgb(219,224,51)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="70.9660%" y="725" width="0.0442%" height="15" fill="rgb(223,7,8)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="735.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="70.9660%" y="709" width="0.0442%" height="15" fill="rgb(241,217,22)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="719.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="70.9660%" y="693" width="0.0442%" height="15" fill="rgb(248,209,0)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="703.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="70.9660%" y="677" width="0.0442%" height="15" fill="rgb(217,205,4)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="687.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="70.9660%" y="661" width="0.0442%" height="15" fill="rgb(228,124,39)" fg:x="8022" fg:w="5"/><text x="71.2160%" y="671.50"></text></g><g><title>malloc_consolidate (27 samples, 0.24%)</title><rect x="71.0810%" y="725" width="0.2389%" height="15" fill="rgb(250,116,42)" fg:x="8035" fg:w="27"/><text x="71.3310%" y="735.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="71.3022%" y="709" width="0.0177%" height="15" fill="rgb(223,202,9)" fg:x="8060" fg:w="2"/><text x="71.5522%" y="719.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.31%)</title><rect x="71.0191%" y="757" width="0.3096%" height="15" fill="rgb(242,222,40)" fg:x="8028" fg:w="35"/><text x="71.2691%" y="767.50"></text></g><g><title>_int_malloc (33 samples, 0.29%)</title><rect x="71.0368%" y="741" width="0.2919%" height="15" fill="rgb(229,99,46)" fg:x="8030" fg:w="33"/><text x="71.2868%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36 samples, 0.32%)</title><rect x="71.0191%" y="869" width="0.3185%" height="15" fill="rgb(225,56,46)" fg:x="8028" fg:w="36"/><text x="71.2691%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 0.32%)</title><rect x="71.0191%" y="853" width="0.3185%" height="15" fill="rgb(227,94,5)" fg:x="8028" fg:w="36"/><text x="71.2691%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 0.32%)</title><rect x="71.0191%" y="837" width="0.3185%" height="15" fill="rgb(205,112,38)" fg:x="8028" fg:w="36"/><text x="71.2691%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 0.32%)</title><rect x="71.0191%" y="821" width="0.3185%" height="15" fill="rgb(231,133,46)" fg:x="8028" fg:w="36"/><text x="71.2691%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.32%)</title><rect x="71.0191%" y="805" width="0.3185%" height="15" fill="rgb(217,16,9)" fg:x="8028" fg:w="36"/><text x="71.2691%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.32%)</title><rect x="71.0191%" y="789" width="0.3185%" height="15" fill="rgb(249,173,9)" fg:x="8028" fg:w="36"/><text x="71.2691%" y="799.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.32%)</title><rect x="71.0191%" y="773" width="0.3185%" height="15" fill="rgb(205,163,53)" fg:x="8028" fg:w="36"/><text x="71.2691%" y="783.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="71.3376%" y="741" width="0.0442%" height="15" fill="rgb(217,54,41)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="751.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="71.3376%" y="725" width="0.0442%" height="15" fill="rgb(228,216,12)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="735.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="71.3376%" y="709" width="0.0442%" height="15" fill="rgb(244,228,15)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="719.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="71.3376%" y="693" width="0.0442%" height="15" fill="rgb(221,176,53)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="71.3376%" y="677" width="0.0442%" height="15" fill="rgb(205,94,34)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="687.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="71.3376%" y="661" width="0.0442%" height="15" fill="rgb(213,110,48)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="671.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="71.3376%" y="645" width="0.0442%" height="15" fill="rgb(236,142,28)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="71.3376%" y="629" width="0.0442%" height="15" fill="rgb(225,135,29)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="71.3376%" y="613" width="0.0442%" height="15" fill="rgb(252,45,31)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="71.3376%" y="597" width="0.0442%" height="15" fill="rgb(211,187,50)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="607.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="71.3376%" y="581" width="0.0442%" height="15" fill="rgb(229,109,7)" fg:x="8064" fg:w="5"/><text x="71.5876%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (10 samples, 0.09%)</title><rect x="71.3376%" y="853" width="0.0885%" height="15" fill="rgb(251,131,51)" fg:x="8064" fg:w="10"/><text x="71.5876%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (10 samples, 0.09%)</title><rect x="71.3376%" y="837" width="0.0885%" height="15" fill="rgb(251,180,35)" fg:x="8064" fg:w="10"/><text x="71.5876%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (10 samples, 0.09%)</title><rect x="71.3376%" y="821" width="0.0885%" height="15" fill="rgb(211,46,32)" fg:x="8064" fg:w="10"/><text x="71.5876%" y="831.50"></text></g><g><title>bytes::bytes::shared_drop (10 samples, 0.09%)</title><rect x="71.3376%" y="805" width="0.0885%" height="15" fill="rgb(248,123,17)" fg:x="8064" fg:w="10"/><text x="71.5876%" y="815.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (10 samples, 0.09%)</title><rect x="71.3376%" y="789" width="0.0885%" height="15" fill="rgb(227,141,18)" fg:x="8064" fg:w="10"/><text x="71.5876%" y="799.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (10 samples, 0.09%)</title><rect x="71.3376%" y="773" width="0.0885%" height="15" fill="rgb(216,102,9)" fg:x="8064" fg:w="10"/><text x="71.5876%" y="783.50"></text></g><g><title>bytes::bytes::release_shared (10 samples, 0.09%)</title><rect x="71.3376%" y="757" width="0.0885%" height="15" fill="rgb(253,47,13)" fg:x="8064" fg:w="10"/><text x="71.5876%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="71.3818%" y="741" width="0.0442%" height="15" fill="rgb(226,93,23)" fg:x="8069" fg:w="5"/><text x="71.6318%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="71.3818%" y="725" width="0.0442%" height="15" fill="rgb(247,104,17)" fg:x="8069" fg:w="5"/><text x="71.6318%" y="735.50"></text></g><g><title>revm_interpreter::interpreter::contract::Contract::new_with_context (440 samples, 3.89%)</title><rect x="67.5513%" y="933" width="3.8924%" height="15" fill="rgb(233,203,26)" fg:x="7636" fg:w="440"/><text x="67.8013%" y="943.50">revm..</text></g><g><title>revm_interpreter::interpreter::contract::Contract::new (440 samples, 3.89%)</title><rect x="67.5513%" y="917" width="3.8924%" height="15" fill="rgb(244,98,49)" fg:x="7636" fg:w="440"/><text x="67.8013%" y="927.50">revm..</text></g><g><title>revm_interpreter::interpreter::analysis::to_analysed (438 samples, 3.87%)</title><rect x="67.5690%" y="901" width="3.8747%" height="15" fill="rgb(235,134,22)" fg:x="7638" fg:w="438"/><text x="67.8190%" y="911.50">revm..</text></g><g><title>revm_primitives::bytecode::Bytecode::to_checked (80 samples, 0.71%)</title><rect x="70.7360%" y="885" width="0.7077%" height="15" fill="rgb(221,70,32)" fg:x="7996" fg:w="80"/><text x="70.9860%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (12 samples, 0.11%)</title><rect x="71.3376%" y="869" width="0.1062%" height="15" fill="rgb(238,15,50)" fg:x="8064" fg:w="12"/><text x="71.5876%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (2 samples, 0.02%)</title><rect x="71.4260%" y="853" width="0.0177%" height="15" fill="rgb(215,221,48)" fg:x="8074" fg:w="2"/><text x="71.6760%" y="863.50"></text></g><g><title>core::ops::function::Fn::call (607 samples, 5.37%)</title><rect x="66.0828%" y="981" width="5.3698%" height="15" fill="rgb(236,73,3)" fg:x="7470" fg:w="607"/><text x="66.3328%" y="991.50">core::o..</text></g><g><title>revm::handler::mainnet::execution::call (602 samples, 5.33%)</title><rect x="66.1270%" y="965" width="5.3255%" height="15" fill="rgb(250,107,11)" fg:x="7475" fg:w="602"/><text x="66.3770%" y="975.50">revm::h..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (595 samples, 5.26%)</title><rect x="66.1890%" y="949" width="5.2636%" height="15" fill="rgb(242,39,14)" fg:x="7482" fg:w="595"/><text x="66.4390%" y="959.50">revm::..</text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (615 samples, 5.44%)</title><rect x="66.0297%" y="997" width="5.4406%" height="15" fill="rgb(248,164,37)" fg:x="7464" fg:w="615"/><text x="66.2797%" y="1007.50">revm::h..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;&gt; (2 samples, 0.02%)</title><rect x="71.4526%" y="981" width="0.0177%" height="15" fill="rgb(217,60,12)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::inner_models::CallInputs&gt; (2 samples, 0.02%)</title><rect x="71.4526%" y="965" width="0.0177%" height="15" fill="rgb(240,125,29)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="71.4526%" y="949" width="0.0177%" height="15" fill="rgb(208,207,28)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="71.4526%" y="933" width="0.0177%" height="15" fill="rgb(209,159,27)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="943.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="71.4526%" y="917" width="0.0177%" height="15" fill="rgb(251,176,53)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="927.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.02%)</title><rect x="71.4526%" y="901" width="0.0177%" height="15" fill="rgb(211,85,7)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="911.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="71.4526%" y="885" width="0.0177%" height="15" fill="rgb(216,64,54)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="895.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.02%)</title><rect x="71.4526%" y="869" width="0.0177%" height="15" fill="rgb(217,54,24)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="879.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.02%)</title><rect x="71.4526%" y="853" width="0.0177%" height="15" fill="rgb(208,206,53)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="71.4526%" y="837" width="0.0177%" height="15" fill="rgb(251,74,39)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="71.4526%" y="821" width="0.0177%" height="15" fill="rgb(226,47,5)" fg:x="8077" fg:w="2"/><text x="71.7026%" y="831.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::last_frame_return (2 samples, 0.02%)</title><rect x="71.4703%" y="997" width="0.0177%" height="15" fill="rgb(234,111,33)" fg:x="8079" fg:w="2"/><text x="71.7203%" y="1007.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="71.5145%" y="869" width="0.0177%" height="15" fill="rgb(251,14,10)" fg:x="8084" fg:w="2"/><text x="71.7645%" y="879.50"></text></g><g><title>revm::frame::FrameResult::output (4 samples, 0.04%)</title><rect x="71.5145%" y="949" width="0.0354%" height="15" fill="rgb(232,43,0)" fg:x="8084" fg:w="4"/><text x="71.7645%" y="959.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="71.5145%" y="933" width="0.0354%" height="15" fill="rgb(222,68,43)" fg:x="8084" fg:w="4"/><text x="71.7645%" y="943.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="71.5145%" y="917" width="0.0354%" height="15" fill="rgb(217,24,23)" fg:x="8084" fg:w="4"/><text x="71.7645%" y="927.50"></text></g><g><title>bytes::bytes::promotable_even_clone (4 samples, 0.04%)</title><rect x="71.5145%" y="901" width="0.0354%" height="15" fill="rgb(229,209,14)" fg:x="8084" fg:w="4"/><text x="71.7645%" y="911.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (4 samples, 0.04%)</title><rect x="71.5145%" y="885" width="0.0354%" height="15" fill="rgb(250,149,48)" fg:x="8084" fg:w="4"/><text x="71.7645%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (2 samples, 0.02%)</title><rect x="71.5322%" y="869" width="0.0177%" height="15" fill="rgb(210,120,37)" fg:x="8086" fg:w="2"/><text x="71.7822%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="71.5322%" y="853" width="0.0177%" height="15" fill="rgb(210,21,8)" fg:x="8086" fg:w="2"/><text x="71.7822%" y="863.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="71.5499%" y="869" width="0.0177%" height="15" fill="rgb(243,145,7)" fg:x="8088" fg:w="2"/><text x="71.7999%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.03%)</title><rect x="71.5499%" y="933" width="0.0265%" height="15" fill="rgb(238,178,32)" fg:x="8088" fg:w="3"/><text x="71.7999%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="71.5499%" y="917" width="0.0265%" height="15" fill="rgb(222,4,10)" fg:x="8088" fg:w="3"/><text x="71.7999%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="71.5499%" y="901" width="0.0265%" height="15" fill="rgb(239,7,37)" fg:x="8088" fg:w="3"/><text x="71.7999%" y="911.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="71.5499%" y="885" width="0.0265%" height="15" fill="rgb(215,31,37)" fg:x="8088" fg:w="3"/><text x="71.7999%" y="895.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="71.5941%" y="789" width="0.0354%" height="15" fill="rgb(224,83,33)" fg:x="8093" fg:w="4"/><text x="71.8441%" y="799.50"></text></g><g><title>revm::journaled_state::JournaledState::finalize (10 samples, 0.09%)</title><rect x="71.5499%" y="949" width="0.0885%" height="15" fill="rgb(239,55,3)" fg:x="8088" fg:w="10"/><text x="71.7999%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="71.5764%" y="933" width="0.0619%" height="15" fill="rgb(247,92,11)" fg:x="8091" fg:w="7"/><text x="71.8264%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="71.5764%" y="917" width="0.0619%" height="15" fill="rgb(239,200,7)" fg:x="8091" fg:w="7"/><text x="71.8264%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;]&gt; (7 samples, 0.06%)</title><rect x="71.5764%" y="901" width="0.0619%" height="15" fill="rgb(227,115,8)" fg:x="8091" fg:w="7"/><text x="71.8264%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::journaled_state::JournalEntry&gt;&gt; (6 samples, 0.05%)</title><rect x="71.5853%" y="885" width="0.0531%" height="15" fill="rgb(215,189,27)" fg:x="8092" fg:w="6"/><text x="71.8353%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm::journaled_state::JournalEntry&gt;&gt; (6 samples, 0.05%)</title><rect x="71.5853%" y="869" width="0.0531%" height="15" fill="rgb(251,216,39)" fg:x="8092" fg:w="6"/><text x="71.8353%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="71.5853%" y="853" width="0.0531%" height="15" fill="rgb(207,29,47)" fg:x="8092" fg:w="6"/><text x="71.8353%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="71.5853%" y="837" width="0.0531%" height="15" fill="rgb(210,71,34)" fg:x="8092" fg:w="6"/><text x="71.8353%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="71.5853%" y="821" width="0.0531%" height="15" fill="rgb(253,217,51)" fg:x="8092" fg:w="6"/><text x="71.8353%" y="831.50"></text></g><g><title>__GI___libc_free (6 samples, 0.05%)</title><rect x="71.5853%" y="805" width="0.0531%" height="15" fill="rgb(222,117,46)" fg:x="8092" fg:w="6"/><text x="71.8353%" y="815.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::output (18 samples, 0.16%)</title><rect x="71.4880%" y="997" width="0.1592%" height="15" fill="rgb(226,132,6)" fg:x="8081" fg:w="18"/><text x="71.7380%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (18 samples, 0.16%)</title><rect x="71.4880%" y="981" width="0.1592%" height="15" fill="rgb(254,145,51)" fg:x="8081" fg:w="18"/><text x="71.7380%" y="991.50"></text></g><g><title>revm::handler::mainnet::post_execution::output (18 samples, 0.16%)</title><rect x="71.4880%" y="965" width="0.1592%" height="15" fill="rgb(231,199,27)" fg:x="8081" fg:w="18"/><text x="71.7380%" y="975.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="71.6737%" y="869" width="0.0177%" height="15" fill="rgb(245,158,14)" fg:x="8102" fg:w="2"/><text x="71.9237%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="71.6737%" y="853" width="0.0177%" height="15" fill="rgb(240,113,14)" fg:x="8102" fg:w="2"/><text x="71.9237%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="71.6737%" y="837" width="0.0177%" height="15" fill="rgb(210,20,13)" fg:x="8102" fg:w="2"/><text x="71.9237%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="71.6737%" y="821" width="0.0177%" height="15" fill="rgb(241,144,13)" fg:x="8102" fg:w="2"/><text x="71.9237%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.07%)</title><rect x="71.6649%" y="901" width="0.0708%" height="15" fill="rgb(235,43,34)" fg:x="8101" fg:w="8"/><text x="71.9149%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.07%)</title><rect x="71.6649%" y="885" width="0.0708%" height="15" fill="rgb(208,36,20)" fg:x="8101" fg:w="8"/><text x="71.9149%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="71.7003%" y="869" width="0.0354%" height="15" fill="rgb(239,204,10)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="71.7003%" y="853" width="0.0354%" height="15" fill="rgb(217,84,43)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="71.7003%" y="837" width="0.0354%" height="15" fill="rgb(241,170,50)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="847.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="71.7003%" y="821" width="0.0354%" height="15" fill="rgb(226,205,29)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="71.7003%" y="805" width="0.0354%" height="15" fill="rgb(233,113,1)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.04%)</title><rect x="71.7003%" y="789" width="0.0354%" height="15" fill="rgb(253,98,13)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="71.7003%" y="773" width="0.0354%" height="15" fill="rgb(211,115,12)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="71.7003%" y="757" width="0.0354%" height="15" fill="rgb(208,12,16)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="71.7003%" y="741" width="0.0354%" height="15" fill="rgb(237,193,54)" fg:x="8105" fg:w="4"/><text x="71.9503%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="71.7091%" y="725" width="0.0265%" height="15" fill="rgb(243,22,42)" fg:x="8106" fg:w="3"/><text x="71.9591%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="71.7180%" y="709" width="0.0177%" height="15" fill="rgb(233,151,36)" fg:x="8107" fg:w="2"/><text x="71.9680%" y="719.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reimburse_caller (11 samples, 0.10%)</title><rect x="71.6472%" y="997" width="0.0973%" height="15" fill="rgb(237,57,45)" fg:x="8099" fg:w="11"/><text x="71.8972%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (10 samples, 0.09%)</title><rect x="71.6561%" y="981" width="0.0885%" height="15" fill="rgb(221,88,17)" fg:x="8100" fg:w="10"/><text x="71.9061%" y="991.50"></text></g><g><title>revm::handler::mainnet::post_execution::reimburse_caller (10 samples, 0.09%)</title><rect x="71.6561%" y="965" width="0.0885%" height="15" fill="rgb(230,79,15)" fg:x="8100" fg:w="10"/><text x="71.9061%" y="975.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (9 samples, 0.08%)</title><rect x="71.6649%" y="949" width="0.0796%" height="15" fill="rgb(213,57,13)" fg:x="8101" fg:w="9"/><text x="71.9149%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.08%)</title><rect x="71.6649%" y="933" width="0.0796%" height="15" fill="rgb(222,116,39)" fg:x="8101" fg:w="9"/><text x="71.9149%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.08%)</title><rect x="71.6649%" y="917" width="0.0796%" height="15" fill="rgb(245,107,2)" fg:x="8101" fg:w="9"/><text x="71.9149%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="71.7622%" y="901" width="0.0354%" height="15" fill="rgb(238,1,10)" fg:x="8112" fg:w="4"/><text x="72.0122%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="71.7622%" y="885" width="0.0354%" height="15" fill="rgb(249,4,48)" fg:x="8112" fg:w="4"/><text x="72.0122%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.03%)</title><rect x="71.7711%" y="869" width="0.0265%" height="15" fill="rgb(223,151,18)" fg:x="8113" fg:w="3"/><text x="72.0211%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="71.7711%" y="853" width="0.0265%" height="15" fill="rgb(227,65,43)" fg:x="8113" fg:w="3"/><text x="72.0211%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="71.7711%" y="837" width="0.0265%" height="15" fill="rgb(218,40,45)" fg:x="8113" fg:w="3"/><text x="72.0211%" y="847.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="71.7711%" y="821" width="0.0265%" height="15" fill="rgb(252,121,31)" fg:x="8113" fg:w="3"/><text x="72.0211%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="71.7711%" y="805" width="0.0265%" height="15" fill="rgb(219,158,43)" fg:x="8113" fg:w="3"/><text x="72.0211%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="71.7799%" y="789" width="0.0177%" height="15" fill="rgb(231,162,42)" fg:x="8114" fg:w="2"/><text x="72.0299%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.7799%" y="773" width="0.0177%" height="15" fill="rgb(217,179,25)" fg:x="8114" fg:w="2"/><text x="72.0299%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.7799%" y="757" width="0.0177%" height="15" fill="rgb(206,212,31)" fg:x="8114" fg:w="2"/><text x="72.0299%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.7799%" y="741" width="0.0177%" height="15" fill="rgb(235,144,12)" fg:x="8114" fg:w="2"/><text x="72.0299%" y="751.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.04%)</title><rect x="71.7622%" y="949" width="0.0442%" height="15" fill="rgb(213,51,10)" fg:x="8112" fg:w="5"/><text x="72.0122%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.04%)</title><rect x="71.7622%" y="933" width="0.0442%" height="15" fill="rgb(231,145,14)" fg:x="8112" fg:w="5"/><text x="72.0122%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.04%)</title><rect x="71.7622%" y="917" width="0.0442%" height="15" fill="rgb(235,15,28)" fg:x="8112" fg:w="5"/><text x="72.0122%" y="927.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::reward_beneficiary (8 samples, 0.07%)</title><rect x="71.7445%" y="997" width="0.0708%" height="15" fill="rgb(237,206,10)" fg:x="8110" fg:w="8"/><text x="71.9945%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (8 samples, 0.07%)</title><rect x="71.7445%" y="981" width="0.0708%" height="15" fill="rgb(236,227,27)" fg:x="8110" fg:w="8"/><text x="71.9945%" y="991.50"></text></g><g><title>revm::handler::mainnet::post_execution::reward_beneficiary (8 samples, 0.07%)</title><rect x="71.7445%" y="965" width="0.0708%" height="15" fill="rgb(246,83,35)" fg:x="8110" fg:w="8"/><text x="71.9945%" y="975.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee (5 samples, 0.04%)</title><rect x="71.8330%" y="933" width="0.0442%" height="15" fill="rgb(220,136,24)" fg:x="8120" fg:w="5"/><text x="72.0830%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.04%)</title><rect x="71.8330%" y="917" width="0.0442%" height="15" fill="rgb(217,3,25)" fg:x="8120" fg:w="5"/><text x="72.0830%" y="927.50"></text></g><g><title>revm_primitives::env::Env::calc_data_fee::_{{closure}} (5 samples, 0.04%)</title><rect x="71.8330%" y="901" width="0.0442%" height="15" fill="rgb(239,24,14)" fg:x="8120" fg:w="5"/><text x="72.0830%" y="911.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (4 samples, 0.04%)</title><rect x="71.8418%" y="885" width="0.0354%" height="15" fill="rgb(244,16,53)" fg:x="8121" fg:w="4"/><text x="72.0918%" y="895.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (4 samples, 0.04%)</title><rect x="71.8418%" y="869" width="0.0354%" height="15" fill="rgb(208,175,44)" fg:x="8121" fg:w="4"/><text x="72.0918%" y="879.50"></text></g><g><title>ruint::algorithms::mul::addmul (2 samples, 0.02%)</title><rect x="71.8595%" y="853" width="0.0177%" height="15" fill="rgb(252,18,48)" fg:x="8123" fg:w="2"/><text x="72.1095%" y="863.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_sub (2 samples, 0.02%)</title><rect x="71.8772%" y="933" width="0.0177%" height="15" fill="rgb(234,199,32)" fg:x="8125" fg:w="2"/><text x="72.1272%" y="943.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (2 samples, 0.02%)</title><rect x="71.8772%" y="917" width="0.0177%" height="15" fill="rgb(225,77,54)" fg:x="8125" fg:w="2"/><text x="72.1272%" y="927.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller_inner (12 samples, 0.11%)</title><rect x="71.8330%" y="949" width="0.1062%" height="15" fill="rgb(225,42,25)" fg:x="8120" fg:w="12"/><text x="72.0830%" y="959.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::saturating_mul (5 samples, 0.04%)</title><rect x="71.8949%" y="933" width="0.0442%" height="15" fill="rgb(242,227,46)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="943.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_mul (5 samples, 0.04%)</title><rect x="71.8949%" y="917" width="0.0442%" height="15" fill="rgb(246,197,35)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="927.50"></text></g><g><title>ruint::algorithms::mul::addmul (5 samples, 0.04%)</title><rect x="71.8949%" y="901" width="0.0442%" height="15" fill="rgb(215,159,26)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="911.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="71.8949%" y="885" width="0.0442%" height="15" fill="rgb(212,194,50)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="895.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="71.8949%" y="869" width="0.0442%" height="15" fill="rgb(246,132,1)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="879.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="71.8949%" y="853" width="0.0442%" height="15" fill="rgb(217,71,7)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="863.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="71.8949%" y="837" width="0.0442%" height="15" fill="rgb(252,59,32)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="847.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="71.8949%" y="821" width="0.0442%" height="15" fill="rgb(253,204,25)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="831.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="71.8949%" y="805" width="0.0442%" height="15" fill="rgb(232,21,16)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="815.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="71.8949%" y="789" width="0.0442%" height="15" fill="rgb(248,90,29)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="799.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="71.8949%" y="773" width="0.0442%" height="15" fill="rgb(249,223,7)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="783.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="71.8949%" y="757" width="0.0442%" height="15" fill="rgb(231,119,42)" fg:x="8127" fg:w="5"/><text x="72.1449%" y="767.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="71.9038%" y="741" width="0.0354%" height="15" fill="rgb(215,41,35)" fg:x="8128" fg:w="4"/><text x="72.1538%" y="751.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.04%)</title><rect x="71.9038%" y="725" width="0.0354%" height="15" fill="rgb(220,44,45)" fg:x="8128" fg:w="4"/><text x="72.1538%" y="735.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="71.9480%" y="789" width="0.0177%" height="15" fill="rgb(253,197,36)" fg:x="8133" fg:w="2"/><text x="72.1980%" y="799.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="71.9480%" y="773" width="0.0177%" height="15" fill="rgb(245,225,54)" fg:x="8133" fg:w="2"/><text x="72.1980%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.9480%" y="757" width="0.0177%" height="15" fill="rgb(239,94,37)" fg:x="8133" fg:w="2"/><text x="72.1980%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.9480%" y="741" width="0.0177%" height="15" fill="rgb(242,217,10)" fg:x="8133" fg:w="2"/><text x="72.1980%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.9480%" y="725" width="0.0177%" height="15" fill="rgb(250,193,7)" fg:x="8133" fg:w="2"/><text x="72.1980%" y="735.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::deduct_caller (19 samples, 0.17%)</title><rect x="71.8153%" y="997" width="0.1681%" height="15" fill="rgb(230,104,19)" fg:x="8118" fg:w="19"/><text x="72.0653%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (17 samples, 0.15%)</title><rect x="71.8330%" y="981" width="0.1504%" height="15" fill="rgb(230,181,4)" fg:x="8120" fg:w="17"/><text x="72.0830%" y="991.50"></text></g><g><title>revm::handler::mainnet::pre_execution::deduct_caller (17 samples, 0.15%)</title><rect x="71.8330%" y="965" width="0.1504%" height="15" fill="rgb(216,219,49)" fg:x="8120" fg:w="17"/><text x="72.0830%" y="975.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (5 samples, 0.04%)</title><rect x="71.9391%" y="949" width="0.0442%" height="15" fill="rgb(254,144,0)" fg:x="8132" fg:w="5"/><text x="72.1891%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.04%)</title><rect x="71.9391%" y="933" width="0.0442%" height="15" fill="rgb(205,209,38)" fg:x="8132" fg:w="5"/><text x="72.1891%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.04%)</title><rect x="71.9391%" y="917" width="0.0442%" height="15" fill="rgb(240,21,42)" fg:x="8132" fg:w="5"/><text x="72.1891%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="71.9391%" y="901" width="0.0442%" height="15" fill="rgb(241,132,3)" fg:x="8132" fg:w="5"/><text x="72.1891%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="71.9391%" y="885" width="0.0442%" height="15" fill="rgb(225,14,2)" fg:x="8132" fg:w="5"/><text x="72.1891%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="71.9480%" y="869" width="0.0354%" height="15" fill="rgb(210,141,35)" fg:x="8133" fg:w="4"/><text x="72.1980%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="71.9480%" y="853" width="0.0354%" height="15" fill="rgb(251,14,44)" fg:x="8133" fg:w="4"/><text x="72.1980%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="71.9480%" y="837" width="0.0354%" height="15" fill="rgb(247,48,18)" fg:x="8133" fg:w="4"/><text x="72.1980%" y="847.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="71.9480%" y="821" width="0.0354%" height="15" fill="rgb(225,0,40)" fg:x="8133" fg:w="4"/><text x="72.1980%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="71.9480%" y="805" width="0.0354%" height="15" fill="rgb(221,31,33)" fg:x="8133" fg:w="4"/><text x="72.1980%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="71.9657%" y="789" width="0.0177%" height="15" fill="rgb(237,42,40)" fg:x="8135" fg:w="2"/><text x="72.2157%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.9657%" y="773" width="0.0177%" height="15" fill="rgb(233,51,29)" fg:x="8135" fg:w="2"/><text x="72.2157%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.9657%" y="757" width="0.0177%" height="15" fill="rgb(226,58,20)" fg:x="8135" fg:w="2"/><text x="72.2157%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="71.9657%" y="741" width="0.0177%" height="15" fill="rgb(208,98,7)" fg:x="8135" fg:w="2"/><text x="72.2157%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="71.9657%" y="725" width="0.0177%" height="15" fill="rgb(228,143,44)" fg:x="8135" fg:w="2"/><text x="72.2157%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (2 samples, 0.02%)</title><rect x="71.9834%" y="933" width="0.0177%" height="15" fill="rgb(246,55,38)" fg:x="8137" fg:w="2"/><text x="72.2334%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="71.9834%" y="917" width="0.0177%" height="15" fill="rgb(247,87,16)" fg:x="8137" fg:w="2"/><text x="72.2334%" y="927.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (6 samples, 0.05%)</title><rect x="72.0188%" y="837" width="0.0531%" height="15" fill="rgb(234,129,42)" fg:x="8141" fg:w="6"/><text x="72.2688%" y="847.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (6 samples, 0.05%)</title><rect x="72.0188%" y="821" width="0.0531%" height="15" fill="rgb(220,82,16)" fg:x="8141" fg:w="6"/><text x="72.2688%" y="831.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (6 samples, 0.05%)</title><rect x="72.0188%" y="805" width="0.0531%" height="15" fill="rgb(211,88,4)" fg:x="8141" fg:w="6"/><text x="72.2688%" y="815.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (6 samples, 0.05%)</title><rect x="72.0188%" y="789" width="0.0531%" height="15" fill="rgb(248,151,21)" fg:x="8141" fg:w="6"/><text x="72.2688%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.04%)</title><rect x="72.0276%" y="773" width="0.0442%" height="15" fill="rgb(238,163,6)" fg:x="8142" fg:w="5"/><text x="72.2776%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.04%)</title><rect x="72.0276%" y="757" width="0.0442%" height="15" fill="rgb(209,183,11)" fg:x="8142" fg:w="5"/><text x="72.2776%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="72.0807%" y="821" width="0.0177%" height="15" fill="rgb(219,37,20)" fg:x="8148" fg:w="2"/><text x="72.3307%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="72.0807%" y="805" width="0.0177%" height="15" fill="rgb(210,158,4)" fg:x="8148" fg:w="2"/><text x="72.3307%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="72.0807%" y="789" width="0.0177%" height="15" fill="rgb(221,167,53)" fg:x="8148" fg:w="2"/><text x="72.3307%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="72.0984%" y="789" width="0.0177%" height="15" fill="rgb(237,151,45)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="72.0984%" y="773" width="0.0177%" height="15" fill="rgb(231,39,3)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="783.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="72.0984%" y="757" width="0.0177%" height="15" fill="rgb(212,167,28)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="72.0984%" y="741" width="0.0177%" height="15" fill="rgb(232,178,8)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="751.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="72.0984%" y="725" width="0.0177%" height="15" fill="rgb(225,151,20)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="72.0984%" y="709" width="0.0177%" height="15" fill="rgb(238,3,37)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="72.0984%" y="693" width="0.0177%" height="15" fill="rgb(251,147,42)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="72.0984%" y="677" width="0.0177%" height="15" fill="rgb(208,173,10)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="72.0984%" y="661" width="0.0177%" height="15" fill="rgb(246,225,4)" fg:x="8150" fg:w="2"/><text x="72.3484%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.1161%" y="789" width="0.0265%" height="15" fill="rgb(248,102,6)" fg:x="8152" fg:w="3"/><text x="72.3661%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.1161%" y="773" width="0.0265%" height="15" fill="rgb(232,6,21)" fg:x="8152" fg:w="3"/><text x="72.3661%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.1161%" y="757" width="0.0265%" height="15" fill="rgb(221,179,22)" fg:x="8152" fg:w="3"/><text x="72.3661%" y="767.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (8 samples, 0.07%)</title><rect x="72.0807%" y="837" width="0.0708%" height="15" fill="rgb(252,50,20)" fg:x="8148" fg:w="8"/><text x="72.3307%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.05%)</title><rect x="72.0984%" y="821" width="0.0531%" height="15" fill="rgb(222,56,38)" fg:x="8150" fg:w="6"/><text x="72.3484%" y="831.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (6 samples, 0.05%)</title><rect x="72.0984%" y="805" width="0.0531%" height="15" fill="rgb(206,193,29)" fg:x="8150" fg:w="6"/><text x="72.3484%" y="815.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (16 samples, 0.14%)</title><rect x="72.0188%" y="885" width="0.1415%" height="15" fill="rgb(239,192,45)" fg:x="8141" fg:w="16"/><text x="72.2688%" y="895.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (16 samples, 0.14%)</title><rect x="72.0188%" y="869" width="0.1415%" height="15" fill="rgb(254,18,36)" fg:x="8141" fg:w="16"/><text x="72.2688%" y="879.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (16 samples, 0.14%)</title><rect x="72.0188%" y="853" width="0.1415%" height="15" fill="rgb(221,127,11)" fg:x="8141" fg:w="16"/><text x="72.2688%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="72.2045%" y="773" width="0.0265%" height="15" fill="rgb(234,146,35)" fg:x="8162" fg:w="3"/><text x="72.4545%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="72.2045%" y="757" width="0.0265%" height="15" fill="rgb(254,201,37)" fg:x="8162" fg:w="3"/><text x="72.4545%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="72.2045%" y="741" width="0.0265%" height="15" fill="rgb(211,202,23)" fg:x="8162" fg:w="3"/><text x="72.4545%" y="751.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="72.2311%" y="693" width="0.0265%" height="15" fill="rgb(237,91,2)" fg:x="8165" fg:w="3"/><text x="72.4811%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="72.2311%" y="677" width="0.0265%" height="15" fill="rgb(226,228,36)" fg:x="8165" fg:w="3"/><text x="72.4811%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.2311%" y="661" width="0.0265%" height="15" fill="rgb(213,63,50)" fg:x="8165" fg:w="3"/><text x="72.4811%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.2311%" y="645" width="0.0265%" height="15" fill="rgb(235,194,19)" fg:x="8165" fg:w="3"/><text x="72.4811%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.2311%" y="629" width="0.0265%" height="15" fill="rgb(207,204,18)" fg:x="8165" fg:w="3"/><text x="72.4811%" y="639.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (34 samples, 0.30%)</title><rect x="72.0011%" y="933" width="0.3008%" height="15" fill="rgb(248,8,7)" fg:x="8139" fg:w="34"/><text x="72.2511%" y="943.50"></text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (34 samples, 0.30%)</title><rect x="72.0011%" y="917" width="0.3008%" height="15" fill="rgb(223,145,47)" fg:x="8139" fg:w="34"/><text x="72.2511%" y="927.50"></text></g><g><title>block_stm_revm::vm::VmDb::read (34 samples, 0.30%)</title><rect x="72.0011%" y="901" width="0.3008%" height="15" fill="rgb(228,84,11)" fg:x="8139" fg:w="34"/><text x="72.2511%" y="911.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for alloc::sync::Arc&lt;T&gt;&gt;::basic_ref (16 samples, 0.14%)</title><rect x="72.1603%" y="885" width="0.1415%" height="15" fill="rgb(218,76,45)" fg:x="8157" fg:w="16"/><text x="72.4103%" y="895.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (16 samples, 0.14%)</title><rect x="72.1603%" y="869" width="0.1415%" height="15" fill="rgb(223,80,15)" fg:x="8157" fg:w="16"/><text x="72.4103%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (16 samples, 0.14%)</title><rect x="72.1603%" y="853" width="0.1415%" height="15" fill="rgb(219,218,33)" fg:x="8157" fg:w="16"/><text x="72.4103%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (16 samples, 0.14%)</title><rect x="72.1603%" y="837" width="0.1415%" height="15" fill="rgb(208,51,11)" fg:x="8157" fg:w="16"/><text x="72.4103%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (16 samples, 0.14%)</title><rect x="72.1603%" y="821" width="0.1415%" height="15" fill="rgb(229,165,39)" fg:x="8157" fg:w="16"/><text x="72.4103%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.10%)</title><rect x="72.2045%" y="805" width="0.0973%" height="15" fill="rgb(241,100,24)" fg:x="8162" fg:w="11"/><text x="72.4545%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.10%)</title><rect x="72.2045%" y="789" width="0.0973%" height="15" fill="rgb(228,14,23)" fg:x="8162" fg:w="11"/><text x="72.4545%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.07%)</title><rect x="72.2311%" y="773" width="0.0708%" height="15" fill="rgb(247,116,52)" fg:x="8165" fg:w="8"/><text x="72.4811%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (8 samples, 0.07%)</title><rect x="72.2311%" y="757" width="0.0708%" height="15" fill="rgb(216,149,33)" fg:x="8165" fg:w="8"/><text x="72.4811%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (8 samples, 0.07%)</title><rect x="72.2311%" y="741" width="0.0708%" height="15" fill="rgb(238,142,29)" fg:x="8165" fg:w="8"/><text x="72.4811%" y="751.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.07%)</title><rect x="72.2311%" y="725" width="0.0708%" height="15" fill="rgb(224,83,40)" fg:x="8165" fg:w="8"/><text x="72.4811%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.07%)</title><rect x="72.2311%" y="709" width="0.0708%" height="15" fill="rgb(234,165,11)" fg:x="8165" fg:w="8"/><text x="72.4811%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (5 samples, 0.04%)</title><rect x="72.2576%" y="693" width="0.0442%" height="15" fill="rgb(215,96,23)" fg:x="8168" fg:w="5"/><text x="72.5076%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="72.2576%" y="677" width="0.0442%" height="15" fill="rgb(233,179,26)" fg:x="8168" fg:w="5"/><text x="72.5076%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="72.2576%" y="661" width="0.0442%" height="15" fill="rgb(225,129,33)" fg:x="8168" fg:w="5"/><text x="72.5076%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="72.2576%" y="645" width="0.0442%" height="15" fill="rgb(237,49,13)" fg:x="8168" fg:w="5"/><text x="72.5076%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5 samples, 0.04%)</title><rect x="72.3284%" y="885" width="0.0442%" height="15" fill="rgb(211,3,31)" fg:x="8176" fg:w="5"/><text x="72.5784%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.04%)</title><rect x="72.3284%" y="869" width="0.0442%" height="15" fill="rgb(216,152,19)" fg:x="8176" fg:w="5"/><text x="72.5784%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.04%)</title><rect x="72.3372%" y="853" width="0.0354%" height="15" fill="rgb(251,121,35)" fg:x="8177" fg:w="4"/><text x="72.5872%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="72.3372%" y="837" width="0.0354%" height="15" fill="rgb(210,217,47)" fg:x="8177" fg:w="4"/><text x="72.5872%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="72.3372%" y="821" width="0.0354%" height="15" fill="rgb(244,116,22)" fg:x="8177" fg:w="4"/><text x="72.5872%" y="831.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="72.3372%" y="805" width="0.0354%" height="15" fill="rgb(228,17,21)" fg:x="8177" fg:w="4"/><text x="72.5872%" y="815.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="72.3372%" y="789" width="0.0354%" height="15" fill="rgb(240,149,34)" fg:x="8177" fg:w="4"/><text x="72.5872%" y="799.50"></text></g><g><title>revm_primitives::state::Account::new_not_existing (13 samples, 0.12%)</title><rect x="72.3018%" y="933" width="0.1150%" height="15" fill="rgb(208,125,47)" fg:x="8173" fg:w="13"/><text x="72.5518%" y="943.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (11 samples, 0.10%)</title><rect x="72.3195%" y="917" width="0.0973%" height="15" fill="rgb(249,186,39)" fg:x="8175" fg:w="11"/><text x="72.5695%" y="927.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (10 samples, 0.09%)</title><rect x="72.3284%" y="901" width="0.0885%" height="15" fill="rgb(240,220,33)" fg:x="8176" fg:w="10"/><text x="72.5784%" y="911.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (5 samples, 0.04%)</title><rect x="72.3726%" y="885" width="0.0442%" height="15" fill="rgb(243,110,23)" fg:x="8181" fg:w="5"/><text x="72.6226%" y="895.50"></text></g><g><title>tap::pipe::Pipe::pipe (4 samples, 0.04%)</title><rect x="72.3815%" y="869" width="0.0354%" height="15" fill="rgb(219,163,46)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.04%)</title><rect x="72.3815%" y="853" width="0.0354%" height="15" fill="rgb(216,126,30)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.04%)</title><rect x="72.3815%" y="837" width="0.0354%" height="15" fill="rgb(208,139,11)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="72.3815%" y="821" width="0.0354%" height="15" fill="rgb(213,118,36)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="72.3815%" y="805" width="0.0354%" height="15" fill="rgb(226,43,17)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="72.3815%" y="789" width="0.0354%" height="15" fill="rgb(254,217,4)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="72.3815%" y="773" width="0.0354%" height="15" fill="rgb(210,134,47)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="72.3815%" y="757" width="0.0354%" height="15" fill="rgb(237,24,49)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="767.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="72.3815%" y="741" width="0.0354%" height="15" fill="rgb(251,39,46)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="751.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="72.3815%" y="725" width="0.0354%" height="15" fill="rgb(251,220,3)" fg:x="8182" fg:w="4"/><text x="72.6315%" y="735.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="72.3992%" y="709" width="0.0177%" height="15" fill="rgb(228,105,12)" fg:x="8184" fg:w="2"/><text x="72.6492%" y="719.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="72.3992%" y="693" width="0.0177%" height="15" fill="rgb(215,196,1)" fg:x="8184" fg:w="2"/><text x="72.6492%" y="703.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="72.4345%" y="789" width="0.0265%" height="15" fill="rgb(214,33,39)" fg:x="8188" fg:w="3"/><text x="72.6845%" y="799.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="72.4345%" y="773" width="0.0265%" height="15" fill="rgb(220,19,52)" fg:x="8188" fg:w="3"/><text x="72.6845%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.4345%" y="757" width="0.0265%" height="15" fill="rgb(221,78,38)" fg:x="8188" fg:w="3"/><text x="72.6845%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.4345%" y="741" width="0.0265%" height="15" fill="rgb(253,30,16)" fg:x="8188" fg:w="3"/><text x="72.6845%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="72.4345%" y="725" width="0.0265%" height="15" fill="rgb(242,65,0)" fg:x="8188" fg:w="3"/><text x="72.6845%" y="735.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.06%)</title><rect x="72.4168%" y="917" width="0.0619%" height="15" fill="rgb(235,201,12)" fg:x="8186" fg:w="7"/><text x="72.6668%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="72.4257%" y="901" width="0.0531%" height="15" fill="rgb(233,161,9)" fg:x="8187" fg:w="6"/><text x="72.6757%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="72.4257%" y="885" width="0.0531%" height="15" fill="rgb(241,207,41)" fg:x="8187" fg:w="6"/><text x="72.6757%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="72.4345%" y="869" width="0.0442%" height="15" fill="rgb(212,69,46)" fg:x="8188" fg:w="5"/><text x="72.6845%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="72.4345%" y="853" width="0.0442%" height="15" fill="rgb(239,69,45)" fg:x="8188" fg:w="5"/><text x="72.6845%" y="863.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="72.4345%" y="837" width="0.0442%" height="15" fill="rgb(242,117,48)" fg:x="8188" fg:w="5"/><text x="72.6845%" y="847.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.04%)</title><rect x="72.4345%" y="821" width="0.0442%" height="15" fill="rgb(228,41,36)" fg:x="8188" fg:w="5"/><text x="72.6845%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.04%)</title><rect x="72.4345%" y="805" width="0.0442%" height="15" fill="rgb(212,3,32)" fg:x="8188" fg:w="5"/><text x="72.6845%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="72.4611%" y="789" width="0.0177%" height="15" fill="rgb(233,41,49)" fg:x="8191" fg:w="2"/><text x="72.7111%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="72.4611%" y="773" width="0.0177%" height="15" fill="rgb(252,170,49)" fg:x="8191" fg:w="2"/><text x="72.7111%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="72.4611%" y="757" width="0.0177%" height="15" fill="rgb(229,53,26)" fg:x="8191" fg:w="2"/><text x="72.7111%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="72.4611%" y="741" width="0.0177%" height="15" fill="rgb(217,157,12)" fg:x="8191" fg:w="2"/><text x="72.7111%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.07%)</title><rect x="72.4168%" y="933" width="0.0708%" height="15" fill="rgb(227,17,9)" fg:x="8186" fg:w="8"/><text x="72.6668%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="72.4876%" y="885" width="0.0177%" height="15" fill="rgb(218,84,12)" fg:x="8194" fg:w="2"/><text x="72.7376%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="72.4876%" y="869" width="0.0177%" height="15" fill="rgb(212,79,24)" fg:x="8194" fg:w="2"/><text x="72.7376%" y="879.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="72.4876%" y="853" width="0.0177%" height="15" fill="rgb(217,222,37)" fg:x="8194" fg:w="2"/><text x="72.7376%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="72.4876%" y="837" width="0.0177%" height="15" fill="rgb(246,208,8)" fg:x="8194" fg:w="2"/><text x="72.7376%" y="847.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_accounts (60 samples, 0.53%)</title><rect x="71.9834%" y="997" width="0.5308%" height="15" fill="rgb(244,133,10)" fg:x="8137" fg:w="60"/><text x="72.2334%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (60 samples, 0.53%)</title><rect x="71.9834%" y="981" width="0.5308%" height="15" fill="rgb(209,219,41)" fg:x="8137" fg:w="60"/><text x="72.2334%" y="991.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_accounts (60 samples, 0.53%)</title><rect x="71.9834%" y="965" width="0.5308%" height="15" fill="rgb(253,175,45)" fg:x="8137" fg:w="60"/><text x="72.2334%" y="975.50"></text></g><g><title>revm::journaled_state::JournaledState::initial_account_load (60 samples, 0.53%)</title><rect x="71.9834%" y="949" width="0.5308%" height="15" fill="rgb(235,100,37)" fg:x="8137" fg:w="60"/><text x="72.2334%" y="959.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.03%)</title><rect x="72.4876%" y="933" width="0.0265%" height="15" fill="rgb(225,87,19)" fg:x="8194" fg:w="3"/><text x="72.7376%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.03%)</title><rect x="72.4876%" y="917" width="0.0265%" height="15" fill="rgb(217,152,17)" fg:x="8194" fg:w="3"/><text x="72.7376%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.03%)</title><rect x="72.4876%" y="901" width="0.0265%" height="15" fill="rgb(235,72,13)" fg:x="8194" fg:w="3"/><text x="72.7376%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="72.5584%" y="773" width="0.0354%" height="15" fill="rgb(233,140,18)" fg:x="8202" fg:w="4"/><text x="72.8084%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="72.5672%" y="757" width="0.0265%" height="15" fill="rgb(207,212,28)" fg:x="8203" fg:w="3"/><text x="72.8172%" y="767.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.03%)</title><rect x="72.5672%" y="741" width="0.0265%" height="15" fill="rgb(220,130,25)" fg:x="8203" fg:w="3"/><text x="72.8172%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="72.5761%" y="725" width="0.0177%" height="15" fill="rgb(205,55,34)" fg:x="8204" fg:w="2"/><text x="72.8261%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="72.7088%" y="677" width="0.0442%" height="15" fill="rgb(237,54,35)" fg:x="8219" fg:w="5"/><text x="72.9588%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="72.7088%" y="661" width="0.0442%" height="15" fill="rgb(208,67,23)" fg:x="8219" fg:w="5"/><text x="72.9588%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="72.7088%" y="645" width="0.0442%" height="15" fill="rgb(206,207,50)" fg:x="8219" fg:w="5"/><text x="72.9588%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="72.8061%" y="517" width="0.0177%" height="15" fill="rgb(213,211,42)" fg:x="8230" fg:w="2"/><text x="73.0561%" y="527.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (10 samples, 0.09%)</title><rect x="72.7619%" y="597" width="0.0885%" height="15" fill="rgb(252,197,50)" fg:x="8225" fg:w="10"/><text x="73.0119%" y="607.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.09%)</title><rect x="72.7619%" y="581" width="0.0885%" height="15" fill="rgb(251,211,41)" fg:x="8225" fg:w="10"/><text x="73.0119%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="72.7707%" y="565" width="0.0796%" height="15" fill="rgb(229,211,5)" fg:x="8226" fg:w="9"/><text x="73.0207%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="72.7707%" y="549" width="0.0796%" height="15" fill="rgb(239,36,31)" fg:x="8226" fg:w="9"/><text x="73.0207%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="72.7707%" y="533" width="0.0796%" height="15" fill="rgb(248,67,31)" fg:x="8226" fg:w="9"/><text x="73.0207%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.03%)</title><rect x="72.8238%" y="517" width="0.0265%" height="15" fill="rgb(249,55,44)" fg:x="8232" fg:w="3"/><text x="73.0738%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.04%)</title><rect x="72.9122%" y="533" width="0.0442%" height="15" fill="rgb(216,82,12)" fg:x="8242" fg:w="5"/><text x="73.1622%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.03%)</title><rect x="72.9299%" y="517" width="0.0265%" height="15" fill="rgb(242,174,1)" fg:x="8244" fg:w="3"/><text x="73.1799%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.04%)</title><rect x="72.9565%" y="533" width="0.0354%" height="15" fill="rgb(208,120,29)" fg:x="8247" fg:w="4"/><text x="73.2065%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (34 samples, 0.30%)</title><rect x="72.6999%" y="709" width="0.3008%" height="15" fill="rgb(221,105,43)" fg:x="8218" fg:w="34"/><text x="72.9499%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (34 samples, 0.30%)</title><rect x="72.6999%" y="693" width="0.3008%" height="15" fill="rgb(234,124,22)" fg:x="8218" fg:w="34"/><text x="72.9499%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27 samples, 0.24%)</title><rect x="72.7619%" y="677" width="0.2389%" height="15" fill="rgb(212,23,30)" fg:x="8225" fg:w="27"/><text x="73.0119%" y="687.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (27 samples, 0.24%)</title><rect x="72.7619%" y="661" width="0.2389%" height="15" fill="rgb(219,122,53)" fg:x="8225" fg:w="27"/><text x="73.0119%" y="671.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (27 samples, 0.24%)</title><rect x="72.7619%" y="645" width="0.2389%" height="15" fill="rgb(248,84,24)" fg:x="8225" fg:w="27"/><text x="73.0119%" y="655.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (27 samples, 0.24%)</title><rect x="72.7619%" y="629" width="0.2389%" height="15" fill="rgb(245,115,18)" fg:x="8225" fg:w="27"/><text x="73.0119%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (27 samples, 0.24%)</title><rect x="72.7619%" y="613" width="0.2389%" height="15" fill="rgb(227,176,51)" fg:x="8225" fg:w="27"/><text x="73.0119%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (17 samples, 0.15%)</title><rect x="72.8503%" y="597" width="0.1504%" height="15" fill="rgb(229,63,42)" fg:x="8235" fg:w="17"/><text x="73.1003%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.15%)</title><rect x="72.8503%" y="581" width="0.1504%" height="15" fill="rgb(247,202,24)" fg:x="8235" fg:w="17"/><text x="73.1003%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.15%)</title><rect x="72.8503%" y="565" width="0.1504%" height="15" fill="rgb(244,173,20)" fg:x="8235" fg:w="17"/><text x="73.1003%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.15%)</title><rect x="72.8503%" y="549" width="0.1504%" height="15" fill="rgb(242,81,47)" fg:x="8235" fg:w="17"/><text x="73.1003%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="73.0007%" y="693" width="0.0265%" height="15" fill="rgb(231,185,54)" fg:x="8252" fg:w="3"/><text x="73.2507%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.02%)</title><rect x="73.0361%" y="677" width="0.0177%" height="15" fill="rgb(243,55,32)" fg:x="8256" fg:w="2"/><text x="73.2861%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.07%)</title><rect x="73.0007%" y="709" width="0.0708%" height="15" fill="rgb(208,167,19)" fg:x="8252" fg:w="8"/><text x="73.2507%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.04%)</title><rect x="73.0272%" y="693" width="0.0442%" height="15" fill="rgb(231,72,35)" fg:x="8255" fg:w="5"/><text x="73.2772%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.04%)</title><rect x="73.0715%" y="693" width="0.0354%" height="15" fill="rgb(250,173,51)" fg:x="8260" fg:w="4"/><text x="73.3215%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.04%)</title><rect x="73.0715%" y="677" width="0.0354%" height="15" fill="rgb(209,5,22)" fg:x="8260" fg:w="4"/><text x="73.3215%" y="687.50"></text></g><g><title>core::ptr::write (4 samples, 0.04%)</title><rect x="73.0715%" y="661" width="0.0354%" height="15" fill="rgb(250,174,19)" fg:x="8260" fg:w="4"/><text x="73.3215%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (62 samples, 0.55%)</title><rect x="72.5938%" y="773" width="0.5485%" height="15" fill="rgb(217,3,49)" fg:x="8206" fg:w="62"/><text x="72.8438%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (61 samples, 0.54%)</title><rect x="72.6026%" y="757" width="0.5396%" height="15" fill="rgb(218,225,5)" fg:x="8207" fg:w="61"/><text x="72.8526%" y="767.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (61 samples, 0.54%)</title><rect x="72.6026%" y="741" width="0.5396%" height="15" fill="rgb(236,89,11)" fg:x="8207" fg:w="61"/><text x="72.8526%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (57 samples, 0.50%)</title><rect x="72.6380%" y="725" width="0.5042%" height="15" fill="rgb(206,33,28)" fg:x="8211" fg:w="57"/><text x="72.8880%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (8 samples, 0.07%)</title><rect x="73.0715%" y="709" width="0.0708%" height="15" fill="rgb(241,56,42)" fg:x="8260" fg:w="8"/><text x="73.3215%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 0.03%)</title><rect x="73.1157%" y="693" width="0.0265%" height="15" fill="rgb(222,44,11)" fg:x="8265" fg:w="3"/><text x="73.3657%" y="703.50"></text></g><g><title>hashbrown::raw::special_is_empty (2 samples, 0.02%)</title><rect x="73.1246%" y="677" width="0.0177%" height="15" fill="rgb(234,111,20)" fg:x="8266" fg:w="2"/><text x="73.3746%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (68 samples, 0.60%)</title><rect x="72.5495%" y="853" width="0.6016%" height="15" fill="rgb(237,77,6)" fg:x="8201" fg:w="68"/><text x="72.7995%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (68 samples, 0.60%)</title><rect x="72.5495%" y="837" width="0.6016%" height="15" fill="rgb(235,111,23)" fg:x="8201" fg:w="68"/><text x="72.7995%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (68 samples, 0.60%)</title><rect x="72.5495%" y="821" width="0.6016%" height="15" fill="rgb(251,135,29)" fg:x="8201" fg:w="68"/><text x="72.7995%" y="831.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (68 samples, 0.60%)</title><rect x="72.5495%" y="805" width="0.6016%" height="15" fill="rgb(217,57,1)" fg:x="8201" fg:w="68"/><text x="72.7995%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (68 samples, 0.60%)</title><rect x="72.5495%" y="789" width="0.6016%" height="15" fill="rgb(249,119,31)" fg:x="8201" fg:w="68"/><text x="72.7995%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (71 samples, 0.63%)</title><rect x="72.5495%" y="885" width="0.6281%" height="15" fill="rgb(233,164,33)" fg:x="8201" fg:w="71"/><text x="72.7995%" y="895.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (71 samples, 0.63%)</title><rect x="72.5495%" y="869" width="0.6281%" height="15" fill="rgb(250,217,43)" fg:x="8201" fg:w="71"/><text x="72.7995%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3 samples, 0.03%)</title><rect x="73.1511%" y="853" width="0.0265%" height="15" fill="rgb(232,154,50)" fg:x="8269" fg:w="3"/><text x="73.4011%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="73.1511%" y="837" width="0.0265%" height="15" fill="rgb(227,190,8)" fg:x="8269" fg:w="3"/><text x="73.4011%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.03%)</title><rect x="73.1511%" y="821" width="0.0265%" height="15" fill="rgb(209,217,32)" fg:x="8269" fg:w="3"/><text x="73.4011%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.03%)</title><rect x="73.1511%" y="805" width="0.0265%" height="15" fill="rgb(243,203,50)" fg:x="8269" fg:w="3"/><text x="73.4011%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.03%)</title><rect x="73.1511%" y="789" width="0.0265%" height="15" fill="rgb(232,152,27)" fg:x="8269" fg:w="3"/><text x="73.4011%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (2 samples, 0.02%)</title><rect x="73.1599%" y="773" width="0.0177%" height="15" fill="rgb(240,34,29)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (2 samples, 0.02%)</title><rect x="73.1599%" y="757" width="0.0177%" height="15" fill="rgb(215,185,52)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.02%)</title><rect x="73.1599%" y="741" width="0.0177%" height="15" fill="rgb(240,89,49)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="751.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.02%)</title><rect x="73.1599%" y="725" width="0.0177%" height="15" fill="rgb(225,12,52)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="73.1599%" y="709" width="0.0177%" height="15" fill="rgb(239,128,45)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="73.1599%" y="693" width="0.0177%" height="15" fill="rgb(211,78,47)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="703.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="73.1599%" y="677" width="0.0177%" height="15" fill="rgb(232,31,21)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="687.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="73.1599%" y="661" width="0.0177%" height="15" fill="rgb(222,168,14)" fg:x="8270" fg:w="2"/><text x="73.4099%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (79 samples, 0.70%)</title><rect x="72.5230%" y="949" width="0.6989%" height="15" fill="rgb(209,128,24)" fg:x="8198" fg:w="79"/><text x="72.7730%" y="959.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (79 samples, 0.70%)</title><rect x="72.5230%" y="933" width="0.6989%" height="15" fill="rgb(249,35,13)" fg:x="8198" fg:w="79"/><text x="72.7730%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (78 samples, 0.69%)</title><rect x="72.5318%" y="917" width="0.6900%" height="15" fill="rgb(218,7,2)" fg:x="8199" fg:w="78"/><text x="72.7818%" y="927.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (78 samples, 0.69%)</title><rect x="72.5318%" y="901" width="0.6900%" height="15" fill="rgb(238,107,27)" fg:x="8199" fg:w="78"/><text x="72.7818%" y="911.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="73.1776%" y="885" width="0.0442%" height="15" fill="rgb(217,88,38)" fg:x="8272" fg:w="5"/><text x="73.4276%" y="895.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="73.1776%" y="869" width="0.0442%" height="15" fill="rgb(230,207,0)" fg:x="8272" fg:w="5"/><text x="73.4276%" y="879.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="73.1776%" y="853" width="0.0442%" height="15" fill="rgb(249,64,54)" fg:x="8272" fg:w="5"/><text x="73.4276%" y="863.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="73.1776%" y="837" width="0.0442%" height="15" fill="rgb(231,7,11)" fg:x="8272" fg:w="5"/><text x="73.4276%" y="847.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="73.1776%" y="821" width="0.0442%" height="15" fill="rgb(205,149,21)" fg:x="8272" fg:w="5"/><text x="73.4276%" y="831.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="73.1776%" y="805" width="0.0442%" height="15" fill="rgb(215,126,34)" fg:x="8272" fg:w="5"/><text x="73.4276%" y="815.50"></text></g><g><title>schedule (4 samples, 0.04%)</title><rect x="73.1865%" y="789" width="0.0354%" height="15" fill="rgb(241,132,45)" fg:x="8273" fg:w="4"/><text x="73.4365%" y="799.50"></text></g><g><title>__schedule (4 samples, 0.04%)</title><rect x="73.1865%" y="773" width="0.0354%" height="15" fill="rgb(252,69,32)" fg:x="8273" fg:w="4"/><text x="73.4365%" y="783.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.04%)</title><rect x="73.1865%" y="757" width="0.0354%" height="15" fill="rgb(232,204,19)" fg:x="8273" fg:w="4"/><text x="73.4365%" y="767.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="73.1865%" y="741" width="0.0354%" height="15" fill="rgb(249,15,47)" fg:x="8273" fg:w="4"/><text x="73.4365%" y="751.50"></text></g><g><title>perf_pmu_nop_void (4 samples, 0.04%)</title><rect x="73.1865%" y="725" width="0.0354%" height="15" fill="rgb(209,227,23)" fg:x="8273" fg:w="4"/><text x="73.4365%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="73.2484%" y="821" width="0.0177%" height="15" fill="rgb(248,92,24)" fg:x="8280" fg:w="2"/><text x="73.4984%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="73.2484%" y="853" width="0.0265%" height="15" fill="rgb(247,59,2)" fg:x="8280" fg:w="3"/><text x="73.4984%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.03%)</title><rect x="73.2484%" y="837" width="0.0265%" height="15" fill="rgb(221,30,5)" fg:x="8280" fg:w="3"/><text x="73.4984%" y="847.50"></text></g><g><title>core::clone::Clone::clone (3 samples, 0.03%)</title><rect x="73.2749%" y="853" width="0.0265%" height="15" fill="rgb(208,108,53)" fg:x="8283" fg:w="3"/><text x="73.5249%" y="863.50"></text></g><g><title>&lt;revm_primitives::precompile::Precompile as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="73.2838%" y="837" width="0.0177%" height="15" fill="rgb(211,183,26)" fg:x="8284" fg:w="2"/><text x="73.5338%" y="847.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (91 samples, 0.81%)</title><rect x="72.5142%" y="997" width="0.8050%" height="15" fill="rgb(232,132,4)" fg:x="8197" fg:w="91"/><text x="72.7642%" y="1007.50"></text></g><g><title>core::ops::function::Fn::call (90 samples, 0.80%)</title><rect x="72.5230%" y="981" width="0.7962%" height="15" fill="rgb(253,128,37)" fg:x="8198" fg:w="90"/><text x="72.7730%" y="991.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (90 samples, 0.80%)</title><rect x="72.5230%" y="965" width="0.7962%" height="15" fill="rgb(221,58,24)" fg:x="8198" fg:w="90"/><text x="72.7730%" y="975.50"></text></g><g><title>&lt;revm_precompile::Precompiles as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="73.2219%" y="949" width="0.0973%" height="15" fill="rgb(230,54,45)" fg:x="8277" fg:w="11"/><text x="73.4719%" y="959.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="73.2219%" y="933" width="0.0973%" height="15" fill="rgb(254,21,18)" fg:x="8277" fg:w="11"/><text x="73.4719%" y="943.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="73.2219%" y="917" width="0.0973%" height="15" fill="rgb(221,108,0)" fg:x="8277" fg:w="11"/><text x="73.4719%" y="927.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="73.2219%" y="901" width="0.0973%" height="15" fill="rgb(206,95,1)" fg:x="8277" fg:w="11"/><text x="73.4719%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (11 samples, 0.10%)</title><rect x="73.2219%" y="885" width="0.0973%" height="15" fill="rgb(237,52,5)" fg:x="8277" fg:w="11"/><text x="73.4719%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (11 samples, 0.10%)</title><rect x="73.2219%" y="869" width="0.0973%" height="15" fill="rgb(218,150,34)" fg:x="8277" fg:w="11"/><text x="73.4719%" y="879.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="73.3015%" y="853" width="0.0177%" height="15" fill="rgb(235,194,28)" fg:x="8286" fg:w="2"/><text x="73.5515%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="73.3015%" y="837" width="0.0177%" height="15" fill="rgb(245,92,18)" fg:x="8286" fg:w="2"/><text x="73.5515%" y="847.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="73.3015%" y="821" width="0.0177%" height="15" fill="rgb(253,203,53)" fg:x="8286" fg:w="2"/><text x="73.5515%" y="831.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (4,593 samples, 40.63%)</title><rect x="32.7583%" y="1013" width="40.6316%" height="15" fill="rgb(249,185,47)" fg:x="3703" fg:w="4593"/><text x="33.0083%" y="1023.50">revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner</text></g><g><title>revm_interpreter::inner_models::CallInputs::new_boxed (8 samples, 0.07%)</title><rect x="73.3192%" y="997" width="0.0708%" height="15" fill="rgb(252,194,52)" fg:x="8288" fg:w="8"/><text x="73.5692%" y="1007.50"></text></g><g><title>revm_interpreter::inner_models::CallInputs::new (8 samples, 0.07%)</title><rect x="73.3192%" y="981" width="0.0708%" height="15" fill="rgb(210,53,36)" fg:x="8288" fg:w="8"/><text x="73.5692%" y="991.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="73.3457%" y="965" width="0.0442%" height="15" fill="rgb(237,37,25)" fg:x="8291" fg:w="5"/><text x="73.5957%" y="975.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="73.3457%" y="949" width="0.0442%" height="15" fill="rgb(242,116,27)" fg:x="8291" fg:w="5"/><text x="73.5957%" y="959.50"></text></g><g><title>bytes::bytes::shared_clone (5 samples, 0.04%)</title><rect x="73.3457%" y="933" width="0.0442%" height="15" fill="rgb(213,185,26)" fg:x="8291" fg:w="5"/><text x="73.5957%" y="943.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (5 samples, 0.04%)</title><rect x="73.3457%" y="917" width="0.0442%" height="15" fill="rgb(225,204,8)" fg:x="8291" fg:w="5"/><text x="73.5957%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (5 samples, 0.04%)</title><rect x="73.3457%" y="901" width="0.0442%" height="15" fill="rgb(254,111,37)" fg:x="8291" fg:w="5"/><text x="73.5957%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (5 samples, 0.04%)</title><rect x="73.3457%" y="885" width="0.0442%" height="15" fill="rgb(242,35,9)" fg:x="8291" fg:w="5"/><text x="73.5957%" y="895.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.03%)</title><rect x="73.3900%" y="949" width="0.0265%" height="15" fill="rgb(232,138,49)" fg:x="8296" fg:w="3"/><text x="73.6400%" y="959.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::convert::From&lt;revm_primitives::state::AccountInfo&gt;&gt;::from (3 samples, 0.03%)</title><rect x="73.3900%" y="933" width="0.0265%" height="15" fill="rgb(247,56,4)" fg:x="8296" fg:w="3"/><text x="73.6400%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.03%)</title><rect x="73.4165%" y="949" width="0.0265%" height="15" fill="rgb(226,179,17)" fg:x="8299" fg:w="3"/><text x="73.6665%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="73.4165%" y="933" width="0.0265%" height="15" fill="rgb(216,163,45)" fg:x="8299" fg:w="3"/><text x="73.6665%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="73.4165%" y="917" width="0.0265%" height="15" fill="rgb(211,157,3)" fg:x="8299" fg:w="3"/><text x="73.6665%" y="927.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="73.4165%" y="901" width="0.0265%" height="15" fill="rgb(234,44,20)" fg:x="8299" fg:w="3"/><text x="73.6665%" y="911.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="73.4165%" y="885" width="0.0265%" height="15" fill="rgb(254,138,23)" fg:x="8299" fg:w="3"/><text x="73.6665%" y="895.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="73.4253%" y="869" width="0.0177%" height="15" fill="rgb(206,119,39)" fg:x="8300" fg:w="2"/><text x="73.6753%" y="879.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="73.4253%" y="853" width="0.0177%" height="15" fill="rgb(231,105,52)" fg:x="8300" fg:w="2"/><text x="73.6753%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5 samples, 0.04%)</title><rect x="73.4696%" y="789" width="0.0442%" height="15" fill="rgb(250,20,5)" fg:x="8305" fg:w="5"/><text x="73.7196%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.04%)</title><rect x="73.4696%" y="773" width="0.0442%" height="15" fill="rgb(215,198,30)" fg:x="8305" fg:w="5"/><text x="73.7196%" y="783.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (9 samples, 0.08%)</title><rect x="73.4696%" y="853" width="0.0796%" height="15" fill="rgb(246,142,8)" fg:x="8305" fg:w="9"/><text x="73.7196%" y="863.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (9 samples, 0.08%)</title><rect x="73.4696%" y="837" width="0.0796%" height="15" fill="rgb(243,26,38)" fg:x="8305" fg:w="9"/><text x="73.7196%" y="847.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (9 samples, 0.08%)</title><rect x="73.4696%" y="821" width="0.0796%" height="15" fill="rgb(205,133,28)" fg:x="8305" fg:w="9"/><text x="73.7196%" y="831.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (9 samples, 0.08%)</title><rect x="73.4696%" y="805" width="0.0796%" height="15" fill="rgb(212,34,0)" fg:x="8305" fg:w="9"/><text x="73.7196%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.04%)</title><rect x="73.5138%" y="789" width="0.0354%" height="15" fill="rgb(251,226,22)" fg:x="8310" fg:w="4"/><text x="73.7638%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.04%)</title><rect x="73.5138%" y="773" width="0.0354%" height="15" fill="rgb(252,119,9)" fg:x="8310" fg:w="4"/><text x="73.7638%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="73.5669%" y="805" width="0.0265%" height="15" fill="rgb(213,150,50)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="815.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="73.5669%" y="789" width="0.0265%" height="15" fill="rgb(212,24,39)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="799.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="73.5669%" y="773" width="0.0265%" height="15" fill="rgb(213,46,39)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="73.5669%" y="757" width="0.0265%" height="15" fill="rgb(239,106,12)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="767.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="73.5669%" y="741" width="0.0265%" height="15" fill="rgb(249,229,21)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="751.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="73.5669%" y="725" width="0.0265%" height="15" fill="rgb(212,158,3)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="73.5669%" y="709" width="0.0265%" height="15" fill="rgb(253,26,48)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="73.5669%" y="693" width="0.0265%" height="15" fill="rgb(238,178,20)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="73.5669%" y="677" width="0.0265%" height="15" fill="rgb(208,86,15)" fg:x="8316" fg:w="3"/><text x="73.8169%" y="687.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (15 samples, 0.13%)</title><rect x="73.4696%" y="901" width="0.1327%" height="15" fill="rgb(239,42,53)" fg:x="8305" fg:w="15"/><text x="73.7196%" y="911.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (15 samples, 0.13%)</title><rect x="73.4696%" y="885" width="0.1327%" height="15" fill="rgb(245,226,8)" fg:x="8305" fg:w="15"/><text x="73.7196%" y="895.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (15 samples, 0.13%)</title><rect x="73.4696%" y="869" width="0.1327%" height="15" fill="rgb(216,176,32)" fg:x="8305" fg:w="15"/><text x="73.7196%" y="879.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (5 samples, 0.04%)</title><rect x="73.5580%" y="853" width="0.0442%" height="15" fill="rgb(231,186,21)" fg:x="8315" fg:w="5"/><text x="73.8080%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.04%)</title><rect x="73.5669%" y="837" width="0.0354%" height="15" fill="rgb(205,95,49)" fg:x="8316" fg:w="4"/><text x="73.8169%" y="847.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="73.5669%" y="821" width="0.0354%" height="15" fill="rgb(217,145,8)" fg:x="8316" fg:w="4"/><text x="73.8169%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="73.6465%" y="805" width="0.0885%" height="15" fill="rgb(239,144,48)" fg:x="8325" fg:w="10"/><text x="73.8965%" y="815.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="73.6465%" y="789" width="0.0885%" height="15" fill="rgb(214,189,23)" fg:x="8325" fg:w="10"/><text x="73.8965%" y="799.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="73.6465%" y="773" width="0.0885%" height="15" fill="rgb(229,157,17)" fg:x="8325" fg:w="10"/><text x="73.8965%" y="783.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="73.6465%" y="757" width="0.0885%" height="15" fill="rgb(230,5,48)" fg:x="8325" fg:w="10"/><text x="73.8965%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="73.6465%" y="741" width="0.0885%" height="15" fill="rgb(224,156,48)" fg:x="8325" fg:w="10"/><text x="73.8965%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (10 samples, 0.09%)</title><rect x="73.6465%" y="725" width="0.0885%" height="15" fill="rgb(223,14,29)" fg:x="8325" fg:w="10"/><text x="73.8965%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (10 samples, 0.09%)</title><rect x="73.6465%" y="709" width="0.0885%" height="15" fill="rgb(229,96,36)" fg:x="8325" fg:w="10"/><text x="73.8965%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (16 samples, 0.14%)</title><rect x="73.6111%" y="869" width="0.1415%" height="15" fill="rgb(231,102,53)" fg:x="8321" fg:w="16"/><text x="73.8611%" y="879.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref::_{{closure}} (16 samples, 0.14%)</title><rect x="73.6111%" y="853" width="0.1415%" height="15" fill="rgb(210,77,38)" fg:x="8321" fg:w="16"/><text x="73.8611%" y="863.50"></text></g><g><title>revm::db::in_memory_db::DbAccount::info (16 samples, 0.14%)</title><rect x="73.6111%" y="837" width="0.1415%" height="15" fill="rgb(235,131,6)" fg:x="8321" fg:w="16"/><text x="73.8611%" y="847.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (12 samples, 0.11%)</title><rect x="73.6465%" y="821" width="0.1062%" height="15" fill="rgb(252,55,38)" fg:x="8325" fg:w="12"/><text x="73.8965%" y="831.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="73.7350%" y="805" width="0.0177%" height="15" fill="rgb(246,38,14)" fg:x="8335" fg:w="2"/><text x="73.9850%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="73.7527%" y="821" width="0.0177%" height="15" fill="rgb(242,27,5)" fg:x="8337" fg:w="2"/><text x="74.0027%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="73.7527%" y="805" width="0.0177%" height="15" fill="rgb(228,65,35)" fg:x="8337" fg:w="2"/><text x="74.0027%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="73.7527%" y="789" width="0.0177%" height="15" fill="rgb(245,93,11)" fg:x="8337" fg:w="2"/><text x="74.0027%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="73.7527%" y="773" width="0.0177%" height="15" fill="rgb(213,1,31)" fg:x="8337" fg:w="2"/><text x="74.0027%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="73.7527%" y="757" width="0.0177%" height="15" fill="rgb(237,205,14)" fg:x="8337" fg:w="2"/><text x="74.0027%" y="767.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="73.7527%" y="741" width="0.0177%" height="15" fill="rgb(232,118,45)" fg:x="8337" fg:w="2"/><text x="74.0027%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="73.7527%" y="725" width="0.0177%" height="15" fill="rgb(218,5,6)" fg:x="8337" fg:w="2"/><text x="74.0027%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (43 samples, 0.38%)</title><rect x="73.7703%" y="773" width="0.3804%" height="15" fill="rgb(251,87,51)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="783.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (43 samples, 0.38%)</title><rect x="73.7703%" y="757" width="0.3804%" height="15" fill="rgb(207,225,20)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="767.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (43 samples, 0.38%)</title><rect x="73.7703%" y="741" width="0.3804%" height="15" fill="rgb(222,78,54)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (43 samples, 0.38%)</title><rect x="73.7703%" y="725" width="0.3804%" height="15" fill="rgb(232,85,16)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="735.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (43 samples, 0.38%)</title><rect x="73.7703%" y="709" width="0.3804%" height="15" fill="rgb(244,25,33)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (43 samples, 0.38%)</title><rect x="73.7703%" y="693" width="0.3804%" height="15" fill="rgb(233,24,36)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="703.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (43 samples, 0.38%)</title><rect x="73.7703%" y="677" width="0.3804%" height="15" fill="rgb(253,49,54)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="687.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (43 samples, 0.38%)</title><rect x="73.7703%" y="661" width="0.3804%" height="15" fill="rgb(245,12,22)" fg:x="8339" fg:w="43"/><text x="74.0203%" y="671.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="74.1065%" y="645" width="0.0442%" height="15" fill="rgb(253,141,28)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="655.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.04%)</title><rect x="74.1065%" y="629" width="0.0442%" height="15" fill="rgb(225,207,27)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="639.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="74.1065%" y="613" width="0.0442%" height="15" fill="rgb(220,84,2)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="623.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="74.1065%" y="597" width="0.0442%" height="15" fill="rgb(224,37,37)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="607.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="74.1065%" y="581" width="0.0442%" height="15" fill="rgb(220,143,18)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="591.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="74.1065%" y="565" width="0.0442%" height="15" fill="rgb(210,88,33)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="575.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="74.1065%" y="549" width="0.0442%" height="15" fill="rgb(219,87,51)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="559.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="74.1065%" y="533" width="0.0442%" height="15" fill="rgb(211,7,35)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="543.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="74.1065%" y="517" width="0.0442%" height="15" fill="rgb(232,77,2)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="527.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="74.1065%" y="501" width="0.0442%" height="15" fill="rgb(249,94,25)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="511.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="74.1065%" y="485" width="0.0442%" height="15" fill="rgb(215,112,2)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="495.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.04%)</title><rect x="74.1065%" y="469" width="0.0442%" height="15" fill="rgb(226,115,48)" fg:x="8377" fg:w="5"/><text x="74.3565%" y="479.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::Database for &amp;mut T&gt;::basic (83 samples, 0.73%)</title><rect x="73.4430%" y="949" width="0.7343%" height="15" fill="rgb(249,196,10)" fg:x="8302" fg:w="83"/><text x="73.6930%" y="959.50"></text></g><g><title>&lt;block_stm_revm::vm::VmDb as revm_primitives::db::Database&gt;::basic (83 samples, 0.73%)</title><rect x="73.4430%" y="933" width="0.7343%" height="15" fill="rgb(237,109,14)" fg:x="8302" fg:w="83"/><text x="73.6930%" y="943.50"></text></g><g><title>block_stm_revm::vm::VmDb::read (83 samples, 0.73%)</title><rect x="73.4430%" y="917" width="0.7343%" height="15" fill="rgb(217,103,53)" fg:x="8302" fg:w="83"/><text x="73.6930%" y="927.50"></text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for alloc::sync::Arc&lt;T&gt;&gt;::basic_ref (64 samples, 0.57%)</title><rect x="73.6111%" y="901" width="0.5662%" height="15" fill="rgb(244,137,9)" fg:x="8321" fg:w="64"/><text x="73.8611%" y="911.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as revm_primitives::db::DatabaseRef&gt;::basic_ref (64 samples, 0.57%)</title><rect x="73.6111%" y="885" width="0.5662%" height="15" fill="rgb(227,201,3)" fg:x="8321" fg:w="64"/><text x="73.8611%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (48 samples, 0.42%)</title><rect x="73.7527%" y="869" width="0.4246%" height="15" fill="rgb(243,94,6)" fg:x="8337" fg:w="48"/><text x="74.0027%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (48 samples, 0.42%)</title><rect x="73.7527%" y="853" width="0.4246%" height="15" fill="rgb(235,118,5)" fg:x="8337" fg:w="48"/><text x="74.0027%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (48 samples, 0.42%)</title><rect x="73.7527%" y="837" width="0.4246%" height="15" fill="rgb(247,10,30)" fg:x="8337" fg:w="48"/><text x="74.0027%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (46 samples, 0.41%)</title><rect x="73.7703%" y="821" width="0.4069%" height="15" fill="rgb(205,26,28)" fg:x="8339" fg:w="46"/><text x="74.0203%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (46 samples, 0.41%)</title><rect x="73.7703%" y="805" width="0.4069%" height="15" fill="rgb(206,99,35)" fg:x="8339" fg:w="46"/><text x="74.0203%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (46 samples, 0.41%)</title><rect x="73.7703%" y="789" width="0.4069%" height="15" fill="rgb(238,130,40)" fg:x="8339" fg:w="46"/><text x="74.0203%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.03%)</title><rect x="74.1507%" y="773" width="0.0265%" height="15" fill="rgb(224,126,31)" fg:x="8382" fg:w="3"/><text x="74.4007%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.03%)</title><rect x="74.1507%" y="757" width="0.0265%" height="15" fill="rgb(254,105,17)" fg:x="8382" fg:w="3"/><text x="74.4007%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="74.1507%" y="741" width="0.0265%" height="15" fill="rgb(216,87,36)" fg:x="8382" fg:w="3"/><text x="74.4007%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (6 samples, 0.05%)</title><rect x="74.1773%" y="917" width="0.0531%" height="15" fill="rgb(240,21,12)" fg:x="8385" fg:w="6"/><text x="74.4273%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.05%)</title><rect x="74.1773%" y="901" width="0.0531%" height="15" fill="rgb(245,192,34)" fg:x="8385" fg:w="6"/><text x="74.4273%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.05%)</title><rect x="74.1773%" y="885" width="0.0531%" height="15" fill="rgb(226,100,49)" fg:x="8385" fg:w="6"/><text x="74.4273%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (6 samples, 0.05%)</title><rect x="74.1773%" y="869" width="0.0531%" height="15" fill="rgb(245,188,27)" fg:x="8385" fg:w="6"/><text x="74.4273%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5 samples, 0.04%)</title><rect x="74.1861%" y="853" width="0.0442%" height="15" fill="rgb(212,170,8)" fg:x="8386" fg:w="5"/><text x="74.4361%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (4 samples, 0.04%)</title><rect x="74.1950%" y="837" width="0.0354%" height="15" fill="rgb(217,113,29)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (4 samples, 0.04%)</title><rect x="74.1950%" y="821" width="0.0354%" height="15" fill="rgb(237,30,3)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (4 samples, 0.04%)</title><rect x="74.1950%" y="805" width="0.0354%" height="15" fill="rgb(227,19,28)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="815.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.04%)</title><rect x="74.1950%" y="789" width="0.0354%" height="15" fill="rgb(239,172,45)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="74.1950%" y="773" width="0.0354%" height="15" fill="rgb(254,55,39)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="74.1950%" y="757" width="0.0354%" height="15" fill="rgb(249,208,12)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="767.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="74.1950%" y="741" width="0.0354%" height="15" fill="rgb(240,52,13)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="751.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="74.1950%" y="725" width="0.0354%" height="15" fill="rgb(252,149,13)" fg:x="8387" fg:w="4"/><text x="74.4450%" y="735.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="74.2127%" y="709" width="0.0177%" height="15" fill="rgb(232,81,48)" fg:x="8389" fg:w="2"/><text x="74.4627%" y="719.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="74.2127%" y="693" width="0.0177%" height="15" fill="rgb(222,144,2)" fg:x="8389" fg:w="2"/><text x="74.4627%" y="703.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (4,838 samples, 42.80%)</title><rect x="31.4490%" y="1045" width="42.7990%" height="15" fill="rgb(216,81,32)" fg:x="3555" fg:w="4838"/><text x="31.6990%" y="1055.50">block_stm_revm::vm::Vm::execute</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (4,690 samples, 41.49%)</title><rect x="32.7583%" y="1029" width="41.4897%" height="15" fill="rgb(244,78,51)" fg:x="3703" fg:w="4690"/><text x="33.0083%" y="1039.50">revm::evm::Evm&lt;EXT,DB&gt;::transact</text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (97 samples, 0.86%)</title><rect x="73.3900%" y="1013" width="0.8581%" height="15" fill="rgb(217,66,21)" fg:x="8296" fg:w="97"/><text x="73.6400%" y="1023.50"></text></g><g><title>core::ops::function::Fn::call (97 samples, 0.86%)</title><rect x="73.3900%" y="997" width="0.8581%" height="15" fill="rgb(247,101,42)" fg:x="8296" fg:w="97"/><text x="73.6400%" y="1007.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (97 samples, 0.86%)</title><rect x="73.3900%" y="981" width="0.8581%" height="15" fill="rgb(227,81,39)" fg:x="8296" fg:w="97"/><text x="73.6400%" y="991.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (97 samples, 0.86%)</title><rect x="73.3900%" y="965" width="0.8581%" height="15" fill="rgb(220,223,44)" fg:x="8296" fg:w="97"/><text x="73.6400%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.07%)</title><rect x="74.1773%" y="949" width="0.0708%" height="15" fill="rgb(205,218,2)" fg:x="8385" fg:w="8"/><text x="74.4273%" y="959.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.07%)</title><rect x="74.1773%" y="933" width="0.0708%" height="15" fill="rgb(212,207,28)" fg:x="8385" fg:w="8"/><text x="74.4273%" y="943.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="74.2304%" y="917" width="0.0177%" height="15" fill="rgb(224,12,41)" fg:x="8391" fg:w="2"/><text x="74.4804%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="74.2304%" y="901" width="0.0177%" height="15" fill="rgb(216,118,12)" fg:x="8391" fg:w="2"/><text x="74.4804%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="74.2304%" y="885" width="0.0177%" height="15" fill="rgb(252,97,46)" fg:x="8391" fg:w="2"/><text x="74.4804%" y="895.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="74.2304%" y="869" width="0.0177%" height="15" fill="rgb(244,206,19)" fg:x="8391" fg:w="2"/><text x="74.4804%" y="879.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="74.2304%" y="853" width="0.0177%" height="15" fill="rgb(231,84,31)" fg:x="8391" fg:w="2"/><text x="74.4804%" y="863.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="74.2304%" y="837" width="0.0177%" height="15" fill="rgb(244,133,0)" fg:x="8391" fg:w="2"/><text x="74.4804%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="74.2304%" y="821" width="0.0177%" height="15" fill="rgb(223,15,50)" fg:x="8391" fg:w="2"/><text x="74.4804%" y="831.50"></text></g><g><title>bytes::bytes::static_clone (3 samples, 0.03%)</title><rect x="74.2923%" y="1045" width="0.0265%" height="15" fill="rgb(250,118,49)" fg:x="8398" fg:w="3"/><text x="74.5423%" y="1055.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="74.4338%" y="1013" width="0.0177%" height="15" fill="rgb(248,25,38)" fg:x="8414" fg:w="2"/><text x="74.6838%" y="1023.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="74.4338%" y="997" width="0.0177%" height="15" fill="rgb(215,70,14)" fg:x="8414" fg:w="2"/><text x="74.6838%" y="1007.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="74.4338%" y="981" width="0.0177%" height="15" fill="rgb(215,28,15)" fg:x="8414" fg:w="2"/><text x="74.6838%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="74.4338%" y="965" width="0.0177%" height="15" fill="rgb(243,6,28)" fg:x="8414" fg:w="2"/><text x="74.6838%" y="975.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="74.4338%" y="949" width="0.0177%" height="15" fill="rgb(222,130,1)" fg:x="8414" fg:w="2"/><text x="74.6838%" y="959.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.13%)</title><rect x="74.3277%" y="1045" width="0.1327%" height="15" fill="rgb(236,166,44)" fg:x="8402" fg:w="15"/><text x="74.5777%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.03%)</title><rect x="74.4338%" y="1029" width="0.0265%" height="15" fill="rgb(221,108,14)" fg:x="8414" fg:w="3"/><text x="74.6838%" y="1039.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="74.4604%" y="1045" width="0.0177%" height="15" fill="rgb(252,3,45)" fg:x="8417" fg:w="2"/><text x="74.7104%" y="1055.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="74.5134%" y="581" width="0.0177%" height="15" fill="rgb(237,68,30)" fg:x="8423" fg:w="2"/><text x="74.7634%" y="591.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="74.5134%" y="565" width="0.0177%" height="15" fill="rgb(211,79,22)" fg:x="8423" fg:w="2"/><text x="74.7634%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="74.5046%" y="741" width="0.0354%" height="15" fill="rgb(252,185,21)" fg:x="8422" fg:w="4"/><text x="74.7546%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.04%)</title><rect x="74.5046%" y="725" width="0.0354%" height="15" fill="rgb(225,189,26)" fg:x="8422" fg:w="4"/><text x="74.7546%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.04%)</title><rect x="74.5046%" y="709" width="0.0354%" height="15" fill="rgb(241,30,40)" fg:x="8422" fg:w="4"/><text x="74.7546%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.04%)</title><rect x="74.5046%" y="693" width="0.0354%" height="15" fill="rgb(235,215,44)" fg:x="8422" fg:w="4"/><text x="74.7546%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="74.5046%" y="677" width="0.0354%" height="15" fill="rgb(205,8,29)" fg:x="8422" fg:w="4"/><text x="74.7546%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="74.5046%" y="661" width="0.0354%" height="15" fill="rgb(241,137,42)" fg:x="8422" fg:w="4"/><text x="74.7546%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="74.5046%" y="645" width="0.0354%" height="15" fill="rgb(237,155,2)" fg:x="8422" fg:w="4"/><text x="74.7546%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="74.5134%" y="629" width="0.0265%" height="15" fill="rgb(245,29,42)" fg:x="8423" fg:w="3"/><text x="74.7634%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="74.5134%" y="613" width="0.0265%" height="15" fill="rgb(234,101,35)" fg:x="8423" fg:w="3"/><text x="74.7634%" y="623.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="74.5134%" y="597" width="0.0265%" height="15" fill="rgb(228,64,37)" fg:x="8423" fg:w="3"/><text x="74.7634%" y="607.50"></text></g><g><title>&lt;alloy_primitives::log::Log&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="74.5046%" y="773" width="0.0619%" height="15" fill="rgb(217,214,36)" fg:x="8422" fg:w="7"/><text x="74.7546%" y="783.50"></text></g><g><title>&lt;alloy_primitives::log::LogData as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="74.5046%" y="757" width="0.0619%" height="15" fill="rgb(243,70,3)" fg:x="8422" fg:w="7"/><text x="74.7546%" y="767.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="74.5400%" y="741" width="0.0265%" height="15" fill="rgb(253,158,52)" fg:x="8426" fg:w="3"/><text x="74.7900%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="74.5046%" y="837" width="0.0973%" height="15" fill="rgb(234,111,54)" fg:x="8422" fg:w="11"/><text x="74.7546%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.10%)</title><rect x="74.5046%" y="821" width="0.0973%" height="15" fill="rgb(217,70,32)" fg:x="8422" fg:w="11"/><text x="74.7546%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.10%)</title><rect x="74.5046%" y="805" width="0.0973%" height="15" fill="rgb(234,18,33)" fg:x="8422" fg:w="11"/><text x="74.7546%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.10%)</title><rect x="74.5046%" y="789" width="0.0973%" height="15" fill="rgb(234,12,49)" fg:x="8422" fg:w="11"/><text x="74.7546%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="74.5665%" y="773" width="0.0354%" height="15" fill="rgb(236,10,21)" fg:x="8429" fg:w="4"/><text x="74.8165%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="74.5665%" y="757" width="0.0354%" height="15" fill="rgb(248,182,45)" fg:x="8429" fg:w="4"/><text x="74.8165%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="74.5665%" y="741" width="0.0354%" height="15" fill="rgb(217,95,36)" fg:x="8429" fg:w="4"/><text x="74.8165%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="74.5665%" y="725" width="0.0354%" height="15" fill="rgb(212,110,31)" fg:x="8429" fg:w="4"/><text x="74.8165%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="74.5665%" y="709" width="0.0354%" height="15" fill="rgb(206,32,53)" fg:x="8429" fg:w="4"/><text x="74.8165%" y="719.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="74.5665%" y="693" width="0.0354%" height="15" fill="rgb(246,141,37)" fg:x="8429" fg:w="4"/><text x="74.8165%" y="703.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="74.5665%" y="677" width="0.0354%" height="15" fill="rgb(219,16,7)" fg:x="8429" fg:w="4"/><text x="74.8165%" y="687.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::clone::Clone&gt;::clone (16 samples, 0.14%)</title><rect x="74.4781%" y="853" width="0.1415%" height="15" fill="rgb(230,205,45)" fg:x="8419" fg:w="16"/><text x="74.7281%" y="863.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (18 samples, 0.16%)</title><rect x="74.4781%" y="869" width="0.1592%" height="15" fill="rgb(231,43,49)" fg:x="8419" fg:w="18"/><text x="74.7281%" y="879.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="74.6196%" y="853" width="0.0177%" height="15" fill="rgb(212,106,34)" fg:x="8435" fg:w="2"/><text x="74.8696%" y="863.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="74.6196%" y="837" width="0.0177%" height="15" fill="rgb(206,83,17)" fg:x="8435" fg:w="2"/><text x="74.8696%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (27 samples, 0.24%)</title><rect x="74.4781%" y="1045" width="0.2389%" height="15" fill="rgb(244,154,49)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="1055.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (27 samples, 0.24%)</title><rect x="74.4781%" y="1029" width="0.2389%" height="15" fill="rgb(244,149,49)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="1039.50"></text></g><g><title>std::panic::catch_unwind (27 samples, 0.24%)</title><rect x="74.4781%" y="1013" width="0.2389%" height="15" fill="rgb(227,134,18)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="1023.50"></text></g><g><title>std::panicking::try (27 samples, 0.24%)</title><rect x="74.4781%" y="997" width="0.2389%" height="15" fill="rgb(237,116,36)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="1007.50"></text></g><g><title>std::panicking::try::do_call (27 samples, 0.24%)</title><rect x="74.4781%" y="981" width="0.2389%" height="15" fill="rgb(205,129,40)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="991.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (27 samples, 0.24%)</title><rect x="74.4781%" y="965" width="0.2389%" height="15" fill="rgb(236,178,4)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="975.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (27 samples, 0.24%)</title><rect x="74.4781%" y="949" width="0.2389%" height="15" fill="rgb(251,76,53)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="959.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27 samples, 0.24%)</title><rect x="74.4781%" y="933" width="0.2389%" height="15" fill="rgb(242,92,40)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="943.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (27 samples, 0.24%)</title><rect x="74.4781%" y="917" width="0.2389%" height="15" fill="rgb(209,45,30)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="927.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (27 samples, 0.24%)</title><rect x="74.4781%" y="901" width="0.2389%" height="15" fill="rgb(218,157,36)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="911.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (27 samples, 0.24%)</title><rect x="74.4781%" y="885" width="0.2389%" height="15" fill="rgb(222,186,16)" fg:x="8419" fg:w="27"/><text x="74.7281%" y="895.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (9 samples, 0.08%)</title><rect x="74.6373%" y="869" width="0.0796%" height="15" fill="rgb(254,72,35)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="879.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (9 samples, 0.08%)</title><rect x="74.6373%" y="853" width="0.0796%" height="15" fill="rgb(224,25,35)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="863.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (9 samples, 0.08%)</title><rect x="74.6373%" y="837" width="0.0796%" height="15" fill="rgb(206,135,52)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="847.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (9 samples, 0.08%)</title><rect x="74.6373%" y="821" width="0.0796%" height="15" fill="rgb(229,174,47)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="831.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (9 samples, 0.08%)</title><rect x="74.6373%" y="805" width="0.0796%" height="15" fill="rgb(242,184,21)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="815.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (9 samples, 0.08%)</title><rect x="74.6373%" y="789" width="0.0796%" height="15" fill="rgb(213,22,45)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9 samples, 0.08%)</title><rect x="74.6373%" y="773" width="0.0796%" height="15" fill="rgb(237,81,54)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.08%)</title><rect x="74.6373%" y="757" width="0.0796%" height="15" fill="rgb(248,177,18)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.08%)</title><rect x="74.6373%" y="741" width="0.0796%" height="15" fill="rgb(254,31,16)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.08%)</title><rect x="74.6373%" y="725" width="0.0796%" height="15" fill="rgb(235,20,31)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.08%)</title><rect x="74.6373%" y="709" width="0.0796%" height="15" fill="rgb(240,56,43)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="719.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.08%)</title><rect x="74.6373%" y="693" width="0.0796%" height="15" fill="rgb(237,197,51)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="703.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.08%)</title><rect x="74.6373%" y="677" width="0.0796%" height="15" fill="rgb(241,162,44)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="687.50"></text></g><g><title>_int_malloc (9 samples, 0.08%)</title><rect x="74.6373%" y="661" width="0.0796%" height="15" fill="rgb(224,23,20)" fg:x="8437" fg:w="9"/><text x="74.8873%" y="671.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="74.6992%" y="645" width="0.0177%" height="15" fill="rgb(250,109,34)" fg:x="8444" fg:w="2"/><text x="74.9492%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.05%)</title><rect x="74.7788%" y="1045" width="0.0531%" height="15" fill="rgb(214,175,50)" fg:x="8453" fg:w="6"/><text x="75.0288%" y="1055.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.03%)</title><rect x="74.8319%" y="1045" width="0.0265%" height="15" fill="rgb(213,182,5)" fg:x="8459" fg:w="3"/><text x="75.0819%" y="1055.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.02%)</title><rect x="74.8408%" y="1029" width="0.0177%" height="15" fill="rgb(209,199,19)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt; (2 samples, 0.02%)</title><rect x="74.8408%" y="1013" width="0.0177%" height="15" fill="rgb(236,224,42)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::db::in_memory_db::DbAccount&gt; (2 samples, 0.02%)</title><rect x="74.8408%" y="997" width="0.0177%" height="15" fill="rgb(246,226,29)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (2 samples, 0.02%)</title><rect x="74.8408%" y="981" width="0.0177%" height="15" fill="rgb(227,223,11)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (2 samples, 0.02%)</title><rect x="74.8408%" y="965" width="0.0177%" height="15" fill="rgb(219,7,51)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (2 samples, 0.02%)</title><rect x="74.8408%" y="949" width="0.0177%" height="15" fill="rgb(245,167,10)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="74.8408%" y="933" width="0.0177%" height="15" fill="rgb(237,224,16)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="74.8408%" y="917" width="0.0177%" height="15" fill="rgb(226,132,13)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="927.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="74.8408%" y="901" width="0.0177%" height="15" fill="rgb(214,140,3)" fg:x="8460" fg:w="2"/><text x="75.0908%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.04%)</title><rect x="74.8585%" y="1045" width="0.0354%" height="15" fill="rgb(221,177,4)" fg:x="8462" fg:w="4"/><text x="75.1085%" y="1055.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.03%)</title><rect x="74.8938%" y="565" width="0.0265%" height="15" fill="rgb(238,139,3)" fg:x="8466" fg:w="3"/><text x="75.1438%" y="575.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.03%)</title><rect x="74.9292%" y="549" width="0.0265%" height="15" fill="rgb(216,17,39)" fg:x="8470" fg:w="3"/><text x="75.1792%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="74.9292%" y="533" width="0.0265%" height="15" fill="rgb(238,120,9)" fg:x="8470" fg:w="3"/><text x="75.1792%" y="543.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (3 samples, 0.03%)</title><rect x="74.9292%" y="517" width="0.0265%" height="15" fill="rgb(244,92,53)" fg:x="8470" fg:w="3"/><text x="75.1792%" y="527.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (3 samples, 0.03%)</title><rect x="74.9292%" y="501" width="0.0265%" height="15" fill="rgb(224,148,33)" fg:x="8470" fg:w="3"/><text x="75.1792%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::gt (2 samples, 0.02%)</title><rect x="74.9558%" y="549" width="0.0177%" height="15" fill="rgb(243,6,36)" fg:x="8473" fg:w="2"/><text x="75.2058%" y="559.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (2 samples, 0.02%)</title><rect x="74.9558%" y="533" width="0.0177%" height="15" fill="rgb(230,102,11)" fg:x="8473" fg:w="2"/><text x="75.2058%" y="543.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (2 samples, 0.02%)</title><rect x="74.9558%" y="517" width="0.0177%" height="15" fill="rgb(234,148,36)" fg:x="8473" fg:w="2"/><text x="75.2058%" y="527.50"></text></g><g><title>ruint::algorithms::cmp (2 samples, 0.02%)</title><rect x="74.9558%" y="501" width="0.0177%" height="15" fill="rgb(251,153,25)" fg:x="8473" fg:w="2"/><text x="75.2058%" y="511.50"></text></g><g><title>main (10 samples, 0.09%)</title><rect x="74.8938%" y="1045" width="0.0885%" height="15" fill="rgb(215,129,8)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="1055.50"></text></g><g><title>std::rt::lang_start_internal (10 samples, 0.09%)</title><rect x="74.8938%" y="1029" width="0.0885%" height="15" fill="rgb(224,128,35)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="1039.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.09%)</title><rect x="74.8938%" y="1013" width="0.0885%" height="15" fill="rgb(237,56,52)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="1023.50"></text></g><g><title>std::panicking::try (10 samples, 0.09%)</title><rect x="74.8938%" y="997" width="0.0885%" height="15" fill="rgb(234,213,19)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="1007.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.09%)</title><rect x="74.8938%" y="981" width="0.0885%" height="15" fill="rgb(252,82,23)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="991.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (10 samples, 0.09%)</title><rect x="74.8938%" y="965" width="0.0885%" height="15" fill="rgb(254,201,21)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="975.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.09%)</title><rect x="74.8938%" y="949" width="0.0885%" height="15" fill="rgb(250,186,11)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="959.50"></text></g><g><title>std::panicking::try (10 samples, 0.09%)</title><rect x="74.8938%" y="933" width="0.0885%" height="15" fill="rgb(211,174,5)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="943.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.09%)</title><rect x="74.8938%" y="917" width="0.0885%" height="15" fill="rgb(214,121,10)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="927.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10 samples, 0.09%)</title><rect x="74.8938%" y="901" width="0.0885%" height="15" fill="rgb(241,66,2)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="911.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (10 samples, 0.09%)</title><rect x="74.8938%" y="885" width="0.0885%" height="15" fill="rgb(220,167,19)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 0.09%)</title><rect x="74.8938%" y="869" width="0.0885%" height="15" fill="rgb(231,54,50)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.09%)</title><rect x="74.8938%" y="853" width="0.0885%" height="15" fill="rgb(239,217,53)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="863.50"></text></g><g><title>block_stm_revm::main (10 samples, 0.09%)</title><rect x="74.8938%" y="837" width="0.0885%" height="15" fill="rgb(248,8,0)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="847.50"></text></g><g><title>block_stm_revm::execute_sequential (10 samples, 0.09%)</title><rect x="74.8938%" y="821" width="0.0885%" height="15" fill="rgb(229,118,37)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.09%)</title><rect x="74.8938%" y="805" width="0.0885%" height="15" fill="rgb(253,223,43)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.09%)</title><rect x="74.8938%" y="789" width="0.0885%" height="15" fill="rgb(211,77,36)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.09%)</title><rect x="74.8938%" y="773" width="0.0885%" height="15" fill="rgb(219,3,53)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.09%)</title><rect x="74.8938%" y="757" width="0.0885%" height="15" fill="rgb(244,45,42)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.09%)</title><rect x="74.8938%" y="741" width="0.0885%" height="15" fill="rgb(225,95,27)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (10 samples, 0.09%)</title><rect x="74.8938%" y="725" width="0.0885%" height="15" fill="rgb(207,74,8)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.09%)</title><rect x="74.8938%" y="709" width="0.0885%" height="15" fill="rgb(243,63,36)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.09%)</title><rect x="74.8938%" y="693" width="0.0885%" height="15" fill="rgb(211,180,12)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.09%)</title><rect x="74.8938%" y="677" width="0.0885%" height="15" fill="rgb(254,166,49)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (10 samples, 0.09%)</title><rect x="74.8938%" y="661" width="0.0885%" height="15" fill="rgb(205,19,0)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="671.50"></text></g><g><title>block_stm_revm::execute_sequential::_{{closure}} (10 samples, 0.09%)</title><rect x="74.8938%" y="645" width="0.0885%" height="15" fill="rgb(224,172,32)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="655.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (10 samples, 0.09%)</title><rect x="74.8938%" y="629" width="0.0885%" height="15" fill="rgb(254,136,30)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="639.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (10 samples, 0.09%)</title><rect x="74.8938%" y="613" width="0.0885%" height="15" fill="rgb(246,19,35)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="623.50"></text></g><g><title>core::ops::function::Fn::call (10 samples, 0.09%)</title><rect x="74.8938%" y="597" width="0.0885%" height="15" fill="rgb(219,24,36)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="607.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (10 samples, 0.09%)</title><rect x="74.8938%" y="581" width="0.0885%" height="15" fill="rgb(251,55,1)" fg:x="8466" fg:w="10"/><text x="75.1438%" y="591.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (7 samples, 0.06%)</title><rect x="74.9204%" y="565" width="0.0619%" height="15" fill="rgb(218,117,39)" fg:x="8469" fg:w="7"/><text x="75.1704%" y="575.50"></text></g><g><title>revm::db::in_memory_db::DbAccount::info (3 samples, 0.03%)</title><rect x="74.9823%" y="1045" width="0.0265%" height="15" fill="rgb(248,169,11)" fg:x="8476" fg:w="3"/><text x="75.2323%" y="1055.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (2 samples, 0.02%)</title><rect x="75.0088%" y="1045" width="0.0177%" height="15" fill="rgb(244,40,44)" fg:x="8479" fg:w="2"/><text x="75.2588%" y="1055.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (4 samples, 0.04%)</title><rect x="75.0531%" y="1045" width="0.0354%" height="15" fill="rgb(234,62,37)" fg:x="8484" fg:w="4"/><text x="75.3031%" y="1055.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (2 samples, 0.02%)</title><rect x="75.0708%" y="1029" width="0.0177%" height="15" fill="rgb(207,117,42)" fg:x="8486" fg:w="2"/><text x="75.3208%" y="1039.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_mul (2 samples, 0.02%)</title><rect x="75.0708%" y="1013" width="0.0177%" height="15" fill="rgb(213,43,2)" fg:x="8486" fg:w="2"/><text x="75.3208%" y="1023.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (6 samples, 0.05%)</title><rect x="75.0885%" y="1045" width="0.0531%" height="15" fill="rgb(244,202,51)" fg:x="8488" fg:w="6"/><text x="75.3385%" y="1055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.02%)</title><rect x="75.1238%" y="1029" width="0.0177%" height="15" fill="rgb(253,174,46)" fg:x="8492" fg:w="2"/><text x="75.3738%" y="1039.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.02%)</title><rect x="75.1238%" y="1013" width="0.0177%" height="15" fill="rgb(251,23,1)" fg:x="8492" fg:w="2"/><text x="75.3738%" y="1023.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="75.1238%" y="997" width="0.0177%" height="15" fill="rgb(253,26,1)" fg:x="8492" fg:w="2"/><text x="75.3738%" y="1007.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::wrapping_sub (2 samples, 0.02%)</title><rect x="75.1592%" y="1045" width="0.0177%" height="15" fill="rgb(216,89,31)" fg:x="8496" fg:w="2"/><text x="75.4092%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::bitwise::bitand (2 samples, 0.02%)</title><rect x="75.1769%" y="1045" width="0.0177%" height="15" fill="rgb(209,109,5)" fg:x="8498" fg:w="2"/><text x="75.4269%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::bitwise::eq (2 samples, 0.02%)</title><rect x="75.1946%" y="1045" width="0.0177%" height="15" fill="rgb(229,63,13)" fg:x="8500" fg:w="2"/><text x="75.4446%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::bitwise::iszero (2 samples, 0.02%)</title><rect x="75.2123%" y="1045" width="0.0177%" height="15" fill="rgb(238,137,54)" fg:x="8502" fg:w="2"/><text x="75.4623%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::control::jump (2 samples, 0.02%)</title><rect x="75.2389%" y="1045" width="0.0177%" height="15" fill="rgb(228,1,9)" fg:x="8505" fg:w="2"/><text x="75.4889%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::control::jumpdest (2 samples, 0.02%)</title><rect x="75.2565%" y="1045" width="0.0177%" height="15" fill="rgb(249,120,48)" fg:x="8507" fg:w="2"/><text x="75.5065%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::control::jumpi (5 samples, 0.04%)</title><rect x="75.2742%" y="1045" width="0.0442%" height="15" fill="rgb(209,72,36)" fg:x="8509" fg:w="5"/><text x="75.5242%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::control::ret (2 samples, 0.02%)</title><rect x="75.3185%" y="1045" width="0.0177%" height="15" fill="rgb(247,98,49)" fg:x="8514" fg:w="2"/><text x="75.5685%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::memory::mstore (4 samples, 0.04%)</title><rect x="75.3450%" y="1045" width="0.0354%" height="15" fill="rgb(233,75,36)" fg:x="8517" fg:w="4"/><text x="75.5950%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::stack::dup (9 samples, 0.08%)</title><rect x="75.3804%" y="1045" width="0.0796%" height="15" fill="rgb(225,14,24)" fg:x="8521" fg:w="9"/><text x="75.6304%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::stack::pop (3 samples, 0.03%)</title><rect x="75.4600%" y="1045" width="0.0265%" height="15" fill="rgb(237,193,20)" fg:x="8530" fg:w="3"/><text x="75.7100%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::stack::push (10 samples, 0.09%)</title><rect x="75.4866%" y="1045" width="0.0885%" height="15" fill="rgb(239,122,19)" fg:x="8533" fg:w="10"/><text x="75.7366%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::stack::swap (6 samples, 0.05%)</title><rect x="75.5750%" y="1045" width="0.0531%" height="15" fill="rgb(231,220,10)" fg:x="8543" fg:w="6"/><text x="75.8250%" y="1055.50"></text></g><g><title>revm_interpreter::instructions::system::keccak256 (2 samples, 0.02%)</title><rect x="75.6281%" y="1045" width="0.0177%" height="15" fill="rgb(220,66,15)" fg:x="8549" fg:w="2"/><text x="75.8781%" y="1055.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::new (2 samples, 0.02%)</title><rect x="75.6458%" y="1045" width="0.0177%" height="15" fill="rgb(215,171,52)" fg:x="8551" fg:w="2"/><text x="75.8958%" y="1055.50"></text></g><g><title>revm_interpreter::interpreter::analysis::to_analysed (3 samples, 0.03%)</title><rect x="75.6635%" y="1045" width="0.0265%" height="15" fill="rgb(241,169,50)" fg:x="8553" fg:w="3"/><text x="75.9135%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (2 samples, 0.02%)</title><rect x="75.7343%" y="725" width="0.0177%" height="15" fill="rgb(236,189,0)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::Env&gt; (2 samples, 0.02%)</title><rect x="75.7343%" y="709" width="0.0177%" height="15" fill="rgb(217,147,20)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (2 samples, 0.02%)</title><rect x="75.7343%" y="693" width="0.0177%" height="15" fill="rgb(206,188,39)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (2 samples, 0.02%)</title><rect x="75.7343%" y="677" width="0.0177%" height="15" fill="rgb(227,118,25)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.02%)</title><rect x="75.7343%" y="661" width="0.0177%" height="15" fill="rgb(248,171,40)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="671.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="75.7343%" y="645" width="0.0177%" height="15" fill="rgb(251,90,54)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="655.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.02%)</title><rect x="75.7343%" y="629" width="0.0177%" height="15" fill="rgb(234,11,46)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="639.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="75.7343%" y="613" width="0.0177%" height="15" fill="rgb(229,134,13)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="623.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.02%)</title><rect x="75.7343%" y="597" width="0.0177%" height="15" fill="rgb(223,129,3)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="607.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.02%)</title><rect x="75.7343%" y="581" width="0.0177%" height="15" fill="rgb(221,124,13)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="75.7343%" y="565" width="0.0177%" height="15" fill="rgb(234,3,18)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="75.7343%" y="549" width="0.0177%" height="15" fill="rgb(249,199,20)" fg:x="8561" fg:w="2"/><text x="75.9843%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (5 samples, 0.04%)</title><rect x="75.7254%" y="773" width="0.0442%" height="15" fill="rgb(224,134,6)" fg:x="8560" fg:w="5"/><text x="75.9754%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (5 samples, 0.04%)</title><rect x="75.7254%" y="757" width="0.0442%" height="15" fill="rgb(254,83,26)" fg:x="8560" fg:w="5"/><text x="75.9754%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (4 samples, 0.04%)</title><rect x="75.7343%" y="741" width="0.0354%" height="15" fill="rgb(217,88,9)" fg:x="8561" fg:w="4"/><text x="75.9843%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::journaled_state::JournaledState&gt; (2 samples, 0.02%)</title><rect x="75.7519%" y="725" width="0.0177%" height="15" fill="rgb(225,73,2)" fg:x="8563" fg:w="2"/><text x="76.0019%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (2 samples, 0.02%)</title><rect x="75.7519%" y="709" width="0.0177%" height="15" fill="rgb(226,44,39)" fg:x="8563" fg:w="2"/><text x="76.0019%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="75.7519%" y="693" width="0.0177%" height="15" fill="rgb(228,53,17)" fg:x="8563" fg:w="2"/><text x="76.0019%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloy_primitives::log::Log]&gt; (2 samples, 0.02%)</title><rect x="75.7519%" y="677" width="0.0177%" height="15" fill="rgb(212,27,27)" fg:x="8563" fg:w="2"/><text x="76.0019%" y="687.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="75.7696%" y="757" width="0.0265%" height="15" fill="rgb(241,50,6)" fg:x="8565" fg:w="3"/><text x="76.0196%" y="767.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="75.7696%" y="741" width="0.0265%" height="15" fill="rgb(225,28,51)" fg:x="8565" fg:w="3"/><text x="76.0196%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (4 samples, 0.04%)</title><rect x="75.8050%" y="757" width="0.0354%" height="15" fill="rgb(215,33,16)" fg:x="8569" fg:w="4"/><text x="76.0550%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="75.8139%" y="741" width="0.0265%" height="15" fill="rgb(243,40,39)" fg:x="8570" fg:w="3"/><text x="76.0639%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="75.8139%" y="725" width="0.0265%" height="15" fill="rgb(225,11,42)" fg:x="8570" fg:w="3"/><text x="76.0639%" y="735.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="75.8139%" y="709" width="0.0265%" height="15" fill="rgb(241,220,38)" fg:x="8570" fg:w="3"/><text x="76.0639%" y="719.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="75.8139%" y="693" width="0.0265%" height="15" fill="rgb(244,52,35)" fg:x="8570" fg:w="3"/><text x="76.0639%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="75.8404%" y="741" width="0.0354%" height="15" fill="rgb(246,42,46)" fg:x="8573" fg:w="4"/><text x="76.0904%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="75.8404%" y="725" width="0.0354%" height="15" fill="rgb(205,184,13)" fg:x="8573" fg:w="4"/><text x="76.0904%" y="735.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="75.8404%" y="709" width="0.0354%" height="15" fill="rgb(209,48,36)" fg:x="8573" fg:w="4"/><text x="76.0904%" y="719.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="75.8404%" y="693" width="0.0354%" height="15" fill="rgb(244,34,51)" fg:x="8573" fg:w="4"/><text x="76.0904%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (13 samples, 0.12%)</title><rect x="75.7696%" y="773" width="0.1150%" height="15" fill="rgb(221,107,33)" fg:x="8565" fg:w="13"/><text x="76.0196%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (5 samples, 0.04%)</title><rect x="75.8404%" y="757" width="0.0442%" height="15" fill="rgb(224,203,12)" fg:x="8573" fg:w="5"/><text x="76.0904%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="75.8935%" y="757" width="0.0442%" height="15" fill="rgb(230,215,18)" fg:x="8579" fg:w="5"/><text x="76.1435%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="75.8935%" y="741" width="0.0442%" height="15" fill="rgb(206,185,35)" fg:x="8579" fg:w="5"/><text x="76.1435%" y="751.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="75.8935%" y="725" width="0.0442%" height="15" fill="rgb(228,140,34)" fg:x="8579" fg:w="5"/><text x="76.1435%" y="735.50"></text></g><g><title>_int_free (5 samples, 0.04%)</title><rect x="75.8935%" y="709" width="0.0442%" height="15" fill="rgb(208,93,13)" fg:x="8579" fg:w="5"/><text x="76.1435%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="75.9377%" y="757" width="0.0265%" height="15" fill="rgb(221,193,39)" fg:x="8584" fg:w="3"/><text x="76.1877%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="75.9377%" y="741" width="0.0265%" height="15" fill="rgb(241,132,34)" fg:x="8584" fg:w="3"/><text x="76.1877%" y="751.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="75.9377%" y="725" width="0.0265%" height="15" fill="rgb(221,141,10)" fg:x="8584" fg:w="3"/><text x="76.1877%" y="735.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="75.9377%" y="709" width="0.0265%" height="15" fill="rgb(226,90,31)" fg:x="8584" fg:w="3"/><text x="76.1877%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="75.9643%" y="757" width="0.0177%" height="15" fill="rgb(243,75,5)" fg:x="8587" fg:w="2"/><text x="76.2143%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="75.9643%" y="741" width="0.0177%" height="15" fill="rgb(227,156,21)" fg:x="8587" fg:w="2"/><text x="76.2143%" y="751.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="75.9643%" y="725" width="0.0177%" height="15" fill="rgb(250,195,8)" fg:x="8587" fg:w="2"/><text x="76.2143%" y="735.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="75.9643%" y="709" width="0.0177%" height="15" fill="rgb(220,134,5)" fg:x="8587" fg:w="2"/><text x="76.2143%" y="719.50"></text></g><g><title>core::mem::drop (34 samples, 0.30%)</title><rect x="75.7166%" y="805" width="0.3008%" height="15" fill="rgb(246,106,34)" fg:x="8559" fg:w="34"/><text x="75.9666%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (34 samples, 0.30%)</title><rect x="75.7166%" y="789" width="0.3008%" height="15" fill="rgb(205,1,4)" fg:x="8559" fg:w="34"/><text x="75.9666%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (15 samples, 0.13%)</title><rect x="75.8846%" y="773" width="0.1327%" height="15" fill="rgb(224,151,29)" fg:x="8578" fg:w="15"/><text x="76.1346%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="75.9820%" y="757" width="0.0354%" height="15" fill="rgb(251,196,0)" fg:x="8589" fg:w="4"/><text x="76.2320%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="75.9820%" y="741" width="0.0354%" height="15" fill="rgb(212,127,0)" fg:x="8589" fg:w="4"/><text x="76.2320%" y="751.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="75.9820%" y="725" width="0.0354%" height="15" fill="rgb(236,71,53)" fg:x="8589" fg:w="4"/><text x="76.2320%" y="735.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="75.9820%" y="709" width="0.0354%" height="15" fill="rgb(227,99,0)" fg:x="8589" fg:w="4"/><text x="76.2320%" y="719.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="76.0262%" y="789" width="0.0177%" height="15" fill="rgb(239,89,21)" fg:x="8594" fg:w="2"/><text x="76.2762%" y="799.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="76.0262%" y="773" width="0.0177%" height="15" fill="rgb(243,122,19)" fg:x="8594" fg:w="2"/><text x="76.2762%" y="783.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="76.0439%" y="773" width="0.0177%" height="15" fill="rgb(229,192,45)" fg:x="8596" fg:w="2"/><text x="76.2939%" y="783.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="76.0704%" y="725" width="0.0354%" height="15" fill="rgb(235,165,35)" fg:x="8599" fg:w="4"/><text x="76.3204%" y="735.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="76.0704%" y="709" width="0.0354%" height="15" fill="rgb(253,202,0)" fg:x="8599" fg:w="4"/><text x="76.3204%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="76.0704%" y="757" width="0.0619%" height="15" fill="rgb(235,51,20)" fg:x="8599" fg:w="7"/><text x="76.3204%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="76.0704%" y="741" width="0.0619%" height="15" fill="rgb(218,95,46)" fg:x="8599" fg:w="7"/><text x="76.3204%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="76.1058%" y="725" width="0.0265%" height="15" fill="rgb(212,81,10)" fg:x="8603" fg:w="3"/><text x="76.3558%" y="735.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="76.1058%" y="709" width="0.0265%" height="15" fill="rgb(240,59,0)" fg:x="8603" fg:w="3"/><text x="76.3558%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="76.1058%" y="693" width="0.0265%" height="15" fill="rgb(212,191,42)" fg:x="8603" fg:w="3"/><text x="76.3558%" y="703.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="76.1058%" y="677" width="0.0265%" height="15" fill="rgb(233,140,3)" fg:x="8603" fg:w="3"/><text x="76.3558%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="76.1146%" y="661" width="0.0177%" height="15" fill="rgb(215,69,23)" fg:x="8604" fg:w="2"/><text x="76.3646%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="76.1146%" y="645" width="0.0177%" height="15" fill="rgb(240,202,20)" fg:x="8604" fg:w="2"/><text x="76.3646%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (9 samples, 0.08%)</title><rect x="76.0704%" y="773" width="0.0796%" height="15" fill="rgb(209,146,50)" fg:x="8599" fg:w="9"/><text x="76.3204%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="76.1323%" y="757" width="0.0177%" height="15" fill="rgb(253,102,54)" fg:x="8606" fg:w="2"/><text x="76.3823%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="76.1323%" y="741" width="0.0177%" height="15" fill="rgb(250,173,47)" fg:x="8606" fg:w="2"/><text x="76.3823%" y="751.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="76.1323%" y="725" width="0.0177%" height="15" fill="rgb(232,142,7)" fg:x="8606" fg:w="2"/><text x="76.3823%" y="735.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="76.1323%" y="709" width="0.0177%" height="15" fill="rgb(230,157,47)" fg:x="8606" fg:w="2"/><text x="76.3823%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="76.1500%" y="773" width="0.0177%" height="15" fill="rgb(214,177,35)" fg:x="8608" fg:w="2"/><text x="76.4000%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (17 samples, 0.15%)</title><rect x="76.0439%" y="789" width="0.1504%" height="15" fill="rgb(234,119,46)" fg:x="8596" fg:w="17"/><text x="76.2939%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="76.1677%" y="773" width="0.0265%" height="15" fill="rgb(241,180,50)" fg:x="8610" fg:w="3"/><text x="76.4177%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="76.1677%" y="757" width="0.0265%" height="15" fill="rgb(221,54,25)" fg:x="8610" fg:w="3"/><text x="76.4177%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="76.1677%" y="741" width="0.0265%" height="15" fill="rgb(209,157,44)" fg:x="8610" fg:w="3"/><text x="76.4177%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="76.1766%" y="725" width="0.0177%" height="15" fill="rgb(246,115,41)" fg:x="8611" fg:w="2"/><text x="76.4266%" y="735.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="76.1766%" y="709" width="0.0177%" height="15" fill="rgb(229,86,1)" fg:x="8611" fg:w="2"/><text x="76.4266%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="76.1766%" y="693" width="0.0177%" height="15" fill="rgb(240,108,53)" fg:x="8611" fg:w="2"/><text x="76.4266%" y="703.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="76.1766%" y="677" width="0.0177%" height="15" fill="rgb(227,134,2)" fg:x="8611" fg:w="2"/><text x="76.4266%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="76.1943%" y="773" width="0.0265%" height="15" fill="rgb(213,129,25)" fg:x="8613" fg:w="3"/><text x="76.4443%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="76.1943%" y="757" width="0.0265%" height="15" fill="rgb(226,35,21)" fg:x="8613" fg:w="3"/><text x="76.4443%" y="767.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="76.1943%" y="741" width="0.0265%" height="15" fill="rgb(208,129,26)" fg:x="8613" fg:w="3"/><text x="76.4443%" y="751.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="76.1943%" y="725" width="0.0265%" height="15" fill="rgb(224,83,6)" fg:x="8613" fg:w="3"/><text x="76.4443%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="76.2208%" y="773" width="0.0177%" height="15" fill="rgb(227,52,39)" fg:x="8616" fg:w="2"/><text x="76.4708%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="76.2208%" y="757" width="0.0177%" height="15" fill="rgb(241,30,17)" fg:x="8616" fg:w="2"/><text x="76.4708%" y="767.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="76.2208%" y="741" width="0.0177%" height="15" fill="rgb(246,186,42)" fg:x="8616" fg:w="2"/><text x="76.4708%" y="751.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="76.2208%" y="725" width="0.0177%" height="15" fill="rgb(221,169,15)" fg:x="8616" fg:w="2"/><text x="76.4708%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (9 samples, 0.08%)</title><rect x="76.1943%" y="789" width="0.0796%" height="15" fill="rgb(235,108,21)" fg:x="8613" fg:w="9"/><text x="76.4443%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CreateInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="76.2562%" y="773" width="0.0177%" height="15" fill="rgb(219,148,30)" fg:x="8620" fg:w="2"/><text x="76.5062%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="76.2562%" y="757" width="0.0177%" height="15" fill="rgb(220,109,5)" fg:x="8620" fg:w="2"/><text x="76.5062%" y="767.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="76.2562%" y="741" width="0.0177%" height="15" fill="rgb(213,203,48)" fg:x="8620" fg:w="2"/><text x="76.5062%" y="751.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="76.2562%" y="725" width="0.0177%" height="15" fill="rgb(244,71,33)" fg:x="8620" fg:w="2"/><text x="76.5062%" y="735.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.13%)</title><rect x="76.2827%" y="613" width="0.1327%" height="15" fill="rgb(209,23,2)" fg:x="8623" fg:w="15"/><text x="76.5327%" y="623.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="76.3977%" y="597" width="0.0177%" height="15" fill="rgb(219,97,7)" fg:x="8636" fg:w="2"/><text x="76.6477%" y="607.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (18 samples, 0.16%)</title><rect x="76.2739%" y="725" width="0.1592%" height="15" fill="rgb(216,161,23)" fg:x="8622" fg:w="18"/><text x="76.5239%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (17 samples, 0.15%)</title><rect x="76.2827%" y="709" width="0.1504%" height="15" fill="rgb(207,45,42)" fg:x="8623" fg:w="17"/><text x="76.5327%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.15%)</title><rect x="76.2827%" y="693" width="0.1504%" height="15" fill="rgb(241,61,4)" fg:x="8623" fg:w="17"/><text x="76.5327%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.15%)</title><rect x="76.2827%" y="677" width="0.1504%" height="15" fill="rgb(236,170,1)" fg:x="8623" fg:w="17"/><text x="76.5327%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.15%)</title><rect x="76.2827%" y="661" width="0.1504%" height="15" fill="rgb(239,72,5)" fg:x="8623" fg:w="17"/><text x="76.5327%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.15%)</title><rect x="76.2827%" y="645" width="0.1504%" height="15" fill="rgb(214,13,50)" fg:x="8623" fg:w="17"/><text x="76.5327%" y="655.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.15%)</title><rect x="76.2827%" y="629" width="0.1504%" height="15" fill="rgb(224,88,9)" fg:x="8623" fg:w="17"/><text x="76.5327%" y="639.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (4 samples, 0.04%)</title><rect x="76.4331%" y="725" width="0.0354%" height="15" fill="rgb(238,192,34)" fg:x="8640" fg:w="4"/><text x="76.6831%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.03%)</title><rect x="76.4420%" y="709" width="0.0265%" height="15" fill="rgb(217,203,50)" fg:x="8641" fg:w="3"/><text x="76.6920%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.03%)</title><rect x="76.4420%" y="693" width="0.0265%" height="15" fill="rgb(241,123,32)" fg:x="8641" fg:w="3"/><text x="76.6920%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.03%)</title><rect x="76.4420%" y="677" width="0.0265%" height="15" fill="rgb(248,151,39)" fg:x="8641" fg:w="3"/><text x="76.6920%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="76.4420%" y="661" width="0.0265%" height="15" fill="rgb(208,89,6)" fg:x="8641" fg:w="3"/><text x="76.6920%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="76.4420%" y="645" width="0.0265%" height="15" fill="rgb(254,43,26)" fg:x="8641" fg:w="3"/><text x="76.6920%" y="655.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="76.4420%" y="629" width="0.0265%" height="15" fill="rgb(216,158,13)" fg:x="8641" fg:w="3"/><text x="76.6920%" y="639.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="76.4420%" y="613" width="0.0265%" height="15" fill="rgb(212,47,37)" fg:x="8641" fg:w="3"/><text x="76.6920%" y="623.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (7 samples, 0.06%)</title><rect x="76.4685%" y="725" width="0.0619%" height="15" fill="rgb(254,16,10)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="76.4685%" y="709" width="0.0619%" height="15" fill="rgb(223,228,16)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="76.4685%" y="693" width="0.0619%" height="15" fill="rgb(249,108,50)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.06%)</title><rect x="76.4685%" y="677" width="0.0619%" height="15" fill="rgb(208,220,5)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.06%)</title><rect x="76.4685%" y="661" width="0.0619%" height="15" fill="rgb(217,89,48)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.06%)</title><rect x="76.4685%" y="645" width="0.0619%" height="15" fill="rgb(212,113,41)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="655.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.06%)</title><rect x="76.4685%" y="629" width="0.0619%" height="15" fill="rgb(231,127,5)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="639.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.06%)</title><rect x="76.4685%" y="613" width="0.0619%" height="15" fill="rgb(217,141,17)" fg:x="8644" fg:w="7"/><text x="76.7185%" y="623.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (58 samples, 0.51%)</title><rect x="76.0262%" y="805" width="0.5131%" height="15" fill="rgb(245,125,54)" fg:x="8594" fg:w="58"/><text x="76.2762%" y="815.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (30 samples, 0.27%)</title><rect x="76.2739%" y="789" width="0.2654%" height="15" fill="rgb(248,125,3)" fg:x="8622" fg:w="30"/><text x="76.5239%" y="799.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (30 samples, 0.27%)</title><rect x="76.2739%" y="773" width="0.2654%" height="15" fill="rgb(236,119,51)" fg:x="8622" fg:w="30"/><text x="76.5239%" y="783.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (30 samples, 0.27%)</title><rect x="76.2739%" y="757" width="0.2654%" height="15" fill="rgb(239,99,8)" fg:x="8622" fg:w="30"/><text x="76.5239%" y="767.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (30 samples, 0.27%)</title><rect x="76.2739%" y="741" width="0.2654%" height="15" fill="rgb(224,228,4)" fg:x="8622" fg:w="30"/><text x="76.5239%" y="751.50"></text></g><g><title>start_thread (99 samples, 0.88%)</title><rect x="75.7166%" y="1045" width="0.8758%" height="15" fill="rgb(220,131,45)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="1055.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (99 samples, 0.88%)</title><rect x="75.7166%" y="1029" width="0.8758%" height="15" fill="rgb(215,62,5)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (99 samples, 0.88%)</title><rect x="75.7166%" y="1013" width="0.8758%" height="15" fill="rgb(253,12,24)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (99 samples, 0.88%)</title><rect x="75.7166%" y="997" width="0.8758%" height="15" fill="rgb(248,120,50)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (99 samples, 0.88%)</title><rect x="75.7166%" y="981" width="0.8758%" height="15" fill="rgb(245,194,10)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (99 samples, 0.88%)</title><rect x="75.7166%" y="965" width="0.8758%" height="15" fill="rgb(241,149,38)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="975.50"></text></g><g><title>std::panic::catch_unwind (99 samples, 0.88%)</title><rect x="75.7166%" y="949" width="0.8758%" height="15" fill="rgb(219,215,7)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="959.50"></text></g><g><title>std::panicking::try (99 samples, 0.88%)</title><rect x="75.7166%" y="933" width="0.8758%" height="15" fill="rgb(208,120,31)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="943.50"></text></g><g><title>std::panicking::try::do_call (99 samples, 0.88%)</title><rect x="75.7166%" y="917" width="0.8758%" height="15" fill="rgb(244,30,8)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (99 samples, 0.88%)</title><rect x="75.7166%" y="901" width="0.8758%" height="15" fill="rgb(238,35,44)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (99 samples, 0.88%)</title><rect x="75.7166%" y="885" width="0.8758%" height="15" fill="rgb(243,218,37)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (99 samples, 0.88%)</title><rect x="75.7166%" y="869" width="0.8758%" height="15" fill="rgb(218,169,10)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="879.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (99 samples, 0.88%)</title><rect x="75.7166%" y="853" width="0.8758%" height="15" fill="rgb(221,144,10)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="863.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (99 samples, 0.88%)</title><rect x="75.7166%" y="837" width="0.8758%" height="15" fill="rgb(226,41,38)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="847.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (99 samples, 0.88%)</title><rect x="75.7166%" y="821" width="0.8758%" height="15" fill="rgb(228,3,1)" fg:x="8559" fg:w="99"/><text x="75.9666%" y="831.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (6 samples, 0.05%)</title><rect x="76.5393%" y="805" width="0.0531%" height="15" fill="rgb(209,129,12)" fg:x="8652" fg:w="6"/><text x="76.7893%" y="815.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (6 samples, 0.05%)</title><rect x="76.5393%" y="789" width="0.0531%" height="15" fill="rgb(213,136,33)" fg:x="8652" fg:w="6"/><text x="76.7893%" y="799.50"></text></g><g><title>core::ops::function::Fn::call (6 samples, 0.05%)</title><rect x="76.5393%" y="773" width="0.0531%" height="15" fill="rgb(209,181,29)" fg:x="8652" fg:w="6"/><text x="76.7893%" y="783.50"></text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (6 samples, 0.05%)</title><rect x="76.5393%" y="757" width="0.0531%" height="15" fill="rgb(234,173,18)" fg:x="8652" fg:w="6"/><text x="76.7893%" y="767.50"></text></g><g><title>revm_primitives::env::Env::validate_tx_against_state (4 samples, 0.04%)</title><rect x="76.5570%" y="741" width="0.0354%" height="15" fill="rgb(227,73,47)" fg:x="8654" fg:w="4"/><text x="76.8070%" y="751.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (4 samples, 0.04%)</title><rect x="76.6012%" y="741" width="0.0354%" height="15" fill="rgb(234,9,34)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="76.6012%" y="725" width="0.0354%" height="15" fill="rgb(235,172,15)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="76.6012%" y="709" width="0.0354%" height="15" fill="rgb(245,61,2)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.04%)</title><rect x="76.6012%" y="693" width="0.0354%" height="15" fill="rgb(238,39,47)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="76.6012%" y="677" width="0.0354%" height="15" fill="rgb(234,37,24)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="76.6012%" y="661" width="0.0354%" height="15" fill="rgb(248,223,24)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="671.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="76.6012%" y="645" width="0.0354%" height="15" fill="rgb(223,12,15)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="655.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="76.6012%" y="629" width="0.0354%" height="15" fill="rgb(249,6,3)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="639.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="76.6012%" y="613" width="0.0354%" height="15" fill="rgb(237,105,33)" fg:x="8659" fg:w="4"/><text x="76.8512%" y="623.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (11 samples, 0.10%)</title><rect x="76.6012%" y="1045" width="0.0973%" height="15" fill="rgb(252,208,35)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11 samples, 0.10%)</title><rect x="76.6012%" y="1029" width="0.0973%" height="15" fill="rgb(215,181,35)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11 samples, 0.10%)</title><rect x="76.6012%" y="1013" width="0.0973%" height="15" fill="rgb(246,212,3)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (11 samples, 0.10%)</title><rect x="76.6012%" y="997" width="0.0973%" height="15" fill="rgb(247,156,24)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (11 samples, 0.10%)</title><rect x="76.6012%" y="981" width="0.0973%" height="15" fill="rgb(248,9,31)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="991.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 0.10%)</title><rect x="76.6012%" y="965" width="0.0973%" height="15" fill="rgb(234,26,45)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="975.50"></text></g><g><title>std::panicking::try (11 samples, 0.10%)</title><rect x="76.6012%" y="949" width="0.0973%" height="15" fill="rgb(249,11,32)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="959.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 0.10%)</title><rect x="76.6012%" y="933" width="0.0973%" height="15" fill="rgb(249,162,33)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11 samples, 0.10%)</title><rect x="76.6012%" y="917" width="0.0973%" height="15" fill="rgb(232,4,32)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (11 samples, 0.10%)</title><rect x="76.6012%" y="901" width="0.0973%" height="15" fill="rgb(212,5,45)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 0.10%)</title><rect x="76.6012%" y="885" width="0.0973%" height="15" fill="rgb(227,95,13)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="895.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (11 samples, 0.10%)</title><rect x="76.6012%" y="869" width="0.0973%" height="15" fill="rgb(223,205,10)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="879.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (11 samples, 0.10%)</title><rect x="76.6012%" y="853" width="0.0973%" height="15" fill="rgb(222,178,8)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="863.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (11 samples, 0.10%)</title><rect x="76.6012%" y="837" width="0.0973%" height="15" fill="rgb(216,13,22)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="847.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (11 samples, 0.10%)</title><rect x="76.6012%" y="821" width="0.0973%" height="15" fill="rgb(240,167,12)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="831.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (11 samples, 0.10%)</title><rect x="76.6012%" y="805" width="0.0973%" height="15" fill="rgb(235,68,35)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="815.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (11 samples, 0.10%)</title><rect x="76.6012%" y="789" width="0.0973%" height="15" fill="rgb(253,40,27)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="799.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (11 samples, 0.10%)</title><rect x="76.6012%" y="773" width="0.0973%" height="15" fill="rgb(214,19,28)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="783.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (11 samples, 0.10%)</title><rect x="76.6012%" y="757" width="0.0973%" height="15" fill="rgb(210,167,45)" fg:x="8659" fg:w="11"/><text x="76.8512%" y="767.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (7 samples, 0.06%)</title><rect x="76.6366%" y="741" width="0.0619%" height="15" fill="rgb(232,97,40)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="76.6366%" y="725" width="0.0619%" height="15" fill="rgb(250,35,23)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="76.6366%" y="709" width="0.0619%" height="15" fill="rgb(248,47,53)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.06%)</title><rect x="76.6366%" y="693" width="0.0619%" height="15" fill="rgb(226,58,50)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.06%)</title><rect x="76.6366%" y="677" width="0.0619%" height="15" fill="rgb(217,105,26)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.06%)</title><rect x="76.6366%" y="661" width="0.0619%" height="15" fill="rgb(208,64,1)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="671.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.06%)</title><rect x="76.6366%" y="645" width="0.0619%" height="15" fill="rgb(214,80,1)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="655.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.06%)</title><rect x="76.6366%" y="629" width="0.0619%" height="15" fill="rgb(206,175,26)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="639.50"></text></g><g><title>_int_malloc (7 samples, 0.06%)</title><rect x="76.6366%" y="613" width="0.0619%" height="15" fill="rgb(235,156,37)" fg:x="8663" fg:w="7"/><text x="76.8866%" y="623.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="76.6720%" y="597" width="0.0265%" height="15" fill="rgb(213,100,9)" fg:x="8667" fg:w="3"/><text x="76.9220%" y="607.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="76.7693%" y="981" width="0.0265%" height="15" fill="rgb(241,15,13)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="991.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="76.7693%" y="965" width="0.0265%" height="15" fill="rgb(205,97,43)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="76.7693%" y="949" width="0.0265%" height="15" fill="rgb(216,106,32)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="76.7693%" y="933" width="0.0265%" height="15" fill="rgb(226,200,8)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="76.7693%" y="917" width="0.0265%" height="15" fill="rgb(244,54,29)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="76.7693%" y="901" width="0.0265%" height="15" fill="rgb(252,169,12)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="76.7693%" y="885" width="0.0265%" height="15" fill="rgb(231,199,11)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="76.7693%" y="869" width="0.0265%" height="15" fill="rgb(233,191,18)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="76.7693%" y="853" width="0.0265%" height="15" fill="rgb(215,83,47)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="76.7693%" y="837" width="0.0265%" height="15" fill="rgb(251,67,19)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="76.7693%" y="821" width="0.0265%" height="15" fill="rgb(240,7,20)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="831.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="76.7693%" y="805" width="0.0265%" height="15" fill="rgb(210,150,26)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="815.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="76.7693%" y="789" width="0.0265%" height="15" fill="rgb(228,75,42)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="799.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="76.7693%" y="773" width="0.0265%" height="15" fill="rgb(237,134,48)" fg:x="8678" fg:w="3"/><text x="77.0193%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="76.8047%" y="885" width="0.0177%" height="15" fill="rgb(205,80,50)" fg:x="8682" fg:w="2"/><text x="77.0547%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (2 samples, 0.02%)</title><rect x="76.8047%" y="869" width="0.0177%" height="15" fill="rgb(217,74,48)" fg:x="8682" fg:w="2"/><text x="77.0547%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="76.8047%" y="853" width="0.0177%" height="15" fill="rgb(205,82,50)" fg:x="8682" fg:w="2"/><text x="77.0547%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.05%)</title><rect x="76.7958%" y="981" width="0.0531%" height="15" fill="rgb(228,1,33)" fg:x="8681" fg:w="6"/><text x="77.0458%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.05%)</title><rect x="76.7958%" y="965" width="0.0531%" height="15" fill="rgb(214,50,23)" fg:x="8681" fg:w="6"/><text x="77.0458%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.05%)</title><rect x="76.7958%" y="949" width="0.0531%" height="15" fill="rgb(210,62,9)" fg:x="8681" fg:w="6"/><text x="77.0458%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 0.05%)</title><rect x="76.7958%" y="933" width="0.0531%" height="15" fill="rgb(210,104,37)" fg:x="8681" fg:w="6"/><text x="77.0458%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="76.7958%" y="917" width="0.0531%" height="15" fill="rgb(232,104,43)" fg:x="8681" fg:w="6"/><text x="77.0458%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="76.7958%" y="901" width="0.0531%" height="15" fill="rgb(244,52,6)" fg:x="8681" fg:w="6"/><text x="77.0458%" y="911.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (3 samples, 0.03%)</title><rect x="76.8224%" y="885" width="0.0265%" height="15" fill="rgb(211,174,52)" fg:x="8684" fg:w="3"/><text x="77.0724%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="76.8312%" y="869" width="0.0177%" height="15" fill="rgb(229,48,4)" fg:x="8685" fg:w="2"/><text x="77.0812%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(block_stm_revm::MemoryLocation,block_stm_revm::MemoryValue)&gt;&gt; (2 samples, 0.02%)</title><rect x="76.8312%" y="853" width="0.0177%" height="15" fill="rgb(205,155,16)" fg:x="8685" fg:w="2"/><text x="77.0812%" y="863.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="76.8312%" y="837" width="0.0177%" height="15" fill="rgb(211,141,53)" fg:x="8685" fg:w="2"/><text x="77.0812%" y="847.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 0.16%)</title><rect x="76.6985%" y="1045" width="0.1592%" height="15" fill="rgb(240,148,11)" fg:x="8670" fg:w="18"/><text x="76.9485%" y="1055.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (18 samples, 0.16%)</title><rect x="76.6985%" y="1029" width="0.1592%" height="15" fill="rgb(214,45,23)" fg:x="8670" fg:w="18"/><text x="76.9485%" y="1039.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (10 samples, 0.09%)</title><rect x="76.7693%" y="1013" width="0.0885%" height="15" fill="rgb(248,74,26)" fg:x="8678" fg:w="10"/><text x="77.0193%" y="1023.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (10 samples, 0.09%)</title><rect x="76.7693%" y="997" width="0.0885%" height="15" fill="rgb(218,121,16)" fg:x="8678" fg:w="10"/><text x="77.0193%" y="1007.50"></text></g><g><title>[unknown] (8,293 samples, 73.36%)</title><rect x="3.5209%" y="1061" width="73.3634%" height="15" fill="rgb(218,10,47)" fg:x="398" fg:w="8293"/><text x="3.7709%" y="1071.50">[unknown]</text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="76.8666%" y="1045" width="0.0177%" height="15" fill="rgb(227,99,14)" fg:x="8689" fg:w="2"/><text x="77.1166%" y="1055.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="76.8931%" y="1061" width="0.0442%" height="15" fill="rgb(229,83,46)" fg:x="8692" fg:w="5"/><text x="77.1431%" y="1071.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (2 samples, 0.02%)</title><rect x="76.9374%" y="1061" width="0.0177%" height="15" fill="rgb(228,25,1)" fg:x="8697" fg:w="2"/><text x="77.1874%" y="1071.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (2 samples, 0.02%)</title><rect x="76.9639%" y="1061" width="0.0177%" height="15" fill="rgb(252,190,15)" fg:x="8700" fg:w="2"/><text x="77.2139%" y="1071.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="76.9639%" y="1045" width="0.0177%" height="15" fill="rgb(213,103,51)" fg:x="8700" fg:w="2"/><text x="77.2139%" y="1055.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.02%)</title><rect x="76.9904%" y="1061" width="0.0177%" height="15" fill="rgb(220,38,44)" fg:x="8703" fg:w="2"/><text x="77.2404%" y="1071.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="77.0524%" y="549" width="0.0265%" height="15" fill="rgb(210,45,26)" fg:x="8710" fg:w="3"/><text x="77.3024%" y="559.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="77.0612%" y="533" width="0.0177%" height="15" fill="rgb(205,95,48)" fg:x="8711" fg:w="2"/><text x="77.3112%" y="543.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="77.0612%" y="517" width="0.0177%" height="15" fill="rgb(225,179,37)" fg:x="8711" fg:w="2"/><text x="77.3112%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="77.0524%" y="645" width="0.0354%" height="15" fill="rgb(230,209,3)" fg:x="8710" fg:w="4"/><text x="77.3024%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.04%)</title><rect x="77.0524%" y="629" width="0.0354%" height="15" fill="rgb(248,12,46)" fg:x="8710" fg:w="4"/><text x="77.3024%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="77.0524%" y="613" width="0.0354%" height="15" fill="rgb(234,18,0)" fg:x="8710" fg:w="4"/><text x="77.3024%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="77.0524%" y="597" width="0.0354%" height="15" fill="rgb(238,197,14)" fg:x="8710" fg:w="4"/><text x="77.3024%" y="607.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="77.0524%" y="581" width="0.0354%" height="15" fill="rgb(251,162,48)" fg:x="8710" fg:w="4"/><text x="77.3024%" y="591.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="77.0524%" y="565" width="0.0354%" height="15" fill="rgb(237,73,42)" fg:x="8710" fg:w="4"/><text x="77.3024%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (8 samples, 0.07%)</title><rect x="77.0435%" y="709" width="0.0708%" height="15" fill="rgb(211,108,8)" fg:x="8709" fg:w="8"/><text x="77.2935%" y="719.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (8 samples, 0.07%)</title><rect x="77.0435%" y="693" width="0.0708%" height="15" fill="rgb(213,45,22)" fg:x="8709" fg:w="8"/><text x="77.2935%" y="703.50"></text></g><g><title>bytes::bytes::promotable_even_clone (8 samples, 0.07%)</title><rect x="77.0435%" y="677" width="0.0708%" height="15" fill="rgb(252,154,5)" fg:x="8709" fg:w="8"/><text x="77.2935%" y="687.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (7 samples, 0.06%)</title><rect x="77.0524%" y="661" width="0.0619%" height="15" fill="rgb(221,79,52)" fg:x="8710" fg:w="7"/><text x="77.3024%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (3 samples, 0.03%)</title><rect x="77.0878%" y="645" width="0.0265%" height="15" fill="rgb(229,220,36)" fg:x="8714" fg:w="3"/><text x="77.3378%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.03%)</title><rect x="77.0878%" y="629" width="0.0265%" height="15" fill="rgb(211,17,16)" fg:x="8714" fg:w="3"/><text x="77.3378%" y="639.50"></text></g><g><title>&lt;revm_primitives::env::TxEnv as core::clone::Clone&gt;::clone (13 samples, 0.12%)</title><rect x="77.0081%" y="725" width="0.1150%" height="15" fill="rgb(222,55,31)" fg:x="8705" fg:w="13"/><text x="77.2581%" y="735.50"></text></g><g><title>__pte_offset_map_lock (3 samples, 0.03%)</title><rect x="77.2116%" y="613" width="0.0265%" height="15" fill="rgb(221,221,31)" fg:x="8728" fg:w="3"/><text x="77.4616%" y="623.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="77.2647%" y="565" width="0.0177%" height="15" fill="rgb(227,168,26)" fg:x="8734" fg:w="2"/><text x="77.5147%" y="575.50"></text></g><g><title>charge_memcg (3 samples, 0.03%)</title><rect x="77.2647%" y="581" width="0.0265%" height="15" fill="rgb(224,139,9)" fg:x="8734" fg:w="3"/><text x="77.5147%" y="591.50"></text></g><g><title>__mem_cgroup_charge (5 samples, 0.04%)</title><rect x="77.2647%" y="597" width="0.0442%" height="15" fill="rgb(254,172,0)" fg:x="8734" fg:w="5"/><text x="77.5147%" y="607.50"></text></g><g><title>__pte_offset_map_lock (5 samples, 0.04%)</title><rect x="77.3178%" y="597" width="0.0442%" height="15" fill="rgb(235,203,1)" fg:x="8740" fg:w="5"/><text x="77.5678%" y="607.50"></text></g><g><title>_raw_spin_lock (4 samples, 0.04%)</title><rect x="77.3708%" y="597" width="0.0354%" height="15" fill="rgb(216,205,24)" fg:x="8746" fg:w="4"/><text x="77.6208%" y="607.50"></text></g><g><title>folio_add_lru_vma (5 samples, 0.04%)</title><rect x="77.4062%" y="597" width="0.0442%" height="15" fill="rgb(233,24,6)" fg:x="8750" fg:w="5"/><text x="77.6562%" y="607.50"></text></g><g><title>folio_add_lru (5 samples, 0.04%)</title><rect x="77.4062%" y="581" width="0.0442%" height="15" fill="rgb(244,110,9)" fg:x="8750" fg:w="5"/><text x="77.6562%" y="591.50"></text></g><g><title>folio_batch_move_lru (5 samples, 0.04%)</title><rect x="77.4062%" y="565" width="0.0442%" height="15" fill="rgb(239,222,42)" fg:x="8750" fg:w="5"/><text x="77.6562%" y="575.50"></text></g><g><title>lru_add_fn (3 samples, 0.03%)</title><rect x="77.4239%" y="549" width="0.0265%" height="15" fill="rgb(218,145,13)" fg:x="8752" fg:w="3"/><text x="77.6739%" y="559.50"></text></g><g><title>lru_gen_add_folio (3 samples, 0.03%)</title><rect x="77.4239%" y="533" width="0.0265%" height="15" fill="rgb(207,69,11)" fg:x="8752" fg:w="3"/><text x="77.6739%" y="543.50"></text></g><g><title>clear_page_erms (3 samples, 0.03%)</title><rect x="77.4770%" y="533" width="0.0265%" height="15" fill="rgb(220,223,22)" fg:x="8758" fg:w="3"/><text x="77.7270%" y="543.50"></text></g><g><title>do_anonymous_page (34 samples, 0.30%)</title><rect x="77.2381%" y="613" width="0.3008%" height="15" fill="rgb(245,102,5)" fg:x="8731" fg:w="34"/><text x="77.4881%" y="623.50"></text></g><g><title>vma_alloc_folio (8 samples, 0.07%)</title><rect x="77.4682%" y="597" width="0.0708%" height="15" fill="rgb(211,148,2)" fg:x="8757" fg:w="8"/><text x="77.7182%" y="607.50"></text></g><g><title>__folio_alloc (8 samples, 0.07%)</title><rect x="77.4682%" y="581" width="0.0708%" height="15" fill="rgb(241,13,44)" fg:x="8757" fg:w="8"/><text x="77.7182%" y="591.50"></text></g><g><title>__alloc_pages (8 samples, 0.07%)</title><rect x="77.4682%" y="565" width="0.0708%" height="15" fill="rgb(219,137,21)" fg:x="8757" fg:w="8"/><text x="77.7182%" y="575.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.06%)</title><rect x="77.4770%" y="549" width="0.0619%" height="15" fill="rgb(242,206,5)" fg:x="8758" fg:w="7"/><text x="77.7270%" y="559.50"></text></g><g><title>rmqueue (4 samples, 0.04%)</title><rect x="77.5035%" y="533" width="0.0354%" height="15" fill="rgb(217,114,22)" fg:x="8761" fg:w="4"/><text x="77.7535%" y="543.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="77.5212%" y="517" width="0.0177%" height="15" fill="rgb(253,206,42)" fg:x="8763" fg:w="2"/><text x="77.7712%" y="527.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="77.5212%" y="501" width="0.0177%" height="15" fill="rgb(236,102,18)" fg:x="8763" fg:w="2"/><text x="77.7712%" y="511.50"></text></g><g><title>handle_mm_fault (40 samples, 0.35%)</title><rect x="77.1939%" y="661" width="0.3539%" height="15" fill="rgb(208,59,49)" fg:x="8726" fg:w="40"/><text x="77.4439%" y="671.50"></text></g><g><title>__handle_mm_fault (40 samples, 0.35%)</title><rect x="77.1939%" y="645" width="0.3539%" height="15" fill="rgb(215,194,28)" fg:x="8726" fg:w="40"/><text x="77.4439%" y="655.50"></text></g><g><title>handle_pte_fault (39 samples, 0.35%)</title><rect x="77.2028%" y="629" width="0.3450%" height="15" fill="rgb(243,207,11)" fg:x="8727" fg:w="39"/><text x="77.4528%" y="639.50"></text></g><g><title>do_user_addr_fault (42 samples, 0.37%)</title><rect x="77.1851%" y="677" width="0.3715%" height="15" fill="rgb(254,179,35)" fg:x="8725" fg:w="42"/><text x="77.4351%" y="687.50"></text></g><g><title>asm_exc_page_fault (46 samples, 0.41%)</title><rect x="77.1674%" y="709" width="0.4069%" height="15" fill="rgb(235,97,3)" fg:x="8723" fg:w="46"/><text x="77.4174%" y="719.50"></text></g><g><title>exc_page_fault (45 samples, 0.40%)</title><rect x="77.1762%" y="693" width="0.3981%" height="15" fill="rgb(215,155,33)" fg:x="8724" fg:w="45"/><text x="77.4262%" y="703.50"></text></g><g><title>irqentry_exit (2 samples, 0.02%)</title><rect x="77.5566%" y="677" width="0.0177%" height="15" fill="rgb(223,128,12)" fg:x="8767" fg:w="2"/><text x="77.8066%" y="687.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.02%)</title><rect x="77.5566%" y="661" width="0.0177%" height="15" fill="rgb(208,157,18)" fg:x="8767" fg:w="2"/><text x="77.8066%" y="671.50"></text></g><g><title>error_entry (2 samples, 0.02%)</title><rect x="77.5743%" y="709" width="0.0177%" height="15" fill="rgb(249,70,54)" fg:x="8769" fg:w="2"/><text x="77.8243%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (71 samples, 0.63%)</title><rect x="77.0081%" y="789" width="0.6281%" height="15" fill="rgb(244,118,24)" fg:x="8705" fg:w="71"/><text x="77.2581%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (71 samples, 0.63%)</title><rect x="77.0081%" y="773" width="0.6281%" height="15" fill="rgb(211,54,0)" fg:x="8705" fg:w="71"/><text x="77.2581%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (71 samples, 0.63%)</title><rect x="77.0081%" y="757" width="0.6281%" height="15" fill="rgb(245,137,45)" fg:x="8705" fg:w="71"/><text x="77.2581%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (71 samples, 0.63%)</title><rect x="77.0081%" y="741" width="0.6281%" height="15" fill="rgb(232,154,31)" fg:x="8705" fg:w="71"/><text x="77.2581%" y="751.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (58 samples, 0.51%)</title><rect x="77.1231%" y="725" width="0.5131%" height="15" fill="rgb(253,6,39)" fg:x="8718" fg:w="58"/><text x="77.3731%" y="735.50"></text></g><g><title>sync_regs (5 samples, 0.04%)</title><rect x="77.5920%" y="709" width="0.0442%" height="15" fill="rgb(234,183,24)" fg:x="8771" fg:w="5"/><text x="77.8420%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="77.6451%" y="677" width="0.0442%" height="15" fill="rgb(252,84,40)" fg:x="8777" fg:w="5"/><text x="77.8951%" y="687.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (47 samples, 0.42%)</title><rect x="77.7070%" y="661" width="0.4158%" height="15" fill="rgb(224,65,2)" fg:x="8784" fg:w="47"/><text x="77.9570%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (46 samples, 0.41%)</title><rect x="77.7159%" y="645" width="0.4069%" height="15" fill="rgb(229,38,24)" fg:x="8785" fg:w="46"/><text x="77.9659%" y="655.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (46 samples, 0.41%)</title><rect x="77.7159%" y="629" width="0.4069%" height="15" fill="rgb(218,131,50)" fg:x="8785" fg:w="46"/><text x="77.9659%" y="639.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (46 samples, 0.41%)</title><rect x="77.7159%" y="613" width="0.4069%" height="15" fill="rgb(233,106,18)" fg:x="8785" fg:w="46"/><text x="77.9659%" y="623.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (44 samples, 0.39%)</title><rect x="77.7335%" y="597" width="0.3892%" height="15" fill="rgb(220,216,11)" fg:x="8787" fg:w="44"/><text x="77.9835%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (44 samples, 0.39%)</title><rect x="77.7335%" y="581" width="0.3892%" height="15" fill="rgb(251,100,45)" fg:x="8787" fg:w="44"/><text x="77.9835%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (44 samples, 0.39%)</title><rect x="77.7335%" y="565" width="0.3892%" height="15" fill="rgb(235,143,32)" fg:x="8787" fg:w="44"/><text x="77.9835%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (44 samples, 0.39%)</title><rect x="77.7335%" y="549" width="0.3892%" height="15" fill="rgb(248,124,34)" fg:x="8787" fg:w="44"/><text x="77.9835%" y="559.50"></text></g><g><title>__mem_cgroup_charge (4 samples, 0.04%)</title><rect x="78.2289%" y="437" width="0.0354%" height="15" fill="rgb(225,221,4)" fg:x="8843" fg:w="4"/><text x="78.4789%" y="447.50"></text></g><g><title>charge_memcg (3 samples, 0.03%)</title><rect x="78.2378%" y="421" width="0.0265%" height="15" fill="rgb(242,27,43)" fg:x="8844" fg:w="3"/><text x="78.4878%" y="431.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="78.2466%" y="405" width="0.0177%" height="15" fill="rgb(227,54,8)" fg:x="8845" fg:w="2"/><text x="78.4966%" y="415.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="78.2643%" y="437" width="0.0177%" height="15" fill="rgb(253,139,49)" fg:x="8847" fg:w="2"/><text x="78.5143%" y="447.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.02%)</title><rect x="78.2820%" y="437" width="0.0177%" height="15" fill="rgb(231,26,43)" fg:x="8849" fg:w="2"/><text x="78.5320%" y="447.50"></text></g><g><title>folio_add_lru_vma (3 samples, 0.03%)</title><rect x="78.2997%" y="437" width="0.0265%" height="15" fill="rgb(207,121,39)" fg:x="8851" fg:w="3"/><text x="78.5497%" y="447.50"></text></g><g><title>folio_add_lru (3 samples, 0.03%)</title><rect x="78.2997%" y="421" width="0.0265%" height="15" fill="rgb(223,101,35)" fg:x="8851" fg:w="3"/><text x="78.5497%" y="431.50"></text></g><g><title>folio_batch_move_lru (3 samples, 0.03%)</title><rect x="78.2997%" y="405" width="0.0265%" height="15" fill="rgb(232,87,23)" fg:x="8851" fg:w="3"/><text x="78.5497%" y="415.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="78.3086%" y="389" width="0.0177%" height="15" fill="rgb(225,180,29)" fg:x="8852" fg:w="2"/><text x="78.5586%" y="399.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="78.3086%" y="373" width="0.0177%" height="15" fill="rgb(225,25,17)" fg:x="8852" fg:w="2"/><text x="78.5586%" y="383.50"></text></g><g><title>do_anonymous_page (15 samples, 0.13%)</title><rect x="78.2289%" y="453" width="0.1327%" height="15" fill="rgb(223,8,52)" fg:x="8843" fg:w="15"/><text x="78.4789%" y="463.50"></text></g><g><title>vma_alloc_folio (4 samples, 0.04%)</title><rect x="78.3263%" y="437" width="0.0354%" height="15" fill="rgb(246,42,21)" fg:x="8854" fg:w="4"/><text x="78.5763%" y="447.50"></text></g><g><title>__folio_alloc (3 samples, 0.03%)</title><rect x="78.3351%" y="421" width="0.0265%" height="15" fill="rgb(205,64,43)" fg:x="8855" fg:w="3"/><text x="78.5851%" y="431.50"></text></g><g><title>__alloc_pages (3 samples, 0.03%)</title><rect x="78.3351%" y="405" width="0.0265%" height="15" fill="rgb(221,160,13)" fg:x="8855" fg:w="3"/><text x="78.5851%" y="415.50"></text></g><g><title>get_page_from_freelist (3 samples, 0.03%)</title><rect x="78.3351%" y="389" width="0.0265%" height="15" fill="rgb(239,58,35)" fg:x="8855" fg:w="3"/><text x="78.5851%" y="399.50"></text></g><g><title>rmqueue (3 samples, 0.03%)</title><rect x="78.3351%" y="373" width="0.0265%" height="15" fill="rgb(251,26,40)" fg:x="8855" fg:w="3"/><text x="78.5851%" y="383.50"></text></g><g><title>__rmqueue_pcplist (3 samples, 0.03%)</title><rect x="78.3351%" y="357" width="0.0265%" height="15" fill="rgb(247,0,4)" fg:x="8855" fg:w="3"/><text x="78.5851%" y="367.50"></text></g><g><title>rmqueue_bulk (3 samples, 0.03%)</title><rect x="78.3351%" y="341" width="0.0265%" height="15" fill="rgb(218,130,10)" fg:x="8855" fg:w="3"/><text x="78.5851%" y="351.50"></text></g><g><title>__handle_mm_fault (17 samples, 0.15%)</title><rect x="78.2201%" y="485" width="0.1504%" height="15" fill="rgb(239,32,7)" fg:x="8842" fg:w="17"/><text x="78.4701%" y="495.50"></text></g><g><title>handle_pte_fault (16 samples, 0.14%)</title><rect x="78.2289%" y="469" width="0.1415%" height="15" fill="rgb(210,192,24)" fg:x="8843" fg:w="16"/><text x="78.4789%" y="479.50"></text></g><g><title>asm_exc_page_fault (18 samples, 0.16%)</title><rect x="78.2201%" y="549" width="0.1592%" height="15" fill="rgb(226,212,17)" fg:x="8842" fg:w="18"/><text x="78.4701%" y="559.50"></text></g><g><title>exc_page_fault (18 samples, 0.16%)</title><rect x="78.2201%" y="533" width="0.1592%" height="15" fill="rgb(219,201,28)" fg:x="8842" fg:w="18"/><text x="78.4701%" y="543.50"></text></g><g><title>do_user_addr_fault (18 samples, 0.16%)</title><rect x="78.2201%" y="517" width="0.1592%" height="15" fill="rgb(235,207,41)" fg:x="8842" fg:w="18"/><text x="78.4701%" y="527.50"></text></g><g><title>handle_mm_fault (18 samples, 0.16%)</title><rect x="78.2201%" y="501" width="0.1592%" height="15" fill="rgb(241,95,54)" fg:x="8842" fg:w="18"/><text x="78.4701%" y="511.50"></text></g><g><title>core::clone::Clone::clone (87 samples, 0.77%)</title><rect x="77.6451%" y="693" width="0.7696%" height="15" fill="rgb(248,12,23)" fg:x="8777" fg:w="87"/><text x="77.8951%" y="703.50"></text></g><g><title>&lt;revm::db::in_memory_db::DbAccount as core::clone::Clone&gt;::clone (82 samples, 0.73%)</title><rect x="77.6893%" y="677" width="0.7254%" height="15" fill="rgb(228,173,4)" fg:x="8782" fg:w="82"/><text x="77.9393%" y="687.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (33 samples, 0.29%)</title><rect x="78.1228%" y="661" width="0.2919%" height="15" fill="rgb(254,99,5)" fg:x="8831" fg:w="33"/><text x="78.3728%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.29%)</title><rect x="78.1228%" y="645" width="0.2919%" height="15" fill="rgb(212,184,17)" fg:x="8831" fg:w="33"/><text x="78.3728%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.28%)</title><rect x="78.1316%" y="629" width="0.2831%" height="15" fill="rgb(252,174,1)" fg:x="8832" fg:w="32"/><text x="78.3816%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (32 samples, 0.28%)</title><rect x="78.1316%" y="613" width="0.2831%" height="15" fill="rgb(241,118,51)" fg:x="8832" fg:w="32"/><text x="78.3816%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (32 samples, 0.28%)</title><rect x="78.1316%" y="597" width="0.2831%" height="15" fill="rgb(227,94,47)" fg:x="8832" fg:w="32"/><text x="78.3816%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.28%)</title><rect x="78.1316%" y="581" width="0.2831%" height="15" fill="rgb(229,104,2)" fg:x="8832" fg:w="32"/><text x="78.3816%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (32 samples, 0.28%)</title><rect x="78.1316%" y="565" width="0.2831%" height="15" fill="rgb(219,28,31)" fg:x="8832" fg:w="32"/><text x="78.3816%" y="575.50"></text></g><g><title>sync_regs (4 samples, 0.04%)</title><rect x="78.3793%" y="549" width="0.0354%" height="15" fill="rgb(233,109,36)" fg:x="8860" fg:w="4"/><text x="78.6293%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="78.4147%" y="693" width="0.0177%" height="15" fill="rgb(246,88,11)" fg:x="8864" fg:w="2"/><text x="78.6647%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="78.4147%" y="677" width="0.0177%" height="15" fill="rgb(209,212,17)" fg:x="8864" fg:w="2"/><text x="78.6647%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="78.4147%" y="661" width="0.0177%" height="15" fill="rgb(243,59,29)" fg:x="8864" fg:w="2"/><text x="78.6647%" y="671.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="78.4147%" y="645" width="0.0177%" height="15" fill="rgb(244,205,48)" fg:x="8864" fg:w="2"/><text x="78.6647%" y="655.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="78.4147%" y="629" width="0.0177%" height="15" fill="rgb(227,30,6)" fg:x="8864" fg:w="2"/><text x="78.6647%" y="639.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="78.4147%" y="613" width="0.0177%" height="15" fill="rgb(220,205,48)" fg:x="8864" fg:w="2"/><text x="78.6647%" y="623.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="78.4147%" y="597" width="0.0177%" height="15" fill="rgb(250,94,14)" fg:x="8864" fg:w="2"/><text x="78.6647%" y="607.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="78.6093%" y="485" width="0.0177%" height="15" fill="rgb(216,119,42)" fg:x="8886" fg:w="2"/><text x="78.8593%" y="495.50"></text></g><g><title>charge_memcg (7 samples, 0.06%)</title><rect x="78.5916%" y="501" width="0.0619%" height="15" fill="rgb(232,155,0)" fg:x="8884" fg:w="7"/><text x="78.8416%" y="511.50"></text></g><g><title>__mem_cgroup_charge (10 samples, 0.09%)</title><rect x="78.5740%" y="517" width="0.0885%" height="15" fill="rgb(212,24,32)" fg:x="8882" fg:w="10"/><text x="78.8240%" y="527.50"></text></g><g><title>__pte_offset_map_lock (4 samples, 0.04%)</title><rect x="78.6624%" y="517" width="0.0354%" height="15" fill="rgb(216,69,20)" fg:x="8892" fg:w="4"/><text x="78.9124%" y="527.50"></text></g><g><title>_raw_spin_lock (6 samples, 0.05%)</title><rect x="78.6978%" y="517" width="0.0531%" height="15" fill="rgb(229,73,31)" fg:x="8896" fg:w="6"/><text x="78.9478%" y="527.50"></text></g><g><title>lru_add_fn (5 samples, 0.04%)</title><rect x="78.7774%" y="469" width="0.0442%" height="15" fill="rgb(224,219,20)" fg:x="8905" fg:w="5"/><text x="79.0274%" y="479.50"></text></g><g><title>lru_gen_add_folio (3 samples, 0.03%)</title><rect x="78.7951%" y="453" width="0.0265%" height="15" fill="rgb(215,146,41)" fg:x="8907" fg:w="3"/><text x="79.0451%" y="463.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.02%)</title><rect x="78.8040%" y="437" width="0.0177%" height="15" fill="rgb(244,71,31)" fg:x="8908" fg:w="2"/><text x="79.0540%" y="447.50"></text></g><g><title>__mod_node_page_state (2 samples, 0.02%)</title><rect x="78.8040%" y="421" width="0.0177%" height="15" fill="rgb(224,24,11)" fg:x="8908" fg:w="2"/><text x="79.0540%" y="431.50"></text></g><g><title>folio_add_lru_vma (8 samples, 0.07%)</title><rect x="78.7597%" y="517" width="0.0708%" height="15" fill="rgb(229,76,15)" fg:x="8903" fg:w="8"/><text x="79.0097%" y="527.50"></text></g><g><title>folio_add_lru (8 samples, 0.07%)</title><rect x="78.7597%" y="501" width="0.0708%" height="15" fill="rgb(209,93,2)" fg:x="8903" fg:w="8"/><text x="79.0097%" y="511.50"></text></g><g><title>folio_batch_move_lru (7 samples, 0.06%)</title><rect x="78.7686%" y="485" width="0.0619%" height="15" fill="rgb(216,200,50)" fg:x="8904" fg:w="7"/><text x="79.0186%" y="495.50"></text></g><g><title>clear_page_erms (2 samples, 0.02%)</title><rect x="78.8659%" y="453" width="0.0177%" height="15" fill="rgb(211,67,34)" fg:x="8915" fg:w="2"/><text x="79.1159%" y="463.50"></text></g><g><title>__alloc_pages (8 samples, 0.07%)</title><rect x="78.8393%" y="485" width="0.0708%" height="15" fill="rgb(225,87,47)" fg:x="8912" fg:w="8"/><text x="79.0893%" y="495.50"></text></g><g><title>get_page_from_freelist (6 samples, 0.05%)</title><rect x="78.8570%" y="469" width="0.0531%" height="15" fill="rgb(217,185,16)" fg:x="8914" fg:w="6"/><text x="79.1070%" y="479.50"></text></g><g><title>rmqueue (3 samples, 0.03%)</title><rect x="78.8836%" y="453" width="0.0265%" height="15" fill="rgb(205,0,0)" fg:x="8917" fg:w="3"/><text x="79.1336%" y="463.50"></text></g><g><title>__rmqueue_pcplist (3 samples, 0.03%)</title><rect x="78.8836%" y="437" width="0.0265%" height="15" fill="rgb(207,116,45)" fg:x="8917" fg:w="3"/><text x="79.1336%" y="447.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="78.8924%" y="421" width="0.0177%" height="15" fill="rgb(221,156,26)" fg:x="8918" fg:w="2"/><text x="79.1424%" y="431.50"></text></g><g><title>__folio_alloc (9 samples, 0.08%)</title><rect x="78.8393%" y="501" width="0.0796%" height="15" fill="rgb(213,140,4)" fg:x="8912" fg:w="9"/><text x="79.0893%" y="511.50"></text></g><g><title>do_anonymous_page (42 samples, 0.37%)</title><rect x="78.5651%" y="533" width="0.3715%" height="15" fill="rgb(231,224,15)" fg:x="8881" fg:w="42"/><text x="78.8151%" y="543.50"></text></g><g><title>vma_alloc_folio (11 samples, 0.10%)</title><rect x="78.8393%" y="517" width="0.0973%" height="15" fill="rgb(244,76,20)" fg:x="8912" fg:w="11"/><text x="79.0893%" y="527.50"></text></g><g><title>handle_mm_fault (47 samples, 0.42%)</title><rect x="78.5297%" y="581" width="0.4158%" height="15" fill="rgb(238,117,7)" fg:x="8877" fg:w="47"/><text x="78.7797%" y="591.50"></text></g><g><title>__handle_mm_fault (46 samples, 0.41%)</title><rect x="78.5386%" y="565" width="0.4069%" height="15" fill="rgb(235,1,10)" fg:x="8878" fg:w="46"/><text x="78.7886%" y="575.50"></text></g><g><title>handle_pte_fault (46 samples, 0.41%)</title><rect x="78.5386%" y="549" width="0.4069%" height="15" fill="rgb(216,165,6)" fg:x="8878" fg:w="46"/><text x="78.7886%" y="559.50"></text></g><g><title>do_user_addr_fault (49 samples, 0.43%)</title><rect x="78.5297%" y="597" width="0.4335%" height="15" fill="rgb(246,91,35)" fg:x="8877" fg:w="49"/><text x="78.7797%" y="607.50"></text></g><g><title>up_read (2 samples, 0.02%)</title><rect x="78.9455%" y="581" width="0.0177%" height="15" fill="rgb(228,96,24)" fg:x="8924" fg:w="2"/><text x="79.1955%" y="591.50"></text></g><g><title>asm_exc_page_fault (50 samples, 0.44%)</title><rect x="78.5297%" y="629" width="0.4423%" height="15" fill="rgb(254,217,53)" fg:x="8877" fg:w="50"/><text x="78.7797%" y="639.50"></text></g><g><title>exc_page_fault (50 samples, 0.44%)</title><rect x="78.5297%" y="613" width="0.4423%" height="15" fill="rgb(209,60,0)" fg:x="8877" fg:w="50"/><text x="78.7797%" y="623.50"></text></g><g><title>&lt;block_stm_revm::storage::Storage as core::clone::Clone&gt;::clone (159 samples, 1.41%)</title><rect x="77.6362%" y="789" width="1.4066%" height="15" fill="rgb(250,93,26)" fg:x="8776" fg:w="159"/><text x="77.8862%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (159 samples, 1.41%)</title><rect x="77.6362%" y="773" width="1.4066%" height="15" fill="rgb(211,9,40)" fg:x="8776" fg:w="159"/><text x="77.8862%" y="783.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (159 samples, 1.41%)</title><rect x="77.6362%" y="757" width="1.4066%" height="15" fill="rgb(242,57,20)" fg:x="8776" fg:w="159"/><text x="77.8862%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (159 samples, 1.41%)</title><rect x="77.6362%" y="741" width="1.4066%" height="15" fill="rgb(248,85,48)" fg:x="8776" fg:w="159"/><text x="77.8862%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (159 samples, 1.41%)</title><rect x="77.6362%" y="725" width="1.4066%" height="15" fill="rgb(212,117,2)" fg:x="8776" fg:w="159"/><text x="77.8862%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (159 samples, 1.41%)</title><rect x="77.6362%" y="709" width="1.4066%" height="15" fill="rgb(243,19,3)" fg:x="8776" fg:w="159"/><text x="77.8862%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (69 samples, 0.61%)</title><rect x="78.4324%" y="693" width="0.6104%" height="15" fill="rgb(232,217,24)" fg:x="8866" fg:w="69"/><text x="78.6824%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (69 samples, 0.61%)</title><rect x="78.4324%" y="677" width="0.6104%" height="15" fill="rgb(224,175,40)" fg:x="8866" fg:w="69"/><text x="78.6824%" y="687.50"></text></g><g><title>core::ptr::write (69 samples, 0.61%)</title><rect x="78.4324%" y="661" width="0.6104%" height="15" fill="rgb(212,162,32)" fg:x="8866" fg:w="69"/><text x="78.6824%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (67 samples, 0.59%)</title><rect x="78.4501%" y="645" width="0.5927%" height="15" fill="rgb(215,9,4)" fg:x="8868" fg:w="67"/><text x="78.7001%" y="655.50"></text></g><g><title>sync_regs (7 samples, 0.06%)</title><rect x="78.9809%" y="629" width="0.0619%" height="15" fill="rgb(242,42,7)" fg:x="8928" fg:w="7"/><text x="79.2309%" y="639.50"></text></g><g><title>&lt;revm_primitives::result::Output as core::cmp::PartialEq&gt;::eq (5 samples, 0.04%)</title><rect x="79.0605%" y="693" width="0.0442%" height="15" fill="rgb(242,184,45)" fg:x="8937" fg:w="5"/><text x="79.3105%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::cmp::PartialEq&gt;::eq (4 samples, 0.04%)</title><rect x="79.0694%" y="677" width="0.0354%" height="15" fill="rgb(228,111,51)" fg:x="8938" fg:w="4"/><text x="79.3194%" y="687.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (4 samples, 0.04%)</title><rect x="79.0694%" y="661" width="0.0354%" height="15" fill="rgb(236,147,17)" fg:x="8938" fg:w="4"/><text x="79.3194%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.04%)</title><rect x="79.0694%" y="645" width="0.0354%" height="15" fill="rgb(210,75,22)" fg:x="8938" fg:w="4"/><text x="79.3194%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.04%)</title><rect x="79.0694%" y="629" width="0.0354%" height="15" fill="rgb(217,159,45)" fg:x="8938" fg:w="4"/><text x="79.3194%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.04%)</title><rect x="79.0694%" y="613" width="0.0354%" height="15" fill="rgb(245,165,53)" fg:x="8938" fg:w="4"/><text x="79.3194%" y="623.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.04%)</title><rect x="79.0694%" y="597" width="0.0354%" height="15" fill="rgb(251,190,50)" fg:x="8938" fg:w="4"/><text x="79.3194%" y="607.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (35 samples, 0.31%)</title><rect x="79.1136%" y="613" width="0.3096%" height="15" fill="rgb(208,203,29)" fg:x="8943" fg:w="35"/><text x="79.3636%" y="623.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (35 samples, 0.31%)</title><rect x="79.1136%" y="597" width="0.3096%" height="15" fill="rgb(207,209,35)" fg:x="8943" fg:w="35"/><text x="79.3636%" y="607.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (35 samples, 0.31%)</title><rect x="79.1136%" y="581" width="0.3096%" height="15" fill="rgb(230,144,49)" fg:x="8943" fg:w="35"/><text x="79.3636%" y="591.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (35 samples, 0.31%)</title><rect x="79.1136%" y="565" width="0.3096%" height="15" fill="rgb(229,31,6)" fg:x="8943" fg:w="35"/><text x="79.3636%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::cmp::PartialEq&gt;::eq (14 samples, 0.12%)</title><rect x="79.4321%" y="597" width="0.1238%" height="15" fill="rgb(251,129,24)" fg:x="8979" fg:w="14"/><text x="79.6821%" y="607.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::PartialEq&gt;::eq (14 samples, 0.12%)</title><rect x="79.4321%" y="581" width="0.1238%" height="15" fill="rgb(235,105,15)" fg:x="8979" fg:w="14"/><text x="79.6821%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.12%)</title><rect x="79.4321%" y="565" width="0.1238%" height="15" fill="rgb(216,52,43)" fg:x="8979" fg:w="14"/><text x="79.6821%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (14 samples, 0.12%)</title><rect x="79.4321%" y="549" width="0.1238%" height="15" fill="rgb(238,144,41)" fg:x="8979" fg:w="14"/><text x="79.6821%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (14 samples, 0.12%)</title><rect x="79.4321%" y="533" width="0.1238%" height="15" fill="rgb(243,63,9)" fg:x="8979" fg:w="14"/><text x="79.6821%" y="543.50"></text></g><g><title>__memcmp_avx2_movbe (14 samples, 0.12%)</title><rect x="79.4321%" y="517" width="0.1238%" height="15" fill="rgb(246,208,1)" fg:x="8979" fg:w="14"/><text x="79.6821%" y="527.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::cmp::PartialEq&gt;::eq (66 samples, 0.58%)</title><rect x="79.0517%" y="709" width="0.5839%" height="15" fill="rgb(233,182,18)" fg:x="8936" fg:w="66"/><text x="79.3017%" y="719.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (60 samples, 0.53%)</title><rect x="79.1047%" y="693" width="0.5308%" height="15" fill="rgb(242,224,8)" fg:x="8942" fg:w="60"/><text x="79.3547%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (60 samples, 0.53%)</title><rect x="79.1047%" y="677" width="0.5308%" height="15" fill="rgb(243,54,37)" fg:x="8942" fg:w="60"/><text x="79.3547%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (60 samples, 0.53%)</title><rect x="79.1047%" y="661" width="0.5308%" height="15" fill="rgb(233,192,12)" fg:x="8942" fg:w="60"/><text x="79.3547%" y="671.50"></text></g><g><title>core::cmp::PartialEq::ne (59 samples, 0.52%)</title><rect x="79.1136%" y="645" width="0.5219%" height="15" fill="rgb(251,192,53)" fg:x="8943" fg:w="59"/><text x="79.3636%" y="655.50"></text></g><g><title>&lt;alloy_primitives::log::Log&lt;T&gt; as core::cmp::PartialEq&gt;::eq (59 samples, 0.52%)</title><rect x="79.1136%" y="629" width="0.5219%" height="15" fill="rgb(246,141,26)" fg:x="8943" fg:w="59"/><text x="79.3636%" y="639.50"></text></g><g><title>&lt;alloy_primitives::log::LogData as core::cmp::PartialEq&gt;::eq (24 samples, 0.21%)</title><rect x="79.4232%" y="613" width="0.2123%" height="15" fill="rgb(239,195,19)" fg:x="8978" fg:w="24"/><text x="79.6732%" y="623.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (9 samples, 0.08%)</title><rect x="79.5559%" y="597" width="0.0796%" height="15" fill="rgb(241,16,39)" fg:x="8993" fg:w="9"/><text x="79.8059%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9 samples, 0.08%)</title><rect x="79.5559%" y="581" width="0.0796%" height="15" fill="rgb(223,13,53)" fg:x="8993" fg:w="9"/><text x="79.8059%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9 samples, 0.08%)</title><rect x="79.5559%" y="565" width="0.0796%" height="15" fill="rgb(214,227,0)" fg:x="8993" fg:w="9"/><text x="79.8059%" y="575.50"></text></g><g><title>core::cmp::PartialEq::ne (7 samples, 0.06%)</title><rect x="79.5736%" y="549" width="0.0619%" height="15" fill="rgb(228,103,26)" fg:x="8995" fg:w="7"/><text x="79.8236%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.06%)</title><rect x="79.5736%" y="533" width="0.0619%" height="15" fill="rgb(254,177,53)" fg:x="8995" fg:w="7"/><text x="79.8236%" y="543.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (7 samples, 0.06%)</title><rect x="79.5736%" y="517" width="0.0619%" height="15" fill="rgb(208,201,34)" fg:x="8995" fg:w="7"/><text x="79.8236%" y="527.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (7 samples, 0.06%)</title><rect x="79.5736%" y="501" width="0.0619%" height="15" fill="rgb(212,39,5)" fg:x="8995" fg:w="7"/><text x="79.8236%" y="511.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::cmp::PartialEq&gt;::eq (7 samples, 0.06%)</title><rect x="79.6444%" y="581" width="0.0619%" height="15" fill="rgb(246,117,3)" fg:x="9003" fg:w="7"/><text x="79.8944%" y="591.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.05%)</title><rect x="79.6532%" y="565" width="0.0531%" height="15" fill="rgb(244,118,39)" fg:x="9004" fg:w="6"/><text x="79.9032%" y="575.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (6 samples, 0.05%)</title><rect x="79.6532%" y="549" width="0.0531%" height="15" fill="rgb(241,64,10)" fg:x="9004" fg:w="6"/><text x="79.9032%" y="559.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (6 samples, 0.05%)</title><rect x="79.6532%" y="533" width="0.0531%" height="15" fill="rgb(229,39,44)" fg:x="9004" fg:w="6"/><text x="79.9032%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (3 samples, 0.03%)</title><rect x="79.7328%" y="501" width="0.0265%" height="15" fill="rgb(230,226,3)" fg:x="9013" fg:w="3"/><text x="79.9828%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}}::_{{closure}} (3 samples, 0.03%)</title><rect x="79.7328%" y="485" width="0.0265%" height="15" fill="rgb(222,13,42)" fg:x="9013" fg:w="3"/><text x="79.9828%" y="495.50"></text></g><g><title>&lt;revm_primitives::state::StorageSlot as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="79.7328%" y="469" width="0.0265%" height="15" fill="rgb(247,180,54)" fg:x="9013" fg:w="3"/><text x="79.9828%" y="479.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="79.7328%" y="453" width="0.0265%" height="15" fill="rgb(205,96,16)" fg:x="9013" fg:w="3"/><text x="79.9828%" y="463.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (3 samples, 0.03%)</title><rect x="79.7328%" y="437" width="0.0265%" height="15" fill="rgb(205,100,21)" fg:x="9013" fg:w="3"/><text x="79.9828%" y="447.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (3 samples, 0.03%)</title><rect x="79.7328%" y="421" width="0.0265%" height="15" fill="rgb(248,51,4)" fg:x="9013" fg:w="3"/><text x="79.9828%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="79.7948%" y="293" width="0.0177%" height="15" fill="rgb(217,197,30)" fg:x="9020" fg:w="2"/><text x="80.0448%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.16%)</title><rect x="79.7682%" y="453" width="0.1592%" height="15" fill="rgb(240,179,40)" fg:x="9017" fg:w="18"/><text x="80.0182%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.16%)</title><rect x="79.7682%" y="437" width="0.1592%" height="15" fill="rgb(212,185,35)" fg:x="9017" fg:w="18"/><text x="80.0182%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16 samples, 0.14%)</title><rect x="79.7859%" y="421" width="0.1415%" height="15" fill="rgb(251,222,31)" fg:x="9019" fg:w="16"/><text x="80.0359%" y="431.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (16 samples, 0.14%)</title><rect x="79.7859%" y="405" width="0.1415%" height="15" fill="rgb(208,140,36)" fg:x="9019" fg:w="16"/><text x="80.0359%" y="415.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (16 samples, 0.14%)</title><rect x="79.7859%" y="389" width="0.1415%" height="15" fill="rgb(220,148,1)" fg:x="9019" fg:w="16"/><text x="80.0359%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (16 samples, 0.14%)</title><rect x="79.7859%" y="373" width="0.1415%" height="15" fill="rgb(254,4,28)" fg:x="9019" fg:w="16"/><text x="80.0359%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (15 samples, 0.13%)</title><rect x="79.7948%" y="357" width="0.1327%" height="15" fill="rgb(222,185,44)" fg:x="9020" fg:w="15"/><text x="80.0448%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="79.7948%" y="341" width="0.1327%" height="15" fill="rgb(215,74,39)" fg:x="9020" fg:w="15"/><text x="80.0448%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="79.7948%" y="325" width="0.1327%" height="15" fill="rgb(247,86,4)" fg:x="9020" fg:w="15"/><text x="80.0448%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="79.7948%" y="309" width="0.1327%" height="15" fill="rgb(231,105,32)" fg:x="9020" fg:w="15"/><text x="80.0448%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.12%)</title><rect x="79.8125%" y="293" width="0.1150%" height="15" fill="rgb(222,65,35)" fg:x="9022" fg:w="13"/><text x="80.0625%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4 samples, 0.04%)</title><rect x="79.9275%" y="405" width="0.0354%" height="15" fill="rgb(218,145,35)" fg:x="9035" fg:w="4"/><text x="80.1775%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4 samples, 0.04%)</title><rect x="79.9275%" y="389" width="0.0354%" height="15" fill="rgb(208,7,15)" fg:x="9035" fg:w="4"/><text x="80.1775%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.04%)</title><rect x="79.9275%" y="373" width="0.0354%" height="15" fill="rgb(209,83,13)" fg:x="9035" fg:w="4"/><text x="80.1775%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.04%)</title><rect x="79.9275%" y="357" width="0.0354%" height="15" fill="rgb(218,3,10)" fg:x="9035" fg:w="4"/><text x="80.1775%" y="367.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.04%)</title><rect x="79.9275%" y="341" width="0.0354%" height="15" fill="rgb(211,219,4)" fg:x="9035" fg:w="4"/><text x="80.1775%" y="351.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (4 samples, 0.04%)</title><rect x="79.9275%" y="325" width="0.0354%" height="15" fill="rgb(228,194,12)" fg:x="9035" fg:w="4"/><text x="80.1775%" y="335.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (4 samples, 0.04%)</title><rect x="79.9275%" y="309" width="0.0354%" height="15" fill="rgb(210,175,7)" fg:x="9035" fg:w="4"/><text x="80.1775%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (32 samples, 0.28%)</title><rect x="79.7240%" y="565" width="0.2831%" height="15" fill="rgb(243,132,6)" fg:x="9012" fg:w="32"/><text x="79.9740%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (32 samples, 0.28%)</title><rect x="79.7240%" y="549" width="0.2831%" height="15" fill="rgb(207,72,18)" fg:x="9012" fg:w="32"/><text x="79.9740%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (31 samples, 0.27%)</title><rect x="79.7328%" y="533" width="0.2742%" height="15" fill="rgb(236,1,18)" fg:x="9013" fg:w="31"/><text x="79.9828%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (31 samples, 0.27%)</title><rect x="79.7328%" y="517" width="0.2742%" height="15" fill="rgb(227,0,18)" fg:x="9013" fg:w="31"/><text x="79.9828%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (28 samples, 0.25%)</title><rect x="79.7594%" y="501" width="0.2477%" height="15" fill="rgb(247,37,5)" fg:x="9016" fg:w="28"/><text x="80.0094%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (28 samples, 0.25%)</title><rect x="79.7594%" y="485" width="0.2477%" height="15" fill="rgb(237,179,24)" fg:x="9016" fg:w="28"/><text x="80.0094%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 0.25%)</title><rect x="79.7594%" y="469" width="0.2477%" height="15" fill="rgb(226,53,20)" fg:x="9016" fg:w="28"/><text x="80.0094%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.08%)</title><rect x="79.9275%" y="453" width="0.0796%" height="15" fill="rgb(247,75,7)" fg:x="9035" fg:w="9"/><text x="80.1775%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.08%)</title><rect x="79.9275%" y="437" width="0.0796%" height="15" fill="rgb(233,96,12)" fg:x="9035" fg:w="9"/><text x="80.1775%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9 samples, 0.08%)</title><rect x="79.9275%" y="421" width="0.0796%" height="15" fill="rgb(224,125,0)" fg:x="9035" fg:w="9"/><text x="80.1775%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.04%)</title><rect x="79.9628%" y="405" width="0.0442%" height="15" fill="rgb(224,92,25)" fg:x="9039" fg:w="5"/><text x="80.2128%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.04%)</title><rect x="79.9628%" y="389" width="0.0442%" height="15" fill="rgb(224,42,24)" fg:x="9039" fg:w="5"/><text x="80.2128%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="79.9628%" y="373" width="0.0442%" height="15" fill="rgb(234,132,49)" fg:x="9039" fg:w="5"/><text x="80.2128%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (14 samples, 0.12%)</title><rect x="80.0071%" y="485" width="0.1238%" height="15" fill="rgb(248,100,35)" fg:x="9044" fg:w="14"/><text x="80.2571%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (14 samples, 0.12%)</title><rect x="80.0071%" y="469" width="0.1238%" height="15" fill="rgb(239,94,40)" fg:x="9044" fg:w="14"/><text x="80.2571%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (56 samples, 0.50%)</title><rect x="79.6444%" y="629" width="0.4954%" height="15" fill="rgb(235,139,28)" fg:x="9003" fg:w="56"/><text x="79.8944%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}}::_{{closure}} (56 samples, 0.50%)</title><rect x="79.6444%" y="613" width="0.4954%" height="15" fill="rgb(217,144,7)" fg:x="9003" fg:w="56"/><text x="79.8944%" y="623.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::cmp::PartialEq&gt;::eq (56 samples, 0.50%)</title><rect x="79.6444%" y="597" width="0.4954%" height="15" fill="rgb(227,55,4)" fg:x="9003" fg:w="56"/><text x="79.8944%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq (48 samples, 0.42%)</title><rect x="79.7151%" y="581" width="0.4246%" height="15" fill="rgb(252,82,54)" fg:x="9011" fg:w="48"/><text x="79.9651%" y="591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (15 samples, 0.13%)</title><rect x="80.0071%" y="565" width="0.1327%" height="15" fill="rgb(245,172,4)" fg:x="9044" fg:w="15"/><text x="80.2571%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (15 samples, 0.13%)</title><rect x="80.0071%" y="549" width="0.1327%" height="15" fill="rgb(207,26,27)" fg:x="9044" fg:w="15"/><text x="80.2571%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (15 samples, 0.13%)</title><rect x="80.0071%" y="533" width="0.1327%" height="15" fill="rgb(252,98,18)" fg:x="9044" fg:w="15"/><text x="80.2571%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (15 samples, 0.13%)</title><rect x="80.0071%" y="517" width="0.1327%" height="15" fill="rgb(244,8,26)" fg:x="9044" fg:w="15"/><text x="80.2571%" y="527.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (15 samples, 0.13%)</title><rect x="80.0071%" y="501" width="0.1327%" height="15" fill="rgb(237,173,45)" fg:x="9044" fg:w="15"/><text x="80.2571%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="80.1398%" y="549" width="0.0442%" height="15" fill="rgb(208,213,49)" fg:x="9059" fg:w="5"/><text x="80.3898%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="80.1398%" y="533" width="0.0442%" height="15" fill="rgb(212,122,37)" fg:x="9059" fg:w="5"/><text x="80.3898%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="80.1398%" y="517" width="0.0442%" height="15" fill="rgb(213,80,17)" fg:x="9059" fg:w="5"/><text x="80.3898%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.04%)</title><rect x="80.1486%" y="501" width="0.0354%" height="15" fill="rgb(206,210,43)" fg:x="9060" fg:w="4"/><text x="80.3986%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.04%)</title><rect x="80.1486%" y="485" width="0.0354%" height="15" fill="rgb(229,214,3)" fg:x="9060" fg:w="4"/><text x="80.3986%" y="495.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="80.1840%" y="469" width="0.0177%" height="15" fill="rgb(235,213,29)" fg:x="9064" fg:w="2"/><text x="80.4340%" y="479.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="80.1840%" y="453" width="0.0177%" height="15" fill="rgb(248,135,26)" fg:x="9064" fg:w="2"/><text x="80.4340%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="80.1840%" y="437" width="0.0177%" height="15" fill="rgb(242,188,12)" fg:x="9064" fg:w="2"/><text x="80.4340%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="80.1840%" y="421" width="0.0177%" height="15" fill="rgb(245,38,12)" fg:x="9064" fg:w="2"/><text x="80.4340%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="80.1840%" y="405" width="0.0177%" height="15" fill="rgb(218,42,13)" fg:x="9064" fg:w="2"/><text x="80.4340%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="80.2371%" y="405" width="0.0177%" height="15" fill="rgb(238,132,49)" fg:x="9070" fg:w="2"/><text x="80.4871%" y="415.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="80.2548%" y="405" width="0.0177%" height="15" fill="rgb(209,196,19)" fg:x="9072" fg:w="2"/><text x="80.5048%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.19%)</title><rect x="80.1398%" y="581" width="0.1946%" height="15" fill="rgb(244,131,22)" fg:x="9059" fg:w="22"/><text x="80.3898%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.19%)</title><rect x="80.1398%" y="565" width="0.1946%" height="15" fill="rgb(223,18,34)" fg:x="9059" fg:w="22"/><text x="80.3898%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17 samples, 0.15%)</title><rect x="80.1840%" y="549" width="0.1504%" height="15" fill="rgb(252,124,54)" fg:x="9064" fg:w="17"/><text x="80.4340%" y="559.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (17 samples, 0.15%)</title><rect x="80.1840%" y="533" width="0.1504%" height="15" fill="rgb(229,106,42)" fg:x="9064" fg:w="17"/><text x="80.4340%" y="543.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (17 samples, 0.15%)</title><rect x="80.1840%" y="517" width="0.1504%" height="15" fill="rgb(221,129,1)" fg:x="9064" fg:w="17"/><text x="80.4340%" y="527.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (17 samples, 0.15%)</title><rect x="80.1840%" y="501" width="0.1504%" height="15" fill="rgb(229,74,15)" fg:x="9064" fg:w="17"/><text x="80.4340%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (17 samples, 0.15%)</title><rect x="80.1840%" y="485" width="0.1504%" height="15" fill="rgb(210,206,50)" fg:x="9064" fg:w="17"/><text x="80.4340%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (15 samples, 0.13%)</title><rect x="80.2017%" y="469" width="0.1327%" height="15" fill="rgb(251,114,31)" fg:x="9066" fg:w="15"/><text x="80.4517%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="80.2017%" y="453" width="0.1327%" height="15" fill="rgb(215,225,28)" fg:x="9066" fg:w="15"/><text x="80.4517%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="80.2017%" y="437" width="0.1327%" height="15" fill="rgb(237,109,14)" fg:x="9066" fg:w="15"/><text x="80.4517%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.13%)</title><rect x="80.2017%" y="421" width="0.1327%" height="15" fill="rgb(230,13,37)" fg:x="9066" fg:w="15"/><text x="80.4517%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.06%)</title><rect x="80.2725%" y="405" width="0.0619%" height="15" fill="rgb(231,40,28)" fg:x="9074" fg:w="7"/><text x="80.5225%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (13 samples, 0.12%)</title><rect x="80.3344%" y="517" width="0.1150%" height="15" fill="rgb(231,202,18)" fg:x="9081" fg:w="13"/><text x="80.5844%" y="527.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (13 samples, 0.12%)</title><rect x="80.3344%" y="501" width="0.1150%" height="15" fill="rgb(225,33,18)" fg:x="9081" fg:w="13"/><text x="80.5844%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.12%)</title><rect x="80.3344%" y="485" width="0.1150%" height="15" fill="rgb(223,64,47)" fg:x="9081" fg:w="13"/><text x="80.5844%" y="495.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (13 samples, 0.12%)</title><rect x="80.3344%" y="469" width="0.1150%" height="15" fill="rgb(234,114,13)" fg:x="9081" fg:w="13"/><text x="80.5844%" y="479.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.12%)</title><rect x="80.3344%" y="453" width="0.1150%" height="15" fill="rgb(248,56,40)" fg:x="9081" fg:w="13"/><text x="80.5844%" y="463.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (13 samples, 0.12%)</title><rect x="80.3344%" y="437" width="0.1150%" height="15" fill="rgb(221,194,21)" fg:x="9081" fg:w="13"/><text x="80.5844%" y="447.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (13 samples, 0.12%)</title><rect x="80.3344%" y="421" width="0.1150%" height="15" fill="rgb(242,108,46)" fg:x="9081" fg:w="13"/><text x="80.5844%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (14 samples, 0.12%)</title><rect x="80.3344%" y="533" width="0.1238%" height="15" fill="rgb(220,106,10)" fg:x="9081" fg:w="14"/><text x="80.5844%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (98 samples, 0.87%)</title><rect x="79.6355%" y="693" width="0.8669%" height="15" fill="rgb(211,88,4)" fg:x="9002" fg:w="98"/><text x="79.8855%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (98 samples, 0.87%)</title><rect x="79.6355%" y="677" width="0.8669%" height="15" fill="rgb(214,95,34)" fg:x="9002" fg:w="98"/><text x="79.8855%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (97 samples, 0.86%)</title><rect x="79.6444%" y="661" width="0.8581%" height="15" fill="rgb(250,160,33)" fg:x="9003" fg:w="97"/><text x="79.8944%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (97 samples, 0.86%)</title><rect x="79.6444%" y="645" width="0.8581%" height="15" fill="rgb(225,29,10)" fg:x="9003" fg:w="97"/><text x="79.8944%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41 samples, 0.36%)</title><rect x="80.1398%" y="629" width="0.3627%" height="15" fill="rgb(224,28,30)" fg:x="9059" fg:w="41"/><text x="80.3898%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41 samples, 0.36%)</title><rect x="80.1398%" y="613" width="0.3627%" height="15" fill="rgb(231,77,4)" fg:x="9059" fg:w="41"/><text x="80.3898%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41 samples, 0.36%)</title><rect x="80.1398%" y="597" width="0.3627%" height="15" fill="rgb(209,63,21)" fg:x="9059" fg:w="41"/><text x="80.3898%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (19 samples, 0.17%)</title><rect x="80.3344%" y="581" width="0.1681%" height="15" fill="rgb(226,22,11)" fg:x="9081" fg:w="19"/><text x="80.5844%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19 samples, 0.17%)</title><rect x="80.3344%" y="565" width="0.1681%" height="15" fill="rgb(216,82,30)" fg:x="9081" fg:w="19"/><text x="80.5844%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (19 samples, 0.17%)</title><rect x="80.3344%" y="549" width="0.1681%" height="15" fill="rgb(246,227,38)" fg:x="9081" fg:w="19"/><text x="80.5844%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.04%)</title><rect x="80.4582%" y="533" width="0.0442%" height="15" fill="rgb(251,203,53)" fg:x="9095" fg:w="5"/><text x="80.7082%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.04%)</title><rect x="80.4582%" y="517" width="0.0442%" height="15" fill="rgb(254,101,1)" fg:x="9095" fg:w="5"/><text x="80.7082%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="80.4582%" y="501" width="0.0442%" height="15" fill="rgb(241,180,5)" fg:x="9095" fg:w="5"/><text x="80.7082%" y="511.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.02%)</title><rect x="80.5025%" y="613" width="0.0177%" height="15" fill="rgb(218,168,4)" fg:x="9100" fg:w="2"/><text x="80.7525%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.02%)</title><rect x="80.5025%" y="597" width="0.0177%" height="15" fill="rgb(224,223,32)" fg:x="9100" fg:w="2"/><text x="80.7525%" y="607.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (169 samples, 1.50%)</title><rect x="79.0428%" y="789" width="1.4950%" height="15" fill="rgb(236,106,22)" fg:x="8935" fg:w="169"/><text x="79.2928%" y="799.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (169 samples, 1.50%)</title><rect x="79.0428%" y="773" width="1.4950%" height="15" fill="rgb(206,121,5)" fg:x="8935" fg:w="169"/><text x="79.2928%" y="783.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (169 samples, 1.50%)</title><rect x="79.0428%" y="757" width="1.4950%" height="15" fill="rgb(233,87,28)" fg:x="8935" fg:w="169"/><text x="79.2928%" y="767.50"></text></g><g><title>core::cmp::PartialEq::ne (168 samples, 1.49%)</title><rect x="79.0517%" y="741" width="1.4862%" height="15" fill="rgb(236,137,17)" fg:x="8936" fg:w="168"/><text x="79.3017%" y="751.50"></text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::cmp::PartialEq&gt;::eq (168 samples, 1.49%)</title><rect x="79.0517%" y="725" width="1.4862%" height="15" fill="rgb(209,183,38)" fg:x="8936" fg:w="168"/><text x="79.3017%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::cmp::PartialEq&gt;::eq (102 samples, 0.90%)</title><rect x="79.6355%" y="709" width="0.9023%" height="15" fill="rgb(206,162,44)" fg:x="9002" fg:w="102"/><text x="79.8855%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (4 samples, 0.04%)</title><rect x="80.5025%" y="693" width="0.0354%" height="15" fill="rgb(237,70,39)" fg:x="9100" fg:w="4"/><text x="80.7525%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (4 samples, 0.04%)</title><rect x="80.5025%" y="677" width="0.0354%" height="15" fill="rgb(212,176,5)" fg:x="9100" fg:w="4"/><text x="80.7525%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (4 samples, 0.04%)</title><rect x="80.5025%" y="661" width="0.0354%" height="15" fill="rgb(232,95,16)" fg:x="9100" fg:w="4"/><text x="80.7525%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (4 samples, 0.04%)</title><rect x="80.5025%" y="645" width="0.0354%" height="15" fill="rgb(219,115,35)" fg:x="9100" fg:w="4"/><text x="80.7525%" y="655.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="80.5025%" y="629" width="0.0354%" height="15" fill="rgb(251,67,27)" fg:x="9100" fg:w="4"/><text x="80.7525%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (2 samples, 0.02%)</title><rect x="80.5202%" y="613" width="0.0177%" height="15" fill="rgb(222,95,40)" fg:x="9102" fg:w="2"/><text x="80.7702%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.02%)</title><rect x="80.5202%" y="597" width="0.0177%" height="15" fill="rgb(250,35,16)" fg:x="9102" fg:w="2"/><text x="80.7702%" y="607.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="80.5909%" y="581" width="0.0177%" height="15" fill="rgb(224,86,44)" fg:x="9110" fg:w="2"/><text x="80.8409%" y="591.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.02%)</title><rect x="80.6086%" y="581" width="0.0177%" height="15" fill="rgb(237,53,53)" fg:x="9112" fg:w="2"/><text x="80.8586%" y="591.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.08%)</title><rect x="80.5644%" y="629" width="0.0796%" height="15" fill="rgb(208,171,33)" fg:x="9107" fg:w="9"/><text x="80.8144%" y="639.50"></text></g><g><title>handle_pte_fault (7 samples, 0.06%)</title><rect x="80.5821%" y="613" width="0.0619%" height="15" fill="rgb(222,64,27)" fg:x="9109" fg:w="7"/><text x="80.8321%" y="623.50"></text></g><g><title>do_anonymous_page (7 samples, 0.06%)</title><rect x="80.5821%" y="597" width="0.0619%" height="15" fill="rgb(221,121,35)" fg:x="9109" fg:w="7"/><text x="80.8321%" y="607.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="80.6263%" y="581" width="0.0177%" height="15" fill="rgb(228,137,42)" fg:x="9114" fg:w="2"/><text x="80.8763%" y="591.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="80.6263%" y="565" width="0.0177%" height="15" fill="rgb(227,54,21)" fg:x="9114" fg:w="2"/><text x="80.8763%" y="575.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="80.6263%" y="549" width="0.0177%" height="15" fill="rgb(240,168,33)" fg:x="9114" fg:w="2"/><text x="80.8763%" y="559.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="80.6263%" y="533" width="0.0177%" height="15" fill="rgb(243,159,6)" fg:x="9114" fg:w="2"/><text x="80.8763%" y="543.50"></text></g><g><title>do_user_addr_fault (10 samples, 0.09%)</title><rect x="80.5644%" y="661" width="0.0885%" height="15" fill="rgb(205,211,41)" fg:x="9107" fg:w="10"/><text x="80.8144%" y="671.50"></text></g><g><title>handle_mm_fault (10 samples, 0.09%)</title><rect x="80.5644%" y="645" width="0.0885%" height="15" fill="rgb(253,30,1)" fg:x="9107" fg:w="10"/><text x="80.8144%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.12%)</title><rect x="80.5379%" y="709" width="0.1238%" height="15" fill="rgb(226,80,18)" fg:x="9104" fg:w="14"/><text x="80.7879%" y="719.50"></text></g><g><title>asm_exc_page_fault (11 samples, 0.10%)</title><rect x="80.5644%" y="693" width="0.0973%" height="15" fill="rgb(253,156,46)" fg:x="9107" fg:w="11"/><text x="80.8144%" y="703.50"></text></g><g><title>exc_page_fault (11 samples, 0.10%)</title><rect x="80.5644%" y="677" width="0.0973%" height="15" fill="rgb(248,87,27)" fg:x="9107" fg:w="11"/><text x="80.8144%" y="687.50"></text></g><g><title>alloc::vec::from_elem (15 samples, 0.13%)</title><rect x="80.5379%" y="773" width="0.1327%" height="15" fill="rgb(227,122,2)" fg:x="9104" fg:w="15"/><text x="80.7879%" y="783.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (15 samples, 0.13%)</title><rect x="80.5379%" y="757" width="0.1327%" height="15" fill="rgb(229,94,39)" fg:x="9104" fg:w="15"/><text x="80.7879%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 0.13%)</title><rect x="80.5379%" y="741" width="0.1327%" height="15" fill="rgb(225,173,31)" fg:x="9104" fg:w="15"/><text x="80.7879%" y="751.50"></text></g><g><title>core::ptr::write (15 samples, 0.13%)</title><rect x="80.5379%" y="725" width="0.1327%" height="15" fill="rgb(239,176,30)" fg:x="9104" fg:w="15"/><text x="80.7879%" y="735.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.02%)</title><rect x="80.6794%" y="437" width="0.0177%" height="15" fill="rgb(212,104,21)" fg:x="9120" fg:w="2"/><text x="80.9294%" y="447.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.03%)</title><rect x="80.6794%" y="485" width="0.0265%" height="15" fill="rgb(240,209,40)" fg:x="9120" fg:w="3"/><text x="80.9294%" y="495.50"></text></g><g><title>handle_pte_fault (3 samples, 0.03%)</title><rect x="80.6794%" y="469" width="0.0265%" height="15" fill="rgb(234,195,5)" fg:x="9120" fg:w="3"/><text x="80.9294%" y="479.50"></text></g><g><title>do_anonymous_page (3 samples, 0.03%)</title><rect x="80.6794%" y="453" width="0.0265%" height="15" fill="rgb(238,213,1)" fg:x="9120" fg:w="3"/><text x="80.9294%" y="463.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::new (5 samples, 0.04%)</title><rect x="80.6706%" y="773" width="0.0442%" height="15" fill="rgb(235,182,54)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.04%)</title><rect x="80.6706%" y="757" width="0.0442%" height="15" fill="rgb(229,50,46)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="80.6706%" y="741" width="0.0442%" height="15" fill="rgb(219,145,13)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="80.6706%" y="725" width="0.0442%" height="15" fill="rgb(220,226,10)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="80.6706%" y="709" width="0.0442%" height="15" fill="rgb(248,47,30)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.04%)</title><rect x="80.6706%" y="693" width="0.0442%" height="15" fill="rgb(231,209,44)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5 samples, 0.04%)</title><rect x="80.6706%" y="677" width="0.0442%" height="15" fill="rgb(209,80,30)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.04%)</title><rect x="80.6706%" y="661" width="0.0442%" height="15" fill="rgb(232,9,14)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="80.6706%" y="645" width="0.0442%" height="15" fill="rgb(243,91,43)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.04%)</title><rect x="80.6706%" y="629" width="0.0442%" height="15" fill="rgb(231,90,52)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (5 samples, 0.04%)</title><rect x="80.6706%" y="613" width="0.0442%" height="15" fill="rgb(253,192,44)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.04%)</title><rect x="80.6706%" y="597" width="0.0442%" height="15" fill="rgb(241,66,31)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (5 samples, 0.04%)</title><rect x="80.6706%" y="581" width="0.0442%" height="15" fill="rgb(235,81,37)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="591.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="80.6706%" y="565" width="0.0442%" height="15" fill="rgb(223,221,9)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="575.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.04%)</title><rect x="80.6706%" y="549" width="0.0442%" height="15" fill="rgb(242,180,7)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="559.50"></text></g><g><title>exc_page_fault (5 samples, 0.04%)</title><rect x="80.6706%" y="533" width="0.0442%" height="15" fill="rgb(243,78,19)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="543.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.04%)</title><rect x="80.6706%" y="517" width="0.0442%" height="15" fill="rgb(233,23,17)" fg:x="9119" fg:w="5"/><text x="80.9206%" y="527.50"></text></g><g><title>handle_mm_fault (4 samples, 0.04%)</title><rect x="80.6794%" y="501" width="0.0354%" height="15" fill="rgb(252,122,45)" fg:x="9120" fg:w="4"/><text x="80.9294%" y="511.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::new (7 samples, 0.06%)</title><rect x="80.7148%" y="773" width="0.0619%" height="15" fill="rgb(247,108,20)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7 samples, 0.06%)</title><rect x="80.7148%" y="757" width="0.0619%" height="15" fill="rgb(235,84,21)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 0.06%)</title><rect x="80.7148%" y="741" width="0.0619%" height="15" fill="rgb(247,129,10)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.06%)</title><rect x="80.7148%" y="725" width="0.0619%" height="15" fill="rgb(208,173,14)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7 samples, 0.06%)</title><rect x="80.7148%" y="709" width="0.0619%" height="15" fill="rgb(236,31,38)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.06%)</title><rect x="80.7148%" y="693" width="0.0619%" height="15" fill="rgb(232,65,17)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (7 samples, 0.06%)</title><rect x="80.7148%" y="677" width="0.0619%" height="15" fill="rgb(224,45,49)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.06%)</title><rect x="80.7148%" y="661" width="0.0619%" height="15" fill="rgb(225,2,53)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.06%)</title><rect x="80.7148%" y="645" width="0.0619%" height="15" fill="rgb(248,210,53)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.06%)</title><rect x="80.7148%" y="629" width="0.0619%" height="15" fill="rgb(211,1,30)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7 samples, 0.06%)</title><rect x="80.7148%" y="613" width="0.0619%" height="15" fill="rgb(224,96,15)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.06%)</title><rect x="80.7148%" y="597" width="0.0619%" height="15" fill="rgb(252,45,11)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (7 samples, 0.06%)</title><rect x="80.7148%" y="581" width="0.0619%" height="15" fill="rgb(220,125,38)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="591.50"></text></g><g><title>core::ptr::write (7 samples, 0.06%)</title><rect x="80.7148%" y="565" width="0.0619%" height="15" fill="rgb(243,161,33)" fg:x="9124" fg:w="7"/><text x="80.9648%" y="575.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.04%)</title><rect x="80.7325%" y="549" width="0.0442%" height="15" fill="rgb(248,197,34)" fg:x="9126" fg:w="5"/><text x="80.9825%" y="559.50"></text></g><g><title>exc_page_fault (5 samples, 0.04%)</title><rect x="80.7325%" y="533" width="0.0442%" height="15" fill="rgb(228,165,23)" fg:x="9126" fg:w="5"/><text x="80.9825%" y="543.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.04%)</title><rect x="80.7325%" y="517" width="0.0442%" height="15" fill="rgb(236,94,38)" fg:x="9126" fg:w="5"/><text x="80.9825%" y="527.50"></text></g><g><title>handle_mm_fault (5 samples, 0.04%)</title><rect x="80.7325%" y="501" width="0.0442%" height="15" fill="rgb(220,13,23)" fg:x="9126" fg:w="5"/><text x="80.9825%" y="511.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.04%)</title><rect x="80.7325%" y="485" width="0.0442%" height="15" fill="rgb(234,26,39)" fg:x="9126" fg:w="5"/><text x="80.9825%" y="495.50"></text></g><g><title>handle_pte_fault (5 samples, 0.04%)</title><rect x="80.7325%" y="469" width="0.0442%" height="15" fill="rgb(205,117,44)" fg:x="9126" fg:w="5"/><text x="80.9825%" y="479.50"></text></g><g><title>do_anonymous_page (4 samples, 0.04%)</title><rect x="80.7413%" y="453" width="0.0354%" height="15" fill="rgb(250,42,2)" fg:x="9127" fg:w="4"/><text x="80.9913%" y="463.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="80.7590%" y="437" width="0.0177%" height="15" fill="rgb(223,83,14)" fg:x="9129" fg:w="2"/><text x="81.0090%" y="447.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="80.7590%" y="421" width="0.0177%" height="15" fill="rgb(241,147,50)" fg:x="9129" fg:w="2"/><text x="81.0090%" y="431.50"></text></g><g><title>handle_mm_fault (5 samples, 0.04%)</title><rect x="80.8209%" y="453" width="0.0442%" height="15" fill="rgb(218,90,6)" fg:x="9136" fg:w="5"/><text x="81.0709%" y="463.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.04%)</title><rect x="80.8209%" y="437" width="0.0442%" height="15" fill="rgb(210,191,5)" fg:x="9136" fg:w="5"/><text x="81.0709%" y="447.50"></text></g><g><title>handle_pte_fault (5 samples, 0.04%)</title><rect x="80.8209%" y="421" width="0.0442%" height="15" fill="rgb(225,139,19)" fg:x="9136" fg:w="5"/><text x="81.0709%" y="431.50"></text></g><g><title>do_anonymous_page (4 samples, 0.04%)</title><rect x="80.8298%" y="405" width="0.0354%" height="15" fill="rgb(210,1,33)" fg:x="9137" fg:w="4"/><text x="81.0798%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.09%)</title><rect x="80.7856%" y="517" width="0.0885%" height="15" fill="rgb(213,50,3)" fg:x="9132" fg:w="10"/><text x="81.0356%" y="527.50"></text></g><g><title>asm_exc_page_fault (7 samples, 0.06%)</title><rect x="80.8121%" y="501" width="0.0619%" height="15" fill="rgb(234,227,4)" fg:x="9135" fg:w="7"/><text x="81.0621%" y="511.50"></text></g><g><title>exc_page_fault (7 samples, 0.06%)</title><rect x="80.8121%" y="485" width="0.0619%" height="15" fill="rgb(246,63,5)" fg:x="9135" fg:w="7"/><text x="81.0621%" y="495.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.06%)</title><rect x="80.8121%" y="469" width="0.0619%" height="15" fill="rgb(245,136,27)" fg:x="9135" fg:w="7"/><text x="81.0621%" y="479.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12 samples, 0.11%)</title><rect x="80.7767%" y="581" width="0.1062%" height="15" fill="rgb(247,199,27)" fg:x="9131" fg:w="12"/><text x="81.0267%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (12 samples, 0.11%)</title><rect x="80.7767%" y="565" width="0.1062%" height="15" fill="rgb(252,158,49)" fg:x="9131" fg:w="12"/><text x="81.0267%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (12 samples, 0.11%)</title><rect x="80.7767%" y="549" width="0.1062%" height="15" fill="rgb(254,73,1)" fg:x="9131" fg:w="12"/><text x="81.0267%" y="559.50"></text></g><g><title>core::ptr::write (12 samples, 0.11%)</title><rect x="80.7767%" y="533" width="0.1062%" height="15" fill="rgb(248,93,19)" fg:x="9131" fg:w="12"/><text x="81.0267%" y="543.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="80.9006%" y="437" width="0.0265%" height="15" fill="rgb(206,67,5)" fg:x="9145" fg:w="3"/><text x="81.1506%" y="447.50"></text></g><g><title>do_anonymous_page (3 samples, 0.03%)</title><rect x="81.0067%" y="133" width="0.0265%" height="15" fill="rgb(209,210,4)" fg:x="9157" fg:w="3"/><text x="81.2567%" y="143.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.04%)</title><rect x="81.0067%" y="229" width="0.0354%" height="15" fill="rgb(214,185,36)" fg:x="9157" fg:w="4"/><text x="81.2567%" y="239.50"></text></g><g><title>exc_page_fault (4 samples, 0.04%)</title><rect x="81.0067%" y="213" width="0.0354%" height="15" fill="rgb(233,191,26)" fg:x="9157" fg:w="4"/><text x="81.2567%" y="223.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.04%)</title><rect x="81.0067%" y="197" width="0.0354%" height="15" fill="rgb(248,94,17)" fg:x="9157" fg:w="4"/><text x="81.2567%" y="207.50"></text></g><g><title>handle_mm_fault (4 samples, 0.04%)</title><rect x="81.0067%" y="181" width="0.0354%" height="15" fill="rgb(250,64,4)" fg:x="9157" fg:w="4"/><text x="81.2567%" y="191.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.04%)</title><rect x="81.0067%" y="165" width="0.0354%" height="15" fill="rgb(218,41,53)" fg:x="9157" fg:w="4"/><text x="81.2567%" y="175.50"></text></g><g><title>handle_pte_fault (4 samples, 0.04%)</title><rect x="81.0067%" y="149" width="0.0354%" height="15" fill="rgb(251,176,28)" fg:x="9157" fg:w="4"/><text x="81.2567%" y="159.50"></text></g><g><title>_int_malloc (9 samples, 0.08%)</title><rect x="80.9802%" y="245" width="0.0796%" height="15" fill="rgb(247,22,9)" fg:x="9154" fg:w="9"/><text x="81.2302%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.13%)</title><rect x="80.9360%" y="357" width="0.1327%" height="15" fill="rgb(218,201,14)" fg:x="9149" fg:w="15"/><text x="81.1860%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.13%)</title><rect x="80.9360%" y="341" width="0.1327%" height="15" fill="rgb(218,94,10)" fg:x="9149" fg:w="15"/><text x="81.1860%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.13%)</title><rect x="80.9360%" y="325" width="0.1327%" height="15" fill="rgb(222,183,52)" fg:x="9149" fg:w="15"/><text x="81.1860%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.13%)</title><rect x="80.9360%" y="309" width="0.1327%" height="15" fill="rgb(242,140,25)" fg:x="9149" fg:w="15"/><text x="81.1860%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.13%)</title><rect x="80.9360%" y="293" width="0.1327%" height="15" fill="rgb(235,197,38)" fg:x="9149" fg:w="15"/><text x="81.1860%" y="303.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.13%)</title><rect x="80.9360%" y="277" width="0.1327%" height="15" fill="rgb(237,136,15)" fg:x="9149" fg:w="15"/><text x="81.1860%" y="287.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.12%)</title><rect x="80.9448%" y="261" width="0.1238%" height="15" fill="rgb(223,44,49)" fg:x="9150" fg:w="14"/><text x="81.1948%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.21%)</title><rect x="80.9360%" y="421" width="0.2123%" height="15" fill="rgb(227,71,15)" fg:x="9149" fg:w="24"/><text x="81.1860%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.21%)</title><rect x="80.9360%" y="405" width="0.2123%" height="15" fill="rgb(225,153,20)" fg:x="9149" fg:w="24"/><text x="81.1860%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.21%)</title><rect x="80.9360%" y="389" width="0.2123%" height="15" fill="rgb(210,190,26)" fg:x="9149" fg:w="24"/><text x="81.1860%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.21%)</title><rect x="80.9360%" y="373" width="0.2123%" height="15" fill="rgb(223,147,5)" fg:x="9149" fg:w="24"/><text x="81.1860%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.08%)</title><rect x="81.0686%" y="357" width="0.0796%" height="15" fill="rgb(207,14,23)" fg:x="9164" fg:w="9"/><text x="81.3186%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.08%)</title><rect x="81.0686%" y="341" width="0.0796%" height="15" fill="rgb(211,195,53)" fg:x="9164" fg:w="9"/><text x="81.3186%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.08%)</title><rect x="81.0686%" y="325" width="0.0796%" height="15" fill="rgb(237,75,46)" fg:x="9164" fg:w="9"/><text x="81.3186%" y="335.50"></text></g><g><title>&lt;alloy_primitives::log::Log&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.34%)</title><rect x="80.9006%" y="453" width="0.3362%" height="15" fill="rgb(254,55,14)" fg:x="9145" fg:w="38"/><text x="81.1506%" y="463.50"></text></g><g><title>&lt;alloy_primitives::log::LogData as core::clone::Clone&gt;::clone (35 samples, 0.31%)</title><rect x="80.9271%" y="437" width="0.3096%" height="15" fill="rgb(230,185,30)" fg:x="9148" fg:w="35"/><text x="81.1771%" y="447.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="81.1483%" y="421" width="0.0885%" height="15" fill="rgb(220,14,11)" fg:x="9173" fg:w="10"/><text x="81.3983%" y="431.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (8 samples, 0.07%)</title><rect x="81.1660%" y="405" width="0.0708%" height="15" fill="rgb(215,169,44)" fg:x="9175" fg:w="8"/><text x="81.4160%" y="415.50"></text></g><g><title>bytes::bytes::shared_clone (8 samples, 0.07%)</title><rect x="81.1660%" y="389" width="0.0708%" height="15" fill="rgb(253,203,20)" fg:x="9175" fg:w="8"/><text x="81.4160%" y="399.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (8 samples, 0.07%)</title><rect x="81.1660%" y="373" width="0.0708%" height="15" fill="rgb(229,225,17)" fg:x="9175" fg:w="8"/><text x="81.4160%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (8 samples, 0.07%)</title><rect x="81.1660%" y="357" width="0.0708%" height="15" fill="rgb(236,76,26)" fg:x="9175" fg:w="8"/><text x="81.4160%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (8 samples, 0.07%)</title><rect x="81.1660%" y="341" width="0.0708%" height="15" fill="rgb(234,15,30)" fg:x="9175" fg:w="8"/><text x="81.4160%" y="351.50"></text></g><g><title>charge_memcg (2 samples, 0.02%)</title><rect x="81.3429%" y="197" width="0.0177%" height="15" fill="rgb(211,113,48)" fg:x="9195" fg:w="2"/><text x="81.5929%" y="207.50"></text></g><g><title>__mem_cgroup_charge (3 samples, 0.03%)</title><rect x="81.3429%" y="213" width="0.0265%" height="15" fill="rgb(221,31,36)" fg:x="9195" fg:w="3"/><text x="81.5929%" y="223.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.07%)</title><rect x="81.3252%" y="325" width="0.0708%" height="15" fill="rgb(215,118,52)" fg:x="9193" fg:w="8"/><text x="81.5752%" y="335.50"></text></g><g><title>exc_page_fault (8 samples, 0.07%)</title><rect x="81.3252%" y="309" width="0.0708%" height="15" fill="rgb(241,151,27)" fg:x="9193" fg:w="8"/><text x="81.5752%" y="319.50"></text></g><g><title>do_user_addr_fault (8 samples, 0.07%)</title><rect x="81.3252%" y="293" width="0.0708%" height="15" fill="rgb(253,51,3)" fg:x="9193" fg:w="8"/><text x="81.5752%" y="303.50"></text></g><g><title>handle_mm_fault (8 samples, 0.07%)</title><rect x="81.3252%" y="277" width="0.0708%" height="15" fill="rgb(216,201,24)" fg:x="9193" fg:w="8"/><text x="81.5752%" y="287.50"></text></g><g><title>__handle_mm_fault (8 samples, 0.07%)</title><rect x="81.3252%" y="261" width="0.0708%" height="15" fill="rgb(231,107,4)" fg:x="9193" fg:w="8"/><text x="81.5752%" y="271.50"></text></g><g><title>handle_pte_fault (8 samples, 0.07%)</title><rect x="81.3252%" y="245" width="0.0708%" height="15" fill="rgb(243,97,54)" fg:x="9193" fg:w="8"/><text x="81.5752%" y="255.50"></text></g><g><title>do_anonymous_page (8 samples, 0.07%)</title><rect x="81.3252%" y="229" width="0.0708%" height="15" fill="rgb(221,32,51)" fg:x="9193" fg:w="8"/><text x="81.5752%" y="239.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.02%)</title><rect x="81.3783%" y="213" width="0.0177%" height="15" fill="rgb(218,171,35)" fg:x="9199" fg:w="2"/><text x="81.6283%" y="223.50"></text></g><g><title>__folio_alloc (2 samples, 0.02%)</title><rect x="81.3783%" y="197" width="0.0177%" height="15" fill="rgb(214,20,53)" fg:x="9199" fg:w="2"/><text x="81.6283%" y="207.50"></text></g><g><title>__alloc_pages (2 samples, 0.02%)</title><rect x="81.3783%" y="181" width="0.0177%" height="15" fill="rgb(239,9,52)" fg:x="9199" fg:w="2"/><text x="81.6283%" y="191.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="81.3783%" y="165" width="0.0177%" height="15" fill="rgb(215,114,45)" fg:x="9199" fg:w="2"/><text x="81.6283%" y="175.50"></text></g><g><title>rmqueue (2 samples, 0.02%)</title><rect x="81.3783%" y="149" width="0.0177%" height="15" fill="rgb(208,118,9)" fg:x="9199" fg:w="2"/><text x="81.6283%" y="159.50"></text></g><g><title>_int_malloc (12 samples, 0.11%)</title><rect x="81.2987%" y="341" width="0.1062%" height="15" fill="rgb(235,7,39)" fg:x="9190" fg:w="12"/><text x="81.5487%" y="351.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.18%)</title><rect x="81.2367%" y="357" width="0.1769%" height="15" fill="rgb(243,225,15)" fg:x="9183" fg:w="20"/><text x="81.4867%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.19%)</title><rect x="81.2367%" y="453" width="0.1858%" height="15" fill="rgb(225,216,18)" fg:x="9183" fg:w="21"/><text x="81.4867%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.19%)</title><rect x="81.2367%" y="437" width="0.1858%" height="15" fill="rgb(233,36,38)" fg:x="9183" fg:w="21"/><text x="81.4867%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.19%)</title><rect x="81.2367%" y="421" width="0.1858%" height="15" fill="rgb(239,88,23)" fg:x="9183" fg:w="21"/><text x="81.4867%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.19%)</title><rect x="81.2367%" y="405" width="0.1858%" height="15" fill="rgb(219,181,35)" fg:x="9183" fg:w="21"/><text x="81.4867%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.19%)</title><rect x="81.2367%" y="389" width="0.1858%" height="15" fill="rgb(215,18,46)" fg:x="9183" fg:w="21"/><text x="81.4867%" y="399.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.19%)</title><rect x="81.2367%" y="373" width="0.1858%" height="15" fill="rgb(241,38,11)" fg:x="9183" fg:w="21"/><text x="81.4867%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (61 samples, 0.54%)</title><rect x="80.9006%" y="517" width="0.5396%" height="15" fill="rgb(248,169,45)" fg:x="9145" fg:w="61"/><text x="81.1506%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (61 samples, 0.54%)</title><rect x="80.9006%" y="501" width="0.5396%" height="15" fill="rgb(239,50,49)" fg:x="9145" fg:w="61"/><text x="81.1506%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (61 samples, 0.54%)</title><rect x="80.9006%" y="485" width="0.5396%" height="15" fill="rgb(231,96,31)" fg:x="9145" fg:w="61"/><text x="81.1506%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (61 samples, 0.54%)</title><rect x="80.9006%" y="469" width="0.5396%" height="15" fill="rgb(224,193,37)" fg:x="9145" fg:w="61"/><text x="81.1506%" y="479.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="81.4225%" y="453" width="0.0177%" height="15" fill="rgb(227,153,50)" fg:x="9204" fg:w="2"/><text x="81.6725%" y="463.50"></text></g><g><title>&lt;revm_primitives::result::ExecutionResult as core::clone::Clone&gt;::clone (65 samples, 0.58%)</title><rect x="80.8829%" y="533" width="0.5750%" height="15" fill="rgb(249,228,3)" fg:x="9143" fg:w="65"/><text x="81.1329%" y="543.50"></text></g><g><title>&lt;revm_primitives::result::Output as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="81.4402%" y="517" width="0.0177%" height="15" fill="rgb(219,164,43)" fg:x="9206" fg:w="2"/><text x="81.6902%" y="527.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="81.4402%" y="501" width="0.0177%" height="15" fill="rgb(216,45,41)" fg:x="9206" fg:w="2"/><text x="81.6902%" y="511.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="81.4402%" y="485" width="0.0177%" height="15" fill="rgb(210,226,51)" fg:x="9206" fg:w="2"/><text x="81.6902%" y="495.50"></text></g><g><title>bytes::bytes::shared_clone (2 samples, 0.02%)</title><rect x="81.4402%" y="469" width="0.0177%" height="15" fill="rgb(209,117,49)" fg:x="9206" fg:w="2"/><text x="81.6902%" y="479.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (2 samples, 0.02%)</title><rect x="81.4402%" y="453" width="0.0177%" height="15" fill="rgb(206,196,24)" fg:x="9206" fg:w="2"/><text x="81.6902%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="81.4402%" y="437" width="0.0177%" height="15" fill="rgb(253,218,3)" fg:x="9206" fg:w="2"/><text x="81.6902%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="81.4402%" y="421" width="0.0177%" height="15" fill="rgb(252,166,2)" fg:x="9206" fg:w="2"/><text x="81.6902%" y="431.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (13 samples, 0.12%)</title><rect x="81.4933%" y="437" width="0.1150%" height="15" fill="rgb(236,218,26)" fg:x="9212" fg:w="13"/><text x="81.7433%" y="447.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (2 samples, 0.02%)</title><rect x="81.6614%" y="325" width="0.0177%" height="15" fill="rgb(254,84,19)" fg:x="9231" fg:w="2"/><text x="81.9114%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="81.6614%" y="309" width="0.0177%" height="15" fill="rgb(219,137,29)" fg:x="9231" fg:w="2"/><text x="81.9114%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="81.6614%" y="293" width="0.0177%" height="15" fill="rgb(227,47,52)" fg:x="9231" fg:w="2"/><text x="81.9114%" y="303.50"></text></g><g><title>bytes::bytes::shared_clone (3 samples, 0.03%)</title><rect x="81.6614%" y="341" width="0.0265%" height="15" fill="rgb(229,167,24)" fg:x="9231" fg:w="3"/><text x="81.9114%" y="351.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="81.6614%" y="373" width="0.0354%" height="15" fill="rgb(233,164,1)" fg:x="9231" fg:w="4"/><text x="81.9114%" y="383.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="81.6614%" y="357" width="0.0354%" height="15" fill="rgb(218,88,48)" fg:x="9231" fg:w="4"/><text x="81.9114%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="81.6525%" y="405" width="0.0973%" height="15" fill="rgb(226,214,24)" fg:x="9230" fg:w="11"/><text x="81.9025%" y="415.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="81.6525%" y="389" width="0.0973%" height="15" fill="rgb(233,29,12)" fg:x="9230" fg:w="11"/><text x="81.9025%" y="399.50"></text></g><g><title>&lt;revm_primitives::bytecode::BytecodeState as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="81.6967%" y="373" width="0.0531%" height="15" fill="rgb(219,120,34)" fg:x="9235" fg:w="6"/><text x="81.9467%" y="383.50"></text></g><g><title>&lt;revm_primitives::bytecode::JumpMap as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="81.6967%" y="357" width="0.0531%" height="15" fill="rgb(226,78,44)" fg:x="9235" fg:w="6"/><text x="81.9467%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="81.6967%" y="341" width="0.0531%" height="15" fill="rgb(240,15,48)" fg:x="9235" fg:w="6"/><text x="81.9467%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6 samples, 0.05%)</title><rect x="81.6967%" y="325" width="0.0531%" height="15" fill="rgb(253,176,7)" fg:x="9235" fg:w="6"/><text x="81.9467%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (6 samples, 0.05%)</title><rect x="81.6967%" y="309" width="0.0531%" height="15" fill="rgb(206,166,28)" fg:x="9235" fg:w="6"/><text x="81.9467%" y="319.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="81.6171%" y="421" width="0.1504%" height="15" fill="rgb(241,53,51)" fg:x="9226" fg:w="17"/><text x="81.8671%" y="431.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="81.7498%" y="405" width="0.0177%" height="15" fill="rgb(249,112,30)" fg:x="9241" fg:w="2"/><text x="81.9998%" y="415.50"></text></g><g><title>core::clone::Clone::clone (7 samples, 0.06%)</title><rect x="81.8117%" y="341" width="0.0619%" height="15" fill="rgb(217,85,30)" fg:x="9248" fg:w="7"/><text x="82.0617%" y="351.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="81.8117%" y="325" width="0.0619%" height="15" fill="rgb(233,49,7)" fg:x="9248" fg:w="7"/><text x="82.0617%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (17 samples, 0.15%)</title><rect x="81.8737%" y="341" width="0.1504%" height="15" fill="rgb(234,109,9)" fg:x="9255" fg:w="17"/><text x="82.1237%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.15%)</title><rect x="81.8737%" y="325" width="0.1504%" height="15" fill="rgb(253,95,22)" fg:x="9255" fg:w="17"/><text x="82.1237%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (17 samples, 0.15%)</title><rect x="81.8737%" y="309" width="0.1504%" height="15" fill="rgb(233,176,25)" fg:x="9255" fg:w="17"/><text x="82.1237%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (25 samples, 0.22%)</title><rect x="81.8117%" y="373" width="0.2212%" height="15" fill="rgb(236,33,39)" fg:x="9248" fg:w="25"/><text x="82.0617%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (25 samples, 0.22%)</title><rect x="81.8117%" y="357" width="0.2212%" height="15" fill="rgb(223,226,42)" fg:x="9248" fg:w="25"/><text x="82.0617%" y="367.50"></text></g><g><title>charge_memcg (3 samples, 0.03%)</title><rect x="82.1125%" y="117" width="0.0265%" height="15" fill="rgb(216,99,33)" fg:x="9282" fg:w="3"/><text x="82.3625%" y="127.50"></text></g><g><title>__mem_cgroup_charge (4 samples, 0.04%)</title><rect x="82.1125%" y="133" width="0.0354%" height="15" fill="rgb(235,84,23)" fg:x="9282" fg:w="4"/><text x="82.3625%" y="143.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="82.1479%" y="133" width="0.0177%" height="15" fill="rgb(232,2,27)" fg:x="9286" fg:w="2"/><text x="82.3979%" y="143.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.02%)</title><rect x="82.1656%" y="133" width="0.0177%" height="15" fill="rgb(241,23,22)" fg:x="9288" fg:w="2"/><text x="82.4156%" y="143.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="82.1833%" y="133" width="0.0177%" height="15" fill="rgb(211,73,27)" fg:x="9290" fg:w="2"/><text x="82.4333%" y="143.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="82.1833%" y="117" width="0.0177%" height="15" fill="rgb(235,109,49)" fg:x="9290" fg:w="2"/><text x="82.4333%" y="127.50"></text></g><g><title>folio_add_new_anon_rmap (4 samples, 0.04%)</title><rect x="82.2010%" y="133" width="0.0354%" height="15" fill="rgb(230,99,29)" fg:x="9292" fg:w="4"/><text x="82.4510%" y="143.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.02%)</title><rect x="82.2187%" y="117" width="0.0177%" height="15" fill="rgb(245,199,7)" fg:x="9294" fg:w="2"/><text x="82.4687%" y="127.50"></text></g><g><title>__handle_mm_fault (19 samples, 0.17%)</title><rect x="82.1037%" y="181" width="0.1681%" height="15" fill="rgb(217,179,10)" fg:x="9281" fg:w="19"/><text x="82.3537%" y="191.50"></text></g><g><title>handle_pte_fault (19 samples, 0.17%)</title><rect x="82.1037%" y="165" width="0.1681%" height="15" fill="rgb(254,99,47)" fg:x="9281" fg:w="19"/><text x="82.3537%" y="175.50"></text></g><g><title>do_anonymous_page (18 samples, 0.16%)</title><rect x="82.1125%" y="149" width="0.1592%" height="15" fill="rgb(251,121,7)" fg:x="9282" fg:w="18"/><text x="82.3625%" y="159.50"></text></g><g><title>vma_alloc_folio (3 samples, 0.03%)</title><rect x="82.2452%" y="133" width="0.0265%" height="15" fill="rgb(250,177,26)" fg:x="9297" fg:w="3"/><text x="82.4952%" y="143.50"></text></g><g><title>__folio_alloc (3 samples, 0.03%)</title><rect x="82.2452%" y="117" width="0.0265%" height="15" fill="rgb(232,88,15)" fg:x="9297" fg:w="3"/><text x="82.4952%" y="127.50"></text></g><g><title>__alloc_pages (3 samples, 0.03%)</title><rect x="82.2452%" y="101" width="0.0265%" height="15" fill="rgb(251,54,54)" fg:x="9297" fg:w="3"/><text x="82.4952%" y="111.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="82.2541%" y="85" width="0.0177%" height="15" fill="rgb(208,177,15)" fg:x="9298" fg:w="2"/><text x="82.5041%" y="95.50"></text></g><g><title>rmqueue (2 samples, 0.02%)</title><rect x="82.2541%" y="69" width="0.0177%" height="15" fill="rgb(205,97,32)" fg:x="9298" fg:w="2"/><text x="82.5041%" y="79.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="82.2541%" y="53" width="0.0177%" height="15" fill="rgb(217,192,13)" fg:x="9298" fg:w="2"/><text x="82.5041%" y="63.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="82.2541%" y="37" width="0.0177%" height="15" fill="rgb(215,163,41)" fg:x="9298" fg:w="2"/><text x="82.5041%" y="47.50"></text></g><g><title>handle_mm_fault (21 samples, 0.19%)</title><rect x="82.1037%" y="197" width="0.1858%" height="15" fill="rgb(246,83,29)" fg:x="9281" fg:w="21"/><text x="82.3537%" y="207.50"></text></g><g><title>asm_exc_page_fault (22 samples, 0.19%)</title><rect x="82.1037%" y="245" width="0.1946%" height="15" fill="rgb(219,2,45)" fg:x="9281" fg:w="22"/><text x="82.3537%" y="255.50"></text></g><g><title>exc_page_fault (22 samples, 0.19%)</title><rect x="82.1037%" y="229" width="0.1946%" height="15" fill="rgb(242,215,33)" fg:x="9281" fg:w="22"/><text x="82.3537%" y="239.50"></text></g><g><title>do_user_addr_fault (22 samples, 0.19%)</title><rect x="82.1037%" y="213" width="0.1946%" height="15" fill="rgb(217,1,6)" fg:x="9281" fg:w="22"/><text x="82.3537%" y="223.50"></text></g><g><title>_int_malloc (29 samples, 0.26%)</title><rect x="82.0683%" y="261" width="0.2565%" height="15" fill="rgb(207,85,52)" fg:x="9277" fg:w="29"/><text x="82.3183%" y="271.50"></text></g><g><title>core::clone::Clone::clone (95 samples, 0.84%)</title><rect x="81.4933%" y="453" width="0.8404%" height="15" fill="rgb(231,171,19)" fg:x="9212" fg:w="95"/><text x="81.7433%" y="463.50"></text></g><g><title>&lt;revm_primitives::state::Account as core::clone::Clone&gt;::clone (82 samples, 0.73%)</title><rect x="81.6083%" y="437" width="0.7254%" height="15" fill="rgb(207,128,4)" fg:x="9225" fg:w="82"/><text x="81.8583%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (63 samples, 0.56%)</title><rect x="81.7764%" y="421" width="0.5573%" height="15" fill="rgb(219,208,4)" fg:x="9244" fg:w="63"/><text x="82.0264%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (63 samples, 0.56%)</title><rect x="81.7764%" y="405" width="0.5573%" height="15" fill="rgb(235,161,42)" fg:x="9244" fg:w="63"/><text x="82.0264%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (59 samples, 0.52%)</title><rect x="81.8117%" y="389" width="0.5219%" height="15" fill="rgb(247,218,18)" fg:x="9248" fg:w="59"/><text x="82.0617%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (34 samples, 0.30%)</title><rect x="82.0329%" y="373" width="0.3008%" height="15" fill="rgb(232,114,51)" fg:x="9273" fg:w="34"/><text x="82.2829%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (34 samples, 0.30%)</title><rect x="82.0329%" y="357" width="0.3008%" height="15" fill="rgb(222,95,3)" fg:x="9273" fg:w="34"/><text x="82.2829%" y="367.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (33 samples, 0.29%)</title><rect x="82.0418%" y="341" width="0.2919%" height="15" fill="rgb(240,65,29)" fg:x="9274" fg:w="33"/><text x="82.2918%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.29%)</title><rect x="82.0418%" y="325" width="0.2919%" height="15" fill="rgb(249,209,20)" fg:x="9274" fg:w="33"/><text x="82.2918%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.29%)</title><rect x="82.0418%" y="309" width="0.2919%" height="15" fill="rgb(241,48,37)" fg:x="9274" fg:w="33"/><text x="82.2918%" y="319.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.29%)</title><rect x="82.0418%" y="293" width="0.2919%" height="15" fill="rgb(230,140,42)" fg:x="9274" fg:w="33"/><text x="82.2918%" y="303.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.29%)</title><rect x="82.0418%" y="277" width="0.2919%" height="15" fill="rgb(230,176,45)" fg:x="9274" fg:w="33"/><text x="82.2918%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (11 samples, 0.10%)</title><rect x="82.3337%" y="453" width="0.0973%" height="15" fill="rgb(245,112,21)" fg:x="9307" fg:w="11"/><text x="82.5837%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.10%)</title><rect x="82.3337%" y="437" width="0.0973%" height="15" fill="rgb(207,183,35)" fg:x="9307" fg:w="11"/><text x="82.5837%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (11 samples, 0.10%)</title><rect x="82.3337%" y="421" width="0.0973%" height="15" fill="rgb(227,44,33)" fg:x="9307" fg:w="11"/><text x="82.5837%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7 samples, 0.06%)</title><rect x="82.4310%" y="453" width="0.0619%" height="15" fill="rgb(246,120,21)" fg:x="9318" fg:w="7"/><text x="82.6810%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (7 samples, 0.06%)</title><rect x="82.4310%" y="437" width="0.0619%" height="15" fill="rgb(235,57,52)" fg:x="9318" fg:w="7"/><text x="82.6810%" y="447.50"></text></g><g><title>core::ptr::write (7 samples, 0.06%)</title><rect x="82.4310%" y="421" width="0.0619%" height="15" fill="rgb(238,84,10)" fg:x="9318" fg:w="7"/><text x="82.6810%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="82.4398%" y="405" width="0.0531%" height="15" fill="rgb(251,200,32)" fg:x="9319" fg:w="6"/><text x="82.6898%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (116 samples, 1.03%)</title><rect x="81.4756%" y="485" width="1.0262%" height="15" fill="rgb(247,159,13)" fg:x="9210" fg:w="116"/><text x="81.7256%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (116 samples, 1.03%)</title><rect x="81.4756%" y="469" width="1.0262%" height="15" fill="rgb(238,64,4)" fg:x="9210" fg:w="116"/><text x="81.7256%" y="479.50"></text></g><g><title>__count_memcg_events (2 samples, 0.02%)</title><rect x="82.7318%" y="213" width="0.0177%" height="15" fill="rgb(221,131,51)" fg:x="9352" fg:w="2"/><text x="82.9818%" y="223.50"></text></g><g><title>charge_memcg (5 samples, 0.04%)</title><rect x="82.7229%" y="229" width="0.0442%" height="15" fill="rgb(242,5,29)" fg:x="9351" fg:w="5"/><text x="82.9729%" y="239.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.02%)</title><rect x="82.7495%" y="213" width="0.0177%" height="15" fill="rgb(214,130,32)" fg:x="9354" fg:w="2"/><text x="82.9995%" y="223.50"></text></g><g><title>__mem_cgroup_charge (9 samples, 0.08%)</title><rect x="82.7229%" y="245" width="0.0796%" height="15" fill="rgb(244,210,16)" fg:x="9351" fg:w="9"/><text x="82.9729%" y="255.50"></text></g><g><title>get_mem_cgroup_from_mm (4 samples, 0.04%)</title><rect x="82.7672%" y="229" width="0.0354%" height="15" fill="rgb(234,48,26)" fg:x="9356" fg:w="4"/><text x="83.0172%" y="239.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="82.8025%" y="245" width="0.0177%" height="15" fill="rgb(231,82,38)" fg:x="9360" fg:w="2"/><text x="83.0525%" y="255.50"></text></g><g><title>lru_add_fn (3 samples, 0.03%)</title><rect x="82.8645%" y="197" width="0.0265%" height="15" fill="rgb(254,128,41)" fg:x="9367" fg:w="3"/><text x="83.1145%" y="207.50"></text></g><g><title>lru_gen_add_folio (2 samples, 0.02%)</title><rect x="82.8733%" y="181" width="0.0177%" height="15" fill="rgb(212,73,49)" fg:x="9368" fg:w="2"/><text x="83.1233%" y="191.50"></text></g><g><title>folio_add_lru_vma (8 samples, 0.07%)</title><rect x="82.8291%" y="245" width="0.0708%" height="15" fill="rgb(205,62,54)" fg:x="9363" fg:w="8"/><text x="83.0791%" y="255.50"></text></g><g><title>folio_add_lru (8 samples, 0.07%)</title><rect x="82.8291%" y="229" width="0.0708%" height="15" fill="rgb(228,0,8)" fg:x="9363" fg:w="8"/><text x="83.0791%" y="239.50"></text></g><g><title>folio_batch_move_lru (5 samples, 0.04%)</title><rect x="82.8556%" y="213" width="0.0442%" height="15" fill="rgb(251,28,17)" fg:x="9366" fg:w="5"/><text x="83.1056%" y="223.50"></text></g><g><title>folio_add_new_anon_rmap (3 samples, 0.03%)</title><rect x="82.8999%" y="245" width="0.0265%" height="15" fill="rgb(238,105,27)" fg:x="9371" fg:w="3"/><text x="83.1499%" y="255.50"></text></g><g><title>inc_mm_counter (2 samples, 0.02%)</title><rect x="82.9264%" y="245" width="0.0177%" height="15" fill="rgb(237,216,33)" fg:x="9374" fg:w="2"/><text x="83.1764%" y="255.50"></text></g><g><title>percpu_counter_add_batch (2 samples, 0.02%)</title><rect x="82.9264%" y="229" width="0.0177%" height="15" fill="rgb(229,228,25)" fg:x="9374" fg:w="2"/><text x="83.1764%" y="239.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="82.9441%" y="149" width="0.0442%" height="15" fill="rgb(233,75,23)" fg:x="9376" fg:w="5"/><text x="83.1941%" y="159.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="82.9441%" y="133" width="0.0442%" height="15" fill="rgb(231,207,16)" fg:x="9376" fg:w="5"/><text x="83.1941%" y="143.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.04%)</title><rect x="82.9441%" y="117" width="0.0442%" height="15" fill="rgb(231,191,45)" fg:x="9376" fg:w="5"/><text x="83.1941%" y="127.50"></text></g><g><title>__cond_resched (6 samples, 0.05%)</title><rect x="82.9441%" y="197" width="0.0531%" height="15" fill="rgb(224,133,17)" fg:x="9376" fg:w="6"/><text x="83.1941%" y="207.50"></text></g><g><title>__schedule (6 samples, 0.05%)</title><rect x="82.9441%" y="181" width="0.0531%" height="15" fill="rgb(209,178,27)" fg:x="9376" fg:w="6"/><text x="83.1941%" y="191.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.05%)</title><rect x="82.9441%" y="165" width="0.0531%" height="15" fill="rgb(218,37,11)" fg:x="9376" fg:w="6"/><text x="83.1941%" y="175.50"></text></g><g><title>clear_page_erms (3 samples, 0.03%)</title><rect x="83.0149%" y="181" width="0.0265%" height="15" fill="rgb(251,226,25)" fg:x="9384" fg:w="3"/><text x="83.2649%" y="191.50"></text></g><g><title>post_alloc_hook (2 samples, 0.02%)</title><rect x="83.0414%" y="181" width="0.0177%" height="15" fill="rgb(209,222,27)" fg:x="9387" fg:w="2"/><text x="83.2914%" y="191.50"></text></g><g><title>__alloc_pages (16 samples, 0.14%)</title><rect x="82.9441%" y="213" width="0.1415%" height="15" fill="rgb(238,22,21)" fg:x="9376" fg:w="16"/><text x="83.1941%" y="223.50"></text></g><g><title>get_page_from_freelist (10 samples, 0.09%)</title><rect x="82.9972%" y="197" width="0.0885%" height="15" fill="rgb(233,161,25)" fg:x="9382" fg:w="10"/><text x="83.2472%" y="207.50"></text></g><g><title>rmqueue (3 samples, 0.03%)</title><rect x="83.0591%" y="181" width="0.0265%" height="15" fill="rgb(226,122,53)" fg:x="9389" fg:w="3"/><text x="83.3091%" y="191.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="83.0679%" y="165" width="0.0177%" height="15" fill="rgb(220,123,17)" fg:x="9390" fg:w="2"/><text x="83.3179%" y="175.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="83.0679%" y="149" width="0.0177%" height="15" fill="rgb(230,224,35)" fg:x="9390" fg:w="2"/><text x="83.3179%" y="159.50"></text></g><g><title>__handle_mm_fault (47 samples, 0.42%)</title><rect x="82.6787%" y="293" width="0.4158%" height="15" fill="rgb(246,83,8)" fg:x="9346" fg:w="47"/><text x="82.9287%" y="303.50"></text></g><g><title>handle_pte_fault (46 samples, 0.41%)</title><rect x="82.6875%" y="277" width="0.4069%" height="15" fill="rgb(230,214,17)" fg:x="9347" fg:w="46"/><text x="82.9375%" y="287.50"></text></g><g><title>do_anonymous_page (46 samples, 0.41%)</title><rect x="82.6875%" y="261" width="0.4069%" height="15" fill="rgb(222,97,18)" fg:x="9347" fg:w="46"/><text x="82.9375%" y="271.50"></text></g><g><title>vma_alloc_folio (17 samples, 0.15%)</title><rect x="82.9441%" y="245" width="0.1504%" height="15" fill="rgb(206,79,1)" fg:x="9376" fg:w="17"/><text x="83.1941%" y="255.50"></text></g><g><title>__folio_alloc (17 samples, 0.15%)</title><rect x="82.9441%" y="229" width="0.1504%" height="15" fill="rgb(214,121,34)" fg:x="9376" fg:w="17"/><text x="83.1941%" y="239.50"></text></g><g><title>handle_mm_fault (49 samples, 0.43%)</title><rect x="82.6699%" y="309" width="0.4335%" height="15" fill="rgb(249,199,46)" fg:x="9345" fg:w="49"/><text x="82.9199%" y="319.50"></text></g><g><title>do_user_addr_fault (54 samples, 0.48%)</title><rect x="82.6522%" y="325" width="0.4777%" height="15" fill="rgb(214,222,46)" fg:x="9343" fg:w="54"/><text x="82.9022%" y="335.50"></text></g><g><title>lock_vma_under_rcu (3 samples, 0.03%)</title><rect x="83.1033%" y="309" width="0.0265%" height="15" fill="rgb(248,168,30)" fg:x="9394" fg:w="3"/><text x="83.3533%" y="319.50"></text></g><g><title>mas_walk (3 samples, 0.03%)</title><rect x="83.1033%" y="293" width="0.0265%" height="15" fill="rgb(226,14,28)" fg:x="9394" fg:w="3"/><text x="83.3533%" y="303.50"></text></g><g><title>mtree_range_walk (3 samples, 0.03%)</title><rect x="83.1033%" y="277" width="0.0265%" height="15" fill="rgb(253,123,1)" fg:x="9394" fg:w="3"/><text x="83.3533%" y="287.50"></text></g><g><title>asm_exc_page_fault (55 samples, 0.49%)</title><rect x="82.6522%" y="357" width="0.4866%" height="15" fill="rgb(225,24,42)" fg:x="9343" fg:w="55"/><text x="82.9022%" y="367.50"></text></g><g><title>exc_page_fault (55 samples, 0.49%)</title><rect x="82.6522%" y="341" width="0.4866%" height="15" fill="rgb(216,161,37)" fg:x="9343" fg:w="55"/><text x="82.9022%" y="351.50"></text></g><g><title>sync_regs (8 samples, 0.07%)</title><rect x="83.1387%" y="357" width="0.0708%" height="15" fill="rgb(251,164,26)" fg:x="9398" fg:w="8"/><text x="83.3887%" y="367.50"></text></g><g><title>__glibc_morecore (2 samples, 0.02%)</title><rect x="83.2095%" y="341" width="0.0177%" height="15" fill="rgb(219,177,3)" fg:x="9406" fg:w="2"/><text x="83.4595%" y="351.50"></text></g><g><title>__GI___sbrk (2 samples, 0.02%)</title><rect x="83.2095%" y="325" width="0.0177%" height="15" fill="rgb(222,65,0)" fg:x="9406" fg:w="2"/><text x="83.4595%" y="335.50"></text></g><g><title>__brk (2 samples, 0.02%)</title><rect x="83.2095%" y="309" width="0.0177%" height="15" fill="rgb(223,69,54)" fg:x="9406" fg:w="2"/><text x="83.4595%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (279 samples, 2.47%)</title><rect x="80.7767%" y="773" width="2.4682%" height="15" fill="rgb(235,30,27)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="783.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (279 samples, 2.47%)</title><rect x="80.7767%" y="757" width="2.4682%" height="15" fill="rgb(220,183,50)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="767.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (279 samples, 2.47%)</title><rect x="80.7767%" y="741" width="2.4682%" height="15" fill="rgb(248,198,15)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="751.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (279 samples, 2.47%)</title><rect x="80.7767%" y="725" width="2.4682%" height="15" fill="rgb(222,211,4)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="735.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (279 samples, 2.47%)</title><rect x="80.7767%" y="709" width="2.4682%" height="15" fill="rgb(214,102,34)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="719.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (279 samples, 2.47%)</title><rect x="80.7767%" y="693" width="2.4682%" height="15" fill="rgb(245,92,5)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="703.50">al..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (279 samples, 2.47%)</title><rect x="80.7767%" y="677" width="2.4682%" height="15" fill="rgb(252,72,51)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="687.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (279 samples, 2.47%)</title><rect x="80.7767%" y="661" width="2.4682%" height="15" fill="rgb(252,208,19)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="671.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (279 samples, 2.47%)</title><rect x="80.7767%" y="645" width="2.4682%" height="15" fill="rgb(211,69,7)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="655.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (279 samples, 2.47%)</title><rect x="80.7767%" y="629" width="2.4682%" height="15" fill="rgb(211,27,16)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="639.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (279 samples, 2.47%)</title><rect x="80.7767%" y="613" width="2.4682%" height="15" fill="rgb(219,216,14)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="623.50">&lt;c..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (279 samples, 2.47%)</title><rect x="80.7767%" y="597" width="2.4682%" height="15" fill="rgb(219,71,8)" fg:x="9131" fg:w="279"/><text x="81.0267%" y="607.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (267 samples, 2.36%)</title><rect x="80.8829%" y="581" width="2.3620%" height="15" fill="rgb(223,170,53)" fg:x="9143" fg:w="267"/><text x="81.1329%" y="591.50">co..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (267 samples, 2.36%)</title><rect x="80.8829%" y="565" width="2.3620%" height="15" fill="rgb(246,21,26)" fg:x="9143" fg:w="267"/><text x="81.1329%" y="575.50">&lt;c..</text></g><g><title>&lt;revm_primitives::result::ResultAndState as core::clone::Clone&gt;::clone (267 samples, 2.36%)</title><rect x="80.8829%" y="549" width="2.3620%" height="15" fill="rgb(248,20,46)" fg:x="9143" fg:w="267"/><text x="81.1329%" y="559.50">&lt;r..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (202 samples, 1.79%)</title><rect x="81.4579%" y="533" width="1.7870%" height="15" fill="rgb(252,94,11)" fg:x="9208" fg:w="202"/><text x="81.7079%" y="543.50">&lt;..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (202 samples, 1.79%)</title><rect x="81.4579%" y="517" width="1.7870%" height="15" fill="rgb(236,163,8)" fg:x="9208" fg:w="202"/><text x="81.7079%" y="527.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (200 samples, 1.77%)</title><rect x="81.4756%" y="501" width="1.7693%" height="15" fill="rgb(217,221,45)" fg:x="9210" fg:w="200"/><text x="81.7256%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (84 samples, 0.74%)</title><rect x="82.5018%" y="485" width="0.7431%" height="15" fill="rgb(238,38,17)" fg:x="9326" fg:w="84"/><text x="82.7518%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (84 samples, 0.74%)</title><rect x="82.5018%" y="469" width="0.7431%" height="15" fill="rgb(242,210,23)" fg:x="9326" fg:w="84"/><text x="82.7518%" y="479.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (84 samples, 0.74%)</title><rect x="82.5018%" y="453" width="0.7431%" height="15" fill="rgb(250,86,53)" fg:x="9326" fg:w="84"/><text x="82.7518%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.74%)</title><rect x="82.5018%" y="437" width="0.7431%" height="15" fill="rgb(223,168,25)" fg:x="9326" fg:w="84"/><text x="82.7518%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.74%)</title><rect x="82.5018%" y="421" width="0.7431%" height="15" fill="rgb(251,189,4)" fg:x="9326" fg:w="84"/><text x="82.7518%" y="431.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.74%)</title><rect x="82.5018%" y="405" width="0.7431%" height="15" fill="rgb(245,19,28)" fg:x="9326" fg:w="84"/><text x="82.7518%" y="415.50"></text></g><g><title>__GI___libc_malloc (84 samples, 0.74%)</title><rect x="82.5018%" y="389" width="0.7431%" height="15" fill="rgb(207,10,34)" fg:x="9326" fg:w="84"/><text x="82.7518%" y="399.50"></text></g><g><title>_int_malloc (79 samples, 0.70%)</title><rect x="82.5460%" y="373" width="0.6989%" height="15" fill="rgb(235,153,31)" fg:x="9331" fg:w="79"/><text x="82.7960%" y="383.50"></text></g><g><title>sysmalloc (4 samples, 0.04%)</title><rect x="83.2095%" y="357" width="0.0354%" height="15" fill="rgb(228,72,37)" fg:x="9406" fg:w="4"/><text x="83.4595%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="83.2449%" y="709" width="0.0354%" height="15" fill="rgb(215,15,16)" fg:x="9410" fg:w="4"/><text x="83.4949%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::env::TxEnv]&gt; (4 samples, 0.04%)</title><rect x="83.2449%" y="693" width="0.0354%" height="15" fill="rgb(250,119,29)" fg:x="9410" fg:w="4"/><text x="83.4949%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (3 samples, 0.03%)</title><rect x="83.2537%" y="677" width="0.0265%" height="15" fill="rgb(214,59,1)" fg:x="9411" fg:w="3"/><text x="83.5037%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (3 samples, 0.03%)</title><rect x="83.2537%" y="661" width="0.0265%" height="15" fill="rgb(223,109,25)" fg:x="9411" fg:w="3"/><text x="83.5037%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.03%)</title><rect x="83.2537%" y="645" width="0.0265%" height="15" fill="rgb(230,198,22)" fg:x="9411" fg:w="3"/><text x="83.5037%" y="655.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="83.2537%" y="629" width="0.0265%" height="15" fill="rgb(245,184,46)" fg:x="9411" fg:w="3"/><text x="83.5037%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="83.2449%" y="773" width="0.0708%" height="15" fill="rgb(253,73,16)" fg:x="9410" fg:w="8"/><text x="83.4949%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="83.2449%" y="757" width="0.0708%" height="15" fill="rgb(206,94,45)" fg:x="9410" fg:w="8"/><text x="83.4949%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.07%)</title><rect x="83.2449%" y="741" width="0.0708%" height="15" fill="rgb(236,83,27)" fg:x="9410" fg:w="8"/><text x="83.4949%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt; (8 samples, 0.07%)</title><rect x="83.2449%" y="725" width="0.0708%" height="15" fill="rgb(220,196,8)" fg:x="9410" fg:w="8"/><text x="83.4949%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::env::TxEnv&gt;&gt; (4 samples, 0.04%)</title><rect x="83.2803%" y="709" width="0.0354%" height="15" fill="rgb(254,185,14)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="83.2803%" y="693" width="0.0354%" height="15" fill="rgb(226,50,22)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.04%)</title><rect x="83.2803%" y="677" width="0.0354%" height="15" fill="rgb(253,147,0)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.04%)</title><rect x="83.2803%" y="661" width="0.0354%" height="15" fill="rgb(252,46,33)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="671.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="83.2803%" y="645" width="0.0354%" height="15" fill="rgb(242,22,54)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="655.50"></text></g><g><title>__GI_munmap (4 samples, 0.04%)</title><rect x="83.2803%" y="629" width="0.0354%" height="15" fill="rgb(223,178,32)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="83.2803%" y="613" width="0.0354%" height="15" fill="rgb(214,106,53)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="623.50"></text></g><g><title>do_syscall_64 (4 samples, 0.04%)</title><rect x="83.2803%" y="597" width="0.0354%" height="15" fill="rgb(232,65,50)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="607.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.04%)</title><rect x="83.2803%" y="581" width="0.0354%" height="15" fill="rgb(231,110,28)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="591.50"></text></g><g><title>__vm_munmap (4 samples, 0.04%)</title><rect x="83.2803%" y="565" width="0.0354%" height="15" fill="rgb(216,71,40)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="575.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.04%)</title><rect x="83.2803%" y="549" width="0.0354%" height="15" fill="rgb(229,89,53)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="559.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.04%)</title><rect x="83.2803%" y="533" width="0.0354%" height="15" fill="rgb(210,124,14)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="543.50"></text></g><g><title>unmap_region (4 samples, 0.04%)</title><rect x="83.2803%" y="517" width="0.0354%" height="15" fill="rgb(236,213,6)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="527.50"></text></g><g><title>unmap_vmas (4 samples, 0.04%)</title><rect x="83.2803%" y="501" width="0.0354%" height="15" fill="rgb(228,41,5)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="511.50"></text></g><g><title>unmap_single_vma (4 samples, 0.04%)</title><rect x="83.2803%" y="485" width="0.0354%" height="15" fill="rgb(221,167,25)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="495.50"></text></g><g><title>unmap_page_range (4 samples, 0.04%)</title><rect x="83.2803%" y="469" width="0.0354%" height="15" fill="rgb(228,144,37)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="479.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.04%)</title><rect x="83.2803%" y="453" width="0.0354%" height="15" fill="rgb(227,189,38)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="463.50"></text></g><g><title>zap_pte_range (4 samples, 0.04%)</title><rect x="83.2803%" y="437" width="0.0354%" height="15" fill="rgb(218,8,2)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="447.50"></text></g><g><title>tlb_flush_mmu (4 samples, 0.04%)</title><rect x="83.2803%" y="421" width="0.0354%" height="15" fill="rgb(209,61,28)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="431.50"></text></g><g><title>tlb_batch_pages_flush (4 samples, 0.04%)</title><rect x="83.2803%" y="405" width="0.0354%" height="15" fill="rgb(233,140,39)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="415.50"></text></g><g><title>free_pages_and_swap_cache (4 samples, 0.04%)</title><rect x="83.2803%" y="389" width="0.0354%" height="15" fill="rgb(251,66,48)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="399.50"></text></g><g><title>release_pages (4 samples, 0.04%)</title><rect x="83.2803%" y="373" width="0.0354%" height="15" fill="rgb(210,44,45)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="383.50"></text></g><g><title>free_unref_page_list (4 samples, 0.04%)</title><rect x="83.2803%" y="357" width="0.0354%" height="15" fill="rgb(214,136,46)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="367.50"></text></g><g><title>free_unref_page_commit (4 samples, 0.04%)</title><rect x="83.2803%" y="341" width="0.0354%" height="15" fill="rgb(207,130,50)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="351.50"></text></g><g><title>free_pcppages_bulk (4 samples, 0.04%)</title><rect x="83.2803%" y="325" width="0.0354%" height="15" fill="rgb(228,102,49)" fg:x="9414" fg:w="4"/><text x="83.5303%" y="335.50"></text></g><g><title>__free_one_page (3 samples, 0.03%)</title><rect x="83.2891%" y="309" width="0.0265%" height="15" fill="rgb(253,55,1)" fg:x="9415" fg:w="3"/><text x="83.5391%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt;&gt; (25 samples, 0.22%)</title><rect x="83.3156%" y="709" width="0.2212%" height="15" fill="rgb(238,222,9)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.22%)</title><rect x="83.3156%" y="693" width="0.2212%" height="15" fill="rgb(246,99,6)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;]&gt; (25 samples, 0.22%)</title><rect x="83.3156%" y="677" width="0.2212%" height="15" fill="rgb(219,110,26)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (25 samples, 0.22%)</title><rect x="83.3156%" y="661" width="0.2212%" height="15" fill="rgb(239,160,33)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (25 samples, 0.22%)</title><rect x="83.3156%" y="645" width="0.2212%" height="15" fill="rgb(220,202,23)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (25 samples, 0.22%)</title><rect x="83.3156%" y="629" width="0.2212%" height="15" fill="rgb(208,80,26)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt; (25 samples, 0.22%)</title><rect x="83.3156%" y="613" width="0.2212%" height="15" fill="rgb(243,85,7)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.22%)</title><rect x="83.3156%" y="597" width="0.2212%" height="15" fill="rgb(228,77,47)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.22%)</title><rect x="83.3156%" y="581" width="0.2212%" height="15" fill="rgb(212,226,8)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.22%)</title><rect x="83.3156%" y="565" width="0.2212%" height="15" fill="rgb(241,120,54)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="575.50"></text></g><g><title>__GI___libc_free (25 samples, 0.22%)</title><rect x="83.3156%" y="549" width="0.2212%" height="15" fill="rgb(226,80,16)" fg:x="9418" fg:w="25"/><text x="83.5656%" y="559.50"></text></g><g><title>_int_free (21 samples, 0.19%)</title><rect x="83.3510%" y="533" width="0.1858%" height="15" fill="rgb(240,76,13)" fg:x="9422" fg:w="21"/><text x="83.6010%" y="543.50"></text></g><g><title>_int_free_merge_chunk (16 samples, 0.14%)</title><rect x="83.3953%" y="517" width="0.1415%" height="15" fill="rgb(252,74,8)" fg:x="9427" fg:w="16"/><text x="83.6453%" y="527.50"></text></g><g><title>_int_free_create_chunk (7 samples, 0.06%)</title><rect x="83.4749%" y="501" width="0.0619%" height="15" fill="rgb(244,155,2)" fg:x="9436" fg:w="7"/><text x="83.7249%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::mv_memory::MvMemory&gt;&gt; (26 samples, 0.23%)</title><rect x="83.3156%" y="773" width="0.2300%" height="15" fill="rgb(215,81,35)" fg:x="9418" fg:w="26"/><text x="83.5656%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.23%)</title><rect x="83.3156%" y="757" width="0.2300%" height="15" fill="rgb(206,55,2)" fg:x="9418" fg:w="26"/><text x="83.5656%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (26 samples, 0.23%)</title><rect x="83.3156%" y="741" width="0.2300%" height="15" fill="rgb(231,2,34)" fg:x="9418" fg:w="26"/><text x="83.5656%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::mv_memory::MvMemory&gt; (26 samples, 0.23%)</title><rect x="83.3156%" y="725" width="0.2300%" height="15" fill="rgb(242,176,48)" fg:x="9418" fg:w="26"/><text x="83.5656%" y="735.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="83.5633%" y="565" width="0.0177%" height="15" fill="rgb(249,31,36)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="575.50"></text></g><g><title>__GI_munmap (2 samples, 0.02%)</title><rect x="83.5633%" y="549" width="0.0177%" height="15" fill="rgb(205,18,17)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="83.5633%" y="533" width="0.0177%" height="15" fill="rgb(254,130,5)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="543.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="83.5633%" y="517" width="0.0177%" height="15" fill="rgb(229,42,45)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="527.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.02%)</title><rect x="83.5633%" y="501" width="0.0177%" height="15" fill="rgb(245,95,25)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="511.50"></text></g><g><title>__vm_munmap (2 samples, 0.02%)</title><rect x="83.5633%" y="485" width="0.0177%" height="15" fill="rgb(249,193,38)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="495.50"></text></g><g><title>do_vmi_munmap (2 samples, 0.02%)</title><rect x="83.5633%" y="469" width="0.0177%" height="15" fill="rgb(241,140,43)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="479.50"></text></g><g><title>do_vmi_align_munmap (2 samples, 0.02%)</title><rect x="83.5633%" y="453" width="0.0177%" height="15" fill="rgb(245,78,48)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="463.50"></text></g><g><title>unmap_region (2 samples, 0.02%)</title><rect x="83.5633%" y="437" width="0.0177%" height="15" fill="rgb(214,92,39)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="447.50"></text></g><g><title>unmap_vmas (2 samples, 0.02%)</title><rect x="83.5633%" y="421" width="0.0177%" height="15" fill="rgb(211,189,14)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="431.50"></text></g><g><title>unmap_single_vma (2 samples, 0.02%)</title><rect x="83.5633%" y="405" width="0.0177%" height="15" fill="rgb(218,7,24)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="415.50"></text></g><g><title>unmap_page_range (2 samples, 0.02%)</title><rect x="83.5633%" y="389" width="0.0177%" height="15" fill="rgb(224,200,49)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="399.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.02%)</title><rect x="83.5633%" y="373" width="0.0177%" height="15" fill="rgb(218,210,14)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="383.50"></text></g><g><title>zap_pte_range (2 samples, 0.02%)</title><rect x="83.5633%" y="357" width="0.0177%" height="15" fill="rgb(234,142,31)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="367.50"></text></g><g><title>page_remove_rmap (2 samples, 0.02%)</title><rect x="83.5633%" y="341" width="0.0177%" height="15" fill="rgb(227,165,2)" fg:x="9446" fg:w="2"/><text x="83.8133%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (14 samples, 0.12%)</title><rect x="83.5545%" y="613" width="0.1238%" height="15" fill="rgb(232,44,46)" fg:x="9445" fg:w="14"/><text x="83.8045%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (13 samples, 0.12%)</title><rect x="83.5633%" y="597" width="0.1150%" height="15" fill="rgb(236,149,47)" fg:x="9446" fg:w="13"/><text x="83.8133%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (13 samples, 0.12%)</title><rect x="83.5633%" y="581" width="0.1150%" height="15" fill="rgb(227,45,31)" fg:x="9446" fg:w="13"/><text x="83.8133%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt; (11 samples, 0.10%)</title><rect x="83.5810%" y="565" width="0.0973%" height="15" fill="rgb(240,176,51)" fg:x="9448" fg:w="11"/><text x="83.8310%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::db::in_memory_db::DbAccount&gt; (10 samples, 0.09%)</title><rect x="83.5899%" y="549" width="0.0885%" height="15" fill="rgb(249,146,41)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (10 samples, 0.09%)</title><rect x="83.5899%" y="533" width="0.0885%" height="15" fill="rgb(213,208,4)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (10 samples, 0.09%)</title><rect x="83.5899%" y="517" width="0.0885%" height="15" fill="rgb(245,84,36)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (10 samples, 0.09%)</title><rect x="83.5899%" y="501" width="0.0885%" height="15" fill="rgb(254,84,18)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (10 samples, 0.09%)</title><rect x="83.5899%" y="485" width="0.0885%" height="15" fill="rgb(225,38,54)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (10 samples, 0.09%)</title><rect x="83.5899%" y="469" width="0.0885%" height="15" fill="rgb(246,50,30)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (10 samples, 0.09%)</title><rect x="83.5899%" y="453" width="0.0885%" height="15" fill="rgb(246,148,9)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.09%)</title><rect x="83.5899%" y="437" width="0.0885%" height="15" fill="rgb(223,75,4)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.09%)</title><rect x="83.5899%" y="421" width="0.0885%" height="15" fill="rgb(239,148,41)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.09%)</title><rect x="83.5899%" y="405" width="0.0885%" height="15" fill="rgb(205,195,3)" fg:x="9449" fg:w="10"/><text x="83.8399%" y="415.50"></text></g><g><title>_compound_head (2 samples, 0.02%)</title><rect x="83.6783%" y="357" width="0.0177%" height="15" fill="rgb(254,161,1)" fg:x="9459" fg:w="2"/><text x="83.9283%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::vm::Vm&gt; (20 samples, 0.18%)</title><rect x="83.5545%" y="773" width="0.1769%" height="15" fill="rgb(211,229,8)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::storage::Storage&gt;&gt; (20 samples, 0.18%)</title><rect x="83.5545%" y="757" width="0.1769%" height="15" fill="rgb(220,97,9)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.18%)</title><rect x="83.5545%" y="741" width="0.1769%" height="15" fill="rgb(240,218,8)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (20 samples, 0.18%)</title><rect x="83.5545%" y="725" width="0.1769%" height="15" fill="rgb(250,44,0)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::storage::Storage&gt; (20 samples, 0.18%)</title><rect x="83.5545%" y="709" width="0.1769%" height="15" fill="rgb(236,41,53)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount&gt;&gt; (20 samples, 0.18%)</title><rect x="83.5545%" y="693" width="0.1769%" height="15" fill="rgb(218,227,13)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount,std::hash::random::RandomState&gt;&gt; (20 samples, 0.18%)</title><rect x="83.5545%" y="677" width="0.1769%" height="15" fill="rgb(217,94,32)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt;&gt; (20 samples, 0.18%)</title><rect x="83.5545%" y="661" width="0.1769%" height="15" fill="rgb(213,217,12)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.18%)</title><rect x="83.5545%" y="645" width="0.1769%" height="15" fill="rgb(229,13,46)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (20 samples, 0.18%)</title><rect x="83.5545%" y="629" width="0.1769%" height="15" fill="rgb(243,139,5)" fg:x="9445" fg:w="20"/><text x="83.8045%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (6 samples, 0.05%)</title><rect x="83.6783%" y="613" width="0.0531%" height="15" fill="rgb(249,38,45)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="83.6783%" y="597" width="0.0531%" height="15" fill="rgb(216,70,11)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="83.6783%" y="581" width="0.0531%" height="15" fill="rgb(253,101,25)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="591.50"></text></g><g><title>__GI___libc_free (6 samples, 0.05%)</title><rect x="83.6783%" y="565" width="0.0531%" height="15" fill="rgb(207,197,30)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="575.50"></text></g><g><title>__GI_munmap (6 samples, 0.05%)</title><rect x="83.6783%" y="549" width="0.0531%" height="15" fill="rgb(238,87,13)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.05%)</title><rect x="83.6783%" y="533" width="0.0531%" height="15" fill="rgb(215,155,8)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="543.50"></text></g><g><title>do_syscall_64 (6 samples, 0.05%)</title><rect x="83.6783%" y="517" width="0.0531%" height="15" fill="rgb(239,166,38)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="527.50"></text></g><g><title>__x64_sys_munmap (6 samples, 0.05%)</title><rect x="83.6783%" y="501" width="0.0531%" height="15" fill="rgb(240,194,35)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="511.50"></text></g><g><title>__vm_munmap (6 samples, 0.05%)</title><rect x="83.6783%" y="485" width="0.0531%" height="15" fill="rgb(219,10,44)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="495.50"></text></g><g><title>do_vmi_munmap (6 samples, 0.05%)</title><rect x="83.6783%" y="469" width="0.0531%" height="15" fill="rgb(251,220,35)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="479.50"></text></g><g><title>do_vmi_align_munmap (6 samples, 0.05%)</title><rect x="83.6783%" y="453" width="0.0531%" height="15" fill="rgb(218,117,13)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="463.50"></text></g><g><title>unmap_region (6 samples, 0.05%)</title><rect x="83.6783%" y="437" width="0.0531%" height="15" fill="rgb(221,213,40)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="447.50"></text></g><g><title>unmap_vmas (6 samples, 0.05%)</title><rect x="83.6783%" y="421" width="0.0531%" height="15" fill="rgb(251,224,35)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="431.50"></text></g><g><title>unmap_single_vma (6 samples, 0.05%)</title><rect x="83.6783%" y="405" width="0.0531%" height="15" fill="rgb(241,33,39)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="415.50"></text></g><g><title>unmap_page_range (6 samples, 0.05%)</title><rect x="83.6783%" y="389" width="0.0531%" height="15" fill="rgb(222,74,17)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="399.50"></text></g><g><title>zap_pmd_range.isra.0 (6 samples, 0.05%)</title><rect x="83.6783%" y="373" width="0.0531%" height="15" fill="rgb(225,103,0)" fg:x="9459" fg:w="6"/><text x="83.9283%" y="383.50"></text></g><g><title>zap_pte_range (4 samples, 0.04%)</title><rect x="83.6960%" y="357" width="0.0354%" height="15" fill="rgb(240,0,12)" fg:x="9461" fg:w="4"/><text x="83.9460%" y="367.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.02%)</title><rect x="83.7137%" y="341" width="0.0177%" height="15" fill="rgb(233,213,37)" fg:x="9463" fg:w="2"/><text x="83.9637%" y="351.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.02%)</title><rect x="83.7137%" y="325" width="0.0177%" height="15" fill="rgb(225,84,52)" fg:x="9463" fg:w="2"/><text x="83.9637%" y="335.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.02%)</title><rect x="83.7137%" y="309" width="0.0177%" height="15" fill="rgb(247,160,51)" fg:x="9463" fg:w="2"/><text x="83.9637%" y="319.50"></text></g><g><title>release_pages (2 samples, 0.02%)</title><rect x="83.7137%" y="293" width="0.0177%" height="15" fill="rgb(244,60,51)" fg:x="9463" fg:w="2"/><text x="83.9637%" y="303.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="83.8376%" y="469" width="0.0354%" height="15" fill="rgb(233,114,7)" fg:x="9477" fg:w="4"/><text x="84.0876%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (16 samples, 0.14%)</title><rect x="83.7403%" y="565" width="0.1415%" height="15" fill="rgb(246,136,16)" fg:x="9466" fg:w="16"/><text x="83.9903%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (16 samples, 0.14%)</title><rect x="83.7403%" y="549" width="0.1415%" height="15" fill="rgb(243,114,45)" fg:x="9466" fg:w="16"/><text x="83.9903%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.14%)</title><rect x="83.7403%" y="533" width="0.1415%" height="15" fill="rgb(247,183,43)" fg:x="9466" fg:w="16"/><text x="83.9903%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.12%)</title><rect x="83.7668%" y="517" width="0.1150%" height="15" fill="rgb(251,210,42)" fg:x="9469" fg:w="13"/><text x="84.0168%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.12%)</title><rect x="83.7668%" y="501" width="0.1150%" height="15" fill="rgb(221,88,35)" fg:x="9469" fg:w="13"/><text x="84.0168%" y="511.50"></text></g><g><title>__GI___libc_free (12 samples, 0.11%)</title><rect x="83.7757%" y="485" width="0.1062%" height="15" fill="rgb(242,21,20)" fg:x="9470" fg:w="12"/><text x="84.0257%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.18%)</title><rect x="83.7403%" y="629" width="0.1769%" height="15" fill="rgb(233,226,36)" fg:x="9466" fg:w="20"/><text x="83.9903%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloy_primitives::log::Log]&gt; (20 samples, 0.18%)</title><rect x="83.7403%" y="613" width="0.1769%" height="15" fill="rgb(243,189,34)" fg:x="9466" fg:w="20"/><text x="83.9903%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::log::Log&gt; (20 samples, 0.18%)</title><rect x="83.7403%" y="597" width="0.1769%" height="15" fill="rgb(207,145,50)" fg:x="9466" fg:w="20"/><text x="83.9903%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::log::LogData&gt; (20 samples, 0.18%)</title><rect x="83.7403%" y="581" width="0.1769%" height="15" fill="rgb(242,1,50)" fg:x="9466" fg:w="20"/><text x="83.9903%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (4 samples, 0.04%)</title><rect x="83.8818%" y="565" width="0.0354%" height="15" fill="rgb(231,65,32)" fg:x="9482" fg:w="4"/><text x="84.1318%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (4 samples, 0.04%)</title><rect x="83.8818%" y="549" width="0.0354%" height="15" fill="rgb(208,68,49)" fg:x="9482" fg:w="4"/><text x="84.1318%" y="559.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="83.8818%" y="533" width="0.0354%" height="15" fill="rgb(253,54,49)" fg:x="9482" fg:w="4"/><text x="84.1318%" y="543.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.03%)</title><rect x="83.8907%" y="517" width="0.0265%" height="15" fill="rgb(245,186,24)" fg:x="9483" fg:w="3"/><text x="84.1407%" y="527.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3 samples, 0.03%)</title><rect x="83.8907%" y="501" width="0.0265%" height="15" fill="rgb(209,2,41)" fg:x="9483" fg:w="3"/><text x="84.1407%" y="511.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (3 samples, 0.03%)</title><rect x="83.8907%" y="485" width="0.0265%" height="15" fill="rgb(242,208,54)" fg:x="9483" fg:w="3"/><text x="84.1407%" y="495.50"></text></g><g><title>bytes::bytes::release_shared (3 samples, 0.03%)</title><rect x="83.8907%" y="469" width="0.0265%" height="15" fill="rgb(225,9,51)" fg:x="9483" fg:w="3"/><text x="84.1407%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="83.8907%" y="453" width="0.0265%" height="15" fill="rgb(207,207,25)" fg:x="9483" fg:w="3"/><text x="84.1407%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="83.8907%" y="437" width="0.0265%" height="15" fill="rgb(253,96,18)" fg:x="9483" fg:w="3"/><text x="84.1407%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (24 samples, 0.21%)</title><rect x="83.7403%" y="661" width="0.2123%" height="15" fill="rgb(252,215,20)" fg:x="9466" fg:w="24"/><text x="83.9903%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (24 samples, 0.21%)</title><rect x="83.7403%" y="645" width="0.2123%" height="15" fill="rgb(245,227,26)" fg:x="9466" fg:w="24"/><text x="83.9903%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::log::Log&gt;&gt; (4 samples, 0.04%)</title><rect x="83.9172%" y="629" width="0.0354%" height="15" fill="rgb(241,208,0)" fg:x="9486" fg:w="4"/><text x="84.1672%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="83.9172%" y="613" width="0.0354%" height="15" fill="rgb(224,130,10)" fg:x="9486" fg:w="4"/><text x="84.1672%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.04%)</title><rect x="83.9172%" y="597" width="0.0354%" height="15" fill="rgb(237,29,0)" fg:x="9486" fg:w="4"/><text x="84.1672%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.04%)</title><rect x="83.9172%" y="581" width="0.0354%" height="15" fill="rgb(219,27,41)" fg:x="9486" fg:w="4"/><text x="84.1672%" y="591.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="83.9172%" y="565" width="0.0354%" height="15" fill="rgb(245,101,19)" fg:x="9486" fg:w="4"/><text x="84.1672%" y="575.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="83.9260%" y="549" width="0.0265%" height="15" fill="rgb(243,44,37)" fg:x="9487" fg:w="3"/><text x="84.1760%" y="559.50"></text></g><g><title>__GI___libc_free (26 samples, 0.23%)</title><rect x="83.9614%" y="533" width="0.2300%" height="15" fill="rgb(228,213,43)" fg:x="9491" fg:w="26"/><text x="84.2114%" y="543.50"></text></g><g><title>_int_free (26 samples, 0.23%)</title><rect x="83.9614%" y="517" width="0.2300%" height="15" fill="rgb(219,163,21)" fg:x="9491" fg:w="26"/><text x="84.2114%" y="527.50"></text></g><g><title>_int_free_merge_chunk (19 samples, 0.17%)</title><rect x="84.0234%" y="501" width="0.1681%" height="15" fill="rgb(234,86,24)" fg:x="9498" fg:w="19"/><text x="84.2734%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (4 samples, 0.04%)</title><rect x="84.3064%" y="453" width="0.0354%" height="15" fill="rgb(225,10,24)" fg:x="9530" fg:w="4"/><text x="84.5564%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (4 samples, 0.04%)</title><rect x="84.3064%" y="437" width="0.0354%" height="15" fill="rgb(218,109,7)" fg:x="9530" fg:w="4"/><text x="84.5564%" y="447.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="84.3064%" y="421" width="0.0354%" height="15" fill="rgb(210,20,26)" fg:x="9530" fg:w="4"/><text x="84.5564%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (52 samples, 0.46%)</title><rect x="83.9614%" y="565" width="0.4600%" height="15" fill="rgb(216,18,1)" fg:x="9491" fg:w="52"/><text x="84.2114%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (52 samples, 0.46%)</title><rect x="83.9614%" y="549" width="0.4600%" height="15" fill="rgb(206,163,23)" fg:x="9491" fg:w="52"/><text x="84.2114%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (26 samples, 0.23%)</title><rect x="84.1914%" y="533" width="0.2300%" height="15" fill="rgb(229,150,31)" fg:x="9517" fg:w="26"/><text x="84.4414%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (26 samples, 0.23%)</title><rect x="84.1914%" y="517" width="0.2300%" height="15" fill="rgb(231,10,5)" fg:x="9517" fg:w="26"/><text x="84.4414%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (24 samples, 0.21%)</title><rect x="84.2091%" y="501" width="0.2123%" height="15" fill="rgb(250,40,50)" fg:x="9519" fg:w="24"/><text x="84.4591%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (24 samples, 0.21%)</title><rect x="84.2091%" y="485" width="0.2123%" height="15" fill="rgb(217,119,7)" fg:x="9519" fg:w="24"/><text x="84.4591%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (13 samples, 0.12%)</title><rect x="84.3064%" y="469" width="0.1150%" height="15" fill="rgb(245,214,40)" fg:x="9530" fg:w="13"/><text x="84.5564%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (9 samples, 0.08%)</title><rect x="84.3418%" y="453" width="0.0796%" height="15" fill="rgb(216,187,1)" fg:x="9534" fg:w="9"/><text x="84.5918%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (7 samples, 0.06%)</title><rect x="84.3595%" y="437" width="0.0619%" height="15" fill="rgb(237,146,21)" fg:x="9536" fg:w="7"/><text x="84.6095%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="84.3595%" y="421" width="0.0619%" height="15" fill="rgb(210,174,47)" fg:x="9536" fg:w="7"/><text x="84.6095%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="84.3595%" y="405" width="0.0619%" height="15" fill="rgb(218,111,39)" fg:x="9536" fg:w="7"/><text x="84.6095%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (7 samples, 0.06%)</title><rect x="84.3595%" y="389" width="0.0619%" height="15" fill="rgb(224,95,19)" fg:x="9536" fg:w="7"/><text x="84.6095%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (7 samples, 0.06%)</title><rect x="84.3595%" y="373" width="0.0619%" height="15" fill="rgb(234,15,38)" fg:x="9536" fg:w="7"/><text x="84.6095%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (64 samples, 0.57%)</title><rect x="83.9526%" y="581" width="0.5662%" height="15" fill="rgb(246,56,12)" fg:x="9490" fg:w="64"/><text x="84.2026%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (11 samples, 0.10%)</title><rect x="84.4214%" y="565" width="0.0973%" height="15" fill="rgb(247,16,17)" fg:x="9543" fg:w="11"/><text x="84.6714%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (11 samples, 0.10%)</title><rect x="84.4214%" y="549" width="0.0973%" height="15" fill="rgb(215,151,11)" fg:x="9543" fg:w="11"/><text x="84.6714%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (11 samples, 0.10%)</title><rect x="84.4214%" y="533" width="0.0973%" height="15" fill="rgb(225,16,24)" fg:x="9543" fg:w="11"/><text x="84.6714%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (11 samples, 0.10%)</title><rect x="84.4214%" y="517" width="0.0973%" height="15" fill="rgb(217,117,5)" fg:x="9543" fg:w="11"/><text x="84.6714%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 0.84%)</title><rect x="83.7314%" y="725" width="0.8404%" height="15" fill="rgb(246,187,53)" fg:x="9465" fg:w="95"/><text x="83.9814%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;revm_primitives::result::ResultAndState&gt;]&gt; (95 samples, 0.84%)</title><rect x="83.7314%" y="709" width="0.8404%" height="15" fill="rgb(241,71,40)" fg:x="9465" fg:w="95"/><text x="83.9814%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt; (95 samples, 0.84%)</title><rect x="83.7314%" y="693" width="0.8404%" height="15" fill="rgb(231,67,39)" fg:x="9465" fg:w="95"/><text x="83.9814%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (95 samples, 0.84%)</title><rect x="83.7314%" y="677" width="0.8404%" height="15" fill="rgb(222,120,24)" fg:x="9465" fg:w="95"/><text x="83.9814%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (70 samples, 0.62%)</title><rect x="83.9526%" y="661" width="0.6192%" height="15" fill="rgb(248,3,3)" fg:x="9490" fg:w="70"/><text x="84.2026%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (70 samples, 0.62%)</title><rect x="83.9526%" y="645" width="0.6192%" height="15" fill="rgb(228,218,5)" fg:x="9490" fg:w="70"/><text x="84.2026%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (70 samples, 0.62%)</title><rect x="83.9526%" y="629" width="0.6192%" height="15" fill="rgb(212,202,43)" fg:x="9490" fg:w="70"/><text x="84.2026%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.62%)</title><rect x="83.9526%" y="613" width="0.6192%" height="15" fill="rgb(235,183,2)" fg:x="9490" fg:w="70"/><text x="84.2026%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (70 samples, 0.62%)</title><rect x="83.9526%" y="597" width="0.6192%" height="15" fill="rgb(230,165,10)" fg:x="9490" fg:w="70"/><text x="84.2026%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (6 samples, 0.05%)</title><rect x="84.5188%" y="581" width="0.0531%" height="15" fill="rgb(219,54,40)" fg:x="9554" fg:w="6"/><text x="84.7688%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="84.5188%" y="565" width="0.0531%" height="15" fill="rgb(244,73,9)" fg:x="9554" fg:w="6"/><text x="84.7688%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="84.5188%" y="549" width="0.0531%" height="15" fill="rgb(212,32,45)" fg:x="9554" fg:w="6"/><text x="84.7688%" y="559.50"></text></g><g><title>__GI___libc_free (6 samples, 0.05%)</title><rect x="84.5188%" y="533" width="0.0531%" height="15" fill="rgb(205,58,31)" fg:x="9554" fg:w="6"/><text x="84.7688%" y="543.50"></text></g><g><title>_int_free (5 samples, 0.04%)</title><rect x="84.5276%" y="517" width="0.0442%" height="15" fill="rgb(250,120,43)" fg:x="9555" fg:w="5"/><text x="84.7776%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (96 samples, 0.85%)</title><rect x="83.7314%" y="773" width="0.8493%" height="15" fill="rgb(235,13,10)" fg:x="9465" fg:w="96"/><text x="83.9814%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (96 samples, 0.85%)</title><rect x="83.7314%" y="757" width="0.8493%" height="15" fill="rgb(232,219,31)" fg:x="9465" fg:w="96"/><text x="83.9814%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt; (96 samples, 0.85%)</title><rect x="83.7314%" y="741" width="0.8493%" height="15" fill="rgb(218,157,51)" fg:x="9465" fg:w="96"/><text x="83.9814%" y="751.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run (463 samples, 4.10%)</title><rect x="80.5379%" y="789" width="4.0959%" height="15" fill="rgb(211,91,52)" fg:x="9104" fg:w="463"/><text x="80.7879%" y="799.50">bloc..</text></g><g><title>std::thread::scoped::scope (6 samples, 0.05%)</title><rect x="84.5807%" y="773" width="0.0531%" height="15" fill="rgb(240,173,1)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="783.50"></text></g><g><title>std::panic::catch_unwind (6 samples, 0.05%)</title><rect x="84.5807%" y="757" width="0.0531%" height="15" fill="rgb(248,20,47)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="767.50"></text></g><g><title>std::panicking::try (6 samples, 0.05%)</title><rect x="84.5807%" y="741" width="0.0531%" height="15" fill="rgb(217,221,40)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="751.50"></text></g><g><title>std::panicking::try::do_call (6 samples, 0.05%)</title><rect x="84.5807%" y="725" width="0.0531%" height="15" fill="rgb(226,149,51)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6 samples, 0.05%)</title><rect x="84.5807%" y="709" width="0.0531%" height="15" fill="rgb(252,193,7)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="719.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (6 samples, 0.05%)</title><rect x="84.5807%" y="693" width="0.0531%" height="15" fill="rgb(205,123,0)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="703.50"></text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}} (6 samples, 0.05%)</title><rect x="84.5807%" y="677" width="0.0531%" height="15" fill="rgb(233,173,25)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="687.50"></text></g><g><title>std::thread::scoped::Scope::spawn (6 samples, 0.05%)</title><rect x="84.5807%" y="661" width="0.0531%" height="15" fill="rgb(216,63,32)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="671.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (6 samples, 0.05%)</title><rect x="84.5807%" y="645" width="0.0531%" height="15" fill="rgb(209,56,45)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="655.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (6 samples, 0.05%)</title><rect x="84.5807%" y="629" width="0.0531%" height="15" fill="rgb(226,111,49)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="639.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (6 samples, 0.05%)</title><rect x="84.5807%" y="613" width="0.0531%" height="15" fill="rgb(244,181,21)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="623.50"></text></g><g><title>__pthread_create_2_1 (6 samples, 0.05%)</title><rect x="84.5807%" y="597" width="0.0531%" height="15" fill="rgb(222,126,15)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="607.50"></text></g><g><title>allocate_stack (6 samples, 0.05%)</title><rect x="84.5807%" y="581" width="0.0531%" height="15" fill="rgb(222,95,17)" fg:x="9561" fg:w="6"/><text x="84.8307%" y="591.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.04%)</title><rect x="84.5895%" y="565" width="0.0442%" height="15" fill="rgb(254,46,5)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="575.50"></text></g><g><title>exc_page_fault (5 samples, 0.04%)</title><rect x="84.5895%" y="549" width="0.0442%" height="15" fill="rgb(236,216,35)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="559.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.04%)</title><rect x="84.5895%" y="533" width="0.0442%" height="15" fill="rgb(217,187,26)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="543.50"></text></g><g><title>lock_mm_and_find_vma (5 samples, 0.04%)</title><rect x="84.5895%" y="517" width="0.0442%" height="15" fill="rgb(207,192,25)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="527.50"></text></g><g><title>down_read_killable (5 samples, 0.04%)</title><rect x="84.5895%" y="501" width="0.0442%" height="15" fill="rgb(253,135,27)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="511.50"></text></g><g><title>rwsem_down_read_slowpath (5 samples, 0.04%)</title><rect x="84.5895%" y="485" width="0.0442%" height="15" fill="rgb(211,122,29)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="495.50"></text></g><g><title>schedule_preempt_disabled (5 samples, 0.04%)</title><rect x="84.5895%" y="469" width="0.0442%" height="15" fill="rgb(233,162,40)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="479.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="84.5895%" y="453" width="0.0442%" height="15" fill="rgb(222,184,47)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="463.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="84.5895%" y="437" width="0.0442%" height="15" fill="rgb(249,99,23)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="447.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="84.5895%" y="421" width="0.0442%" height="15" fill="rgb(214,60,12)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="431.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="84.5895%" y="405" width="0.0442%" height="15" fill="rgb(250,229,36)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="415.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.04%)</title><rect x="84.5895%" y="389" width="0.0442%" height="15" fill="rgb(232,195,10)" fg:x="9562" fg:w="5"/><text x="84.8395%" y="399.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (2 samples, 0.02%)</title><rect x="84.6426%" y="773" width="0.0177%" height="15" fill="rgb(205,213,31)" fg:x="9568" fg:w="2"/><text x="84.8926%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6 samples, 0.05%)</title><rect x="84.7222%" y="709" width="0.0531%" height="15" fill="rgb(237,43,8)" fg:x="9577" fg:w="6"/><text x="84.9722%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.05%)</title><rect x="84.7222%" y="693" width="0.0531%" height="15" fill="rgb(216,208,3)" fg:x="9577" fg:w="6"/><text x="84.9722%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.05%)</title><rect x="84.7222%" y="677" width="0.0531%" height="15" fill="rgb(228,179,44)" fg:x="9577" fg:w="6"/><text x="84.9722%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="84.7222%" y="661" width="0.0531%" height="15" fill="rgb(230,192,27)" fg:x="9577" fg:w="6"/><text x="84.9722%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="84.7222%" y="645" width="0.0531%" height="15" fill="rgb(251,30,38)" fg:x="9577" fg:w="6"/><text x="84.9722%" y="655.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="84.7222%" y="629" width="0.0531%" height="15" fill="rgb(246,55,52)" fg:x="9577" fg:w="6"/><text x="84.9722%" y="639.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="84.7311%" y="613" width="0.0442%" height="15" fill="rgb(249,79,26)" fg:x="9578" fg:w="5"/><text x="84.9811%" y="623.50"></text></g><g><title>_int_malloc (5 samples, 0.04%)</title><rect x="84.7311%" y="597" width="0.0442%" height="15" fill="rgb(220,202,16)" fg:x="9578" fg:w="5"/><text x="84.9811%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="84.7753%" y="693" width="0.0177%" height="15" fill="rgb(250,170,23)" fg:x="9583" fg:w="2"/><text x="85.0253%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="84.7753%" y="677" width="0.0177%" height="15" fill="rgb(230,7,37)" fg:x="9583" fg:w="2"/><text x="85.0253%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.02%)</title><rect x="84.7753%" y="661" width="0.0177%" height="15" fill="rgb(213,71,1)" fg:x="9583" fg:w="2"/><text x="85.0253%" y="671.50"></text></g><g><title>&lt;bitvec::domain::Domain&lt;wyz::comu::Const,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="84.7753%" y="645" width="0.0177%" height="15" fill="rgb(227,87,39)" fg:x="9583" fg:w="2"/><text x="85.0253%" y="655.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="84.8018%" y="549" width="0.0354%" height="15" fill="rgb(210,41,29)" fg:x="9586" fg:w="4"/><text x="85.0518%" y="559.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="84.8018%" y="533" width="0.0354%" height="15" fill="rgb(206,191,31)" fg:x="9586" fg:w="4"/><text x="85.0518%" y="543.50"></text></g><g><title>&lt;revm::db::in_memory_db::DbAccount as core::default::Default&gt;::default (16 samples, 0.14%)</title><rect x="84.7045%" y="757" width="0.1415%" height="15" fill="rgb(247,75,54)" fg:x="9575" fg:w="16"/><text x="84.9545%" y="767.50"></text></g><g><title>&lt;revm_primitives::state::AccountInfo as core::default::Default&gt;::default (14 samples, 0.12%)</title><rect x="84.7222%" y="741" width="0.1238%" height="15" fill="rgb(208,54,50)" fg:x="9577" fg:w="14"/><text x="84.9722%" y="751.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (14 samples, 0.12%)</title><rect x="84.7222%" y="725" width="0.1238%" height="15" fill="rgb(214,90,37)" fg:x="9577" fg:w="14"/><text x="84.9722%" y="735.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (8 samples, 0.07%)</title><rect x="84.7753%" y="709" width="0.0708%" height="15" fill="rgb(220,132,6)" fg:x="9583" fg:w="8"/><text x="85.0253%" y="719.50"></text></g><g><title>tap::pipe::Pipe::pipe (5 samples, 0.04%)</title><rect x="84.8018%" y="693" width="0.0442%" height="15" fill="rgb(213,167,7)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.04%)</title><rect x="84.8018%" y="677" width="0.0442%" height="15" fill="rgb(243,36,27)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.04%)</title><rect x="84.8018%" y="661" width="0.0442%" height="15" fill="rgb(235,147,12)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="84.8018%" y="645" width="0.0442%" height="15" fill="rgb(212,198,44)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="84.8018%" y="629" width="0.0442%" height="15" fill="rgb(218,68,50)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.04%)</title><rect x="84.8018%" y="613" width="0.0442%" height="15" fill="rgb(224,79,48)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="84.8018%" y="597" width="0.0442%" height="15" fill="rgb(213,191,50)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="84.8018%" y="581" width="0.0442%" height="15" fill="rgb(254,146,10)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="591.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="84.8018%" y="565" width="0.0442%" height="15" fill="rgb(215,175,11)" fg:x="9586" fg:w="5"/><text x="85.0518%" y="575.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="84.8638%" y="645" width="0.0177%" height="15" fill="rgb(207,49,7)" fg:x="9593" fg:w="2"/><text x="85.1138%" y="655.50"></text></g><g><title>&lt;revm::db::in_memory_db::DbAccount as core::convert::From&lt;revm_primitives::state::AccountInfo&gt;&gt;::from (26 samples, 0.23%)</title><rect x="84.6603%" y="773" width="0.2300%" height="15" fill="rgb(234,144,29)" fg:x="9570" fg:w="26"/><text x="84.9103%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (5 samples, 0.04%)</title><rect x="84.8461%" y="757" width="0.0442%" height="15" fill="rgb(213,222,48)" fg:x="9591" fg:w="5"/><text x="85.0961%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (5 samples, 0.04%)</title><rect x="84.8461%" y="741" width="0.0442%" height="15" fill="rgb(222,8,6)" fg:x="9591" fg:w="5"/><text x="85.0961%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (5 samples, 0.04%)</title><rect x="84.8461%" y="725" width="0.0442%" height="15" fill="rgb(221,114,49)" fg:x="9591" fg:w="5"/><text x="85.0961%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (5 samples, 0.04%)</title><rect x="84.8461%" y="709" width="0.0442%" height="15" fill="rgb(250,140,42)" fg:x="9591" fg:w="5"/><text x="85.0961%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (5 samples, 0.04%)</title><rect x="84.8461%" y="693" width="0.0442%" height="15" fill="rgb(250,150,27)" fg:x="9591" fg:w="5"/><text x="85.0961%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="84.8461%" y="677" width="0.0442%" height="15" fill="rgb(252,159,3)" fg:x="9591" fg:w="5"/><text x="85.0961%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="84.8461%" y="661" width="0.0442%" height="15" fill="rgb(241,182,3)" fg:x="9591" fg:w="5"/><text x="85.0961%" y="671.50"></text></g><g><title>&lt;revm_primitives::bytecode::Bytecode as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="84.8903%" y="773" width="0.0177%" height="15" fill="rgb(236,3,9)" fg:x="9596" fg:w="2"/><text x="85.1403%" y="783.50"></text></g><g><title>revm_primitives::bytecode::Bytecode::new (2 samples, 0.02%)</title><rect x="84.8903%" y="757" width="0.0177%" height="15" fill="rgb(223,227,51)" fg:x="9596" fg:w="2"/><text x="85.1403%" y="767.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (2 samples, 0.02%)</title><rect x="84.8903%" y="741" width="0.0177%" height="15" fill="rgb(232,133,30)" fg:x="9596" fg:w="2"/><text x="85.1403%" y="751.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (2 samples, 0.02%)</title><rect x="84.8903%" y="725" width="0.0177%" height="15" fill="rgb(209,93,27)" fg:x="9596" fg:w="2"/><text x="85.1403%" y="735.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (2 samples, 0.02%)</title><rect x="84.8903%" y="709" width="0.0177%" height="15" fill="rgb(208,108,34)" fg:x="9596" fg:w="2"/><text x="85.1403%" y="719.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::partial_tail (2 samples, 0.02%)</title><rect x="84.8903%" y="693" width="0.0177%" height="15" fill="rgb(215,189,13)" fg:x="9596" fg:w="2"/><text x="85.1403%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.04%)</title><rect x="84.9168%" y="693" width="0.0354%" height="15" fill="rgb(206,88,23)" fg:x="9599" fg:w="4"/><text x="85.1668%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.04%)</title><rect x="84.9168%" y="677" width="0.0354%" height="15" fill="rgb(240,173,0)" fg:x="9599" fg:w="4"/><text x="85.1668%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.04%)</title><rect x="84.9168%" y="661" width="0.0354%" height="15" fill="rgb(223,106,52)" fg:x="9599" fg:w="4"/><text x="85.1668%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.03%)</title><rect x="84.9257%" y="645" width="0.0265%" height="15" fill="rgb(206,130,16)" fg:x="9600" fg:w="3"/><text x="85.1757%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7 samples, 0.06%)</title><rect x="84.9168%" y="741" width="0.0619%" height="15" fill="rgb(220,54,25)" fg:x="9599" fg:w="7"/><text x="85.1668%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.06%)</title><rect x="84.9168%" y="725" width="0.0619%" height="15" fill="rgb(210,4,38)" fg:x="9599" fg:w="7"/><text x="85.1668%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.06%)</title><rect x="84.9168%" y="709" width="0.0619%" height="15" fill="rgb(238,94,39)" fg:x="9599" fg:w="7"/><text x="85.1668%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="84.9522%" y="693" width="0.0265%" height="15" fill="rgb(234,124,34)" fg:x="9603" fg:w="3"/><text x="85.2022%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="84.9611%" y="677" width="0.0177%" height="15" fill="rgb(221,91,40)" fg:x="9604" fg:w="2"/><text x="85.2111%" y="687.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="84.9876%" y="629" width="0.0177%" height="15" fill="rgb(246,53,28)" fg:x="9607" fg:w="2"/><text x="85.2376%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.04%)</title><rect x="84.9788%" y="741" width="0.0354%" height="15" fill="rgb(229,109,7)" fg:x="9606" fg:w="4"/><text x="85.2288%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="84.9788%" y="725" width="0.0354%" height="15" fill="rgb(249,117,8)" fg:x="9606" fg:w="4"/><text x="85.2288%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="84.9788%" y="709" width="0.0354%" height="15" fill="rgb(210,181,1)" fg:x="9606" fg:w="4"/><text x="85.2288%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="84.9788%" y="693" width="0.0354%" height="15" fill="rgb(211,66,1)" fg:x="9606" fg:w="4"/><text x="85.2288%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="84.9788%" y="677" width="0.0354%" height="15" fill="rgb(221,90,14)" fg:x="9606" fg:w="4"/><text x="85.2288%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="84.9788%" y="661" width="0.0354%" height="15" fill="rgb(219,222,44)" fg:x="9606" fg:w="4"/><text x="85.2288%" y="671.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="84.9788%" y="645" width="0.0354%" height="15" fill="rgb(246,34,33)" fg:x="9606" fg:w="4"/><text x="85.2288%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (13 samples, 0.12%)</title><rect x="84.9080%" y="773" width="0.1150%" height="15" fill="rgb(227,135,41)" fg:x="9598" fg:w="13"/><text x="85.1580%" y="783.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (13 samples, 0.12%)</title><rect x="84.9080%" y="757" width="0.1150%" height="15" fill="rgb(226,15,14)" fg:x="9598" fg:w="13"/><text x="85.1580%" y="767.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="85.0318%" y="597" width="0.0177%" height="15" fill="rgb(236,148,47)" fg:x="9612" fg:w="2"/><text x="85.2818%" y="607.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="85.0318%" y="581" width="0.0177%" height="15" fill="rgb(233,162,52)" fg:x="9612" fg:w="2"/><text x="85.2818%" y="591.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="85.0318%" y="565" width="0.0177%" height="15" fill="rgb(244,35,28)" fg:x="9612" fg:w="2"/><text x="85.2818%" y="575.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="85.0318%" y="549" width="0.0177%" height="15" fill="rgb(205,121,10)" fg:x="9612" fg:w="2"/><text x="85.2818%" y="559.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="85.0318%" y="533" width="0.0177%" height="15" fill="rgb(250,58,18)" fg:x="9612" fg:w="2"/><text x="85.2818%" y="543.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="85.0318%" y="517" width="0.0177%" height="15" fill="rgb(216,37,13)" fg:x="9612" fg:w="2"/><text x="85.2818%" y="527.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="85.0318%" y="501" width="0.0177%" height="15" fill="rgb(221,215,42)" fg:x="9612" fg:w="2"/><text x="85.2818%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.04%)</title><rect x="85.0230%" y="757" width="0.0354%" height="15" fill="rgb(217,214,19)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.04%)</title><rect x="85.0230%" y="741" width="0.0354%" height="15" fill="rgb(233,139,13)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="85.0230%" y="725" width="0.0354%" height="15" fill="rgb(247,168,23)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.04%)</title><rect x="85.0230%" y="709" width="0.0354%" height="15" fill="rgb(207,202,1)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="719.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.04%)</title><rect x="85.0230%" y="693" width="0.0354%" height="15" fill="rgb(220,155,48)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="703.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.04%)</title><rect x="85.0230%" y="677" width="0.0354%" height="15" fill="rgb(250,43,26)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="687.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.04%)</title><rect x="85.0230%" y="661" width="0.0354%" height="15" fill="rgb(212,190,23)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="671.50"></text></g><g><title>_int_realloc (4 samples, 0.04%)</title><rect x="85.0230%" y="645" width="0.0354%" height="15" fill="rgb(216,39,24)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="655.50"></text></g><g><title>__GI_memcpy (4 samples, 0.04%)</title><rect x="85.0230%" y="629" width="0.0354%" height="15" fill="rgb(252,113,16)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="85.0230%" y="613" width="0.0354%" height="15" fill="rgb(208,113,19)" fg:x="9611" fg:w="4"/><text x="85.2730%" y="623.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.02%)</title><rect x="85.1026%" y="613" width="0.0177%" height="15" fill="rgb(234,107,25)" fg:x="9620" fg:w="2"/><text x="85.3526%" y="623.50"></text></g><g><title>charge_memcg (2 samples, 0.02%)</title><rect x="85.1026%" y="597" width="0.0177%" height="15" fill="rgb(234,217,51)" fg:x="9620" fg:w="2"/><text x="85.3526%" y="607.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="85.1203%" y="613" width="0.0177%" height="15" fill="rgb(251,29,42)" fg:x="9622" fg:w="2"/><text x="85.3703%" y="623.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.03%)</title><rect x="85.1380%" y="613" width="0.0265%" height="15" fill="rgb(221,62,51)" fg:x="9624" fg:w="3"/><text x="85.3880%" y="623.50"></text></g><g><title>do_anonymous_page (11 samples, 0.10%)</title><rect x="85.0938%" y="629" width="0.0973%" height="15" fill="rgb(240,192,43)" fg:x="9619" fg:w="11"/><text x="85.3438%" y="639.50"></text></g><g><title>vma_alloc_folio (3 samples, 0.03%)</title><rect x="85.1645%" y="613" width="0.0265%" height="15" fill="rgb(224,157,47)" fg:x="9627" fg:w="3"/><text x="85.4145%" y="623.50"></text></g><g><title>__folio_alloc (3 samples, 0.03%)</title><rect x="85.1645%" y="597" width="0.0265%" height="15" fill="rgb(226,84,45)" fg:x="9627" fg:w="3"/><text x="85.4145%" y="607.50"></text></g><g><title>__alloc_pages (3 samples, 0.03%)</title><rect x="85.1645%" y="581" width="0.0265%" height="15" fill="rgb(208,207,23)" fg:x="9627" fg:w="3"/><text x="85.4145%" y="591.50"></text></g><g><title>get_page_from_freelist (3 samples, 0.03%)</title><rect x="85.1645%" y="565" width="0.0265%" height="15" fill="rgb(253,34,51)" fg:x="9627" fg:w="3"/><text x="85.4145%" y="575.50"></text></g><g><title>handle_mm_fault (15 samples, 0.13%)</title><rect x="85.0761%" y="677" width="0.1327%" height="15" fill="rgb(227,26,34)" fg:x="9617" fg:w="15"/><text x="85.3261%" y="687.50"></text></g><g><title>__handle_mm_fault (14 samples, 0.12%)</title><rect x="85.0849%" y="661" width="0.1238%" height="15" fill="rgb(245,75,19)" fg:x="9618" fg:w="14"/><text x="85.3349%" y="671.50"></text></g><g><title>handle_pte_fault (14 samples, 0.12%)</title><rect x="85.0849%" y="645" width="0.1238%" height="15" fill="rgb(250,191,31)" fg:x="9618" fg:w="14"/><text x="85.3349%" y="655.50"></text></g><g><title>pte_offset_map_nolock (2 samples, 0.02%)</title><rect x="85.1911%" y="629" width="0.0177%" height="15" fill="rgb(224,11,50)" fg:x="9630" fg:w="2"/><text x="85.4411%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (23 samples, 0.20%)</title><rect x="85.0230%" y="773" width="0.2035%" height="15" fill="rgb(231,171,7)" fg:x="9611" fg:w="23"/><text x="85.2730%" y="783.50"></text></g><g><title>core::ptr::write (19 samples, 0.17%)</title><rect x="85.0584%" y="757" width="0.1681%" height="15" fill="rgb(252,214,10)" fg:x="9615" fg:w="19"/><text x="85.3084%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.17%)</title><rect x="85.0584%" y="741" width="0.1681%" height="15" fill="rgb(249,45,46)" fg:x="9615" fg:w="19"/><text x="85.3084%" y="751.50"></text></g><g><title>asm_exc_page_fault (17 samples, 0.15%)</title><rect x="85.0761%" y="725" width="0.1504%" height="15" fill="rgb(240,173,7)" fg:x="9617" fg:w="17"/><text x="85.3261%" y="735.50"></text></g><g><title>exc_page_fault (17 samples, 0.15%)</title><rect x="85.0761%" y="709" width="0.1504%" height="15" fill="rgb(235,214,13)" fg:x="9617" fg:w="17"/><text x="85.3261%" y="719.50"></text></g><g><title>do_user_addr_fault (17 samples, 0.15%)</title><rect x="85.0761%" y="693" width="0.1504%" height="15" fill="rgb(245,156,8)" fg:x="9617" fg:w="17"/><text x="85.3261%" y="703.50"></text></g><g><title>alloy_primitives::bits::fixed::FixedBytes&lt;_&gt;::left_padding_from (13 samples, 0.12%)</title><rect x="85.2265%" y="773" width="0.1150%" height="15" fill="rgb(235,46,12)" fg:x="9634" fg:w="13"/><text x="85.4765%" y="783.50"></text></g><g><title>alloy_primitives::bytes_::Bytes::copy_from_slice (5 samples, 0.04%)</title><rect x="85.3415%" y="773" width="0.0442%" height="15" fill="rgb(221,81,14)" fg:x="9647" fg:w="5"/><text x="85.5915%" y="783.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (3 samples, 0.03%)</title><rect x="85.3592%" y="757" width="0.0265%" height="15" fill="rgb(238,207,9)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.03%)</title><rect x="85.3592%" y="741" width="0.0265%" height="15" fill="rgb(224,129,35)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="85.3592%" y="725" width="0.0265%" height="15" fill="rgb(243,218,34)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="85.3592%" y="709" width="0.0265%" height="15" fill="rgb(220,166,13)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="85.3592%" y="693" width="0.0265%" height="15" fill="rgb(227,167,49)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="85.3592%" y="677" width="0.0265%" height="15" fill="rgb(234,142,12)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="85.3592%" y="661" width="0.0265%" height="15" fill="rgb(207,100,48)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="85.3592%" y="645" width="0.0265%" height="15" fill="rgb(210,25,14)" fg:x="9649" fg:w="3"/><text x="85.6092%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="85.3680%" y="629" width="0.0177%" height="15" fill="rgb(246,116,27)" fg:x="9650" fg:w="2"/><text x="85.6180%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="85.3680%" y="613" width="0.0177%" height="15" fill="rgb(214,193,42)" fg:x="9650" fg:w="2"/><text x="85.6180%" y="623.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="85.3680%" y="597" width="0.0177%" height="15" fill="rgb(214,122,8)" fg:x="9650" fg:w="2"/><text x="85.6180%" y="607.50"></text></g><g><title>tiny_keccak::Buffer::setout (2 samples, 0.02%)</title><rect x="85.4034%" y="661" width="0.0177%" height="15" fill="rgb(244,173,18)" fg:x="9654" fg:w="2"/><text x="85.6534%" y="671.50"></text></g><g><title>tiny_keccak::Buffer::execute (2 samples, 0.02%)</title><rect x="85.4034%" y="645" width="0.0177%" height="15" fill="rgb(232,68,19)" fg:x="9654" fg:w="2"/><text x="85.6534%" y="655.50"></text></g><g><title>tiny_keccak::Buffer::setout::_{{closure}} (2 samples, 0.02%)</title><rect x="85.4034%" y="629" width="0.0177%" height="15" fill="rgb(236,224,1)" fg:x="9654" fg:w="2"/><text x="85.6534%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.02%)</title><rect x="85.4034%" y="613" width="0.0177%" height="15" fill="rgb(240,11,8)" fg:x="9654" fg:w="2"/><text x="85.6534%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="85.4034%" y="597" width="0.0177%" height="15" fill="rgb(244,159,20)" fg:x="9654" fg:w="2"/><text x="85.6534%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="85.4034%" y="581" width="0.0177%" height="15" fill="rgb(240,223,54)" fg:x="9654" fg:w="2"/><text x="85.6534%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.04%)</title><rect x="86.0580%" y="597" width="0.0354%" height="15" fill="rgb(237,146,5)" fg:x="9728" fg:w="4"/><text x="86.3080%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.04%)</title><rect x="86.0580%" y="581" width="0.0354%" height="15" fill="rgb(218,221,32)" fg:x="9728" fg:w="4"/><text x="86.3080%" y="591.50"></text></g><g><title>alloy_primitives::utils::keccak256::keccak256 (105 samples, 0.93%)</title><rect x="85.3857%" y="757" width="0.9289%" height="15" fill="rgb(244,96,26)" fg:x="9652" fg:w="105"/><text x="85.6357%" y="767.50"></text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_raw (104 samples, 0.92%)</title><rect x="85.3946%" y="741" width="0.9200%" height="15" fill="rgb(245,184,37)" fg:x="9653" fg:w="104"/><text x="85.6446%" y="751.50"></text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_array (104 samples, 0.92%)</title><rect x="85.3946%" y="725" width="0.9200%" height="15" fill="rgb(248,91,47)" fg:x="9653" fg:w="104"/><text x="85.6446%" y="735.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (104 samples, 0.92%)</title><rect x="85.3946%" y="709" width="0.9200%" height="15" fill="rgb(243,199,8)" fg:x="9653" fg:w="104"/><text x="85.6446%" y="719.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::finalize (103 samples, 0.91%)</title><rect x="85.4034%" y="693" width="0.9112%" height="15" fill="rgb(249,12,15)" fg:x="9654" fg:w="103"/><text x="85.6534%" y="703.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::squeeze (103 samples, 0.91%)</title><rect x="85.4034%" y="677" width="0.9112%" height="15" fill="rgb(245,97,12)" fg:x="9654" fg:w="103"/><text x="85.6534%" y="687.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::fill_block (101 samples, 0.89%)</title><rect x="85.4211%" y="661" width="0.8935%" height="15" fill="rgb(244,61,1)" fg:x="9656" fg:w="101"/><text x="85.6711%" y="671.50"></text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::keccak (101 samples, 0.89%)</title><rect x="85.4211%" y="645" width="0.8935%" height="15" fill="rgb(222,194,10)" fg:x="9656" fg:w="101"/><text x="85.6711%" y="655.50"></text></g><g><title>&lt;tiny_keccak::keccakf::KeccakF as tiny_keccak::Permutation&gt;::execute (101 samples, 0.89%)</title><rect x="85.4211%" y="629" width="0.8935%" height="15" fill="rgb(226,178,8)" fg:x="9656" fg:w="101"/><text x="85.6711%" y="639.50"></text></g><g><title>tiny_keccak::keccakf::keccakf (101 samples, 0.89%)</title><rect x="85.4211%" y="613" width="0.8935%" height="15" fill="rgb(241,32,34)" fg:x="9656" fg:w="101"/><text x="85.6711%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25 samples, 0.22%)</title><rect x="86.0934%" y="597" width="0.2212%" height="15" fill="rgb(254,26,6)" fg:x="9732" fg:w="25"/><text x="86.3434%" y="607.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="86.3146%" y="709" width="0.0177%" height="15" fill="rgb(249,71,11)" fg:x="9757" fg:w="2"/><text x="86.5646%" y="719.50"></text></g><g><title>alloy_primitives::utils::keccak256 (109 samples, 0.96%)</title><rect x="85.3857%" y="773" width="0.9643%" height="15" fill="rgb(232,170,27)" fg:x="9652" fg:w="109"/><text x="85.6357%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (4 samples, 0.04%)</title><rect x="86.3146%" y="757" width="0.0354%" height="15" fill="rgb(214,223,17)" fg:x="9757" fg:w="4"/><text x="86.5646%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (4 samples, 0.04%)</title><rect x="86.3146%" y="741" width="0.0354%" height="15" fill="rgb(250,18,15)" fg:x="9757" fg:w="4"/><text x="86.5646%" y="751.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="86.3146%" y="725" width="0.0354%" height="15" fill="rgb(212,153,51)" fg:x="9757" fg:w="4"/><text x="86.5646%" y="735.50"></text></g><g><title>block_stm_revm::examples::erc20::generate::_{{closure}} (5 samples, 0.04%)</title><rect x="86.3500%" y="613" width="0.0442%" height="15" fill="rgb(219,194,12)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="623.50"></text></g><g><title>block_stm_revm::examples::erc20::random_address (5 samples, 0.04%)</title><rect x="86.3500%" y="597" width="0.0442%" height="15" fill="rgb(212,58,17)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="607.50"></text></g><g><title>rand::random (5 samples, 0.04%)</title><rect x="86.3500%" y="581" width="0.0442%" height="15" fill="rgb(254,5,10)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="591.50"></text></g><g><title>rand::rng::Rng::gen (5 samples, 0.04%)</title><rect x="86.3500%" y="565" width="0.0442%" height="15" fill="rgb(246,91,7)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="575.50"></text></g><g><title>rand::distributions::other::_&lt;impl rand::distributions::distribution::Distribution&lt;[T: _]&gt; for rand::distributions::Standard&gt;::sample (5 samples, 0.04%)</title><rect x="86.3500%" y="549" width="0.0442%" height="15" fill="rgb(218,108,49)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="559.50"></text></g><g><title>rand::rng::Rng::gen (5 samples, 0.04%)</title><rect x="86.3500%" y="533" width="0.0442%" height="15" fill="rgb(238,123,20)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="543.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u8&gt; for rand::distributions::Standard&gt;::sample (5 samples, 0.04%)</title><rect x="86.3500%" y="517" width="0.0442%" height="15" fill="rgb(231,69,23)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="527.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (5 samples, 0.04%)</title><rect x="86.3500%" y="501" width="0.0442%" height="15" fill="rgb(230,209,3)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="511.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (5 samples, 0.04%)</title><rect x="86.3500%" y="485" width="0.0442%" height="15" fill="rgb(231,19,0)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="495.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (5 samples, 0.04%)</title><rect x="86.3500%" y="469" width="0.0442%" height="15" fill="rgb(226,192,25)" fg:x="9761" fg:w="5"/><text x="86.6000%" y="479.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (4 samples, 0.04%)</title><rect x="86.3588%" y="453" width="0.0354%" height="15" fill="rgb(223,175,53)" fg:x="9762" fg:w="4"/><text x="86.6088%" y="463.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4 samples, 0.04%)</title><rect x="86.3588%" y="437" width="0.0354%" height="15" fill="rgb(248,35,51)" fg:x="9762" fg:w="4"/><text x="86.6088%" y="447.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (4 samples, 0.04%)</title><rect x="86.3588%" y="421" width="0.0354%" height="15" fill="rgb(230,37,26)" fg:x="9762" fg:w="4"/><text x="86.6088%" y="431.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (4 samples, 0.04%)</title><rect x="86.3588%" y="405" width="0.0354%" height="15" fill="rgb(206,120,22)" fg:x="9762" fg:w="4"/><text x="86.6088%" y="415.50"></text></g><g><title>rand_chacha::guts::round (4 samples, 0.04%)</title><rect x="86.3588%" y="389" width="0.0354%" height="15" fill="rgb(207,165,28)" fg:x="9762" fg:w="4"/><text x="86.6088%" y="399.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.02%)</title><rect x="86.3765%" y="373" width="0.0177%" height="15" fill="rgb(226,23,46)" fg:x="9764" fg:w="2"/><text x="86.6265%" y="383.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.02%)</title><rect x="86.3765%" y="357" width="0.0177%" height="15" fill="rgb(208,130,44)" fg:x="9764" fg:w="2"/><text x="86.6265%" y="367.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.02%)</title><rect x="86.3765%" y="341" width="0.0177%" height="15" fill="rgb(231,67,8)" fg:x="9764" fg:w="2"/><text x="86.6265%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.09%)</title><rect x="86.3500%" y="773" width="0.0885%" height="15" fill="rgb(205,183,22)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.09%)</title><rect x="86.3500%" y="757" width="0.0885%" height="15" fill="rgb(224,47,9)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.09%)</title><rect x="86.3500%" y="741" width="0.0885%" height="15" fill="rgb(250,183,49)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.09%)</title><rect x="86.3500%" y="725" width="0.0885%" height="15" fill="rgb(220,151,39)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.09%)</title><rect x="86.3500%" y="709" width="0.0885%" height="15" fill="rgb(220,118,20)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (10 samples, 0.09%)</title><rect x="86.3500%" y="693" width="0.0885%" height="15" fill="rgb(231,65,51)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.09%)</title><rect x="86.3500%" y="677" width="0.0885%" height="15" fill="rgb(253,125,37)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.09%)</title><rect x="86.3500%" y="661" width="0.0885%" height="15" fill="rgb(232,102,6)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.09%)</title><rect x="86.3500%" y="645" width="0.0885%" height="15" fill="rgb(251,105,13)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (10 samples, 0.09%)</title><rect x="86.3500%" y="629" width="0.0885%" height="15" fill="rgb(222,179,29)" fg:x="9761" fg:w="10"/><text x="86.6000%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.04%)</title><rect x="86.3942%" y="613" width="0.0442%" height="15" fill="rgb(229,180,53)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (5 samples, 0.04%)</title><rect x="86.3942%" y="597" width="0.0442%" height="15" fill="rgb(238,104,13)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="607.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="86.3942%" y="581" width="0.0442%" height="15" fill="rgb(210,130,5)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="591.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.04%)</title><rect x="86.3942%" y="565" width="0.0442%" height="15" fill="rgb(233,87,49)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="575.50"></text></g><g><title>exc_page_fault (5 samples, 0.04%)</title><rect x="86.3942%" y="549" width="0.0442%" height="15" fill="rgb(243,34,9)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="559.50"></text></g><g><title>irqentry_exit (5 samples, 0.04%)</title><rect x="86.3942%" y="533" width="0.0442%" height="15" fill="rgb(235,225,10)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="543.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.04%)</title><rect x="86.3942%" y="517" width="0.0442%" height="15" fill="rgb(212,0,30)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="527.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.04%)</title><rect x="86.3942%" y="501" width="0.0442%" height="15" fill="rgb(211,177,0)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="511.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.04%)</title><rect x="86.3942%" y="485" width="0.0442%" height="15" fill="rgb(225,220,11)" fg:x="9766" fg:w="5"/><text x="86.6442%" y="495.50"></text></g><g><title>schedule (4 samples, 0.04%)</title><rect x="86.4030%" y="469" width="0.0354%" height="15" fill="rgb(215,10,13)" fg:x="9767" fg:w="4"/><text x="86.6530%" y="479.50"></text></g><g><title>__schedule (4 samples, 0.04%)</title><rect x="86.4030%" y="453" width="0.0354%" height="15" fill="rgb(240,177,14)" fg:x="9767" fg:w="4"/><text x="86.6530%" y="463.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.04%)</title><rect x="86.4030%" y="437" width="0.0354%" height="15" fill="rgb(243,7,39)" fg:x="9767" fg:w="4"/><text x="86.6530%" y="447.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.04%)</title><rect x="86.4030%" y="421" width="0.0354%" height="15" fill="rgb(212,99,0)" fg:x="9767" fg:w="4"/><text x="86.6530%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="86.4738%" y="661" width="0.0177%" height="15" fill="rgb(225,162,48)" fg:x="9775" fg:w="2"/><text x="86.7238%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="86.4738%" y="645" width="0.0177%" height="15" fill="rgb(246,16,25)" fg:x="9775" fg:w="2"/><text x="86.7238%" y="655.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="86.4650%" y="709" width="0.0442%" height="15" fill="rgb(220,150,2)" fg:x="9774" fg:w="5"/><text x="86.7150%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="86.4650%" y="693" width="0.0442%" height="15" fill="rgb(237,113,11)" fg:x="9774" fg:w="5"/><text x="86.7150%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="86.4650%" y="677" width="0.0442%" height="15" fill="rgb(236,70,20)" fg:x="9774" fg:w="5"/><text x="86.7150%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="86.4915%" y="661" width="0.0177%" height="15" fill="rgb(234,94,7)" fg:x="9777" fg:w="2"/><text x="86.7415%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="86.5092%" y="629" width="0.0177%" height="15" fill="rgb(250,221,0)" fg:x="9779" fg:w="2"/><text x="86.7592%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="86.5092%" y="613" width="0.0177%" height="15" fill="rgb(245,149,46)" fg:x="9779" fg:w="2"/><text x="86.7592%" y="623.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="86.5092%" y="597" width="0.0177%" height="15" fill="rgb(215,37,27)" fg:x="9779" fg:w="2"/><text x="86.7592%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="86.5092%" y="581" width="0.0177%" height="15" fill="rgb(232,65,3)" fg:x="9779" fg:w="2"/><text x="86.7592%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="86.5092%" y="565" width="0.0177%" height="15" fill="rgb(214,2,16)" fg:x="9779" fg:w="2"/><text x="86.7592%" y="575.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="86.5092%" y="693" width="0.0354%" height="15" fill="rgb(227,131,50)" fg:x="9779" fg:w="4"/><text x="86.7592%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="86.5092%" y="677" width="0.0354%" height="15" fill="rgb(247,131,45)" fg:x="9779" fg:w="4"/><text x="86.7592%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="86.5092%" y="661" width="0.0354%" height="15" fill="rgb(215,97,47)" fg:x="9779" fg:w="4"/><text x="86.7592%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="86.5092%" y="645" width="0.0354%" height="15" fill="rgb(233,143,12)" fg:x="9779" fg:w="4"/><text x="86.7592%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.02%)</title><rect x="86.5269%" y="629" width="0.0177%" height="15" fill="rgb(222,57,17)" fg:x="9781" fg:w="2"/><text x="86.7769%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="86.5269%" y="613" width="0.0177%" height="15" fill="rgb(214,119,38)" fg:x="9781" fg:w="2"/><text x="86.7769%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="86.5269%" y="597" width="0.0177%" height="15" fill="rgb(217,28,47)" fg:x="9781" fg:w="2"/><text x="86.7769%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="86.5269%" y="581" width="0.0177%" height="15" fill="rgb(231,14,52)" fg:x="9781" fg:w="2"/><text x="86.7769%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.09%)</title><rect x="86.4650%" y="741" width="0.0885%" height="15" fill="rgb(220,158,18)" fg:x="9774" fg:w="10"/><text x="86.7150%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.09%)</title><rect x="86.4650%" y="725" width="0.0885%" height="15" fill="rgb(222,143,46)" fg:x="9774" fg:w="10"/><text x="86.7150%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="86.5092%" y="709" width="0.0442%" height="15" fill="rgb(227,165,5)" fg:x="9779" fg:w="5"/><text x="86.7592%" y="719.50"></text></g><g><title>__folio_throttle_swaprate (4 samples, 0.04%)</title><rect x="86.6684%" y="517" width="0.0354%" height="15" fill="rgb(216,222,49)" fg:x="9797" fg:w="4"/><text x="86.9184%" y="527.50"></text></g><g><title>blk_cgroup_congested (3 samples, 0.03%)</title><rect x="86.6773%" y="501" width="0.0265%" height="15" fill="rgb(238,73,39)" fg:x="9798" fg:w="3"/><text x="86.9273%" y="511.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.03%)</title><rect x="86.7215%" y="485" width="0.0265%" height="15" fill="rgb(252,115,9)" fg:x="9803" fg:w="3"/><text x="86.9715%" y="495.50"></text></g><g><title>__mem_cgroup_charge (6 samples, 0.05%)</title><rect x="86.7038%" y="517" width="0.0531%" height="15" fill="rgb(238,202,4)" fg:x="9801" fg:w="6"/><text x="86.9538%" y="527.50"></text></g><g><title>charge_memcg (5 samples, 0.04%)</title><rect x="86.7127%" y="501" width="0.0442%" height="15" fill="rgb(252,153,44)" fg:x="9802" fg:w="5"/><text x="86.9627%" y="511.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.02%)</title><rect x="86.7569%" y="517" width="0.0177%" height="15" fill="rgb(235,128,27)" fg:x="9807" fg:w="2"/><text x="87.0069%" y="527.50"></text></g><g><title>_raw_spin_lock (9 samples, 0.08%)</title><rect x="86.7746%" y="517" width="0.0796%" height="15" fill="rgb(221,121,47)" fg:x="9809" fg:w="9"/><text x="87.0246%" y="527.50"></text></g><g><title>lru_add_fn (2 samples, 0.02%)</title><rect x="86.8808%" y="469" width="0.0177%" height="15" fill="rgb(247,211,47)" fg:x="9821" fg:w="2"/><text x="87.1308%" y="479.50"></text></g><g><title>folio_add_lru_vma (5 samples, 0.04%)</title><rect x="86.8631%" y="517" width="0.0442%" height="15" fill="rgb(252,47,49)" fg:x="9819" fg:w="5"/><text x="87.1131%" y="527.50"></text></g><g><title>folio_add_lru (5 samples, 0.04%)</title><rect x="86.8631%" y="501" width="0.0442%" height="15" fill="rgb(219,119,53)" fg:x="9819" fg:w="5"/><text x="87.1131%" y="511.50"></text></g><g><title>folio_batch_move_lru (4 samples, 0.04%)</title><rect x="86.8719%" y="485" width="0.0354%" height="15" fill="rgb(243,165,53)" fg:x="9820" fg:w="4"/><text x="87.1219%" y="495.50"></text></g><g><title>_raw_spin_trylock (3 samples, 0.03%)</title><rect x="86.9427%" y="453" width="0.0265%" height="15" fill="rgb(230,12,35)" fg:x="9828" fg:w="3"/><text x="87.1927%" y="463.50"></text></g><g><title>clear_page_erms (2 samples, 0.02%)</title><rect x="86.9692%" y="453" width="0.0177%" height="15" fill="rgb(239,57,49)" fg:x="9831" fg:w="2"/><text x="87.2192%" y="463.50"></text></g><g><title>__alloc_pages (15 samples, 0.13%)</title><rect x="86.9338%" y="485" width="0.1327%" height="15" fill="rgb(231,154,7)" fg:x="9827" fg:w="15"/><text x="87.1838%" y="495.50"></text></g><g><title>get_page_from_freelist (15 samples, 0.13%)</title><rect x="86.9338%" y="469" width="0.1327%" height="15" fill="rgb(248,81,34)" fg:x="9827" fg:w="15"/><text x="87.1838%" y="479.50"></text></g><g><title>rmqueue (9 samples, 0.08%)</title><rect x="86.9869%" y="453" width="0.0796%" height="15" fill="rgb(247,9,5)" fg:x="9833" fg:w="9"/><text x="87.2369%" y="463.50"></text></g><g><title>__rmqueue_pcplist (8 samples, 0.07%)</title><rect x="86.9958%" y="437" width="0.0708%" height="15" fill="rgb(228,172,27)" fg:x="9834" fg:w="8"/><text x="87.2458%" y="447.50"></text></g><g><title>rmqueue_bulk (8 samples, 0.07%)</title><rect x="86.9958%" y="421" width="0.0708%" height="15" fill="rgb(230,57,44)" fg:x="9834" fg:w="8"/><text x="87.2458%" y="431.50"></text></g><g><title>__handle_mm_fault (49 samples, 0.43%)</title><rect x="86.6419%" y="565" width="0.4335%" height="15" fill="rgb(249,35,22)" fg:x="9794" fg:w="49"/><text x="86.8919%" y="575.50"></text></g><g><title>handle_pte_fault (48 samples, 0.42%)</title><rect x="86.6507%" y="549" width="0.4246%" height="15" fill="rgb(250,137,27)" fg:x="9795" fg:w="48"/><text x="86.9007%" y="559.50"></text></g><g><title>do_anonymous_page (47 samples, 0.42%)</title><rect x="86.6596%" y="533" width="0.4158%" height="15" fill="rgb(251,57,31)" fg:x="9796" fg:w="47"/><text x="86.9096%" y="543.50"></text></g><g><title>vma_alloc_folio (17 samples, 0.15%)</title><rect x="86.9250%" y="517" width="0.1504%" height="15" fill="rgb(238,60,0)" fg:x="9826" fg:w="17"/><text x="87.1750%" y="527.50"></text></g><g><title>__folio_alloc (16 samples, 0.14%)</title><rect x="86.9338%" y="501" width="0.1415%" height="15" fill="rgb(242,185,39)" fg:x="9827" fg:w="16"/><text x="87.1838%" y="511.50"></text></g><g><title>handle_mm_fault (50 samples, 0.44%)</title><rect x="86.6419%" y="581" width="0.4423%" height="15" fill="rgb(240,63,43)" fg:x="9794" fg:w="50"/><text x="86.8919%" y="591.50"></text></g><g><title>asm_exc_page_fault (56 samples, 0.50%)</title><rect x="86.6331%" y="629" width="0.4954%" height="15" fill="rgb(236,155,6)" fg:x="9793" fg:w="56"/><text x="86.8831%" y="639.50"></text></g><g><title>exc_page_fault (56 samples, 0.50%)</title><rect x="86.6331%" y="613" width="0.4954%" height="15" fill="rgb(215,11,29)" fg:x="9793" fg:w="56"/><text x="86.8831%" y="623.50"></text></g><g><title>do_user_addr_fault (56 samples, 0.50%)</title><rect x="86.6331%" y="597" width="0.4954%" height="15" fill="rgb(228,180,48)" fg:x="9793" fg:w="56"/><text x="86.8831%" y="607.50"></text></g><g><title>up_read (4 samples, 0.04%)</title><rect x="87.0931%" y="581" width="0.0354%" height="15" fill="rgb(241,102,12)" fg:x="9845" fg:w="4"/><text x="87.3431%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (72 samples, 0.64%)</title><rect x="86.5711%" y="645" width="0.6369%" height="15" fill="rgb(246,213,4)" fg:x="9786" fg:w="72"/><text x="86.8211%" y="655.50"></text></g><g><title>sync_regs (9 samples, 0.08%)</title><rect x="87.1285%" y="629" width="0.0796%" height="15" fill="rgb(218,134,35)" fg:x="9849" fg:w="9"/><text x="87.3785%" y="639.50"></text></g><g><title>charge_memcg (4 samples, 0.04%)</title><rect x="87.2346%" y="517" width="0.0354%" height="15" fill="rgb(251,117,35)" fg:x="9861" fg:w="4"/><text x="87.4846%" y="527.50"></text></g><g><title>cgroup_rstat_updated (3 samples, 0.03%)</title><rect x="87.2435%" y="501" width="0.0265%" height="15" fill="rgb(206,156,45)" fg:x="9862" fg:w="3"/><text x="87.4935%" y="511.50"></text></g><g><title>__mem_cgroup_charge (5 samples, 0.04%)</title><rect x="87.2346%" y="533" width="0.0442%" height="15" fill="rgb(218,52,27)" fg:x="9861" fg:w="5"/><text x="87.4846%" y="543.50"></text></g><g><title>_raw_spin_lock (6 samples, 0.05%)</title><rect x="87.2788%" y="533" width="0.0531%" height="15" fill="rgb(238,83,36)" fg:x="9866" fg:w="6"/><text x="87.5288%" y="543.50"></text></g><g><title>folio_add_lru_vma (2 samples, 0.02%)</title><rect x="87.3319%" y="533" width="0.0177%" height="15" fill="rgb(218,53,43)" fg:x="9872" fg:w="2"/><text x="87.5819%" y="543.50"></text></g><g><title>folio_add_lru (2 samples, 0.02%)</title><rect x="87.3319%" y="517" width="0.0177%" height="15" fill="rgb(239,54,39)" fg:x="9872" fg:w="2"/><text x="87.5819%" y="527.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.02%)</title><rect x="87.3319%" y="501" width="0.0177%" height="15" fill="rgb(212,198,13)" fg:x="9872" fg:w="2"/><text x="87.5819%" y="511.50"></text></g><g><title>do_anonymous_page (17 samples, 0.15%)</title><rect x="87.2258%" y="549" width="0.1504%" height="15" fill="rgb(234,54,46)" fg:x="9860" fg:w="17"/><text x="87.4758%" y="559.50"></text></g><g><title>vma_alloc_folio (3 samples, 0.03%)</title><rect x="87.3496%" y="533" width="0.0265%" height="15" fill="rgb(217,120,7)" fg:x="9874" fg:w="3"/><text x="87.5996%" y="543.50"></text></g><g><title>__folio_alloc (3 samples, 0.03%)</title><rect x="87.3496%" y="517" width="0.0265%" height="15" fill="rgb(246,39,15)" fg:x="9874" fg:w="3"/><text x="87.5996%" y="527.50"></text></g><g><title>__alloc_pages (3 samples, 0.03%)</title><rect x="87.3496%" y="501" width="0.0265%" height="15" fill="rgb(242,143,31)" fg:x="9874" fg:w="3"/><text x="87.5996%" y="511.50"></text></g><g><title>get_page_from_freelist (3 samples, 0.03%)</title><rect x="87.3496%" y="485" width="0.0265%" height="15" fill="rgb(252,60,24)" fg:x="9874" fg:w="3"/><text x="87.5996%" y="495.50"></text></g><g><title>rmqueue (2 samples, 0.02%)</title><rect x="87.3585%" y="469" width="0.0177%" height="15" fill="rgb(249,220,7)" fg:x="9875" fg:w="2"/><text x="87.6085%" y="479.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.02%)</title><rect x="87.3585%" y="453" width="0.0177%" height="15" fill="rgb(236,67,13)" fg:x="9875" fg:w="2"/><text x="87.6085%" y="463.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.02%)</title><rect x="87.3585%" y="437" width="0.0177%" height="15" fill="rgb(210,62,39)" fg:x="9875" fg:w="2"/><text x="87.6085%" y="447.50"></text></g><g><title>__handle_mm_fault (19 samples, 0.17%)</title><rect x="87.2169%" y="581" width="0.1681%" height="15" fill="rgb(219,122,53)" fg:x="9859" fg:w="19"/><text x="87.4669%" y="591.50"></text></g><g><title>handle_pte_fault (18 samples, 0.16%)</title><rect x="87.2258%" y="565" width="0.1592%" height="15" fill="rgb(218,87,25)" fg:x="9860" fg:w="18"/><text x="87.4758%" y="575.50"></text></g><g><title>handle_mm_fault (20 samples, 0.18%)</title><rect x="87.2169%" y="597" width="0.1769%" height="15" fill="rgb(234,179,48)" fg:x="9859" fg:w="20"/><text x="87.4669%" y="607.50"></text></g><g><title>asm_exc_page_fault (22 samples, 0.19%)</title><rect x="87.2081%" y="645" width="0.1946%" height="15" fill="rgb(248,90,0)" fg:x="9858" fg:w="22"/><text x="87.4581%" y="655.50"></text></g><g><title>exc_page_fault (22 samples, 0.19%)</title><rect x="87.2081%" y="629" width="0.1946%" height="15" fill="rgb(207,228,37)" fg:x="9858" fg:w="22"/><text x="87.4581%" y="639.50"></text></g><g><title>do_user_addr_fault (22 samples, 0.19%)</title><rect x="87.2081%" y="613" width="0.1946%" height="15" fill="rgb(235,214,15)" fg:x="9858" fg:w="22"/><text x="87.4581%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (100 samples, 0.88%)</title><rect x="86.5534%" y="661" width="0.8846%" height="15" fill="rgb(210,144,39)" fg:x="9784" fg:w="100"/><text x="86.8034%" y="671.50"></text></g><g><title>sync_regs (3 samples, 0.03%)</title><rect x="87.4115%" y="645" width="0.0265%" height="15" fill="rgb(222,67,41)" fg:x="9881" fg:w="3"/><text x="87.6615%" y="655.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.02%)</title><rect x="87.4381%" y="389" width="0.0177%" height="15" fill="rgb(205,35,37)" fg:x="9884" fg:w="2"/><text x="87.6881%" y="399.50"></text></g><g><title>release_pages (2 samples, 0.02%)</title><rect x="87.4381%" y="373" width="0.0177%" height="15" fill="rgb(216,125,40)" fg:x="9884" fg:w="2"/><text x="87.6881%" y="383.50"></text></g><g><title>tlb_finish_mmu (3 samples, 0.03%)</title><rect x="87.4381%" y="421" width="0.0265%" height="15" fill="rgb(228,227,20)" fg:x="9884" fg:w="3"/><text x="87.6881%" y="431.50"></text></g><g><title>tlb_batch_pages_flush (3 samples, 0.03%)</title><rect x="87.4381%" y="405" width="0.0265%" height="15" fill="rgb(242,173,45)" fg:x="9884" fg:w="3"/><text x="87.6881%" y="415.50"></text></g><g><title>page_remove_rmap (2 samples, 0.02%)</title><rect x="87.4735%" y="341" width="0.0177%" height="15" fill="rgb(215,79,24)" fg:x="9888" fg:w="2"/><text x="87.7235%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (9 samples, 0.08%)</title><rect x="87.4381%" y="661" width="0.0796%" height="15" fill="rgb(238,164,38)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="671.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="87.4381%" y="645" width="0.0796%" height="15" fill="rgb(245,196,38)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (9 samples, 0.08%)</title><rect x="87.4381%" y="629" width="0.0796%" height="15" fill="rgb(231,217,29)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (9 samples, 0.08%)</title><rect x="87.4381%" y="613" width="0.0796%" height="15" fill="rgb(245,6,4)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.08%)</title><rect x="87.4381%" y="597" width="0.0796%" height="15" fill="rgb(214,76,49)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.08%)</title><rect x="87.4381%" y="581" width="0.0796%" height="15" fill="rgb(205,96,12)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="591.50"></text></g><g><title>__GI___libc_free (9 samples, 0.08%)</title><rect x="87.4381%" y="565" width="0.0796%" height="15" fill="rgb(243,131,4)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="575.50"></text></g><g><title>__GI_munmap (9 samples, 0.08%)</title><rect x="87.4381%" y="549" width="0.0796%" height="15" fill="rgb(214,114,4)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (9 samples, 0.08%)</title><rect x="87.4381%" y="533" width="0.0796%" height="15" fill="rgb(234,215,15)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="543.50"></text></g><g><title>do_syscall_64 (9 samples, 0.08%)</title><rect x="87.4381%" y="517" width="0.0796%" height="15" fill="rgb(250,216,45)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="527.50"></text></g><g><title>__x64_sys_munmap (9 samples, 0.08%)</title><rect x="87.4381%" y="501" width="0.0796%" height="15" fill="rgb(236,128,4)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="511.50"></text></g><g><title>__vm_munmap (9 samples, 0.08%)</title><rect x="87.4381%" y="485" width="0.0796%" height="15" fill="rgb(234,50,33)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="495.50"></text></g><g><title>do_vmi_munmap (9 samples, 0.08%)</title><rect x="87.4381%" y="469" width="0.0796%" height="15" fill="rgb(253,131,37)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="479.50"></text></g><g><title>do_vmi_align_munmap (9 samples, 0.08%)</title><rect x="87.4381%" y="453" width="0.0796%" height="15" fill="rgb(218,55,27)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="463.50"></text></g><g><title>unmap_region (9 samples, 0.08%)</title><rect x="87.4381%" y="437" width="0.0796%" height="15" fill="rgb(241,220,28)" fg:x="9884" fg:w="9"/><text x="87.6881%" y="447.50"></text></g><g><title>unmap_vmas (6 samples, 0.05%)</title><rect x="87.4646%" y="421" width="0.0531%" height="15" fill="rgb(241,90,48)" fg:x="9887" fg:w="6"/><text x="87.7146%" y="431.50"></text></g><g><title>unmap_single_vma (6 samples, 0.05%)</title><rect x="87.4646%" y="405" width="0.0531%" height="15" fill="rgb(216,43,37)" fg:x="9887" fg:w="6"/><text x="87.7146%" y="415.50"></text></g><g><title>unmap_page_range (6 samples, 0.05%)</title><rect x="87.4646%" y="389" width="0.0531%" height="15" fill="rgb(207,173,9)" fg:x="9887" fg:w="6"/><text x="87.7146%" y="399.50"></text></g><g><title>zap_pmd_range.isra.0 (6 samples, 0.05%)</title><rect x="87.4646%" y="373" width="0.0531%" height="15" fill="rgb(240,126,30)" fg:x="9887" fg:w="6"/><text x="87.7146%" y="383.50"></text></g><g><title>zap_pte_range (5 samples, 0.04%)</title><rect x="87.4735%" y="357" width="0.0442%" height="15" fill="rgb(228,178,53)" fg:x="9888" fg:w="5"/><text x="87.7235%" y="367.50"></text></g><g><title>tlb_flush_mmu (3 samples, 0.03%)</title><rect x="87.4912%" y="341" width="0.0265%" height="15" fill="rgb(217,33,4)" fg:x="9890" fg:w="3"/><text x="87.7412%" y="351.50"></text></g><g><title>tlb_batch_pages_flush (3 samples, 0.03%)</title><rect x="87.4912%" y="325" width="0.0265%" height="15" fill="rgb(206,124,34)" fg:x="9890" fg:w="3"/><text x="87.7412%" y="335.50"></text></g><g><title>free_pages_and_swap_cache (3 samples, 0.03%)</title><rect x="87.4912%" y="309" width="0.0265%" height="15" fill="rgb(208,122,53)" fg:x="9890" fg:w="3"/><text x="87.7412%" y="319.50"></text></g><g><title>release_pages (3 samples, 0.03%)</title><rect x="87.4912%" y="293" width="0.0265%" height="15" fill="rgb(215,202,26)" fg:x="9890" fg:w="3"/><text x="87.7412%" y="303.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (2 samples, 0.02%)</title><rect x="87.5000%" y="277" width="0.0177%" height="15" fill="rgb(232,198,31)" fg:x="9891" fg:w="2"/><text x="87.7500%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="87.5177%" y="597" width="0.0177%" height="15" fill="rgb(222,23,35)" fg:x="9893" fg:w="2"/><text x="87.7677%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="87.5177%" y="581" width="0.0177%" height="15" fill="rgb(242,27,53)" fg:x="9893" fg:w="2"/><text x="87.7677%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="87.5177%" y="565" width="0.0177%" height="15" fill="rgb(210,216,42)" fg:x="9893" fg:w="2"/><text x="87.7677%" y="575.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="87.5354%" y="597" width="0.0177%" height="15" fill="rgb(234,39,38)" fg:x="9895" fg:w="2"/><text x="87.7854%" y="607.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="87.5531%" y="517" width="0.0265%" height="15" fill="rgb(235,126,54)" fg:x="9897" fg:w="3"/><text x="87.8031%" y="527.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="87.5531%" y="501" width="0.0265%" height="15" fill="rgb(235,150,33)" fg:x="9897" fg:w="3"/><text x="87.8031%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="87.5619%" y="485" width="0.0177%" height="15" fill="rgb(249,49,53)" fg:x="9898" fg:w="2"/><text x="87.8119%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="87.5619%" y="469" width="0.0177%" height="15" fill="rgb(238,60,50)" fg:x="9898" fg:w="2"/><text x="87.8119%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="87.5619%" y="453" width="0.0177%" height="15" fill="rgb(210,5,2)" fg:x="9898" fg:w="2"/><text x="87.8119%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="87.5885%" y="453" width="0.0265%" height="15" fill="rgb(214,207,24)" fg:x="9901" fg:w="3"/><text x="87.8385%" y="463.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (9 samples, 0.08%)</title><rect x="87.5531%" y="581" width="0.0796%" height="15" fill="rgb(228,173,2)" fg:x="9897" fg:w="9"/><text x="87.8031%" y="591.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (9 samples, 0.08%)</title><rect x="87.5531%" y="565" width="0.0796%" height="15" fill="rgb(244,26,8)" fg:x="9897" fg:w="9"/><text x="87.8031%" y="575.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (9 samples, 0.08%)</title><rect x="87.5531%" y="549" width="0.0796%" height="15" fill="rgb(249,153,35)" fg:x="9897" fg:w="9"/><text x="87.8031%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9 samples, 0.08%)</title><rect x="87.5531%" y="533" width="0.0796%" height="15" fill="rgb(221,215,40)" fg:x="9897" fg:w="9"/><text x="87.8031%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (6 samples, 0.05%)</title><rect x="87.5796%" y="517" width="0.0531%" height="15" fill="rgb(238,106,35)" fg:x="9900" fg:w="6"/><text x="87.8296%" y="527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="87.5796%" y="501" width="0.0531%" height="15" fill="rgb(207,195,21)" fg:x="9900" fg:w="6"/><text x="87.8296%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="87.5796%" y="485" width="0.0531%" height="15" fill="rgb(205,43,29)" fg:x="9900" fg:w="6"/><text x="87.8296%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="87.5796%" y="469" width="0.0531%" height="15" fill="rgb(236,35,21)" fg:x="9900" fg:w="6"/><text x="87.8296%" y="479.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="87.6327%" y="533" width="0.0265%" height="15" fill="rgb(244,74,8)" fg:x="9906" fg:w="3"/><text x="87.8827%" y="543.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="87.6327%" y="517" width="0.0265%" height="15" fill="rgb(241,229,7)" fg:x="9906" fg:w="3"/><text x="87.8827%" y="527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="87.6327%" y="501" width="0.0265%" height="15" fill="rgb(212,223,25)" fg:x="9906" fg:w="3"/><text x="87.8827%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="87.6327%" y="485" width="0.0265%" height="15" fill="rgb(234,58,53)" fg:x="9906" fg:w="3"/><text x="87.8827%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="87.6327%" y="469" width="0.0265%" height="15" fill="rgb(244,36,1)" fg:x="9906" fg:w="3"/><text x="87.8827%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (20 samples, 0.18%)</title><rect x="87.5177%" y="661" width="0.1769%" height="15" fill="rgb(222,40,54)" fg:x="9893" fg:w="20"/><text x="87.7677%" y="671.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (20 samples, 0.18%)</title><rect x="87.5177%" y="645" width="0.1769%" height="15" fill="rgb(210,207,39)" fg:x="9893" fg:w="20"/><text x="87.7677%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.18%)</title><rect x="87.5177%" y="629" width="0.1769%" height="15" fill="rgb(234,52,14)" fg:x="9893" fg:w="20"/><text x="87.7677%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.18%)</title><rect x="87.5177%" y="613" width="0.1769%" height="15" fill="rgb(239,108,46)" fg:x="9893" fg:w="20"/><text x="87.7677%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16 samples, 0.14%)</title><rect x="87.5531%" y="597" width="0.1415%" height="15" fill="rgb(252,223,5)" fg:x="9897" fg:w="16"/><text x="87.8031%" y="607.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (7 samples, 0.06%)</title><rect x="87.6327%" y="581" width="0.0619%" height="15" fill="rgb(227,181,11)" fg:x="9906" fg:w="7"/><text x="87.8827%" y="591.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (7 samples, 0.06%)</title><rect x="87.6327%" y="565" width="0.0619%" height="15" fill="rgb(248,126,40)" fg:x="9906" fg:w="7"/><text x="87.8827%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (7 samples, 0.06%)</title><rect x="87.6327%" y="549" width="0.0619%" height="15" fill="rgb(243,1,18)" fg:x="9906" fg:w="7"/><text x="87.8827%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (4 samples, 0.04%)</title><rect x="87.6592%" y="533" width="0.0354%" height="15" fill="rgb(214,145,23)" fg:x="9909" fg:w="4"/><text x="87.9092%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="87.6592%" y="517" width="0.0354%" height="15" fill="rgb(241,218,11)" fg:x="9909" fg:w="4"/><text x="87.9092%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="87.6592%" y="501" width="0.0354%" height="15" fill="rgb(214,219,24)" fg:x="9909" fg:w="4"/><text x="87.9092%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="87.6592%" y="485" width="0.0354%" height="15" fill="rgb(235,32,7)" fg:x="9909" fg:w="4"/><text x="87.9092%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="87.6769%" y="469" width="0.0177%" height="15" fill="rgb(227,121,28)" fg:x="9911" fg:w="2"/><text x="87.9269%" y="479.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="87.7123%" y="581" width="0.0177%" height="15" fill="rgb(216,129,49)" fg:x="9915" fg:w="2"/><text x="87.9623%" y="591.50"></text></g><g><title>exc_page_fault (2 samples, 0.02%)</title><rect x="87.7123%" y="565" width="0.0177%" height="15" fill="rgb(207,194,50)" fg:x="9915" fg:w="2"/><text x="87.9623%" y="575.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="87.7123%" y="549" width="0.0177%" height="15" fill="rgb(207,4,18)" fg:x="9915" fg:w="2"/><text x="87.9623%" y="559.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="87.7123%" y="533" width="0.0177%" height="15" fill="rgb(213,50,30)" fg:x="9915" fg:w="2"/><text x="87.9623%" y="543.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="87.7123%" y="517" width="0.0177%" height="15" fill="rgb(208,77,22)" fg:x="9915" fg:w="2"/><text x="87.9623%" y="527.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="87.7123%" y="501" width="0.0177%" height="15" fill="rgb(244,204,34)" fg:x="9915" fg:w="2"/><text x="87.9623%" y="511.50"></text></g><g><title>do_anonymous_page (2 samples, 0.02%)</title><rect x="87.7123%" y="485" width="0.0177%" height="15" fill="rgb(230,20,17)" fg:x="9915" fg:w="2"/><text x="87.9623%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.03%)</title><rect x="87.7123%" y="629" width="0.0265%" height="15" fill="rgb(237,83,15)" fg:x="9915" fg:w="3"/><text x="87.9623%" y="639.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.03%)</title><rect x="87.7123%" y="613" width="0.0265%" height="15" fill="rgb(221,109,25)" fg:x="9915" fg:w="3"/><text x="87.9623%" y="623.50"></text></g><g><title>__memset_avx2_unaligned_erms (3 samples, 0.03%)</title><rect x="87.7123%" y="597" width="0.0265%" height="15" fill="rgb(205,194,52)" fg:x="9915" fg:w="3"/><text x="87.9623%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (135 samples, 1.19%)</title><rect x="86.5534%" y="725" width="1.1943%" height="15" fill="rgb(244,173,54)" fg:x="9784" fg:w="135"/><text x="86.8034%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (135 samples, 1.19%)</title><rect x="86.5534%" y="709" width="1.1943%" height="15" fill="rgb(227,181,18)" fg:x="9784" fg:w="135"/><text x="86.8034%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (135 samples, 1.19%)</title><rect x="86.5534%" y="693" width="1.1943%" height="15" fill="rgb(238,36,30)" fg:x="9784" fg:w="135"/><text x="86.8034%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (135 samples, 1.19%)</title><rect x="86.5534%" y="677" width="1.1943%" height="15" fill="rgb(254,85,0)" fg:x="9784" fg:w="135"/><text x="86.8034%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (4 samples, 0.04%)</title><rect x="87.7123%" y="661" width="0.0354%" height="15" fill="rgb(247,63,33)" fg:x="9915" fg:w="4"/><text x="87.9623%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (4 samples, 0.04%)</title><rect x="87.7123%" y="645" width="0.0354%" height="15" fill="rgb(220,7,54)" fg:x="9915" fg:w="4"/><text x="87.9623%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="87.7565%" y="645" width="0.0265%" height="15" fill="rgb(238,227,21)" fg:x="9920" fg:w="3"/><text x="88.0065%" y="655.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="87.7565%" y="629" width="0.0265%" height="15" fill="rgb(237,29,31)" fg:x="9920" fg:w="3"/><text x="88.0065%" y="639.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (3 samples, 0.03%)</title><rect x="87.7565%" y="613" width="0.0265%" height="15" fill="rgb(211,21,50)" fg:x="9920" fg:w="3"/><text x="88.0065%" y="623.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (3 samples, 0.03%)</title><rect x="87.7565%" y="597" width="0.0265%" height="15" fill="rgb(239,119,2)" fg:x="9920" fg:w="3"/><text x="88.0065%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (4 samples, 0.04%)</title><rect x="87.7565%" y="709" width="0.0354%" height="15" fill="rgb(250,2,39)" fg:x="9920" fg:w="4"/><text x="88.0065%" y="719.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4 samples, 0.04%)</title><rect x="87.7565%" y="693" width="0.0354%" height="15" fill="rgb(244,46,53)" fg:x="9920" fg:w="4"/><text x="88.0065%" y="703.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.04%)</title><rect x="87.7565%" y="677" width="0.0354%" height="15" fill="rgb(209,21,19)" fg:x="9920" fg:w="4"/><text x="88.0065%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.04%)</title><rect x="87.7565%" y="661" width="0.0354%" height="15" fill="rgb(236,145,4)" fg:x="9920" fg:w="4"/><text x="88.0065%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="87.7919%" y="709" width="0.0177%" height="15" fill="rgb(220,133,36)" fg:x="9924" fg:w="2"/><text x="88.0419%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (144 samples, 1.27%)</title><rect x="86.5534%" y="741" width="1.2739%" height="15" fill="rgb(244,18,3)" fg:x="9784" fg:w="144"/><text x="86.8034%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.08%)</title><rect x="87.7477%" y="725" width="0.0796%" height="15" fill="rgb(232,171,48)" fg:x="9919" fg:w="9"/><text x="87.9977%" y="735.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.02%)</title><rect x="87.8096%" y="709" width="0.0177%" height="15" fill="rgb(223,223,53)" fg:x="9926" fg:w="2"/><text x="88.0596%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.02%)</title><rect x="87.8096%" y="693" width="0.0177%" height="15" fill="rgb(246,92,13)" fg:x="9926" fg:w="2"/><text x="88.0596%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="87.8096%" y="677" width="0.0177%" height="15" fill="rgb(229,171,10)" fg:x="9926" fg:w="2"/><text x="88.0596%" y="687.50"></text></g><g><title>block_stm_revm::examples::erc20::generate (368 samples, 3.26%)</title><rect x="84.6338%" y="789" width="3.2555%" height="15" fill="rgb(213,131,26)" fg:x="9567" fg:w="368"/><text x="84.8838%" y="799.50">blo..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (162 samples, 1.43%)</title><rect x="86.4561%" y="773" width="1.4331%" height="15" fill="rgb(242,87,54)" fg:x="9773" fg:w="162"/><text x="86.7061%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (162 samples, 1.43%)</title><rect x="86.4561%" y="757" width="1.4331%" height="15" fill="rgb(237,21,35)" fg:x="9773" fg:w="162"/><text x="86.7061%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (7 samples, 0.06%)</title><rect x="87.8273%" y="741" width="0.0619%" height="15" fill="rgb(253,13,47)" fg:x="9928" fg:w="7"/><text x="88.0773%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7 samples, 0.06%)</title><rect x="87.8273%" y="725" width="0.0619%" height="15" fill="rgb(215,122,49)" fg:x="9928" fg:w="7"/><text x="88.0773%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (7 samples, 0.06%)</title><rect x="87.8273%" y="709" width="0.0619%" height="15" fill="rgb(209,179,30)" fg:x="9928" fg:w="7"/><text x="88.0773%" y="719.50"></text></g><g><title>core::ptr::write (7 samples, 0.06%)</title><rect x="87.8273%" y="693" width="0.0619%" height="15" fill="rgb(235,100,24)" fg:x="9928" fg:w="7"/><text x="88.0773%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="87.8627%" y="677" width="0.0265%" height="15" fill="rgb(209,67,24)" fg:x="9932" fg:w="3"/><text x="88.1127%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="87.8892%" y="709" width="0.0442%" height="15" fill="rgb(206,74,32)" fg:x="9935" fg:w="5"/><text x="88.1392%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::env::TxEnv]&gt; (5 samples, 0.04%)</title><rect x="87.8892%" y="693" width="0.0442%" height="15" fill="rgb(212,45,25)" fg:x="9935" fg:w="5"/><text x="88.1392%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (5 samples, 0.04%)</title><rect x="87.8892%" y="677" width="0.0442%" height="15" fill="rgb(239,26,3)" fg:x="9935" fg:w="5"/><text x="88.1392%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (4 samples, 0.04%)</title><rect x="87.8981%" y="661" width="0.0354%" height="15" fill="rgb(218,36,15)" fg:x="9936" fg:w="4"/><text x="88.1481%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (4 samples, 0.04%)</title><rect x="87.8981%" y="645" width="0.0354%" height="15" fill="rgb(206,108,24)" fg:x="9936" fg:w="4"/><text x="88.1481%" y="655.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="87.8981%" y="629" width="0.0354%" height="15" fill="rgb(234,204,42)" fg:x="9936" fg:w="4"/><text x="88.1481%" y="639.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.02%)</title><rect x="87.9158%" y="613" width="0.0177%" height="15" fill="rgb(229,2,11)" fg:x="9938" fg:w="2"/><text x="88.1658%" y="623.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="87.9158%" y="597" width="0.0177%" height="15" fill="rgb(221,20,48)" fg:x="9938" fg:w="2"/><text x="88.1658%" y="607.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.02%)</title><rect x="87.9158%" y="581" width="0.0177%" height="15" fill="rgb(244,164,10)" fg:x="9938" fg:w="2"/><text x="88.1658%" y="591.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.02%)</title><rect x="87.9158%" y="565" width="0.0177%" height="15" fill="rgb(243,229,2)" fg:x="9938" fg:w="2"/><text x="88.1658%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="87.9158%" y="549" width="0.0177%" height="15" fill="rgb(232,131,37)" fg:x="9938" fg:w="2"/><text x="88.1658%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="87.9158%" y="533" width="0.0177%" height="15" fill="rgb(217,156,11)" fg:x="9938" fg:w="2"/><text x="88.1658%" y="543.50"></text></g><g><title>_compound_head (2 samples, 0.02%)</title><rect x="87.9335%" y="437" width="0.0177%" height="15" fill="rgb(239,99,48)" fg:x="9940" fg:w="2"/><text x="88.1835%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt;&gt; (9 samples, 0.08%)</title><rect x="87.8892%" y="773" width="0.0796%" height="15" fill="rgb(231,209,9)" fg:x="9935" fg:w="9"/><text x="88.1392%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="87.8892%" y="757" width="0.0796%" height="15" fill="rgb(254,97,27)" fg:x="9935" fg:w="9"/><text x="88.1392%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.08%)</title><rect x="87.8892%" y="741" width="0.0796%" height="15" fill="rgb(223,151,38)" fg:x="9935" fg:w="9"/><text x="88.1392%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt; (9 samples, 0.08%)</title><rect x="87.8892%" y="725" width="0.0796%" height="15" fill="rgb(219,206,35)" fg:x="9935" fg:w="9"/><text x="88.1392%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::env::TxEnv&gt;&gt; (4 samples, 0.04%)</title><rect x="87.9335%" y="709" width="0.0354%" height="15" fill="rgb(216,130,31)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="87.9335%" y="693" width="0.0354%" height="15" fill="rgb(251,97,34)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.04%)</title><rect x="87.9335%" y="677" width="0.0354%" height="15" fill="rgb(246,159,47)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.04%)</title><rect x="87.9335%" y="661" width="0.0354%" height="15" fill="rgb(232,87,10)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="671.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="87.9335%" y="645" width="0.0354%" height="15" fill="rgb(249,1,37)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="655.50"></text></g><g><title>__GI_munmap (4 samples, 0.04%)</title><rect x="87.9335%" y="629" width="0.0354%" height="15" fill="rgb(239,135,14)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="87.9335%" y="613" width="0.0354%" height="15" fill="rgb(253,116,46)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="623.50"></text></g><g><title>do_syscall_64 (4 samples, 0.04%)</title><rect x="87.9335%" y="597" width="0.0354%" height="15" fill="rgb(222,217,37)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="607.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.04%)</title><rect x="87.9335%" y="581" width="0.0354%" height="15" fill="rgb(252,96,8)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="591.50"></text></g><g><title>__vm_munmap (4 samples, 0.04%)</title><rect x="87.9335%" y="565" width="0.0354%" height="15" fill="rgb(254,103,41)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="575.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.04%)</title><rect x="87.9335%" y="549" width="0.0354%" height="15" fill="rgb(218,213,19)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="559.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.04%)</title><rect x="87.9335%" y="533" width="0.0354%" height="15" fill="rgb(253,95,21)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="543.50"></text></g><g><title>unmap_region (4 samples, 0.04%)</title><rect x="87.9335%" y="517" width="0.0354%" height="15" fill="rgb(229,26,28)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="527.50"></text></g><g><title>unmap_vmas (4 samples, 0.04%)</title><rect x="87.9335%" y="501" width="0.0354%" height="15" fill="rgb(230,129,16)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="511.50"></text></g><g><title>unmap_single_vma (4 samples, 0.04%)</title><rect x="87.9335%" y="485" width="0.0354%" height="15" fill="rgb(236,126,17)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="495.50"></text></g><g><title>unmap_page_range (4 samples, 0.04%)</title><rect x="87.9335%" y="469" width="0.0354%" height="15" fill="rgb(209,33,33)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="479.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.04%)</title><rect x="87.9335%" y="453" width="0.0354%" height="15" fill="rgb(227,85,29)" fg:x="9940" fg:w="4"/><text x="88.1835%" y="463.50"></text></g><g><title>zap_pte_range (2 samples, 0.02%)</title><rect x="87.9512%" y="437" width="0.0177%" height="15" fill="rgb(241,53,46)" fg:x="9942" fg:w="2"/><text x="88.2012%" y="447.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="87.9689%" y="661" width="0.0177%" height="15" fill="rgb(228,167,53)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="671.50"></text></g><g><title>__GI_munmap (2 samples, 0.02%)</title><rect x="87.9689%" y="645" width="0.0177%" height="15" fill="rgb(238,195,45)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="87.9689%" y="629" width="0.0177%" height="15" fill="rgb(252,124,45)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="639.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="87.9689%" y="613" width="0.0177%" height="15" fill="rgb(251,38,35)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="623.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.02%)</title><rect x="87.9689%" y="597" width="0.0177%" height="15" fill="rgb(227,33,2)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="607.50"></text></g><g><title>__vm_munmap (2 samples, 0.02%)</title><rect x="87.9689%" y="581" width="0.0177%" height="15" fill="rgb(223,157,46)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="591.50"></text></g><g><title>do_vmi_munmap (2 samples, 0.02%)</title><rect x="87.9689%" y="565" width="0.0177%" height="15" fill="rgb(222,78,41)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="575.50"></text></g><g><title>do_vmi_align_munmap (2 samples, 0.02%)</title><rect x="87.9689%" y="549" width="0.0177%" height="15" fill="rgb(248,176,11)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="559.50"></text></g><g><title>unmap_region (2 samples, 0.02%)</title><rect x="87.9689%" y="533" width="0.0177%" height="15" fill="rgb(241,221,18)" fg:x="9944" fg:w="2"/><text x="88.2189%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (13 samples, 0.12%)</title><rect x="87.9689%" y="677" width="0.1150%" height="15" fill="rgb(218,85,22)" fg:x="9944" fg:w="13"/><text x="88.2189%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (11 samples, 0.10%)</title><rect x="87.9866%" y="661" width="0.0973%" height="15" fill="rgb(222,223,7)" fg:x="9946" fg:w="11"/><text x="88.2366%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (11 samples, 0.10%)</title><rect x="87.9866%" y="645" width="0.0973%" height="15" fill="rgb(254,59,39)" fg:x="9946" fg:w="11"/><text x="88.2366%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt; (11 samples, 0.10%)</title><rect x="87.9866%" y="629" width="0.0973%" height="15" fill="rgb(247,100,27)" fg:x="9946" fg:w="11"/><text x="88.2366%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::db::in_memory_db::DbAccount&gt; (11 samples, 0.10%)</title><rect x="87.9866%" y="613" width="0.0973%" height="15" fill="rgb(237,207,10)" fg:x="9946" fg:w="11"/><text x="88.2366%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (11 samples, 0.10%)</title><rect x="87.9866%" y="597" width="0.0973%" height="15" fill="rgb(220,121,28)" fg:x="9946" fg:w="11"/><text x="88.2366%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (11 samples, 0.10%)</title><rect x="87.9866%" y="581" width="0.0973%" height="15" fill="rgb(213,223,20)" fg:x="9946" fg:w="11"/><text x="88.2366%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (10 samples, 0.09%)</title><rect x="87.9954%" y="565" width="0.0885%" height="15" fill="rgb(205,121,27)" fg:x="9947" fg:w="10"/><text x="88.2454%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (10 samples, 0.09%)</title><rect x="87.9954%" y="549" width="0.0885%" height="15" fill="rgb(253,24,53)" fg:x="9947" fg:w="10"/><text x="88.2454%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (10 samples, 0.09%)</title><rect x="87.9954%" y="533" width="0.0885%" height="15" fill="rgb(224,224,47)" fg:x="9947" fg:w="10"/><text x="88.2454%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (10 samples, 0.09%)</title><rect x="87.9954%" y="517" width="0.0885%" height="15" fill="rgb(250,125,36)" fg:x="9947" fg:w="10"/><text x="88.2454%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.09%)</title><rect x="87.9954%" y="501" width="0.0885%" height="15" fill="rgb(240,144,38)" fg:x="9947" fg:w="10"/><text x="88.2454%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.09%)</title><rect x="87.9954%" y="485" width="0.0885%" height="15" fill="rgb(250,15,50)" fg:x="9947" fg:w="10"/><text x="88.2454%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.09%)</title><rect x="87.9954%" y="469" width="0.0885%" height="15" fill="rgb(210,24,26)" fg:x="9947" fg:w="10"/><text x="88.2454%" y="479.50"></text></g><g><title>_compound_head (3 samples, 0.03%)</title><rect x="88.0839%" y="421" width="0.0265%" height="15" fill="rgb(234,53,53)" fg:x="9957" fg:w="3"/><text x="88.3339%" y="431.50"></text></g><g><title>block_stm_revm::execute_sequential (28 samples, 0.25%)</title><rect x="87.8892%" y="789" width="0.2477%" height="15" fill="rgb(208,108,28)" fg:x="9935" fg:w="28"/><text x="88.1392%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::storage::Storage&gt; (19 samples, 0.17%)</title><rect x="87.9689%" y="773" width="0.1681%" height="15" fill="rgb(227,143,7)" fg:x="9944" fg:w="19"/><text x="88.2189%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount&gt;&gt; (19 samples, 0.17%)</title><rect x="87.9689%" y="757" width="0.1681%" height="15" fill="rgb(238,189,38)" fg:x="9944" fg:w="19"/><text x="88.2189%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount,std::hash::random::RandomState&gt;&gt; (19 samples, 0.17%)</title><rect x="87.9689%" y="741" width="0.1681%" height="15" fill="rgb(222,69,15)" fg:x="9944" fg:w="19"/><text x="88.2189%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt;&gt; (19 samples, 0.17%)</title><rect x="87.9689%" y="725" width="0.1681%" height="15" fill="rgb(213,169,7)" fg:x="9944" fg:w="19"/><text x="88.2189%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.17%)</title><rect x="87.9689%" y="709" width="0.1681%" height="15" fill="rgb(251,219,4)" fg:x="9944" fg:w="19"/><text x="88.2189%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (19 samples, 0.17%)</title><rect x="87.9689%" y="693" width="0.1681%" height="15" fill="rgb(241,55,40)" fg:x="9944" fg:w="19"/><text x="88.2189%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (6 samples, 0.05%)</title><rect x="88.0839%" y="677" width="0.0531%" height="15" fill="rgb(243,57,30)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="88.0839%" y="661" width="0.0531%" height="15" fill="rgb(234,50,30)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="88.0839%" y="645" width="0.0531%" height="15" fill="rgb(239,23,42)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="655.50"></text></g><g><title>__GI___libc_free (6 samples, 0.05%)</title><rect x="88.0839%" y="629" width="0.0531%" height="15" fill="rgb(217,38,19)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="639.50"></text></g><g><title>__GI_munmap (6 samples, 0.05%)</title><rect x="88.0839%" y="613" width="0.0531%" height="15" fill="rgb(215,179,16)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.05%)</title><rect x="88.0839%" y="597" width="0.0531%" height="15" fill="rgb(254,21,37)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="607.50"></text></g><g><title>do_syscall_64 (6 samples, 0.05%)</title><rect x="88.0839%" y="581" width="0.0531%" height="15" fill="rgb(219,207,48)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="591.50"></text></g><g><title>__x64_sys_munmap (6 samples, 0.05%)</title><rect x="88.0839%" y="565" width="0.0531%" height="15" fill="rgb(227,225,41)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="575.50"></text></g><g><title>__vm_munmap (6 samples, 0.05%)</title><rect x="88.0839%" y="549" width="0.0531%" height="15" fill="rgb(223,130,1)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="559.50"></text></g><g><title>do_vmi_munmap (6 samples, 0.05%)</title><rect x="88.0839%" y="533" width="0.0531%" height="15" fill="rgb(249,54,42)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="543.50"></text></g><g><title>do_vmi_align_munmap (6 samples, 0.05%)</title><rect x="88.0839%" y="517" width="0.0531%" height="15" fill="rgb(248,69,25)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="527.50"></text></g><g><title>unmap_region (6 samples, 0.05%)</title><rect x="88.0839%" y="501" width="0.0531%" height="15" fill="rgb(234,21,32)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="511.50"></text></g><g><title>unmap_vmas (6 samples, 0.05%)</title><rect x="88.0839%" y="485" width="0.0531%" height="15" fill="rgb(252,136,6)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="495.50"></text></g><g><title>unmap_single_vma (6 samples, 0.05%)</title><rect x="88.0839%" y="469" width="0.0531%" height="15" fill="rgb(245,87,12)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="479.50"></text></g><g><title>unmap_page_range (6 samples, 0.05%)</title><rect x="88.0839%" y="453" width="0.0531%" height="15" fill="rgb(208,12,15)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="463.50"></text></g><g><title>zap_pmd_range.isra.0 (6 samples, 0.05%)</title><rect x="88.0839%" y="437" width="0.0531%" height="15" fill="rgb(250,98,2)" fg:x="9957" fg:w="6"/><text x="88.3339%" y="447.50"></text></g><g><title>zap_pte_range (3 samples, 0.03%)</title><rect x="88.1104%" y="421" width="0.0265%" height="15" fill="rgb(205,213,15)" fg:x="9960" fg:w="3"/><text x="88.3604%" y="431.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.02%)</title><rect x="88.1192%" y="405" width="0.0177%" height="15" fill="rgb(248,192,44)" fg:x="9961" fg:w="2"/><text x="88.3692%" y="415.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.02%)</title><rect x="88.1192%" y="389" width="0.0177%" height="15" fill="rgb(221,89,17)" fg:x="9961" fg:w="2"/><text x="88.3692%" y="399.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.02%)</title><rect x="88.1192%" y="373" width="0.0177%" height="15" fill="rgb(209,55,3)" fg:x="9961" fg:w="2"/><text x="88.3692%" y="383.50"></text></g><g><title>release_pages (2 samples, 0.02%)</title><rect x="88.1192%" y="357" width="0.0177%" height="15" fill="rgb(247,23,45)" fg:x="9961" fg:w="2"/><text x="88.3692%" y="367.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (2 samples, 0.02%)</title><rect x="88.1192%" y="341" width="0.0177%" height="15" fill="rgb(235,152,23)" fg:x="9961" fg:w="2"/><text x="88.3692%" y="351.50"></text></g><g><title>__GI___libc_free (6 samples, 0.05%)</title><rect x="88.1546%" y="677" width="0.0531%" height="15" fill="rgb(244,63,13)" fg:x="9965" fg:w="6"/><text x="88.4046%" y="687.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="88.1723%" y="661" width="0.0354%" height="15" fill="rgb(227,30,37)" fg:x="9967" fg:w="4"/><text x="88.4223%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.11%)</title><rect x="88.1369%" y="773" width="0.1062%" height="15" fill="rgb(224,49,42)" fg:x="9963" fg:w="12"/><text x="88.3869%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::env::TxEnv]&gt; (12 samples, 0.11%)</title><rect x="88.1369%" y="757" width="0.1062%" height="15" fill="rgb(218,129,5)" fg:x="9963" fg:w="12"/><text x="88.3869%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::TxEnv&gt; (12 samples, 0.11%)</title><rect x="88.1369%" y="741" width="0.1062%" height="15" fill="rgb(240,199,54)" fg:x="9963" fg:w="12"/><text x="88.3869%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (12 samples, 0.11%)</title><rect x="88.1369%" y="725" width="0.1062%" height="15" fill="rgb(234,31,13)" fg:x="9963" fg:w="12"/><text x="88.3869%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (12 samples, 0.11%)</title><rect x="88.1369%" y="709" width="0.1062%" height="15" fill="rgb(219,73,54)" fg:x="9963" fg:w="12"/><text x="88.3869%" y="719.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (12 samples, 0.11%)</title><rect x="88.1369%" y="693" width="0.1062%" height="15" fill="rgb(251,162,10)" fg:x="9963" fg:w="12"/><text x="88.3869%" y="703.50"></text></g><g><title>bytes::bytes::promotable_even_drop (4 samples, 0.04%)</title><rect x="88.2077%" y="677" width="0.0354%" height="15" fill="rgb(240,138,47)" fg:x="9971" fg:w="4"/><text x="88.4577%" y="687.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (4 samples, 0.04%)</title><rect x="88.2077%" y="661" width="0.0354%" height="15" fill="rgb(216,138,26)" fg:x="9971" fg:w="4"/><text x="88.4577%" y="671.50"></text></g><g><title>bytes::bytes::promotable_even_drop::_{{closure}} (4 samples, 0.04%)</title><rect x="88.2077%" y="645" width="0.0354%" height="15" fill="rgb(243,17,35)" fg:x="9971" fg:w="4"/><text x="88.4577%" y="655.50"></text></g><g><title>bytes::bytes::release_shared (4 samples, 0.04%)</title><rect x="88.2077%" y="629" width="0.0354%" height="15" fill="rgb(241,60,18)" fg:x="9971" fg:w="4"/><text x="88.4577%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="88.2166%" y="613" width="0.0265%" height="15" fill="rgb(234,2,44)" fg:x="9972" fg:w="3"/><text x="88.4666%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="88.2166%" y="597" width="0.0265%" height="15" fill="rgb(225,225,33)" fg:x="9972" fg:w="3"/><text x="88.4666%" y="607.50"></text></g><g><title>_compound_head (2 samples, 0.02%)</title><rect x="88.2431%" y="501" width="0.0177%" height="15" fill="rgb(234,50,31)" fg:x="9975" fg:w="2"/><text x="88.4931%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::env::TxEnv&gt;&gt; (17 samples, 0.15%)</title><rect x="88.1369%" y="789" width="0.1504%" height="15" fill="rgb(249,6,25)" fg:x="9963" fg:w="17"/><text x="88.3869%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::env::TxEnv&gt;&gt; (5 samples, 0.04%)</title><rect x="88.2431%" y="773" width="0.0442%" height="15" fill="rgb(241,5,17)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="88.2431%" y="757" width="0.0442%" height="15" fill="rgb(207,116,10)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="88.2431%" y="741" width="0.0442%" height="15" fill="rgb(222,128,18)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="88.2431%" y="725" width="0.0442%" height="15" fill="rgb(229,109,25)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="735.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="88.2431%" y="709" width="0.0442%" height="15" fill="rgb(222,102,25)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="719.50"></text></g><g><title>__GI_munmap (5 samples, 0.04%)</title><rect x="88.2431%" y="693" width="0.0442%" height="15" fill="rgb(239,211,5)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.04%)</title><rect x="88.2431%" y="677" width="0.0442%" height="15" fill="rgb(223,136,26)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="687.50"></text></g><g><title>do_syscall_64 (5 samples, 0.04%)</title><rect x="88.2431%" y="661" width="0.0442%" height="15" fill="rgb(227,30,15)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="671.50"></text></g><g><title>__x64_sys_munmap (5 samples, 0.04%)</title><rect x="88.2431%" y="645" width="0.0442%" height="15" fill="rgb(247,76,4)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="655.50"></text></g><g><title>__vm_munmap (5 samples, 0.04%)</title><rect x="88.2431%" y="629" width="0.0442%" height="15" fill="rgb(245,38,48)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="639.50"></text></g><g><title>do_vmi_munmap (5 samples, 0.04%)</title><rect x="88.2431%" y="613" width="0.0442%" height="15" fill="rgb(210,220,14)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="623.50"></text></g><g><title>do_vmi_align_munmap (5 samples, 0.04%)</title><rect x="88.2431%" y="597" width="0.0442%" height="15" fill="rgb(224,60,51)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="607.50"></text></g><g><title>unmap_region (5 samples, 0.04%)</title><rect x="88.2431%" y="581" width="0.0442%" height="15" fill="rgb(212,133,49)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="591.50"></text></g><g><title>unmap_vmas (5 samples, 0.04%)</title><rect x="88.2431%" y="565" width="0.0442%" height="15" fill="rgb(231,39,22)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="575.50"></text></g><g><title>unmap_single_vma (5 samples, 0.04%)</title><rect x="88.2431%" y="549" width="0.0442%" height="15" fill="rgb(236,173,22)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="559.50"></text></g><g><title>unmap_page_range (5 samples, 0.04%)</title><rect x="88.2431%" y="533" width="0.0442%" height="15" fill="rgb(210,70,0)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="543.50"></text></g><g><title>zap_pmd_range.isra.0 (5 samples, 0.04%)</title><rect x="88.2431%" y="517" width="0.0442%" height="15" fill="rgb(215,170,11)" fg:x="9975" fg:w="5"/><text x="88.4931%" y="527.50"></text></g><g><title>zap_pte_range (3 samples, 0.03%)</title><rect x="88.2608%" y="501" width="0.0265%" height="15" fill="rgb(220,154,28)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="511.50"></text></g><g><title>tlb_flush_mmu (3 samples, 0.03%)</title><rect x="88.2608%" y="485" width="0.0265%" height="15" fill="rgb(240,160,41)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="495.50"></text></g><g><title>tlb_batch_pages_flush (3 samples, 0.03%)</title><rect x="88.2608%" y="469" width="0.0265%" height="15" fill="rgb(243,215,41)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="479.50"></text></g><g><title>free_pages_and_swap_cache (3 samples, 0.03%)</title><rect x="88.2608%" y="453" width="0.0265%" height="15" fill="rgb(214,208,31)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="463.50"></text></g><g><title>release_pages (3 samples, 0.03%)</title><rect x="88.2608%" y="437" width="0.0265%" height="15" fill="rgb(247,57,22)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="447.50"></text></g><g><title>free_unref_page_list (3 samples, 0.03%)</title><rect x="88.2608%" y="421" width="0.0265%" height="15" fill="rgb(228,73,52)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="431.50"></text></g><g><title>free_unref_page_commit (3 samples, 0.03%)</title><rect x="88.2608%" y="405" width="0.0265%" height="15" fill="rgb(252,60,9)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="415.50"></text></g><g><title>free_pcppages_bulk (3 samples, 0.03%)</title><rect x="88.2608%" y="389" width="0.0265%" height="15" fill="rgb(233,9,51)" fg:x="9977" fg:w="3"/><text x="88.5108%" y="399.50"></text></g><g><title>__free_one_page (2 samples, 0.02%)</title><rect x="88.2696%" y="373" width="0.0177%" height="15" fill="rgb(223,67,14)" fg:x="9978" fg:w="2"/><text x="88.5196%" y="383.50"></text></g><g><title>_int_free (9 samples, 0.08%)</title><rect x="88.3050%" y="709" width="0.0796%" height="15" fill="rgb(222,86,2)" fg:x="9982" fg:w="9"/><text x="88.5550%" y="719.50"></text></g><g><title>__GI___libc_free (12 samples, 0.11%)</title><rect x="88.2962%" y="725" width="0.1062%" height="15" fill="rgb(243,58,54)" fg:x="9981" fg:w="12"/><text x="88.5462%" y="735.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="88.3846%" y="709" width="0.0177%" height="15" fill="rgb(210,200,39)" fg:x="9991" fg:w="2"/><text x="88.6346%" y="719.50"></text></g><g><title>__GI___libc_free (10 samples, 0.09%)</title><rect x="88.4023%" y="581" width="0.0885%" height="15" fill="rgb(238,135,9)" fg:x="9993" fg:w="10"/><text x="88.6523%" y="591.50"></text></g><g><title>_int_free (6 samples, 0.05%)</title><rect x="88.4377%" y="565" width="0.0531%" height="15" fill="rgb(232,179,7)" fg:x="9997" fg:w="6"/><text x="88.6877%" y="575.50"></text></g><g><title>core::mem::drop (11 samples, 0.10%)</title><rect x="88.4023%" y="661" width="0.0973%" height="15" fill="rgb(245,65,41)" fg:x="9993" fg:w="11"/><text x="88.6523%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (11 samples, 0.10%)</title><rect x="88.4023%" y="645" width="0.0973%" height="15" fill="rgb(227,43,8)" fg:x="9993" fg:w="11"/><text x="88.6523%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Shared&gt; (11 samples, 0.10%)</title><rect x="88.4023%" y="629" width="0.0973%" height="15" fill="rgb(235,91,14)" fg:x="9993" fg:w="11"/><text x="88.6523%" y="639.50"></text></g><g><title>&lt;bytes::bytes::Shared as core::ops::drop::Drop&gt;::drop (11 samples, 0.10%)</title><rect x="88.4023%" y="613" width="0.0973%" height="15" fill="rgb(235,219,31)" fg:x="9993" fg:w="11"/><text x="88.6523%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.10%)</title><rect x="88.4023%" y="597" width="0.0973%" height="15" fill="rgb(227,121,25)" fg:x="9993" fg:w="11"/><text x="88.6523%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="88.4996%" y="661" width="0.0177%" height="15" fill="rgb(254,129,24)" fg:x="10004" fg:w="2"/><text x="88.7496%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="88.4996%" y="645" width="0.0177%" height="15" fill="rgb(226,144,49)" fg:x="10004" fg:w="2"/><text x="88.7496%" y="655.50"></text></g><g><title>bytes::bytes::shared_drop (17 samples, 0.15%)</title><rect x="88.4023%" y="725" width="0.1504%" height="15" fill="rgb(214,187,32)" fg:x="9993" fg:w="17"/><text x="88.6523%" y="735.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (17 samples, 0.15%)</title><rect x="88.4023%" y="709" width="0.1504%" height="15" fill="rgb(243,129,46)" fg:x="9993" fg:w="17"/><text x="88.6523%" y="719.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (17 samples, 0.15%)</title><rect x="88.4023%" y="693" width="0.1504%" height="15" fill="rgb(221,185,35)" fg:x="9993" fg:w="17"/><text x="88.6523%" y="703.50"></text></g><g><title>bytes::bytes::release_shared (17 samples, 0.15%)</title><rect x="88.4023%" y="677" width="0.1504%" height="15" fill="rgb(205,0,32)" fg:x="9993" fg:w="17"/><text x="88.6523%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.04%)</title><rect x="88.5173%" y="661" width="0.0354%" height="15" fill="rgb(229,179,12)" fg:x="10006" fg:w="4"/><text x="88.7673%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.04%)</title><rect x="88.5173%" y="645" width="0.0354%" height="15" fill="rgb(252,107,19)" fg:x="10006" fg:w="4"/><text x="88.7673%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (30 samples, 0.27%)</title><rect x="88.5616%" y="629" width="0.2654%" height="15" fill="rgb(220,95,27)" fg:x="10011" fg:w="30"/><text x="88.8116%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::bits::fixed::FixedBytes&lt;32_usize&gt;&gt;&gt; (30 samples, 0.27%)</title><rect x="88.5616%" y="613" width="0.2654%" height="15" fill="rgb(240,113,40)" fg:x="10011" fg:w="30"/><text x="88.8116%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.27%)</title><rect x="88.5616%" y="597" width="0.2654%" height="15" fill="rgb(208,4,43)" fg:x="10011" fg:w="30"/><text x="88.8116%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.10%)</title><rect x="88.7297%" y="581" width="0.0973%" height="15" fill="rgb(247,189,30)" fg:x="10030" fg:w="11"/><text x="88.9797%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.10%)</title><rect x="88.7297%" y="565" width="0.0973%" height="15" fill="rgb(231,157,17)" fg:x="10030" fg:w="11"/><text x="88.9797%" y="575.50"></text></g><g><title>__GI___libc_free (11 samples, 0.10%)</title><rect x="88.7297%" y="549" width="0.0973%" height="15" fill="rgb(224,139,6)" fg:x="10030" fg:w="11"/><text x="88.9797%" y="559.50"></text></g><g><title>_int_free (9 samples, 0.08%)</title><rect x="88.7473%" y="533" width="0.0796%" height="15" fill="rgb(223,83,16)" fg:x="10032" fg:w="9"/><text x="88.9973%" y="543.50"></text></g><g><title>_int_free (11 samples, 0.10%)</title><rect x="88.8712%" y="565" width="0.0973%" height="15" fill="rgb(232,211,20)" fg:x="10046" fg:w="11"/><text x="89.1212%" y="575.50"></text></g><g><title>__GI___libc_free (16 samples, 0.14%)</title><rect x="88.8358%" y="581" width="0.1415%" height="15" fill="rgb(225,203,35)" fg:x="10042" fg:w="16"/><text x="89.0858%" y="591.50"></text></g><g><title>core::mem::drop (20 samples, 0.18%)</title><rect x="88.9950%" y="517" width="0.1769%" height="15" fill="rgb(215,211,44)" fg:x="10060" fg:w="20"/><text x="89.2450%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (20 samples, 0.18%)</title><rect x="88.9950%" y="501" width="0.1769%" height="15" fill="rgb(248,213,26)" fg:x="10060" fg:w="20"/><text x="89.2450%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Shared&gt; (20 samples, 0.18%)</title><rect x="88.9950%" y="485" width="0.1769%" height="15" fill="rgb(214,23,52)" fg:x="10060" fg:w="20"/><text x="89.2450%" y="495.50"></text></g><g><title>&lt;bytes::bytes::Shared as core::ops::drop::Drop&gt;::drop (20 samples, 0.18%)</title><rect x="88.9950%" y="469" width="0.1769%" height="15" fill="rgb(225,173,50)" fg:x="10060" fg:w="20"/><text x="89.2450%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.18%)</title><rect x="88.9950%" y="453" width="0.1769%" height="15" fill="rgb(206,150,22)" fg:x="10060" fg:w="20"/><text x="89.2450%" y="463.50"></text></g><g><title>__GI___libc_free (20 samples, 0.18%)</title><rect x="88.9950%" y="437" width="0.1769%" height="15" fill="rgb(239,64,23)" fg:x="10060" fg:w="20"/><text x="89.2450%" y="447.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="89.1454%" y="421" width="0.0265%" height="15" fill="rgb(242,50,38)" fg:x="10077" fg:w="3"/><text x="89.3954%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.67%)</title><rect x="88.5527%" y="693" width="0.6723%" height="15" fill="rgb(217,91,15)" fg:x="10010" fg:w="76"/><text x="88.8027%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloy_primitives::log::Log]&gt; (76 samples, 0.67%)</title><rect x="88.5527%" y="677" width="0.6723%" height="15" fill="rgb(230,172,6)" fg:x="10010" fg:w="76"/><text x="88.8027%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::log::Log&gt; (75 samples, 0.66%)</title><rect x="88.5616%" y="661" width="0.6635%" height="15" fill="rgb(221,98,26)" fg:x="10011" fg:w="75"/><text x="88.8116%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::log::LogData&gt; (75 samples, 0.66%)</title><rect x="88.5616%" y="645" width="0.6635%" height="15" fill="rgb(227,210,45)" fg:x="10011" fg:w="75"/><text x="88.8116%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (45 samples, 0.40%)</title><rect x="88.8270%" y="629" width="0.3981%" height="15" fill="rgb(206,8,30)" fg:x="10041" fg:w="45"/><text x="89.0770%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (45 samples, 0.40%)</title><rect x="88.8270%" y="613" width="0.3981%" height="15" fill="rgb(241,219,17)" fg:x="10041" fg:w="45"/><text x="89.0770%" y="623.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (45 samples, 0.40%)</title><rect x="88.8270%" y="597" width="0.3981%" height="15" fill="rgb(247,121,29)" fg:x="10041" fg:w="45"/><text x="89.0770%" y="607.50"></text></g><g><title>bytes::bytes::shared_drop (27 samples, 0.24%)</title><rect x="88.9862%" y="581" width="0.2389%" height="15" fill="rgb(219,169,49)" fg:x="10059" fg:w="27"/><text x="89.2362%" y="591.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (27 samples, 0.24%)</title><rect x="88.9862%" y="565" width="0.2389%" height="15" fill="rgb(253,49,49)" fg:x="10059" fg:w="27"/><text x="89.2362%" y="575.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (27 samples, 0.24%)</title><rect x="88.9862%" y="549" width="0.2389%" height="15" fill="rgb(217,178,3)" fg:x="10059" fg:w="27"/><text x="89.2362%" y="559.50"></text></g><g><title>bytes::bytes::release_shared (26 samples, 0.23%)</title><rect x="88.9950%" y="533" width="0.2300%" height="15" fill="rgb(234,73,37)" fg:x="10060" fg:w="26"/><text x="89.2450%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.05%)</title><rect x="89.1720%" y="517" width="0.0531%" height="15" fill="rgb(250,98,22)" fg:x="10080" fg:w="6"/><text x="89.4220%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.05%)</title><rect x="89.1720%" y="501" width="0.0531%" height="15" fill="rgb(220,108,37)" fg:x="10080" fg:w="6"/><text x="89.4220%" y="511.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.03%)</title><rect x="89.4020%" y="581" width="0.0265%" height="15" fill="rgb(225,168,10)" fg:x="10106" fg:w="3"/><text x="89.6520%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (112 samples, 0.99%)</title><rect x="88.5527%" y="725" width="0.9908%" height="15" fill="rgb(247,215,21)" fg:x="10010" fg:w="112"/><text x="88.8027%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (112 samples, 0.99%)</title><rect x="88.5527%" y="709" width="0.9908%" height="15" fill="rgb(253,189,31)" fg:x="10010" fg:w="112"/><text x="88.8027%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloy_primitives::log::Log&gt;&gt; (36 samples, 0.32%)</title><rect x="89.2251%" y="693" width="0.3185%" height="15" fill="rgb(241,54,22)" fg:x="10086" fg:w="36"/><text x="89.4751%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.32%)</title><rect x="89.2251%" y="677" width="0.3185%" height="15" fill="rgb(211,87,4)" fg:x="10086" fg:w="36"/><text x="89.4751%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36 samples, 0.32%)</title><rect x="89.2251%" y="661" width="0.3185%" height="15" fill="rgb(245,112,24)" fg:x="10086" fg:w="36"/><text x="89.4751%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.32%)</title><rect x="89.2251%" y="645" width="0.3185%" height="15" fill="rgb(235,190,41)" fg:x="10086" fg:w="36"/><text x="89.4751%" y="655.50"></text></g><g><title>__GI___libc_free (36 samples, 0.32%)</title><rect x="89.2251%" y="629" width="0.3185%" height="15" fill="rgb(214,89,8)" fg:x="10086" fg:w="36"/><text x="89.4751%" y="639.50"></text></g><g><title>_int_free (36 samples, 0.32%)</title><rect x="89.2251%" y="613" width="0.3185%" height="15" fill="rgb(249,155,35)" fg:x="10086" fg:w="36"/><text x="89.4751%" y="623.50"></text></g><g><title>_int_free_merge_chunk (29 samples, 0.26%)</title><rect x="89.2870%" y="597" width="0.2565%" height="15" fill="rgb(249,88,26)" fg:x="10093" fg:w="29"/><text x="89.5370%" y="607.50"></text></g><g><title>unlink_chunk (13 samples, 0.12%)</title><rect x="89.4285%" y="581" width="0.1150%" height="15" fill="rgb(232,56,8)" fg:x="10109" fg:w="13"/><text x="89.6785%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="89.5435%" y="629" width="0.0354%" height="15" fill="rgb(240,95,3)" fg:x="10122" fg:w="4"/><text x="89.7935%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.02%)</title><rect x="89.5612%" y="613" width="0.0177%" height="15" fill="rgb(222,44,28)" fg:x="10124" fg:w="2"/><text x="89.8112%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="89.5612%" y="597" width="0.0177%" height="15" fill="rgb(234,16,30)" fg:x="10124" fg:w="2"/><text x="89.8112%" y="607.50"></text></g><g><title>_int_free_maybe_consolidate (166 samples, 1.47%)</title><rect x="89.7381%" y="565" width="1.4685%" height="15" fill="rgb(223,26,17)" fg:x="10144" fg:w="166"/><text x="89.9881%" y="575.50"></text></g><g><title>malloc_consolidate (165 samples, 1.46%)</title><rect x="89.7470%" y="549" width="1.4597%" height="15" fill="rgb(239,187,47)" fg:x="10145" fg:w="165"/><text x="89.9970%" y="559.50"></text></g><g><title>unlink_chunk (95 samples, 0.84%)</title><rect x="90.3662%" y="533" width="0.8404%" height="15" fill="rgb(247,102,50)" fg:x="10215" fg:w="95"/><text x="90.6162%" y="543.50"></text></g><g><title>_int_free_create_chunk (8 samples, 0.07%)</title><rect x="91.3128%" y="549" width="0.0708%" height="15" fill="rgb(231,216,22)" fg:x="10322" fg:w="8"/><text x="91.5628%" y="559.50"></text></g><g><title>_int_free_merge_chunk (22 samples, 0.19%)</title><rect x="91.2067%" y="565" width="0.1946%" height="15" fill="rgb(216,201,26)" fg:x="10310" fg:w="22"/><text x="91.4567%" y="575.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="91.3836%" y="549" width="0.0177%" height="15" fill="rgb(214,186,23)" fg:x="10330" fg:w="2"/><text x="91.6336%" y="559.50"></text></g><g><title>__mem_cgroup_uncharge_list (2 samples, 0.02%)</title><rect x="91.4544%" y="261" width="0.0177%" height="15" fill="rgb(235,184,4)" fg:x="10338" fg:w="2"/><text x="91.7044%" y="271.50"></text></g><g><title>uncharge_folio (2 samples, 0.02%)</title><rect x="91.4544%" y="245" width="0.0177%" height="15" fill="rgb(244,46,17)" fg:x="10338" fg:w="2"/><text x="91.7044%" y="255.50"></text></g><g><title>free_unref_page_list (2 samples, 0.02%)</title><rect x="91.4720%" y="261" width="0.0177%" height="15" fill="rgb(248,74,46)" fg:x="10340" fg:w="2"/><text x="91.7220%" y="271.50"></text></g><g><title>_int_free (211 samples, 1.87%)</title><rect x="89.6497%" y="581" width="1.8666%" height="15" fill="rgb(243,79,5)" fg:x="10134" fg:w="211"/><text x="89.8997%" y="591.50">_..</text></g><g><title>systrim (13 samples, 0.12%)</title><rect x="91.4013%" y="565" width="0.1150%" height="15" fill="rgb(213,148,1)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="575.50"></text></g><g><title>__glibc_morecore (13 samples, 0.12%)</title><rect x="91.4013%" y="549" width="0.1150%" height="15" fill="rgb(221,30,0)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="559.50"></text></g><g><title>__GI___sbrk (13 samples, 0.12%)</title><rect x="91.4013%" y="533" width="0.1150%" height="15" fill="rgb(207,85,29)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="543.50"></text></g><g><title>__brk (13 samples, 0.12%)</title><rect x="91.4013%" y="517" width="0.1150%" height="15" fill="rgb(239,31,46)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (13 samples, 0.12%)</title><rect x="91.4013%" y="501" width="0.1150%" height="15" fill="rgb(219,6,1)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="511.50"></text></g><g><title>do_syscall_64 (13 samples, 0.12%)</title><rect x="91.4013%" y="485" width="0.1150%" height="15" fill="rgb(229,90,29)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="495.50"></text></g><g><title>__x64_sys_brk (13 samples, 0.12%)</title><rect x="91.4013%" y="469" width="0.1150%" height="15" fill="rgb(242,201,42)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="479.50"></text></g><g><title>__do_sys_brk (13 samples, 0.12%)</title><rect x="91.4013%" y="453" width="0.1150%" height="15" fill="rgb(243,80,54)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="463.50"></text></g><g><title>do_vmi_align_munmap (13 samples, 0.12%)</title><rect x="91.4013%" y="437" width="0.1150%" height="15" fill="rgb(223,166,15)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="447.50"></text></g><g><title>unmap_region (13 samples, 0.12%)</title><rect x="91.4013%" y="421" width="0.1150%" height="15" fill="rgb(238,78,27)" fg:x="10332" fg:w="13"/><text x="91.6513%" y="431.50"></text></g><g><title>unmap_vmas (12 samples, 0.11%)</title><rect x="91.4101%" y="405" width="0.1062%" height="15" fill="rgb(235,28,43)" fg:x="10333" fg:w="12"/><text x="91.6601%" y="415.50"></text></g><g><title>unmap_single_vma (12 samples, 0.11%)</title><rect x="91.4101%" y="389" width="0.1062%" height="15" fill="rgb(240,210,28)" fg:x="10333" fg:w="12"/><text x="91.6601%" y="399.50"></text></g><g><title>unmap_page_range (12 samples, 0.11%)</title><rect x="91.4101%" y="373" width="0.1062%" height="15" fill="rgb(253,6,46)" fg:x="10333" fg:w="12"/><text x="91.6601%" y="383.50"></text></g><g><title>zap_pmd_range.isra.0 (12 samples, 0.11%)</title><rect x="91.4101%" y="357" width="0.1062%" height="15" fill="rgb(250,159,47)" fg:x="10333" fg:w="12"/><text x="91.6601%" y="367.50"></text></g><g><title>zap_pte_range (11 samples, 0.10%)</title><rect x="91.4190%" y="341" width="0.0973%" height="15" fill="rgb(216,139,2)" fg:x="10334" fg:w="11"/><text x="91.6690%" y="351.50"></text></g><g><title>tlb_flush_mmu (9 samples, 0.08%)</title><rect x="91.4367%" y="325" width="0.0796%" height="15" fill="rgb(221,124,44)" fg:x="10336" fg:w="9"/><text x="91.6867%" y="335.50"></text></g><g><title>tlb_batch_pages_flush (9 samples, 0.08%)</title><rect x="91.4367%" y="309" width="0.0796%" height="15" fill="rgb(205,37,22)" fg:x="10336" fg:w="9"/><text x="91.6867%" y="319.50"></text></g><g><title>free_pages_and_swap_cache (9 samples, 0.08%)</title><rect x="91.4367%" y="293" width="0.0796%" height="15" fill="rgb(250,55,8)" fg:x="10336" fg:w="9"/><text x="91.6867%" y="303.50"></text></g><g><title>release_pages (9 samples, 0.08%)</title><rect x="91.4367%" y="277" width="0.0796%" height="15" fill="rgb(215,83,48)" fg:x="10336" fg:w="9"/><text x="91.6867%" y="287.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (3 samples, 0.03%)</title><rect x="91.4897%" y="261" width="0.0265%" height="15" fill="rgb(253,2,32)" fg:x="10342" fg:w="3"/><text x="91.7397%" y="271.50"></text></g><g><title>__mod_lruvec_state (3 samples, 0.03%)</title><rect x="91.4897%" y="245" width="0.0265%" height="15" fill="rgb(236,67,28)" fg:x="10342" fg:w="3"/><text x="91.7397%" y="255.50"></text></g><g><title>__GI___libc_free (220 samples, 1.95%)</title><rect x="89.5789%" y="597" width="1.9462%" height="15" fill="rgb(252,55,15)" fg:x="10126" fg:w="220"/><text x="89.8289%" y="607.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (7 samples, 0.06%)</title><rect x="91.7109%" y="517" width="0.0619%" height="15" fill="rgb(243,173,17)" fg:x="10367" fg:w="7"/><text x="91.9609%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (7 samples, 0.06%)</title><rect x="91.7109%" y="501" width="0.0619%" height="15" fill="rgb(215,212,13)" fg:x="10367" fg:w="7"/><text x="91.9609%" y="511.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="91.7109%" y="485" width="0.0619%" height="15" fill="rgb(253,176,6)" fg:x="10367" fg:w="7"/><text x="91.9609%" y="495.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.02%)</title><rect x="91.7551%" y="469" width="0.0177%" height="15" fill="rgb(236,105,26)" fg:x="10372" fg:w="2"/><text x="92.0051%" y="479.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="91.7551%" y="453" width="0.0177%" height="15" fill="rgb(239,226,32)" fg:x="10372" fg:w="2"/><text x="92.0051%" y="463.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.02%)</title><rect x="91.7551%" y="437" width="0.0177%" height="15" fill="rgb(236,104,51)" fg:x="10372" fg:w="2"/><text x="92.0051%" y="447.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.02%)</title><rect x="91.7551%" y="421" width="0.0177%" height="15" fill="rgb(220,172,33)" fg:x="10372" fg:w="2"/><text x="92.0051%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="91.7551%" y="405" width="0.0177%" height="15" fill="rgb(224,182,25)" fg:x="10372" fg:w="2"/><text x="92.0051%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="91.7551%" y="389" width="0.0177%" height="15" fill="rgb(236,184,24)" fg:x="10372" fg:w="2"/><text x="92.0051%" y="399.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="91.7817%" y="453" width="0.0354%" height="15" fill="rgb(241,221,14)" fg:x="10375" fg:w="4"/><text x="92.0317%" y="463.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="91.7905%" y="437" width="0.0265%" height="15" fill="rgb(227,146,5)" fg:x="10376" fg:w="3"/><text x="92.0405%" y="447.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="91.8259%" y="437" width="0.0265%" height="15" fill="rgb(214,15,23)" fg:x="10380" fg:w="3"/><text x="92.0759%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;bitvec::vec::BitVec&lt;u8&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="91.8259%" y="421" width="0.0265%" height="15" fill="rgb(233,157,31)" fg:x="10380" fg:w="3"/><text x="92.0759%" y="431.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="91.8259%" y="405" width="0.0265%" height="15" fill="rgb(211,27,52)" fg:x="10380" fg:w="3"/><text x="92.0759%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="91.8259%" y="389" width="0.0265%" height="15" fill="rgb(212,223,15)" fg:x="10380" fg:w="3"/><text x="92.0759%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="91.8259%" y="373" width="0.0265%" height="15" fill="rgb(254,211,0)" fg:x="10380" fg:w="3"/><text x="92.0759%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.10%)</title><rect x="91.8259%" y="453" width="0.0973%" height="15" fill="rgb(205,43,38)" fg:x="10380" fg:w="11"/><text x="92.0759%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&lt;u8&gt;&gt; (8 samples, 0.07%)</title><rect x="91.8524%" y="437" width="0.0708%" height="15" fill="rgb(242,206,46)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="447.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (8 samples, 0.07%)</title><rect x="91.8524%" y="421" width="0.0708%" height="15" fill="rgb(220,221,12)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="431.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (8 samples, 0.07%)</title><rect x="91.8524%" y="405" width="0.0708%" height="15" fill="rgb(217,156,35)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="415.50"></text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (8 samples, 0.07%)</title><rect x="91.8524%" y="389" width="0.0708%" height="15" fill="rgb(207,181,49)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="399.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (8 samples, 0.07%)</title><rect x="91.8524%" y="373" width="0.0708%" height="15" fill="rgb(235,103,47)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.07%)</title><rect x="91.8524%" y="357" width="0.0708%" height="15" fill="rgb(222,63,28)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.07%)</title><rect x="91.8524%" y="341" width="0.0708%" height="15" fill="rgb(244,137,21)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="91.8524%" y="325" width="0.0708%" height="15" fill="rgb(228,35,27)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.07%)</title><rect x="91.8524%" y="309" width="0.0708%" height="15" fill="rgb(226,191,41)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.07%)</title><rect x="91.8524%" y="293" width="0.0708%" height="15" fill="rgb(210,154,3)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="303.50"></text></g><g><title>__GI___libc_free (8 samples, 0.07%)</title><rect x="91.8524%" y="277" width="0.0708%" height="15" fill="rgb(216,60,49)" fg:x="10383" fg:w="8"/><text x="92.1024%" y="287.50"></text></g><g><title>_int_free (6 samples, 0.05%)</title><rect x="91.8701%" y="261" width="0.0531%" height="15" fill="rgb(226,17,20)" fg:x="10385" fg:w="6"/><text x="92.1201%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (53 samples, 0.47%)</title><rect x="91.5694%" y="565" width="0.4689%" height="15" fill="rgb(206,115,35)" fg:x="10351" fg:w="53"/><text x="91.8194%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (53 samples, 0.47%)</title><rect x="91.5694%" y="549" width="0.4689%" height="15" fill="rgb(227,88,1)" fg:x="10351" fg:w="53"/><text x="91.8194%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (37 samples, 0.33%)</title><rect x="91.7109%" y="533" width="0.3273%" height="15" fill="rgb(230,222,24)" fg:x="10367" fg:w="37"/><text x="91.9609%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (30 samples, 0.27%)</title><rect x="91.7728%" y="517" width="0.2654%" height="15" fill="rgb(214,124,32)" fg:x="10374" fg:w="30"/><text x="92.0228%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (29 samples, 0.26%)</title><rect x="91.7817%" y="501" width="0.2565%" height="15" fill="rgb(240,41,36)" fg:x="10375" fg:w="29"/><text x="92.0317%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (29 samples, 0.26%)</title><rect x="91.7817%" y="485" width="0.2565%" height="15" fill="rgb(221,17,52)" fg:x="10375" fg:w="29"/><text x="92.0317%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.26%)</title><rect x="91.7817%" y="469" width="0.2565%" height="15" fill="rgb(252,70,16)" fg:x="10375" fg:w="29"/><text x="92.0317%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.12%)</title><rect x="91.9232%" y="453" width="0.1150%" height="15" fill="rgb(250,177,4)" fg:x="10391" fg:w="13"/><text x="92.1732%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.12%)</title><rect x="91.9232%" y="437" width="0.1150%" height="15" fill="rgb(240,188,47)" fg:x="10391" fg:w="13"/><text x="92.1732%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (279 samples, 2.47%)</title><rect x="89.5789%" y="629" width="2.4682%" height="15" fill="rgb(215,92,12)" fg:x="10126" fg:w="279"/><text x="89.8289%" y="639.50">ha..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (279 samples, 2.47%)</title><rect x="89.5789%" y="613" width="2.4682%" height="15" fill="rgb(242,110,29)" fg:x="10126" fg:w="279"/><text x="89.8289%" y="623.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (58 samples, 0.51%)</title><rect x="91.5340%" y="597" width="0.5131%" height="15" fill="rgb(208,211,26)" fg:x="10347" fg:w="58"/><text x="91.7840%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (58 samples, 0.51%)</title><rect x="91.5340%" y="581" width="0.5131%" height="15" fill="rgb(244,147,6)" fg:x="10347" fg:w="58"/><text x="91.7840%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (287 samples, 2.54%)</title><rect x="89.5435%" y="645" width="2.5389%" height="15" fill="rgb(211,130,42)" fg:x="10122" fg:w="287"/><text x="89.7935%" y="655.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::iter (4 samples, 0.04%)</title><rect x="92.0471%" y="629" width="0.0354%" height="15" fill="rgb(220,63,1)" fg:x="10405" fg:w="4"/><text x="92.2971%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (4 samples, 0.04%)</title><rect x="92.0471%" y="613" width="0.0354%" height="15" fill="rgb(241,212,30)" fg:x="10405" fg:w="4"/><text x="92.2971%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (4 samples, 0.04%)</title><rect x="92.0471%" y="597" width="0.0354%" height="15" fill="rgb(233,153,17)" fg:x="10405" fg:w="4"/><text x="92.2971%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (4 samples, 0.04%)</title><rect x="92.0471%" y="581" width="0.0354%" height="15" fill="rgb(236,3,10)" fg:x="10405" fg:w="4"/><text x="92.2971%" y="591.50"></text></g><g><title>_int_free_maybe_consolidate (6 samples, 0.05%)</title><rect x="92.1267%" y="565" width="0.0531%" height="15" fill="rgb(232,41,21)" fg:x="10414" fg:w="6"/><text x="92.3767%" y="575.50"></text></g><g><title>malloc_consolidate (5 samples, 0.04%)</title><rect x="92.1355%" y="549" width="0.0442%" height="15" fill="rgb(206,63,51)" fg:x="10415" fg:w="5"/><text x="92.3855%" y="559.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="92.1621%" y="533" width="0.0177%" height="15" fill="rgb(250,214,3)" fg:x="10418" fg:w="2"/><text x="92.4121%" y="543.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.03%)</title><rect x="92.2063%" y="549" width="0.0265%" height="15" fill="rgb(254,89,27)" fg:x="10423" fg:w="3"/><text x="92.4563%" y="559.50"></text></g><g><title>_int_free_merge_chunk (7 samples, 0.06%)</title><rect x="92.1798%" y="565" width="0.0619%" height="15" fill="rgb(249,41,14)" fg:x="10420" fg:w="7"/><text x="92.4298%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (447 samples, 3.95%)</title><rect x="88.2962%" y="773" width="3.9544%" height="15" fill="rgb(221,196,51)" fg:x="9981" fg:w="447"/><text x="88.5462%" y="783.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;[revm_primitives::result::ResultAndState]&gt; (447 samples, 3.95%)</title><rect x="88.2962%" y="757" width="3.9544%" height="15" fill="rgb(214,116,26)" fg:x="9981" fg:w="447"/><text x="88.5462%" y="767.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (447 samples, 3.95%)</title><rect x="88.2962%" y="741" width="3.9544%" height="15" fill="rgb(236,67,7)" fg:x="9981" fg:w="447"/><text x="88.5462%" y="751.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (306 samples, 2.71%)</title><rect x="89.5435%" y="725" width="2.7070%" height="15" fill="rgb(253,179,32)" fg:x="10122" fg:w="306"/><text x="89.7935%" y="735.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (306 samples, 2.71%)</title><rect x="89.5435%" y="709" width="2.7070%" height="15" fill="rgb(218,33,15)" fg:x="10122" fg:w="306"/><text x="89.7935%" y="719.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (306 samples, 2.71%)</title><rect x="89.5435%" y="693" width="2.7070%" height="15" fill="rgb(217,202,41)" fg:x="10122" fg:w="306"/><text x="89.7935%" y="703.50">co..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (306 samples, 2.71%)</title><rect x="89.5435%" y="677" width="2.7070%" height="15" fill="rgb(234,133,5)" fg:x="10122" fg:w="306"/><text x="89.7935%" y="687.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (306 samples, 2.71%)</title><rect x="89.5435%" y="661" width="2.7070%" height="15" fill="rgb(240,47,40)" fg:x="10122" fg:w="306"/><text x="89.7935%" y="671.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (19 samples, 0.17%)</title><rect x="92.0824%" y="645" width="0.1681%" height="15" fill="rgb(234,166,26)" fg:x="10409" fg:w="19"/><text x="92.3324%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.17%)</title><rect x="92.0824%" y="629" width="0.1681%" height="15" fill="rgb(244,125,51)" fg:x="10409" fg:w="19"/><text x="92.3324%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.17%)</title><rect x="92.0824%" y="613" width="0.1681%" height="15" fill="rgb(229,171,11)" fg:x="10409" fg:w="19"/><text x="92.3324%" y="623.50"></text></g><g><title>__GI___libc_free (19 samples, 0.17%)</title><rect x="92.0824%" y="597" width="0.1681%" height="15" fill="rgb(224,38,45)" fg:x="10409" fg:w="19"/><text x="92.3324%" y="607.50"></text></g><g><title>_int_free (19 samples, 0.17%)</title><rect x="92.0824%" y="581" width="0.1681%" height="15" fill="rgb(237,27,7)" fg:x="10409" fg:w="19"/><text x="92.3324%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::result::ResultAndState&gt;&gt; (451 samples, 3.99%)</title><rect x="88.2873%" y="789" width="3.9897%" height="15" fill="rgb(216,52,7)" fg:x="9980" fg:w="451"/><text x="88.5373%" y="799.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;revm_primitives::result::ResultAndState&gt;&gt; (3 samples, 0.03%)</title><rect x="92.2505%" y="773" width="0.0265%" height="15" fill="rgb(243,11,11)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="92.2505%" y="757" width="0.0265%" height="15" fill="rgb(253,167,20)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="92.2505%" y="741" width="0.0265%" height="15" fill="rgb(215,207,5)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="92.2505%" y="725" width="0.0265%" height="15" fill="rgb(252,127,31)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="735.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="92.2505%" y="709" width="0.0265%" height="15" fill="rgb(209,106,27)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="719.50"></text></g><g><title>__GI_munmap (3 samples, 0.03%)</title><rect x="92.2505%" y="693" width="0.0265%" height="15" fill="rgb(214,220,18)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="92.2505%" y="677" width="0.0265%" height="15" fill="rgb(237,89,12)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="687.50"></text></g><g><title>do_syscall_64 (3 samples, 0.03%)</title><rect x="92.2505%" y="661" width="0.0265%" height="15" fill="rgb(209,167,36)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="671.50"></text></g><g><title>__x64_sys_munmap (3 samples, 0.03%)</title><rect x="92.2505%" y="645" width="0.0265%" height="15" fill="rgb(243,45,22)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="655.50"></text></g><g><title>__vm_munmap (3 samples, 0.03%)</title><rect x="92.2505%" y="629" width="0.0265%" height="15" fill="rgb(239,2,46)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="639.50"></text></g><g><title>do_vmi_munmap (3 samples, 0.03%)</title><rect x="92.2505%" y="613" width="0.0265%" height="15" fill="rgb(241,101,0)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="623.50"></text></g><g><title>do_vmi_align_munmap (3 samples, 0.03%)</title><rect x="92.2505%" y="597" width="0.0265%" height="15" fill="rgb(244,34,31)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="607.50"></text></g><g><title>unmap_region (3 samples, 0.03%)</title><rect x="92.2505%" y="581" width="0.0265%" height="15" fill="rgb(248,23,22)" fg:x="10428" fg:w="3"/><text x="92.5005%" y="591.50"></text></g><g><title>unmap_vmas (2 samples, 0.02%)</title><rect x="92.2594%" y="565" width="0.0177%" height="15" fill="rgb(218,27,48)" fg:x="10429" fg:w="2"/><text x="92.5094%" y="575.50"></text></g><g><title>unmap_single_vma (2 samples, 0.02%)</title><rect x="92.2594%" y="549" width="0.0177%" height="15" fill="rgb(232,78,1)" fg:x="10429" fg:w="2"/><text x="92.5094%" y="559.50"></text></g><g><title>unmap_page_range (2 samples, 0.02%)</title><rect x="92.2594%" y="533" width="0.0177%" height="15" fill="rgb(233,169,12)" fg:x="10429" fg:w="2"/><text x="92.5094%" y="543.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.02%)</title><rect x="92.2594%" y="517" width="0.0177%" height="15" fill="rgb(225,222,54)" fg:x="10429" fg:w="2"/><text x="92.5094%" y="527.50"></text></g><g><title>zap_pte_range (2 samples, 0.02%)</title><rect x="92.2594%" y="501" width="0.0177%" height="15" fill="rgb(245,126,29)" fg:x="10429" fg:w="2"/><text x="92.5094%" y="511.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="92.2771%" y="677" width="0.0177%" height="15" fill="rgb(241,63,48)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="687.50"></text></g><g><title>__GI_munmap (2 samples, 0.02%)</title><rect x="92.2771%" y="661" width="0.0177%" height="15" fill="rgb(235,126,38)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="92.2771%" y="645" width="0.0177%" height="15" fill="rgb(232,96,49)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="655.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="92.2771%" y="629" width="0.0177%" height="15" fill="rgb(211,146,40)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="639.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.02%)</title><rect x="92.2771%" y="613" width="0.0177%" height="15" fill="rgb(247,93,44)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="623.50"></text></g><g><title>__vm_munmap (2 samples, 0.02%)</title><rect x="92.2771%" y="597" width="0.0177%" height="15" fill="rgb(251,41,49)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="607.50"></text></g><g><title>do_vmi_munmap (2 samples, 0.02%)</title><rect x="92.2771%" y="581" width="0.0177%" height="15" fill="rgb(218,155,12)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="591.50"></text></g><g><title>do_vmi_align_munmap (2 samples, 0.02%)</title><rect x="92.2771%" y="565" width="0.0177%" height="15" fill="rgb(221,161,30)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="575.50"></text></g><g><title>unmap_region (2 samples, 0.02%)</title><rect x="92.2771%" y="549" width="0.0177%" height="15" fill="rgb(221,179,11)" fg:x="10431" fg:w="2"/><text x="92.5271%" y="559.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="92.3301%" y="501" width="0.0265%" height="15" fill="rgb(224,170,48)" fg:x="10437" fg:w="3"/><text x="92.5801%" y="511.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="92.3301%" y="485" width="0.0265%" height="15" fill="rgb(223,117,5)" fg:x="10437" fg:w="3"/><text x="92.5801%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.04%)</title><rect x="92.3567%" y="501" width="0.0442%" height="15" fill="rgb(209,52,20)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="92.3567%" y="485" width="0.0442%" height="15" fill="rgb(209,19,41)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="495.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (5 samples, 0.04%)</title><rect x="92.3567%" y="469" width="0.0442%" height="15" fill="rgb(210,177,12)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="479.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (5 samples, 0.04%)</title><rect x="92.3567%" y="453" width="0.0442%" height="15" fill="rgb(211,159,37)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="463.50"></text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (5 samples, 0.04%)</title><rect x="92.3567%" y="437" width="0.0442%" height="15" fill="rgb(209,20,2)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="447.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (5 samples, 0.04%)</title><rect x="92.3567%" y="421" width="0.0442%" height="15" fill="rgb(244,3,46)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="92.3567%" y="405" width="0.0442%" height="15" fill="rgb(220,94,38)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="92.3567%" y="389" width="0.0442%" height="15" fill="rgb(253,14,31)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="92.3567%" y="373" width="0.0442%" height="15" fill="rgb(234,176,13)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="92.3567%" y="357" width="0.0442%" height="15" fill="rgb(218,62,25)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="92.3567%" y="341" width="0.0442%" height="15" fill="rgb(216,124,40)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="351.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="92.3567%" y="325" width="0.0442%" height="15" fill="rgb(228,170,12)" fg:x="10440" fg:w="5"/><text x="92.6067%" y="335.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="92.3744%" y="309" width="0.0265%" height="15" fill="rgb(231,226,5)" fg:x="10442" fg:w="3"/><text x="92.6244%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (33 samples, 0.29%)</title><rect x="92.2771%" y="693" width="0.2919%" height="15" fill="rgb(237,122,22)" fg:x="10431" fg:w="33"/><text x="92.5271%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (31 samples, 0.27%)</title><rect x="92.2948%" y="677" width="0.2742%" height="15" fill="rgb(209,185,25)" fg:x="10433" fg:w="31"/><text x="92.5448%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (31 samples, 0.27%)</title><rect x="92.2948%" y="661" width="0.2742%" height="15" fill="rgb(228,200,32)" fg:x="10433" fg:w="31"/><text x="92.5448%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt; (31 samples, 0.27%)</title><rect x="92.2948%" y="645" width="0.2742%" height="15" fill="rgb(217,140,10)" fg:x="10433" fg:w="31"/><text x="92.5448%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::db::in_memory_db::DbAccount&gt; (31 samples, 0.27%)</title><rect x="92.2948%" y="629" width="0.2742%" height="15" fill="rgb(253,17,24)" fg:x="10433" fg:w="31"/><text x="92.5448%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (31 samples, 0.27%)</title><rect x="92.2948%" y="613" width="0.2742%" height="15" fill="rgb(212,61,6)" fg:x="10433" fg:w="31"/><text x="92.5448%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (31 samples, 0.27%)</title><rect x="92.2948%" y="597" width="0.2742%" height="15" fill="rgb(205,14,25)" fg:x="10433" fg:w="31"/><text x="92.5448%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (28 samples, 0.25%)</title><rect x="92.3213%" y="581" width="0.2477%" height="15" fill="rgb(232,69,41)" fg:x="10436" fg:w="28"/><text x="92.5713%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (27 samples, 0.24%)</title><rect x="92.3301%" y="565" width="0.2389%" height="15" fill="rgb(241,106,47)" fg:x="10437" fg:w="27"/><text x="92.5801%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (27 samples, 0.24%)</title><rect x="92.3301%" y="549" width="0.2389%" height="15" fill="rgb(210,213,53)" fg:x="10437" fg:w="27"/><text x="92.5801%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (27 samples, 0.24%)</title><rect x="92.3301%" y="533" width="0.2389%" height="15" fill="rgb(253,175,27)" fg:x="10437" fg:w="27"/><text x="92.5801%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.24%)</title><rect x="92.3301%" y="517" width="0.2389%" height="15" fill="rgb(211,171,24)" fg:x="10437" fg:w="27"/><text x="92.5801%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.17%)</title><rect x="92.4009%" y="501" width="0.1681%" height="15" fill="rgb(229,80,7)" fg:x="10445" fg:w="19"/><text x="92.6509%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.17%)</title><rect x="92.4009%" y="485" width="0.1681%" height="15" fill="rgb(212,46,39)" fg:x="10445" fg:w="19"/><text x="92.6509%" y="495.50"></text></g><g><title>_compound_head (2 samples, 0.02%)</title><rect x="92.5690%" y="437" width="0.0177%" height="15" fill="rgb(240,80,45)" fg:x="10464" fg:w="2"/><text x="92.8190%" y="447.50"></text></g><g><title>page_remove_rmap (2 samples, 0.02%)</title><rect x="92.5955%" y="421" width="0.0177%" height="15" fill="rgb(253,177,40)" fg:x="10467" fg:w="2"/><text x="92.8455%" y="431.50"></text></g><g><title>_start (1,766 samples, 15.62%)</title><rect x="77.0081%" y="1061" width="15.6228%" height="15" fill="rgb(249,200,15)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="1071.50">_start</text></g><g><title>__libc_start_main_impl (1,766 samples, 15.62%)</title><rect x="77.0081%" y="1045" width="15.6228%" height="15" fill="rgb(217,78,26)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="1055.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,766 samples, 15.62%)</title><rect x="77.0081%" y="1029" width="15.6228%" height="15" fill="rgb(254,151,32)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="1039.50">__libc_start_call_main</text></g><g><title>main (1,766 samples, 15.62%)</title><rect x="77.0081%" y="1013" width="15.6228%" height="15" fill="rgb(226,165,27)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,766 samples, 15.62%)</title><rect x="77.0081%" y="997" width="15.6228%" height="15" fill="rgb(250,206,4)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="1007.50">std::rt::lang_start_inte..</text></g><g><title>std::panic::catch_unwind (1,766 samples, 15.62%)</title><rect x="77.0081%" y="981" width="15.6228%" height="15" fill="rgb(231,229,27)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,766 samples, 15.62%)</title><rect x="77.0081%" y="965" width="15.6228%" height="15" fill="rgb(239,217,8)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,766 samples, 15.62%)</title><rect x="77.0081%" y="949" width="15.6228%" height="15" fill="rgb(225,204,27)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="959.50">std::panicking::try::do_..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,766 samples, 15.62%)</title><rect x="77.0081%" y="933" width="15.6228%" height="15" fill="rgb(230,56,32)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="943.50">std::rt::lang_start_inte..</text></g><g><title>std::panic::catch_unwind (1,766 samples, 15.62%)</title><rect x="77.0081%" y="917" width="15.6228%" height="15" fill="rgb(222,56,27)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,766 samples, 15.62%)</title><rect x="77.0081%" y="901" width="15.6228%" height="15" fill="rgb(253,108,27)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,766 samples, 15.62%)</title><rect x="77.0081%" y="885" width="15.6228%" height="15" fill="rgb(212,87,36)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="895.50">std::panicking::try::do_..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,766 samples, 15.62%)</title><rect x="77.0081%" y="869" width="15.6228%" height="15" fill="rgb(247,82,36)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="879.50">core::ops::function::imp..</text></g><g><title>std::rt::lang_start::_{{closure}} (1,766 samples, 15.62%)</title><rect x="77.0081%" y="853" width="15.6228%" height="15" fill="rgb(222,143,9)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="863.50">std::rt::lang_start::_{{..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,766 samples, 15.62%)</title><rect x="77.0081%" y="837" width="15.6228%" height="15" fill="rgb(238,162,48)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="847.50">std::sys_common::backtra..</text></g><g><title>core::ops::function::FnOnce::call_once (1,766 samples, 15.62%)</title><rect x="77.0081%" y="821" width="15.6228%" height="15" fill="rgb(221,59,43)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="831.50">core::ops::function::FnO..</text></g><g><title>block_stm_revm::main (1,766 samples, 15.62%)</title><rect x="77.0081%" y="805" width="15.6228%" height="15" fill="rgb(205,166,41)" fg:x="8705" fg:w="1766"/><text x="77.2581%" y="815.50">block_stm_revm::main</text></g><g><title>core::ptr::drop_in_place&lt;block_stm_revm::storage::Storage&gt; (40 samples, 0.35%)</title><rect x="92.2771%" y="789" width="0.3539%" height="15" fill="rgb(241,186,40)" fg:x="10431" fg:w="40"/><text x="92.5271%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount&gt;&gt; (40 samples, 0.35%)</title><rect x="92.2771%" y="773" width="0.3539%" height="15" fill="rgb(216,119,35)" fg:x="10431" fg:w="40"/><text x="92.5271%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount,std::hash::random::RandomState&gt;&gt; (40 samples, 0.35%)</title><rect x="92.2771%" y="757" width="0.3539%" height="15" fill="rgb(208,68,38)" fg:x="10431" fg:w="40"/><text x="92.5271%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt;&gt; (40 samples, 0.35%)</title><rect x="92.2771%" y="741" width="0.3539%" height="15" fill="rgb(217,113,1)" fg:x="10431" fg:w="40"/><text x="92.5271%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.35%)</title><rect x="92.2771%" y="725" width="0.3539%" height="15" fill="rgb(242,153,3)" fg:x="10431" fg:w="40"/><text x="92.5271%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (40 samples, 0.35%)</title><rect x="92.2771%" y="709" width="0.3539%" height="15" fill="rgb(229,76,35)" fg:x="10431" fg:w="40"/><text x="92.5271%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (7 samples, 0.06%)</title><rect x="92.5690%" y="693" width="0.0619%" height="15" fill="rgb(229,125,34)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.06%)</title><rect x="92.5690%" y="677" width="0.0619%" height="15" fill="rgb(238,179,36)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.06%)</title><rect x="92.5690%" y="661" width="0.0619%" height="15" fill="rgb(244,183,19)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="671.50"></text></g><g><title>__GI___libc_free (7 samples, 0.06%)</title><rect x="92.5690%" y="645" width="0.0619%" height="15" fill="rgb(216,85,49)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="655.50"></text></g><g><title>__GI_munmap (7 samples, 0.06%)</title><rect x="92.5690%" y="629" width="0.0619%" height="15" fill="rgb(208,161,47)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.06%)</title><rect x="92.5690%" y="613" width="0.0619%" height="15" fill="rgb(233,210,18)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="623.50"></text></g><g><title>do_syscall_64 (7 samples, 0.06%)</title><rect x="92.5690%" y="597" width="0.0619%" height="15" fill="rgb(205,104,42)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="607.50"></text></g><g><title>__x64_sys_munmap (7 samples, 0.06%)</title><rect x="92.5690%" y="581" width="0.0619%" height="15" fill="rgb(248,90,43)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="591.50"></text></g><g><title>__vm_munmap (7 samples, 0.06%)</title><rect x="92.5690%" y="565" width="0.0619%" height="15" fill="rgb(206,198,11)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="575.50"></text></g><g><title>do_vmi_munmap (7 samples, 0.06%)</title><rect x="92.5690%" y="549" width="0.0619%" height="15" fill="rgb(239,165,27)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="559.50"></text></g><g><title>do_vmi_align_munmap (7 samples, 0.06%)</title><rect x="92.5690%" y="533" width="0.0619%" height="15" fill="rgb(246,44,32)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="543.50"></text></g><g><title>unmap_region (7 samples, 0.06%)</title><rect x="92.5690%" y="517" width="0.0619%" height="15" fill="rgb(252,65,42)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="527.50"></text></g><g><title>unmap_vmas (7 samples, 0.06%)</title><rect x="92.5690%" y="501" width="0.0619%" height="15" fill="rgb(246,197,18)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="511.50"></text></g><g><title>unmap_single_vma (7 samples, 0.06%)</title><rect x="92.5690%" y="485" width="0.0619%" height="15" fill="rgb(216,192,4)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="495.50"></text></g><g><title>unmap_page_range (7 samples, 0.06%)</title><rect x="92.5690%" y="469" width="0.0619%" height="15" fill="rgb(208,117,10)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="479.50"></text></g><g><title>zap_pmd_range.isra.0 (7 samples, 0.06%)</title><rect x="92.5690%" y="453" width="0.0619%" height="15" fill="rgb(240,61,47)" fg:x="10464" fg:w="7"/><text x="92.8190%" y="463.50"></text></g><g><title>zap_pte_range (5 samples, 0.04%)</title><rect x="92.5867%" y="437" width="0.0442%" height="15" fill="rgb(228,178,21)" fg:x="10466" fg:w="5"/><text x="92.8367%" y="447.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.02%)</title><rect x="92.6132%" y="421" width="0.0177%" height="15" fill="rgb(219,96,54)" fg:x="10469" fg:w="2"/><text x="92.8632%" y="431.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.02%)</title><rect x="92.6132%" y="405" width="0.0177%" height="15" fill="rgb(250,177,24)" fg:x="10469" fg:w="2"/><text x="92.8632%" y="415.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.02%)</title><rect x="92.6132%" y="389" width="0.0177%" height="15" fill="rgb(242,154,46)" fg:x="10469" fg:w="2"/><text x="92.8632%" y="399.50"></text></g><g><title>release_pages (2 samples, 0.02%)</title><rect x="92.6132%" y="373" width="0.0177%" height="15" fill="rgb(226,176,29)" fg:x="10469" fg:w="2"/><text x="92.8632%" y="383.50"></text></g><g><title>free_unref_page_list (2 samples, 0.02%)</title><rect x="92.6132%" y="357" width="0.0177%" height="15" fill="rgb(226,29,2)" fg:x="10469" fg:w="2"/><text x="92.8632%" y="367.50"></text></g><g><title>anon.6a611de396b54d4af1df326ad1f53b76.12.llvm.16647036302269152626 (2 samples, 0.02%)</title><rect x="92.6398%" y="1061" width="0.0177%" height="15" fill="rgb(237,104,14)" fg:x="10472" fg:w="2"/><text x="92.8898%" y="1071.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="92.6575%" y="1045" width="0.0265%" height="15" fill="rgb(245,207,31)" fg:x="10474" fg:w="3"/><text x="92.9075%" y="1055.50"></text></g><g><title>anon.6a611de396b54d4af1df326ad1f53b76.37.llvm.16647036302269152626 (5 samples, 0.04%)</title><rect x="92.6575%" y="1061" width="0.0442%" height="15" fill="rgb(229,211,45)" fg:x="10474" fg:w="5"/><text x="92.9075%" y="1071.50"></text></g><g><title>asm_exc_page_fault (123 samples, 1.09%)</title><rect x="92.7105%" y="1061" width="1.0881%" height="15" fill="rgb(229,113,15)" fg:x="10480" fg:w="123"/><text x="92.9605%" y="1071.50"></text></g><g><title>exc_page_fault (3 samples, 0.03%)</title><rect x="93.7721%" y="1045" width="0.0265%" height="15" fill="rgb(237,147,15)" fg:x="10600" fg:w="3"/><text x="94.0221%" y="1055.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.03%)</title><rect x="93.7721%" y="1029" width="0.0265%" height="15" fill="rgb(244,120,12)" fg:x="10600" fg:w="3"/><text x="94.0221%" y="1039.50"></text></g><g><title>lock_vma_under_rcu (2 samples, 0.02%)</title><rect x="93.7810%" y="1013" width="0.0177%" height="15" fill="rgb(205,120,12)" fg:x="10601" fg:w="2"/><text x="94.0310%" y="1023.50"></text></g><g><title>asm_sysvec_call_function (2 samples, 0.02%)</title><rect x="93.8075%" y="837" width="0.0177%" height="15" fill="rgb(231,26,45)" fg:x="10604" fg:w="2"/><text x="94.0575%" y="847.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="93.8252%" y="821" width="0.0354%" height="15" fill="rgb(246,98,1)" fg:x="10606" fg:w="4"/><text x="94.0752%" y="831.50"></text></g><g><title>__libc_thread_freeres (10 samples, 0.09%)</title><rect x="93.8075%" y="1029" width="0.0885%" height="15" fill="rgb(207,68,45)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="1039.50"></text></g><g><title>__res_thread_freeres (10 samples, 0.09%)</title><rect x="93.8075%" y="1013" width="0.0885%" height="15" fill="rgb(231,27,38)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="1023.50"></text></g><g><title>__resolv_context_freeres (10 samples, 0.09%)</title><rect x="93.8075%" y="997" width="0.0885%" height="15" fill="rgb(214,223,3)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="1007.50"></text></g><g><title>asm_exc_page_fault (10 samples, 0.09%)</title><rect x="93.8075%" y="981" width="0.0885%" height="15" fill="rgb(228,195,46)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="991.50"></text></g><g><title>exc_page_fault (10 samples, 0.09%)</title><rect x="93.8075%" y="965" width="0.0885%" height="15" fill="rgb(231,100,42)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="975.50"></text></g><g><title>do_user_addr_fault (10 samples, 0.09%)</title><rect x="93.8075%" y="949" width="0.0885%" height="15" fill="rgb(236,53,4)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="959.50"></text></g><g><title>lock_mm_and_find_vma (10 samples, 0.09%)</title><rect x="93.8075%" y="933" width="0.0885%" height="15" fill="rgb(230,152,12)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="943.50"></text></g><g><title>down_read_killable (10 samples, 0.09%)</title><rect x="93.8075%" y="917" width="0.0885%" height="15" fill="rgb(226,101,19)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="927.50"></text></g><g><title>rwsem_down_read_slowpath (10 samples, 0.09%)</title><rect x="93.8075%" y="901" width="0.0885%" height="15" fill="rgb(250,149,32)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="911.50"></text></g><g><title>schedule_preempt_disabled (10 samples, 0.09%)</title><rect x="93.8075%" y="885" width="0.0885%" height="15" fill="rgb(232,178,12)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="895.50"></text></g><g><title>schedule (10 samples, 0.09%)</title><rect x="93.8075%" y="869" width="0.0885%" height="15" fill="rgb(246,151,17)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="879.50"></text></g><g><title>__schedule (10 samples, 0.09%)</title><rect x="93.8075%" y="853" width="0.0885%" height="15" fill="rgb(252,17,51)" fg:x="10604" fg:w="10"/><text x="94.0575%" y="863.50"></text></g><g><title>finish_task_switch.isra.0 (8 samples, 0.07%)</title><rect x="93.8252%" y="837" width="0.0708%" height="15" fill="rgb(250,207,23)" fg:x="10606" fg:w="8"/><text x="94.0752%" y="847.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.04%)</title><rect x="93.8606%" y="821" width="0.0354%" height="15" fill="rgb(205,27,5)" fg:x="10610" fg:w="4"/><text x="94.1106%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="94.0110%" y="821" width="0.0177%" height="15" fill="rgb(224,32,19)" fg:x="10627" fg:w="2"/><text x="94.2610%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.03%)</title><rect x="94.0287%" y="805" width="0.0265%" height="15" fill="rgb(247,214,40)" fg:x="10629" fg:w="3"/><text x="94.2787%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="94.0287%" y="789" width="0.0265%" height="15" fill="rgb(239,199,17)" fg:x="10629" fg:w="3"/><text x="94.2787%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.03%)</title><rect x="94.0287%" y="773" width="0.0265%" height="15" fill="rgb(251,159,9)" fg:x="10629" fg:w="3"/><text x="94.2787%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.03%)</title><rect x="94.0287%" y="757" width="0.0265%" height="15" fill="rgb(225,78,32)" fg:x="10629" fg:w="3"/><text x="94.2787%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="94.0552%" y="805" width="0.0177%" height="15" fill="rgb(206,97,47)" fg:x="10632" fg:w="2"/><text x="94.3052%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="94.0552%" y="789" width="0.0177%" height="15" fill="rgb(227,107,4)" fg:x="10632" fg:w="2"/><text x="94.3052%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.02%)</title><rect x="94.0552%" y="773" width="0.0177%" height="15" fill="rgb(241,146,50)" fg:x="10632" fg:w="2"/><text x="94.3052%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.02%)</title><rect x="94.0552%" y="757" width="0.0177%" height="15" fill="rgb(232,92,30)" fg:x="10632" fg:w="2"/><text x="94.3052%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="94.0552%" y="741" width="0.0177%" height="15" fill="rgb(222,0,40)" fg:x="10632" fg:w="2"/><text x="94.3052%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;block_stm_revm::MemoryLocation&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="94.0729%" y="805" width="0.0442%" height="15" fill="rgb(219,54,33)" fg:x="10634" fg:w="5"/><text x="94.3229%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="94.0729%" y="789" width="0.0442%" height="15" fill="rgb(226,209,28)" fg:x="10634" fg:w="5"/><text x="94.3229%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (5 samples, 0.04%)</title><rect x="94.0729%" y="773" width="0.0442%" height="15" fill="rgb(254,205,35)" fg:x="10634" fg:w="5"/><text x="94.3229%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (4 samples, 0.04%)</title><rect x="94.0817%" y="757" width="0.0354%" height="15" fill="rgb(230,159,3)" fg:x="10635" fg:w="4"/><text x="94.3317%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (4 samples, 0.04%)</title><rect x="94.0817%" y="741" width="0.0354%" height="15" fill="rgb(232,190,24)" fg:x="10635" fg:w="4"/><text x="94.3317%" y="751.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::record (16 samples, 0.14%)</title><rect x="94.0287%" y="821" width="0.1415%" height="15" fill="rgb(217,227,44)" fg:x="10629" fg:w="16"/><text x="94.2787%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (6 samples, 0.05%)</title><rect x="94.1171%" y="805" width="0.0531%" height="15" fill="rgb(236,211,1)" fg:x="10639" fg:w="6"/><text x="94.3671%" y="815.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (6 samples, 0.05%)</title><rect x="94.1171%" y="789" width="0.0531%" height="15" fill="rgb(250,127,46)" fg:x="10639" fg:w="6"/><text x="94.3671%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (6 samples, 0.05%)</title><rect x="94.1171%" y="773" width="0.0531%" height="15" fill="rgb(229,213,6)" fg:x="10639" fg:w="6"/><text x="94.3671%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.05%)</title><rect x="94.1171%" y="757" width="0.0531%" height="15" fill="rgb(237,15,36)" fg:x="10639" fg:w="6"/><text x="94.3671%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (3 samples, 0.03%)</title><rect x="94.1791%" y="805" width="0.0265%" height="15" fill="rgb(213,131,41)" fg:x="10646" fg:w="3"/><text x="94.4291%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="94.1791%" y="789" width="0.0265%" height="15" fill="rgb(225,82,44)" fg:x="10646" fg:w="3"/><text x="94.4291%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (3 samples, 0.03%)</title><rect x="94.1791%" y="773" width="0.0265%" height="15" fill="rgb(249,42,11)" fg:x="10646" fg:w="3"/><text x="94.4291%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.02%)</title><rect x="94.1879%" y="757" width="0.0177%" height="15" fill="rgb(253,11,29)" fg:x="10647" fg:w="2"/><text x="94.4379%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="94.1879%" y="741" width="0.0177%" height="15" fill="rgb(206,8,54)" fg:x="10647" fg:w="2"/><text x="94.4379%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.03%)</title><rect x="94.2056%" y="805" width="0.0265%" height="15" fill="rgb(222,186,2)" fg:x="10649" fg:w="3"/><text x="94.4556%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.03%)</title><rect x="94.2056%" y="789" width="0.0265%" height="15" fill="rgb(221,206,53)" fg:x="10649" fg:w="3"/><text x="94.4556%" y="799.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::finish_execution (10 samples, 0.09%)</title><rect x="94.1702%" y="821" width="0.0885%" height="15" fill="rgb(230,150,21)" fg:x="10645" fg:w="10"/><text x="94.4202%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.03%)</title><rect x="94.2321%" y="805" width="0.0265%" height="15" fill="rgb(253,202,10)" fg:x="10652" fg:w="3"/><text x="94.4821%" y="815.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (3 samples, 0.03%)</title><rect x="94.2321%" y="789" width="0.0265%" height="15" fill="rgb(238,109,40)" fg:x="10652" fg:w="3"/><text x="94.4821%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.03%)</title><rect x="94.2321%" y="773" width="0.0265%" height="15" fill="rgb(247,120,22)" fg:x="10652" fg:w="3"/><text x="94.4821%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.03%)</title><rect x="94.2321%" y="757" width="0.0265%" height="15" fill="rgb(207,43,30)" fg:x="10652" fg:w="3"/><text x="94.4821%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="94.2675%" y="805" width="0.0619%" height="15" fill="rgb(213,211,24)" fg:x="10656" fg:w="7"/><text x="94.5175%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (7 samples, 0.06%)</title><rect x="94.2675%" y="789" width="0.0619%" height="15" fill="rgb(239,73,39)" fg:x="10656" fg:w="7"/><text x="94.5175%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (7 samples, 0.06%)</title><rect x="94.2675%" y="773" width="0.0619%" height="15" fill="rgb(245,182,19)" fg:x="10656" fg:w="7"/><text x="94.5175%" y="783.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::clone::Clone&gt;::clone (16 samples, 0.14%)</title><rect x="94.3294%" y="789" width="0.1415%" height="15" fill="rgb(247,143,26)" fg:x="10663" fg:w="16"/><text x="94.5794%" y="799.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="94.4710%" y="789" width="0.0885%" height="15" fill="rgb(228,191,23)" fg:x="10679" fg:w="10"/><text x="94.7210%" y="799.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (10 samples, 0.09%)</title><rect x="94.4710%" y="773" width="0.0885%" height="15" fill="rgb(253,165,31)" fg:x="10679" fg:w="10"/><text x="94.7210%" y="783.50"></text></g><g><title>bytes::bytes::shared_clone (10 samples, 0.09%)</title><rect x="94.4710%" y="757" width="0.0885%" height="15" fill="rgb(234,138,20)" fg:x="10679" fg:w="10"/><text x="94.7210%" y="767.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (10 samples, 0.09%)</title><rect x="94.4710%" y="741" width="0.0885%" height="15" fill="rgb(218,191,29)" fg:x="10679" fg:w="10"/><text x="94.7210%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (10 samples, 0.09%)</title><rect x="94.4710%" y="725" width="0.0885%" height="15" fill="rgb(221,157,19)" fg:x="10679" fg:w="10"/><text x="94.7210%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (10 samples, 0.09%)</title><rect x="94.4710%" y="709" width="0.0885%" height="15" fill="rgb(237,26,42)" fg:x="10679" fg:w="10"/><text x="94.7210%" y="719.50"></text></g><g><title>&lt;revm_primitives::env::TxEnv as core::clone::Clone&gt;::clone (28 samples, 0.25%)</title><rect x="94.3294%" y="805" width="0.2477%" height="15" fill="rgb(220,163,24)" fg:x="10663" fg:w="28"/><text x="94.5794%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="94.5771%" y="805" width="0.0531%" height="15" fill="rgb(242,115,20)" fg:x="10691" fg:w="6"/><text x="94.8271%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="94.6391%" y="629" width="0.0265%" height="15" fill="rgb(210,206,9)" fg:x="10698" fg:w="3"/><text x="94.8891%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.02%)</title><rect x="94.6479%" y="613" width="0.0177%" height="15" fill="rgb(208,71,17)" fg:x="10699" fg:w="2"/><text x="94.8979%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (6 samples, 0.05%)</title><rect x="94.6391%" y="645" width="0.0531%" height="15" fill="rgb(233,7,5)" fg:x="10698" fg:w="6"/><text x="94.8891%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.03%)</title><rect x="94.6656%" y="629" width="0.0265%" height="15" fill="rgb(207,92,33)" fg:x="10701" fg:w="3"/><text x="94.9156%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3 samples, 0.03%)</title><rect x="94.6656%" y="613" width="0.0265%" height="15" fill="rgb(218,87,9)" fg:x="10701" fg:w="3"/><text x="94.9156%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt; (3 samples, 0.03%)</title><rect x="94.6656%" y="597" width="0.0265%" height="15" fill="rgb(219,47,37)" fg:x="10701" fg:w="3"/><text x="94.9156%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (3 samples, 0.03%)</title><rect x="94.6656%" y="581" width="0.0265%" height="15" fill="rgb(221,152,34)" fg:x="10701" fg:w="3"/><text x="94.9156%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::context_precompiles::ContextPrecompiles&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (7 samples, 0.06%)</title><rect x="94.6391%" y="741" width="0.0619%" height="15" fill="rgb(235,176,21)" fg:x="10698" fg:w="7"/><text x="94.8891%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="94.6391%" y="725" width="0.0619%" height="15" fill="rgb(232,212,21)" fg:x="10698" fg:w="7"/><text x="94.8891%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;,std::hash::random::RandomState&gt;&gt; (7 samples, 0.06%)</title><rect x="94.6391%" y="709" width="0.0619%" height="15" fill="rgb(245,82,39)" fg:x="10698" fg:w="7"/><text x="94.8891%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::context::context_precompiles::ContextPrecompile&lt;&amp;mut block_stm_revm::vm::VmDb&gt;)&gt;&gt; (7 samples, 0.06%)</title><rect x="94.6391%" y="693" width="0.0619%" height="15" fill="rgb(241,52,51)" fg:x="10698" fg:w="7"/><text x="94.8891%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="94.6391%" y="677" width="0.0619%" height="15" fill="rgb(219,91,24)" fg:x="10698" fg:w="7"/><text x="94.8891%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (7 samples, 0.06%)</title><rect x="94.6391%" y="661" width="0.0619%" height="15" fill="rgb(241,142,12)" fg:x="10698" fg:w="7"/><text x="94.8891%" y="671.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="94.7010%" y="725" width="0.0177%" height="15" fill="rgb(230,27,9)" fg:x="10705" fg:w="2"/><text x="94.9510%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::CfgEnv&gt; (2 samples, 0.02%)</title><rect x="94.8071%" y="693" width="0.0177%" height="15" fill="rgb(249,181,32)" fg:x="10717" fg:w="2"/><text x="95.0571%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::kzg::env_settings::EnvKzgSettings&gt; (2 samples, 0.02%)</title><rect x="94.8071%" y="677" width="0.0177%" height="15" fill="rgb(230,107,3)" fg:x="10717" fg:w="2"/><text x="95.0571%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_primitives::env::Env&gt;&gt; (13 samples, 0.12%)</title><rect x="94.7187%" y="725" width="0.1150%" height="15" fill="rgb(246,204,14)" fg:x="10707" fg:w="13"/><text x="94.9687%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::env::Env&gt; (3 samples, 0.03%)</title><rect x="94.8071%" y="709" width="0.0265%" height="15" fill="rgb(213,192,47)" fg:x="10717" fg:w="3"/><text x="95.0571%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (24 samples, 0.21%)</title><rect x="94.6391%" y="773" width="0.2123%" height="15" fill="rgb(240,44,36)" fg:x="10698" fg:w="24"/><text x="94.8891%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::evm_context::EvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (24 samples, 0.21%)</title><rect x="94.6391%" y="757" width="0.2123%" height="15" fill="rgb(244,209,38)" fg:x="10698" fg:w="24"/><text x="94.8891%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::context::inner_evm_context::InnerEvmContext&lt;&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (17 samples, 0.15%)</title><rect x="94.7010%" y="741" width="0.1504%" height="15" fill="rgb(219,34,37)" fg:x="10705" fg:w="17"/><text x="94.9510%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::journaled_state::JournaledState&gt; (2 samples, 0.02%)</title><rect x="94.8337%" y="725" width="0.0177%" height="15" fill="rgb(210,28,6)" fg:x="10720" fg:w="2"/><text x="95.0837%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="94.8691%" y="757" width="0.0265%" height="15" fill="rgb(244,110,52)" fg:x="10724" fg:w="3"/><text x="95.1191%" y="767.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="94.8691%" y="741" width="0.0265%" height="15" fill="rgb(254,124,47)" fg:x="10724" fg:w="3"/><text x="95.1191%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="94.8691%" y="725" width="0.0265%" height="15" fill="rgb(254,110,13)" fg:x="10724" fg:w="3"/><text x="95.1191%" y="735.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="94.8691%" y="709" width="0.0265%" height="15" fill="rgb(252,57,21)" fg:x="10724" fg:w="3"/><text x="95.1191%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="94.8779%" y="693" width="0.0177%" height="15" fill="rgb(242,60,45)" fg:x="10725" fg:w="2"/><text x="95.1279%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="94.8779%" y="677" width="0.0177%" height="15" fill="rgb(234,49,30)" fg:x="10725" fg:w="2"/><text x="95.1279%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (2 samples, 0.02%)</title><rect x="94.8956%" y="757" width="0.0177%" height="15" fill="rgb(218,98,6)" fg:x="10727" fg:w="2"/><text x="95.1456%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="94.9133%" y="709" width="0.0177%" height="15" fill="rgb(220,174,29)" fg:x="10729" fg:w="2"/><text x="95.1633%" y="719.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="94.9133%" y="693" width="0.0177%" height="15" fill="rgb(236,163,23)" fg:x="10729" fg:w="2"/><text x="95.1633%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="94.9133%" y="677" width="0.0177%" height="15" fill="rgb(242,114,45)" fg:x="10729" fg:w="2"/><text x="95.1633%" y="687.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="94.9133%" y="661" width="0.0177%" height="15" fill="rgb(232,10,53)" fg:x="10729" fg:w="2"/><text x="95.1633%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="94.9133%" y="645" width="0.0177%" height="15" fill="rgb(245,108,29)" fg:x="10729" fg:w="2"/><text x="95.1633%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="94.9133%" y="629" width="0.0177%" height="15" fill="rgb(240,89,53)" fg:x="10729" fg:w="2"/><text x="95.1633%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="94.9133%" y="741" width="0.0531%" height="15" fill="rgb(226,60,45)" fg:x="10729" fg:w="6"/><text x="95.1633%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="94.9133%" y="725" width="0.0531%" height="15" fill="rgb(230,41,44)" fg:x="10729" fg:w="6"/><text x="95.1633%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="94.9310%" y="709" width="0.0354%" height="15" fill="rgb(230,26,20)" fg:x="10731" fg:w="4"/><text x="95.1810%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="94.9310%" y="693" width="0.0354%" height="15" fill="rgb(237,170,32)" fg:x="10731" fg:w="4"/><text x="95.1810%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (7 samples, 0.06%)</title><rect x="94.9133%" y="757" width="0.0619%" height="15" fill="rgb(212,35,42)" fg:x="10729" fg:w="7"/><text x="95.1633%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="94.9752%" y="741" width="0.0265%" height="15" fill="rgb(227,31,34)" fg:x="10736" fg:w="3"/><text x="95.2252%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="94.9752%" y="725" width="0.0265%" height="15" fill="rgb(216,19,18)" fg:x="10736" fg:w="3"/><text x="95.2252%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="94.9841%" y="709" width="0.0177%" height="15" fill="rgb(211,133,42)" fg:x="10737" fg:w="2"/><text x="95.2341%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="94.9841%" y="693" width="0.0177%" height="15" fill="rgb(244,66,13)" fg:x="10737" fg:w="2"/><text x="95.2341%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (20 samples, 0.18%)</title><rect x="94.8514%" y="773" width="0.1769%" height="15" fill="rgb(218,185,50)" fg:x="10722" fg:w="20"/><text x="95.1014%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (6 samples, 0.05%)</title><rect x="94.9752%" y="757" width="0.0531%" height="15" fill="rgb(219,149,13)" fg:x="10736" fg:w="6"/><text x="95.2252%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="95.0018%" y="741" width="0.0265%" height="15" fill="rgb(221,125,0)" fg:x="10739" fg:w="3"/><text x="95.2518%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.0018%" y="725" width="0.0265%" height="15" fill="rgb(247,126,27)" fg:x="10739" fg:w="3"/><text x="95.2518%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="95.0018%" y="709" width="0.0265%" height="15" fill="rgb(250,138,30)" fg:x="10739" fg:w="3"/><text x="95.2518%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="95.0018%" y="693" width="0.0265%" height="15" fill="rgb(230,151,9)" fg:x="10739" fg:w="3"/><text x="95.2518%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="95.0460%" y="725" width="0.0177%" height="15" fill="rgb(233,80,38)" fg:x="10744" fg:w="2"/><text x="95.2960%" y="735.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="95.0460%" y="709" width="0.0177%" height="15" fill="rgb(232,68,43)" fg:x="10744" fg:w="2"/><text x="95.2960%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="95.0460%" y="693" width="0.0177%" height="15" fill="rgb(254,5,50)" fg:x="10744" fg:w="2"/><text x="95.2960%" y="703.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.0460%" y="677" width="0.0177%" height="15" fill="rgb(225,45,5)" fg:x="10744" fg:w="2"/><text x="95.2960%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.0460%" y="661" width="0.0177%" height="15" fill="rgb(239,22,3)" fg:x="10744" fg:w="2"/><text x="95.2960%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.0460%" y="645" width="0.0177%" height="15" fill="rgb(243,129,0)" fg:x="10744" fg:w="2"/><text x="95.2960%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="95.0283%" y="757" width="0.0531%" height="15" fill="rgb(223,164,0)" fg:x="10742" fg:w="6"/><text x="95.2783%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="95.0283%" y="741" width="0.0531%" height="15" fill="rgb(221,46,29)" fg:x="10742" fg:w="6"/><text x="95.2783%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.0637%" y="725" width="0.0177%" height="15" fill="rgb(205,97,47)" fg:x="10746" fg:w="2"/><text x="95.3137%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.0637%" y="709" width="0.0177%" height="15" fill="rgb(249,14,8)" fg:x="10746" fg:w="2"/><text x="95.3137%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::Frame,revm_interpreter::create_outcome::CreateOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="95.0814%" y="757" width="0.0177%" height="15" fill="rgb(216,77,3)" fg:x="10748" fg:w="2"/><text x="95.3314%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.0814%" y="741" width="0.0177%" height="15" fill="rgb(206,168,54)" fg:x="10748" fg:w="2"/><text x="95.3314%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.0814%" y="725" width="0.0177%" height="15" fill="rgb(236,3,41)" fg:x="10748" fg:w="2"/><text x="95.3314%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.0814%" y="709" width="0.0177%" height="15" fill="rgb(231,132,24)" fg:x="10748" fg:w="2"/><text x="95.3314%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="95.0991%" y="757" width="0.0177%" height="15" fill="rgb(227,221,40)" fg:x="10750" fg:w="2"/><text x="95.3491%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.0991%" y="741" width="0.0177%" height="15" fill="rgb(233,151,11)" fg:x="10750" fg:w="2"/><text x="95.3491%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="95.0991%" y="725" width="0.0177%" height="15" fill="rgb(247,81,35)" fg:x="10750" fg:w="2"/><text x="95.3491%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="95.1256%" y="725" width="0.0265%" height="15" fill="rgb(243,128,48)" fg:x="10753" fg:w="3"/><text x="95.3756%" y="735.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="95.1256%" y="709" width="0.0265%" height="15" fill="rgb(253,16,10)" fg:x="10753" fg:w="3"/><text x="95.3756%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="95.1256%" y="693" width="0.0265%" height="15" fill="rgb(228,67,27)" fg:x="10753" fg:w="3"/><text x="95.3756%" y="703.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.1256%" y="677" width="0.0265%" height="15" fill="rgb(231,105,25)" fg:x="10753" fg:w="3"/><text x="95.3756%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.1345%" y="661" width="0.0177%" height="15" fill="rgb(213,166,47)" fg:x="10754" fg:w="2"/><text x="95.3845%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.1345%" y="645" width="0.0177%" height="15" fill="rgb(209,27,10)" fg:x="10754" fg:w="2"/><text x="95.3845%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="95.1168%" y="757" width="0.0531%" height="15" fill="rgb(241,44,30)" fg:x="10752" fg:w="6"/><text x="95.3668%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="95.1168%" y="741" width="0.0531%" height="15" fill="rgb(223,216,15)" fg:x="10752" fg:w="6"/><text x="95.3668%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.1522%" y="725" width="0.0177%" height="15" fill="rgb(227,14,7)" fg:x="10756" fg:w="2"/><text x="95.4022%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.1522%" y="709" width="0.0177%" height="15" fill="rgb(237,14,5)" fg:x="10756" fg:w="2"/><text x="95.4022%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="95.1699%" y="757" width="0.0177%" height="15" fill="rgb(232,14,36)" fg:x="10758" fg:w="2"/><text x="95.4199%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.1699%" y="741" width="0.0177%" height="15" fill="rgb(234,0,38)" fg:x="10758" fg:w="2"/><text x="95.4199%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="95.1875%" y="725" width="0.0177%" height="15" fill="rgb(207,170,14)" fg:x="10760" fg:w="2"/><text x="95.4375%" y="735.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="95.1875%" y="709" width="0.0177%" height="15" fill="rgb(252,45,13)" fg:x="10760" fg:w="2"/><text x="95.4375%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="95.1875%" y="693" width="0.0177%" height="15" fill="rgb(213,142,7)" fg:x="10760" fg:w="2"/><text x="95.4375%" y="703.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.1875%" y="677" width="0.0177%" height="15" fill="rgb(216,157,23)" fg:x="10760" fg:w="2"/><text x="95.4375%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;block_stm_revm::ReadError&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="95.1875%" y="757" width="0.0265%" height="15" fill="rgb(212,145,33)" fg:x="10760" fg:w="3"/><text x="95.4375%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.1875%" y="741" width="0.0265%" height="15" fill="rgb(233,26,13)" fg:x="10760" fg:w="3"/><text x="95.4375%" y="751.50"></text></g><g><title>core::mem::drop (66 samples, 0.58%)</title><rect x="94.6391%" y="805" width="0.5839%" height="15" fill="rgb(219,196,19)" fg:x="10698" fg:w="66"/><text x="94.8891%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::evm::Evm&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (66 samples, 0.58%)</title><rect x="94.6391%" y="789" width="0.5839%" height="15" fill="rgb(246,56,21)" fg:x="10698" fg:w="66"/><text x="94.8891%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),&amp;mut block_stm_revm::vm::VmDb&gt;&gt; (22 samples, 0.19%)</title><rect x="95.0283%" y="773" width="0.1946%" height="15" fill="rgb(222,28,53)" fg:x="10742" fg:w="22"/><text x="95.2783%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::mv_memory::MvMemory&gt;&gt; (5 samples, 0.04%)</title><rect x="95.2229%" y="805" width="0.0442%" height="15" fill="rgb(224,5,27)" fg:x="10764" fg:w="5"/><text x="95.4729%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="95.2229%" y="789" width="0.0442%" height="15" fill="rgb(220,153,33)" fg:x="10764" fg:w="5"/><text x="95.4729%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="95.2229%" y="773" width="0.0442%" height="15" fill="rgb(226,58,19)" fg:x="10764" fg:w="5"/><text x="95.4729%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="95.2229%" y="757" width="0.0442%" height="15" fill="rgb(239,112,23)" fg:x="10764" fg:w="5"/><text x="95.4729%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;block_stm_revm::storage::Storage&gt;&gt; (3 samples, 0.03%)</title><rect x="95.2672%" y="805" width="0.0265%" height="15" fill="rgb(251,213,20)" fg:x="10769" fg:w="3"/><text x="95.5172%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.2672%" y="789" width="0.0265%" height="15" fill="rgb(215,181,21)" fg:x="10769" fg:w="3"/><text x="95.5172%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="95.2672%" y="773" width="0.0265%" height="15" fill="rgb(240,8,35)" fg:x="10769" fg:w="3"/><text x="95.5172%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="95.2672%" y="757" width="0.0265%" height="15" fill="rgb(232,203,3)" fg:x="10769" fg:w="3"/><text x="95.5172%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.3025%" y="757" width="0.0177%" height="15" fill="rgb(214,202,43)" fg:x="10773" fg:w="2"/><text x="95.5525%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloy_primitives::log::Log]&gt; (2 samples, 0.02%)</title><rect x="95.3025%" y="741" width="0.0177%" height="15" fill="rgb(254,35,11)" fg:x="10773" fg:w="2"/><text x="95.5525%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (4 samples, 0.04%)</title><rect x="95.2937%" y="789" width="0.0354%" height="15" fill="rgb(239,173,13)" fg:x="10772" fg:w="4"/><text x="95.5437%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (3 samples, 0.03%)</title><rect x="95.3025%" y="773" width="0.0265%" height="15" fill="rgb(220,141,0)" fg:x="10773" fg:w="3"/><text x="95.5525%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (6 samples, 0.05%)</title><rect x="95.3291%" y="581" width="0.0531%" height="15" fill="rgb(210,98,12)" fg:x="10776" fg:w="6"/><text x="95.5791%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (6 samples, 0.05%)</title><rect x="95.3291%" y="565" width="0.0531%" height="15" fill="rgb(254,153,22)" fg:x="10776" fg:w="6"/><text x="95.5791%" y="575.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="95.3291%" y="549" width="0.0531%" height="15" fill="rgb(247,223,17)" fg:x="10776" fg:w="6"/><text x="95.5791%" y="559.50"></text></g><g><title>bytes::bytes::shared_drop (5 samples, 0.04%)</title><rect x="95.3379%" y="533" width="0.0442%" height="15" fill="rgb(246,56,7)" fg:x="10777" fg:w="5"/><text x="95.5879%" y="543.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (5 samples, 0.04%)</title><rect x="95.3379%" y="517" width="0.0442%" height="15" fill="rgb(240,226,12)" fg:x="10777" fg:w="5"/><text x="95.5879%" y="527.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (5 samples, 0.04%)</title><rect x="95.3379%" y="501" width="0.0442%" height="15" fill="rgb(205,87,46)" fg:x="10777" fg:w="5"/><text x="95.5879%" y="511.50"></text></g><g><title>bytes::bytes::release_shared (5 samples, 0.04%)</title><rect x="95.3379%" y="485" width="0.0442%" height="15" fill="rgb(245,214,51)" fg:x="10777" fg:w="5"/><text x="95.5879%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="95.3379%" y="469" width="0.0442%" height="15" fill="rgb(223,172,33)" fg:x="10777" fg:w="5"/><text x="95.5879%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="95.3379%" y="453" width="0.0442%" height="15" fill="rgb(227,203,34)" fg:x="10777" fg:w="5"/><text x="95.5879%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::AccountInfo&gt; (10 samples, 0.09%)</title><rect x="95.3291%" y="629" width="0.0885%" height="15" fill="rgb(248,143,44)" fg:x="10776" fg:w="10"/><text x="95.5791%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm_primitives::bytecode::Bytecode&gt;&gt; (10 samples, 0.09%)</title><rect x="95.3291%" y="613" width="0.0885%" height="15" fill="rgb(226,162,5)" fg:x="10776" fg:w="10"/><text x="95.5791%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (10 samples, 0.09%)</title><rect x="95.3291%" y="597" width="0.0885%" height="15" fill="rgb(211,143,1)" fg:x="10776" fg:w="10"/><text x="95.5791%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::BytecodeState&gt; (4 samples, 0.04%)</title><rect x="95.3822%" y="581" width="0.0354%" height="15" fill="rgb(224,96,15)" fg:x="10782" fg:w="4"/><text x="95.6322%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::bytecode::JumpMap&gt; (3 samples, 0.03%)</title><rect x="95.3910%" y="565" width="0.0265%" height="15" fill="rgb(222,4,38)" fg:x="10783" fg:w="3"/><text x="95.6410%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitvec::vec::BitVec&lt;u8&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="95.3910%" y="549" width="0.0265%" height="15" fill="rgb(253,228,15)" fg:x="10783" fg:w="3"/><text x="95.6410%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.3910%" y="533" width="0.0265%" height="15" fill="rgb(242,194,12)" fg:x="10783" fg:w="3"/><text x="95.6410%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (12 samples, 0.11%)</title><rect x="95.3291%" y="677" width="0.1062%" height="15" fill="rgb(214,177,31)" fg:x="10776" fg:w="12"/><text x="95.5791%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt; (12 samples, 0.11%)</title><rect x="95.3291%" y="661" width="0.1062%" height="15" fill="rgb(226,58,51)" fg:x="10776" fg:w="12"/><text x="95.5791%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::state::Account&gt; (12 samples, 0.11%)</title><rect x="95.3291%" y="645" width="0.1062%" height="15" fill="rgb(250,119,16)" fg:x="10776" fg:w="12"/><text x="95.5791%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;ruint::Uint&lt;256_usize,4_usize&gt;,revm_primitives::state::StorageSlot&gt;&gt; (2 samples, 0.02%)</title><rect x="95.4176%" y="629" width="0.0177%" height="15" fill="rgb(223,128,53)" fg:x="10786" fg:w="2"/><text x="95.6676%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;ruint::Uint&lt;256_usize,4_usize&gt;,revm_primitives::state::StorageSlot,std::hash::random::RandomState&gt;&gt; (2 samples, 0.02%)</title><rect x="95.4176%" y="613" width="0.0177%" height="15" fill="rgb(251,199,15)" fg:x="10786" fg:w="2"/><text x="95.6676%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(ruint::Uint&lt;256_usize,4_usize&gt;,revm_primitives::state::StorageSlot)&gt;&gt; (2 samples, 0.02%)</title><rect x="95.4176%" y="597" width="0.0177%" height="15" fill="rgb(235,168,42)" fg:x="10786" fg:w="2"/><text x="95.6676%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.4176%" y="581" width="0.0177%" height="15" fill="rgb(250,210,17)" fg:x="10786" fg:w="2"/><text x="95.6676%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.02%)</title><rect x="95.4176%" y="565" width="0.0177%" height="15" fill="rgb(226,36,41)" fg:x="10786" fg:w="2"/><text x="95.6676%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (13 samples, 0.12%)</title><rect x="95.3291%" y="709" width="0.1150%" height="15" fill="rgb(225,87,10)" fg:x="10776" fg:w="13"/><text x="95.5791%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (13 samples, 0.12%)</title><rect x="95.3291%" y="693" width="0.1150%" height="15" fill="rgb(228,83,9)" fg:x="10776" fg:w="13"/><text x="95.5791%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (18 samples, 0.16%)</title><rect x="95.2937%" y="805" width="0.1592%" height="15" fill="rgb(225,16,36)" fg:x="10772" fg:w="18"/><text x="95.5437%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (14 samples, 0.12%)</title><rect x="95.3291%" y="789" width="0.1238%" height="15" fill="rgb(242,198,13)" fg:x="10776" fg:w="14"/><text x="95.5791%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (14 samples, 0.12%)</title><rect x="95.3291%" y="773" width="0.1238%" height="15" fill="rgb(239,25,51)" fg:x="10776" fg:w="14"/><text x="95.5791%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (14 samples, 0.12%)</title><rect x="95.3291%" y="757" width="0.1238%" height="15" fill="rgb(239,28,37)" fg:x="10776" fg:w="14"/><text x="95.5791%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.12%)</title><rect x="95.3291%" y="741" width="0.1238%" height="15" fill="rgb(234,70,17)" fg:x="10776" fg:w="14"/><text x="95.5791%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (14 samples, 0.12%)</title><rect x="95.3291%" y="725" width="0.1238%" height="15" fill="rgb(231,215,53)" fg:x="10776" fg:w="14"/><text x="95.5791%" y="735.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::build (4 samples, 0.04%)</title><rect x="95.4529%" y="805" width="0.0354%" height="15" fill="rgb(218,140,42)" fg:x="10790" fg:w="4"/><text x="95.7029%" y="815.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::with_tx_env (8 samples, 0.07%)</title><rect x="95.4883%" y="805" width="0.0708%" height="15" fill="rgb(233,227,45)" fg:x="10794" fg:w="8"/><text x="95.7383%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="95.5060%" y="789" width="0.0531%" height="15" fill="rgb(225,189,21)" fg:x="10796" fg:w="6"/><text x="95.7560%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (21 samples, 0.19%)</title><rect x="95.5591%" y="789" width="0.1858%" height="15" fill="rgb(237,176,54)" fg:x="10802" fg:w="21"/><text x="95.8091%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="95.7449%" y="789" width="0.0177%" height="15" fill="rgb(215,131,46)" fg:x="10823" fg:w="2"/><text x="95.9949%" y="799.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="95.7449%" y="773" width="0.0177%" height="15" fill="rgb(218,95,20)" fg:x="10823" fg:w="2"/><text x="95.9949%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="95.7449%" y="757" width="0.0177%" height="15" fill="rgb(208,198,12)" fg:x="10823" fg:w="2"/><text x="95.9949%" y="767.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.7449%" y="741" width="0.0177%" height="15" fill="rgb(239,107,50)" fg:x="10823" fg:w="2"/><text x="95.9949%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="95.7626%" y="773" width="0.0177%" height="15" fill="rgb(240,217,37)" fg:x="10825" fg:w="2"/><text x="96.0126%" y="783.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="95.7626%" y="757" width="0.0177%" height="15" fill="rgb(242,197,49)" fg:x="10825" fg:w="2"/><text x="96.0126%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="95.7626%" y="741" width="0.0177%" height="15" fill="rgb(219,171,17)" fg:x="10825" fg:w="2"/><text x="96.0126%" y="751.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.7626%" y="725" width="0.0177%" height="15" fill="rgb(209,81,40)" fg:x="10825" fg:w="2"/><text x="96.0126%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.7626%" y="709" width="0.0177%" height="15" fill="rgb(237,156,30)" fg:x="10825" fg:w="2"/><text x="96.0126%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.7626%" y="693" width="0.0177%" height="15" fill="rgb(212,127,16)" fg:x="10825" fg:w="2"/><text x="96.0126%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="95.7803%" y="757" width="0.0265%" height="15" fill="rgb(226,66,32)" fg:x="10827" fg:w="3"/><text x="96.0303%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.7803%" y="741" width="0.0265%" height="15" fill="rgb(245,22,46)" fg:x="10827" fg:w="3"/><text x="96.0303%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.7891%" y="725" width="0.0177%" height="15" fill="rgb(210,112,21)" fg:x="10828" fg:w="2"/><text x="96.0391%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.7891%" y="709" width="0.0177%" height="15" fill="rgb(207,118,39)" fg:x="10828" fg:w="2"/><text x="96.0391%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="95.7803%" y="773" width="0.0442%" height="15" fill="rgb(205,206,35)" fg:x="10827" fg:w="5"/><text x="96.0303%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;revm_primitives::result::ResultAndState,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="95.8068%" y="757" width="0.0177%" height="15" fill="rgb(222,120,2)" fg:x="10830" fg:w="2"/><text x="96.0568%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.8068%" y="741" width="0.0177%" height="15" fill="rgb(205,38,18)" fg:x="10830" fg:w="2"/><text x="96.0568%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.8068%" y="725" width="0.0177%" height="15" fill="rgb(226,61,2)" fg:x="10830" fg:w="2"/><text x="96.0568%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.8068%" y="709" width="0.0177%" height="15" fill="rgb(242,161,23)" fg:x="10830" fg:w="2"/><text x="96.0568%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="95.8245%" y="773" width="0.0177%" height="15" fill="rgb(213,13,52)" fg:x="10832" fg:w="2"/><text x="96.0745%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (15 samples, 0.13%)</title><rect x="95.7626%" y="789" width="0.1327%" height="15" fill="rgb(246,209,47)" fg:x="10825" fg:w="15"/><text x="96.0126%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="95.8422%" y="773" width="0.0531%" height="15" fill="rgb(214,41,3)" fg:x="10834" fg:w="6"/><text x="96.0922%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;revm_primitives::env::Env,)&gt;+Output = core::result::Result&lt;u64,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="95.8510%" y="757" width="0.0442%" height="15" fill="rgb(236,119,38)" fg:x="10835" fg:w="5"/><text x="96.1010%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="95.8510%" y="741" width="0.0442%" height="15" fill="rgb(218,50,11)" fg:x="10835" fg:w="5"/><text x="96.1010%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.04%)</title><rect x="95.8599%" y="725" width="0.0354%" height="15" fill="rgb(228,38,11)" fg:x="10836" fg:w="4"/><text x="96.1099%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.04%)</title><rect x="95.8599%" y="709" width="0.0354%" height="15" fill="rgb(212,13,9)" fg:x="10836" fg:w="4"/><text x="96.1099%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="95.9041%" y="741" width="0.0265%" height="15" fill="rgb(208,211,9)" fg:x="10841" fg:w="3"/><text x="96.1541%" y="751.50"></text></g><g><title>core::mem::drop (3 samples, 0.03%)</title><rect x="95.9041%" y="725" width="0.0265%" height="15" fill="rgb(239,39,32)" fg:x="10841" fg:w="3"/><text x="96.1541%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="95.9041%" y="709" width="0.0265%" height="15" fill="rgb(254,179,26)" fg:x="10841" fg:w="3"/><text x="96.1541%" y="719.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.9041%" y="693" width="0.0265%" height="15" fill="rgb(249,165,28)" fg:x="10841" fg:w="3"/><text x="96.1541%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="95.9041%" y="677" width="0.0265%" height="15" fill="rgb(225,59,50)" fg:x="10841" fg:w="3"/><text x="96.1541%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="95.9041%" y="661" width="0.0265%" height="15" fill="rgb(209,122,5)" fg:x="10841" fg:w="3"/><text x="96.1541%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="95.8953%" y="773" width="0.0531%" height="15" fill="rgb(214,65,34)" fg:x="10840" fg:w="6"/><text x="96.1453%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="95.8953%" y="757" width="0.0531%" height="15" fill="rgb(249,183,32)" fg:x="10840" fg:w="6"/><text x="96.1453%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.9306%" y="741" width="0.0177%" height="15" fill="rgb(218,122,24)" fg:x="10844" fg:w="2"/><text x="96.1806%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.9306%" y="725" width="0.0177%" height="15" fill="rgb(224,109,18)" fg:x="10844" fg:w="2"/><text x="96.1806%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;mut revm::frame::FrameResult)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="95.9572%" y="773" width="0.0265%" height="15" fill="rgb(210,68,50)" fg:x="10847" fg:w="3"/><text x="96.2072%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.9572%" y="757" width="0.0265%" height="15" fill="rgb(212,184,34)" fg:x="10847" fg:w="3"/><text x="96.2072%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CallFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::call_outcome::CallOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="95.9837%" y="773" width="0.0265%" height="15" fill="rgb(238,105,48)" fg:x="10850" fg:w="3"/><text x="96.2337%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.9837%" y="757" width="0.0265%" height="15" fill="rgb(222,134,54)" fg:x="10850" fg:w="3"/><text x="96.2337%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="95.9926%" y="741" width="0.0177%" height="15" fill="rgb(246,24,43)" fg:x="10851" fg:w="2"/><text x="96.2426%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="95.9926%" y="725" width="0.0177%" height="15" fill="rgb(227,169,22)" fg:x="10851" fg:w="2"/><text x="96.2426%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm::frame::CreateFrame&gt;,revm_interpreter::interpreter::InterpreterResult)&gt;+Output = core::result::Result&lt;revm_interpreter::create_outcome::CreateOutcome,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="96.0103%" y="773" width="0.0265%" height="15" fill="rgb(253,152,4)" fg:x="10853" fg:w="3"/><text x="96.2603%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="96.0103%" y="757" width="0.0265%" height="15" fill="rgb(219,158,36)" fg:x="10853" fg:w="3"/><text x="96.2603%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.02%)</title><rect x="96.0456%" y="741" width="0.0177%" height="15" fill="rgb(251,128,40)" fg:x="10857" fg:w="2"/><text x="96.2956%" y="751.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="96.0456%" y="725" width="0.0177%" height="15" fill="rgb(254,101,39)" fg:x="10857" fg:w="2"/><text x="96.2956%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,&amp;revm_interpreter::gas::Gas)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="96.0456%" y="709" width="0.0177%" height="15" fill="rgb(221,168,40)" fg:x="10857" fg:w="2"/><text x="96.2956%" y="719.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="96.0456%" y="693" width="0.0177%" height="15" fill="rgb(221,14,27)" fg:x="10857" fg:w="2"/><text x="96.2956%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,alloc::boxed::Box&lt;revm_interpreter::inner_models::CallInputs&gt;)&gt;+Output = core::result::Result&lt;revm::frame::FrameOrResult,revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="96.0368%" y="773" width="0.0442%" height="15" fill="rgb(207,36,43)" fg:x="10856" fg:w="5"/><text x="96.2868%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="96.0368%" y="757" width="0.0442%" height="15" fill="rgb(240,172,53)" fg:x="10856" fg:w="5"/><text x="96.2868%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="96.0633%" y="741" width="0.0177%" height="15" fill="rgb(241,138,43)" fg:x="10859" fg:w="2"/><text x="96.3133%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="96.0633%" y="725" width="0.0177%" height="15" fill="rgb(227,78,19)" fg:x="10859" fg:w="2"/><text x="96.3133%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (22 samples, 0.19%)</title><rect x="95.8953%" y="789" width="0.1946%" height="15" fill="rgb(215,127,44)" fg:x="10840" fg:w="22"/><text x="96.1453%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.13%)</title><rect x="96.0899%" y="725" width="0.1327%" height="15" fill="rgb(227,13,10)" fg:x="10862" fg:w="15"/><text x="96.3399%" y="735.50"></text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="96.2314%" y="725" width="0.0177%" height="15" fill="rgb(249,177,6)" fg:x="10878" fg:w="2"/><text x="96.4814%" y="735.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (20 samples, 0.18%)</title><rect x="96.0899%" y="789" width="0.1769%" height="15" fill="rgb(215,154,26)" fg:x="10862" fg:w="20"/><text x="96.3399%" y="799.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (20 samples, 0.18%)</title><rect x="96.0899%" y="773" width="0.1769%" height="15" fill="rgb(250,168,20)" fg:x="10862" fg:w="20"/><text x="96.3399%" y="783.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (20 samples, 0.18%)</title><rect x="96.0899%" y="757" width="0.1769%" height="15" fill="rgb(222,53,38)" fg:x="10862" fg:w="20"/><text x="96.3399%" y="767.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (20 samples, 0.18%)</title><rect x="96.0899%" y="741" width="0.1769%" height="15" fill="rgb(245,154,5)" fg:x="10862" fg:w="20"/><text x="96.3399%" y="751.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="96.2491%" y="725" width="0.0177%" height="15" fill="rgb(214,89,50)" fg:x="10880" fg:w="2"/><text x="96.4991%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="96.2491%" y="709" width="0.0177%" height="15" fill="rgb(232,73,14)" fg:x="10880" fg:w="2"/><text x="96.4991%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="96.2491%" y="693" width="0.0177%" height="15" fill="rgb(230,101,20)" fg:x="10880" fg:w="2"/><text x="96.4991%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="96.2491%" y="677" width="0.0177%" height="15" fill="rgb(208,56,28)" fg:x="10880" fg:w="2"/><text x="96.4991%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="96.2491%" y="661" width="0.0177%" height="15" fill="rgb(247,205,22)" fg:x="10880" fg:w="2"/><text x="96.4991%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="96.2491%" y="645" width="0.0177%" height="15" fill="rgb(252,109,51)" fg:x="10880" fg:w="2"/><text x="96.4991%" y="655.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="96.2491%" y="629" width="0.0177%" height="15" fill="rgb(220,40,24)" fg:x="10880" fg:w="2"/><text x="96.4991%" y="639.50"></text></g><g><title>revm::context::Context&lt;EXT,DB&gt;::new (2 samples, 0.02%)</title><rect x="96.2668%" y="789" width="0.0177%" height="15" fill="rgb(251,108,7)" fg:x="10882" fg:w="2"/><text x="96.5168%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="96.2668%" y="773" width="0.0177%" height="15" fill="rgb(238,102,51)" fg:x="10882" fg:w="2"/><text x="96.5168%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="96.3022%" y="773" width="0.0177%" height="15" fill="rgb(219,149,34)" fg:x="10886" fg:w="2"/><text x="96.5522%" y="783.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::SetGenericStage,EXT,DB&gt;::with_db (88 samples, 0.78%)</title><rect x="95.5591%" y="805" width="0.7785%" height="15" fill="rgb(239,70,0)" fg:x="10802" fg:w="88"/><text x="95.8091%" y="815.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (6 samples, 0.05%)</title><rect x="96.2845%" y="789" width="0.0531%" height="15" fill="rgb(246,214,23)" fg:x="10884" fg:w="6"/><text x="96.5345%" y="799.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::with_db (2 samples, 0.02%)</title><rect x="96.3199%" y="773" width="0.0177%" height="15" fill="rgb(239,221,51)" fg:x="10888" fg:w="2"/><text x="96.5699%" y="783.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::end (3 samples, 0.03%)</title><rect x="96.3376%" y="789" width="0.0265%" height="15" fill="rgb(254,62,14)" fg:x="10890" fg:w="3"/><text x="96.5876%" y="799.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.02%)</title><rect x="96.3464%" y="773" width="0.0177%" height="15" fill="rgb(253,57,33)" fg:x="10891" fg:w="2"/><text x="96.5964%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="96.3464%" y="757" width="0.0177%" height="15" fill="rgb(229,34,6)" fg:x="10891" fg:w="2"/><text x="96.5964%" y="767.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::env (2 samples, 0.02%)</title><rect x="96.3641%" y="789" width="0.0177%" height="15" fill="rgb(235,191,23)" fg:x="10893" fg:w="2"/><text x="96.6141%" y="799.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.02%)</title><rect x="96.3641%" y="773" width="0.0177%" height="15" fill="rgb(217,207,27)" fg:x="10893" fg:w="2"/><text x="96.6141%" y="783.50"></text></g><g><title>revm::handler::mainnet::validation::validate_env (2 samples, 0.02%)</title><rect x="96.3641%" y="757" width="0.0177%" height="15" fill="rgb(232,41,44)" fg:x="10893" fg:w="2"/><text x="96.6141%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (4 samples, 0.04%)</title><rect x="96.4260%" y="629" width="0.0354%" height="15" fill="rgb(221,188,19)" fg:x="10900" fg:w="4"/><text x="96.6760%" y="639.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::initial_tx_gas (12 samples, 0.11%)</title><rect x="96.3818%" y="789" width="0.1062%" height="15" fill="rgb(245,180,45)" fg:x="10895" fg:w="12"/><text x="96.6318%" y="799.50"></text></g><g><title>core::ops::function::Fn::call (11 samples, 0.10%)</title><rect x="96.3907%" y="773" width="0.0973%" height="15" fill="rgb(250,220,42)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="783.50"></text></g><g><title>revm::handler::mainnet::validation::validate_initial_tx_gas (11 samples, 0.10%)</title><rect x="96.3907%" y="757" width="0.0973%" height="15" fill="rgb(234,16,34)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="767.50"></text></g><g><title>revm_interpreter::gas::calc::validate_initial_tx_gas (11 samples, 0.10%)</title><rect x="96.3907%" y="741" width="0.0973%" height="15" fill="rgb(233,217,23)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (11 samples, 0.10%)</title><rect x="96.3907%" y="725" width="0.0973%" height="15" fill="rgb(209,22,46)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (11 samples, 0.10%)</title><rect x="96.3907%" y="709" width="0.0973%" height="15" fill="rgb(213,101,18)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="719.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (11 samples, 0.10%)</title><rect x="96.3907%" y="693" width="0.0973%" height="15" fill="rgb(215,179,52)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.10%)</title><rect x="96.3907%" y="677" width="0.0973%" height="15" fill="rgb(223,50,25)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.10%)</title><rect x="96.3907%" y="661" width="0.0973%" height="15" fill="rgb(224,51,44)" fg:x="10896" fg:w="11"/><text x="96.6407%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7 samples, 0.06%)</title><rect x="96.4260%" y="645" width="0.0619%" height="15" fill="rgb(224,13,54)" fg:x="10900" fg:w="7"/><text x="96.6760%" y="655.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (3 samples, 0.03%)</title><rect x="96.4614%" y="629" width="0.0265%" height="15" fill="rgb(219,58,47)" fg:x="10904" fg:w="3"/><text x="96.7114%" y="639.50"></text></g><g><title>block_stm_revm::vm::Vm::execute (254 samples, 2.25%)</title><rect x="94.2587%" y="821" width="2.2470%" height="15" fill="rgb(246,124,34)" fg:x="10655" fg:w="254"/><text x="94.5087%" y="831.50">b..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (19 samples, 0.17%)</title><rect x="96.3376%" y="805" width="0.1681%" height="15" fill="rgb(245,109,25)" fg:x="10890" fg:w="19"/><text x="96.5876%" y="815.50"></text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (2 samples, 0.02%)</title><rect x="96.4880%" y="789" width="0.0177%" height="15" fill="rgb(235,48,23)" fg:x="10907" fg:w="2"/><text x="96.7380%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;core::option::Option&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="96.5145%" y="821" width="0.0354%" height="15" fill="rgb(229,203,36)" fg:x="10910" fg:w="4"/><text x="96.7645%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="96.5145%" y="805" width="0.0354%" height="15" fill="rgb(234,180,9)" fg:x="10910" fg:w="4"/><text x="96.7645%" y="815.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (4 samples, 0.04%)</title><rect x="96.5145%" y="789" width="0.0354%" height="15" fill="rgb(228,98,45)" fg:x="10910" fg:w="4"/><text x="96.7645%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (4 samples, 0.04%)</title><rect x="96.5145%" y="773" width="0.0354%" height="15" fill="rgb(240,24,36)" fg:x="10910" fg:w="4"/><text x="96.7645%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (4 samples, 0.04%)</title><rect x="96.5145%" y="757" width="0.0354%" height="15" fill="rgb(227,154,19)" fg:x="10910" fg:w="4"/><text x="96.7645%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (5 samples, 0.04%)</title><rect x="96.5499%" y="789" width="0.0442%" height="15" fill="rgb(231,2,48)" fg:x="10914" fg:w="5"/><text x="96.7999%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.04%)</title><rect x="96.5499%" y="773" width="0.0442%" height="15" fill="rgb(219,216,0)" fg:x="10914" fg:w="5"/><text x="96.7999%" y="783.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (5 samples, 0.04%)</title><rect x="96.5941%" y="773" width="0.0442%" height="15" fill="rgb(251,88,0)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="783.50"></text></g><g><title>syscall (5 samples, 0.04%)</title><rect x="96.5941%" y="757" width="0.0442%" height="15" fill="rgb(242,45,45)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.04%)</title><rect x="96.5941%" y="741" width="0.0442%" height="15" fill="rgb(218,149,45)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="751.50"></text></g><g><title>do_syscall_64 (5 samples, 0.04%)</title><rect x="96.5941%" y="725" width="0.0442%" height="15" fill="rgb(247,194,10)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="735.50"></text></g><g><title>__x64_sys_futex (5 samples, 0.04%)</title><rect x="96.5941%" y="709" width="0.0442%" height="15" fill="rgb(234,33,37)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="719.50"></text></g><g><title>do_futex (5 samples, 0.04%)</title><rect x="96.5941%" y="693" width="0.0442%" height="15" fill="rgb(218,61,13)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="703.50"></text></g><g><title>futex_wait (5 samples, 0.04%)</title><rect x="96.5941%" y="677" width="0.0442%" height="15" fill="rgb(210,80,52)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="687.50"></text></g><g><title>futex_wait_queue (5 samples, 0.04%)</title><rect x="96.5941%" y="661" width="0.0442%" height="15" fill="rgb(218,203,27)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="671.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="96.5941%" y="645" width="0.0442%" height="15" fill="rgb(209,126,33)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="655.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="96.5941%" y="629" width="0.0442%" height="15" fill="rgb(234,173,41)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="639.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="96.5941%" y="613" width="0.0442%" height="15" fill="rgb(228,166,9)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.04%)</title><rect x="96.5941%" y="597" width="0.0442%" height="15" fill="rgb(208,124,43)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="607.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.04%)</title><rect x="96.5941%" y="581" width="0.0442%" height="15" fill="rgb(212,154,38)" fg:x="10919" fg:w="5"/><text x="96.8441%" y="591.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.02%)</title><rect x="96.6384%" y="757" width="0.0177%" height="15" fill="rgb(246,179,35)" fg:x="10924" fg:w="2"/><text x="96.8884%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.02%)</title><rect x="96.6384%" y="741" width="0.0177%" height="15" fill="rgb(251,3,50)" fg:x="10924" fg:w="2"/><text x="96.8884%" y="751.50"></text></g><g><title>block_stm_revm::block_stm::try_execute (300 samples, 2.65%)</title><rect x="94.0110%" y="837" width="2.6539%" height="15" fill="rgb(219,96,8)" fg:x="10627" fg:w="300"/><text x="94.2610%" y="847.50">bl..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.12%)</title><rect x="96.5499%" y="821" width="0.1150%" height="15" fill="rgb(251,216,33)" fg:x="10914" fg:w="13"/><text x="96.7999%" y="831.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (13 samples, 0.12%)</title><rect x="96.5499%" y="805" width="0.1150%" height="15" fill="rgb(243,145,29)" fg:x="10914" fg:w="13"/><text x="96.7999%" y="815.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock_contended (8 samples, 0.07%)</title><rect x="96.5941%" y="789" width="0.0708%" height="15" fill="rgb(210,75,20)" fg:x="10919" fg:w="8"/><text x="96.8441%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::spin (3 samples, 0.03%)</title><rect x="96.6384%" y="773" width="0.0265%" height="15" fill="rgb(235,56,8)" fg:x="10924" fg:w="3"/><text x="96.8884%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (18 samples, 0.16%)</title><rect x="96.7180%" y="693" width="0.1592%" height="15" fill="rgb(226,175,49)" fg:x="10933" fg:w="18"/><text x="96.9680%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (18 samples, 0.16%)</title><rect x="96.7180%" y="677" width="0.1592%" height="15" fill="rgb(242,204,23)" fg:x="10933" fg:w="18"/><text x="96.9680%" y="687.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (43 samples, 0.38%)</title><rect x="96.7180%" y="757" width="0.3804%" height="15" fill="rgb(225,104,24)" fg:x="10933" fg:w="43"/><text x="96.9680%" y="767.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (43 samples, 0.38%)</title><rect x="96.7180%" y="741" width="0.3804%" height="15" fill="rgb(253,34,1)" fg:x="10933" fg:w="43"/><text x="96.9680%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (43 samples, 0.38%)</title><rect x="96.7180%" y="725" width="0.3804%" height="15" fill="rgb(233,199,23)" fg:x="10933" fg:w="43"/><text x="96.9680%" y="735.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (43 samples, 0.38%)</title><rect x="96.7180%" y="709" width="0.3804%" height="15" fill="rgb(247,7,51)" fg:x="10933" fg:w="43"/><text x="96.9680%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25 samples, 0.22%)</title><rect x="96.8772%" y="693" width="0.2212%" height="15" fill="rgb(214,146,12)" fg:x="10951" fg:w="25"/><text x="97.1272%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.22%)</title><rect x="96.8772%" y="677" width="0.2212%" height="15" fill="rgb(234,181,43)" fg:x="10951" fg:w="25"/><text x="97.1272%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;block_stm_revm::MemoryLocation,dashmap::util::SharedValue&lt;dashmap::DashMap&lt;usize,block_stm_revm::mv_memory::MemoryEntry&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="97.0984%" y="757" width="0.0531%" height="15" fill="rgb(239,148,6)" fg:x="10976" fg:w="6"/><text x="97.3484%" y="767.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="97.0984%" y="741" width="0.0531%" height="15" fill="rgb(206,151,17)" fg:x="10976" fg:w="6"/><text x="97.3484%" y="751.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (6 samples, 0.05%)</title><rect x="97.0984%" y="725" width="0.0531%" height="15" fill="rgb(213,215,10)" fg:x="10976" fg:w="6"/><text x="97.3484%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.05%)</title><rect x="97.0984%" y="709" width="0.0531%" height="15" fill="rgb(215,220,44)" fg:x="10976" fg:w="6"/><text x="97.3484%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.05%)</title><rect x="97.0984%" y="693" width="0.0531%" height="15" fill="rgb(245,205,37)" fg:x="10976" fg:w="6"/><text x="97.3484%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="97.1515%" y="741" width="0.0265%" height="15" fill="rgb(245,130,43)" fg:x="10982" fg:w="3"/><text x="97.4015%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="97.1515%" y="725" width="0.0265%" height="15" fill="rgb(231,227,38)" fg:x="10982" fg:w="3"/><text x="97.4015%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="97.1515%" y="709" width="0.0265%" height="15" fill="rgb(233,185,4)" fg:x="10982" fg:w="3"/><text x="97.4015%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="97.1603%" y="693" width="0.0177%" height="15" fill="rgb(224,154,43)" fg:x="10983" fg:w="2"/><text x="97.4103%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="97.1868%" y="709" width="0.0265%" height="15" fill="rgb(235,156,15)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="719.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="97.1868%" y="693" width="0.0265%" height="15" fill="rgb(211,55,43)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (3 samples, 0.03%)</title><rect x="97.1868%" y="677" width="0.0265%" height="15" fill="rgb(247,149,40)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.03%)</title><rect x="97.1868%" y="661" width="0.0265%" height="15" fill="rgb(232,171,16)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.03%)</title><rect x="97.1868%" y="645" width="0.0265%" height="15" fill="rgb(215,117,49)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.03%)</title><rect x="97.1868%" y="629" width="0.0265%" height="15" fill="rgb(246,194,11)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="97.1868%" y="613" width="0.0265%" height="15" fill="rgb(242,101,44)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="97.1868%" y="597" width="0.0265%" height="15" fill="rgb(226,174,6)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="97.1868%" y="581" width="0.0265%" height="15" fill="rgb(213,150,20)" fg:x="10986" fg:w="3"/><text x="97.4368%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="97.1957%" y="565" width="0.0177%" height="15" fill="rgb(222,124,42)" fg:x="10987" fg:w="2"/><text x="97.4457%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="97.2134%" y="709" width="0.0354%" height="15" fill="rgb(250,19,47)" fg:x="10989" fg:w="4"/><text x="97.4634%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="97.2134%" y="693" width="0.0354%" height="15" fill="rgb(241,217,19)" fg:x="10989" fg:w="4"/><text x="97.4634%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="97.2134%" y="677" width="0.0354%" height="15" fill="rgb(207,210,34)" fg:x="10989" fg:w="4"/><text x="97.4634%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="97.2311%" y="661" width="0.0177%" height="15" fill="rgb(244,45,4)" fg:x="10991" fg:w="2"/><text x="97.4811%" y="671.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="97.2488%" y="693" width="0.0354%" height="15" fill="rgb(252,134,50)" fg:x="10993" fg:w="4"/><text x="97.4988%" y="703.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (4 samples, 0.04%)</title><rect x="97.2488%" y="677" width="0.0354%" height="15" fill="rgb(238,74,2)" fg:x="10993" fg:w="4"/><text x="97.4988%" y="687.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (4 samples, 0.04%)</title><rect x="97.2488%" y="661" width="0.0354%" height="15" fill="rgb(226,58,46)" fg:x="10993" fg:w="4"/><text x="97.4988%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.04%)</title><rect x="97.2488%" y="645" width="0.0354%" height="15" fill="rgb(232,83,35)" fg:x="10993" fg:w="4"/><text x="97.4988%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3 samples, 0.03%)</title><rect x="97.2576%" y="629" width="0.0265%" height="15" fill="rgb(212,148,47)" fg:x="10994" fg:w="3"/><text x="97.5076%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="97.2576%" y="613" width="0.0265%" height="15" fill="rgb(235,29,1)" fg:x="10994" fg:w="3"/><text x="97.5076%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="97.2576%" y="597" width="0.0265%" height="15" fill="rgb(247,55,37)" fg:x="10994" fg:w="3"/><text x="97.5076%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="97.2576%" y="581" width="0.0265%" height="15" fill="rgb(222,48,3)" fg:x="10994" fg:w="3"/><text x="97.5076%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (6 samples, 0.05%)</title><rect x="97.2488%" y="709" width="0.0531%" height="15" fill="rgb(234,21,33)" fg:x="10993" fg:w="6"/><text x="97.4988%" y="719.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="97.2841%" y="693" width="0.0177%" height="15" fill="rgb(247,178,53)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="703.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.02%)</title><rect x="97.2841%" y="677" width="0.0177%" height="15" fill="rgb(225,75,7)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.02%)</title><rect x="97.2841%" y="661" width="0.0177%" height="15" fill="rgb(219,199,7)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="671.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.02%)</title><rect x="97.2841%" y="645" width="0.0177%" height="15" fill="rgb(209,93,42)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="97.2841%" y="629" width="0.0177%" height="15" fill="rgb(240,175,17)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="97.2841%" y="613" width="0.0177%" height="15" fill="rgb(232,106,7)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="97.2841%" y="597" width="0.0177%" height="15" fill="rgb(242,106,43)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="97.2841%" y="581" width="0.0177%" height="15" fill="rgb(242,61,37)" fg:x="10997" fg:w="2"/><text x="97.5341%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="97.3284%" y="613" width="0.0177%" height="15" fill="rgb(205,72,10)" fg:x="11002" fg:w="2"/><text x="97.5784%" y="623.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::read (77 samples, 0.68%)</title><rect x="96.6826%" y="805" width="0.6812%" height="15" fill="rgb(214,184,36)" fg:x="10929" fg:w="77"/><text x="96.9326%" y="815.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (76 samples, 0.67%)</title><rect x="96.6914%" y="789" width="0.6723%" height="15" fill="rgb(206,107,18)" fg:x="10930" fg:w="76"/><text x="96.9414%" y="799.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (76 samples, 0.67%)</title><rect x="96.6914%" y="773" width="0.6723%" height="15" fill="rgb(210,75,5)" fg:x="10930" fg:w="76"/><text x="96.9414%" y="783.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (24 samples, 0.21%)</title><rect x="97.1515%" y="757" width="0.2123%" height="15" fill="rgb(205,3,19)" fg:x="10982" fg:w="24"/><text x="97.4015%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20 samples, 0.18%)</title><rect x="97.1868%" y="741" width="0.1769%" height="15" fill="rgb(207,181,42)" fg:x="10986" fg:w="20"/><text x="97.4368%" y="751.50"></text></g><g><title>&lt;block_stm_revm::MemoryLocation as core::hash::Hash&gt;::hash (20 samples, 0.18%)</title><rect x="97.1868%" y="725" width="0.1769%" height="15" fill="rgb(229,179,43)" fg:x="10986" fg:w="20"/><text x="97.4368%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (7 samples, 0.06%)</title><rect x="97.3018%" y="709" width="0.0619%" height="15" fill="rgb(246,95,30)" fg:x="10999" fg:w="7"/><text x="97.5518%" y="719.50"></text></g><g><title>core::hash::Hasher::write_isize (7 samples, 0.06%)</title><rect x="97.3018%" y="693" width="0.0619%" height="15" fill="rgb(234,144,45)" fg:x="10999" fg:w="7"/><text x="97.5518%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.06%)</title><rect x="97.3018%" y="677" width="0.0619%" height="15" fill="rgb(250,54,25)" fg:x="10999" fg:w="7"/><text x="97.5518%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="97.3018%" y="661" width="0.0619%" height="15" fill="rgb(215,195,40)" fg:x="10999" fg:w="7"/><text x="97.5518%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="97.3018%" y="645" width="0.0619%" height="15" fill="rgb(233,188,42)" fg:x="10999" fg:w="7"/><text x="97.5518%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="97.3018%" y="629" width="0.0619%" height="15" fill="rgb(247,227,35)" fg:x="10999" fg:w="7"/><text x="97.5518%" y="639.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="97.3461%" y="613" width="0.0177%" height="15" fill="rgb(249,124,27)" fg:x="11004" fg:w="2"/><text x="97.5961%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(block_stm_revm::MemoryLocation,block_stm_revm::ReadOrigin)&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="97.3638%" y="805" width="0.0177%" height="15" fill="rgb(219,207,25)" fg:x="11006" fg:w="2"/><text x="97.6138%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="97.3638%" y="789" width="0.0177%" height="15" fill="rgb(241,216,47)" fg:x="11006" fg:w="2"/><text x="97.6138%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.02%)</title><rect x="97.3638%" y="773" width="0.0177%" height="15" fill="rgb(233,82,50)" fg:x="11006" fg:w="2"/><text x="97.6138%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.02%)</title><rect x="97.3638%" y="757" width="0.0177%" height="15" fill="rgb(232,63,2)" fg:x="11006" fg:w="2"/><text x="97.6138%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="97.3638%" y="741" width="0.0177%" height="15" fill="rgb(236,184,28)" fg:x="11006" fg:w="2"/><text x="97.6138%" y="751.50"></text></g><g><title>block_stm_revm::mv_memory::MvMemory::validate_read_set (83 samples, 0.73%)</title><rect x="96.6737%" y="821" width="0.7343%" height="15" fill="rgb(254,63,27)" fg:x="10928" fg:w="83"/><text x="96.9237%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.03%)</title><rect x="97.3815%" y="805" width="0.0265%" height="15" fill="rgb(253,106,28)" fg:x="11008" fg:w="3"/><text x="97.6315%" y="815.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (3 samples, 0.03%)</title><rect x="97.3815%" y="789" width="0.0265%" height="15" fill="rgb(225,141,39)" fg:x="11008" fg:w="3"/><text x="97.6315%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.03%)</title><rect x="97.3815%" y="773" width="0.0265%" height="15" fill="rgb(222,157,20)" fg:x="11008" fg:w="3"/><text x="97.6315%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.03%)</title><rect x="97.3815%" y="757" width="0.0265%" height="15" fill="rgb(210,190,9)" fg:x="11008" fg:w="3"/><text x="97.6315%" y="767.50"></text></g><g><title>block_stm_revm::block_stm::try_validate (89 samples, 0.79%)</title><rect x="96.6649%" y="837" width="0.7873%" height="15" fill="rgb(242,167,7)" fg:x="10927" fg:w="89"/><text x="96.9149%" y="847.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::finish_validation (5 samples, 0.04%)</title><rect x="97.4080%" y="821" width="0.0442%" height="15" fill="rgb(227,82,41)" fg:x="11011" fg:w="5"/><text x="97.6580%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="97.4080%" y="805" width="0.0442%" height="15" fill="rgb(222,131,13)" fg:x="11011" fg:w="5"/><text x="97.6580%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="97.4080%" y="789" width="0.0442%" height="15" fill="rgb(221,98,26)" fg:x="11011" fg:w="5"/><text x="97.6580%" y="799.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::done (17 samples, 0.15%)</title><rect x="97.4522%" y="837" width="0.1504%" height="15" fill="rgb(251,63,52)" fg:x="11016" fg:w="17"/><text x="97.7022%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (17 samples, 0.15%)</title><rect x="97.4522%" y="821" width="0.1504%" height="15" fill="rgb(246,25,43)" fg:x="11016" fg:w="17"/><text x="97.7022%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.15%)</title><rect x="97.4522%" y="805" width="0.1504%" height="15" fill="rgb(247,167,15)" fg:x="11016" fg:w="17"/><text x="97.7022%" y="815.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::check_done (23 samples, 0.20%)</title><rect x="98.0184%" y="805" width="0.2035%" height="15" fill="rgb(240,104,42)" fg:x="11080" fg:w="23"/><text x="98.2684%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.12%)</title><rect x="98.1069%" y="789" width="0.1150%" height="15" fill="rgb(224,54,6)" fg:x="11090" fg:w="13"/><text x="98.3569%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.12%)</title><rect x="98.1069%" y="773" width="0.1150%" height="15" fill="rgb(244,108,35)" fg:x="11090" fg:w="13"/><text x="98.3569%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;block_stm_revm::scheduler::TxIncarnationStatus&gt;&gt; (7 samples, 0.06%)</title><rect x="98.2307%" y="789" width="0.0619%" height="15" fill="rgb(216,154,2)" fg:x="11104" fg:w="7"/><text x="98.4807%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="98.2307%" y="773" width="0.0619%" height="15" fill="rgb(222,8,47)" fg:x="11104" fg:w="7"/><text x="98.4807%" y="783.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::unlock (7 samples, 0.06%)</title><rect x="98.2307%" y="757" width="0.0619%" height="15" fill="rgb(252,93,1)" fg:x="11104" fg:w="7"/><text x="98.4807%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (6 samples, 0.05%)</title><rect x="98.2396%" y="741" width="0.0531%" height="15" fill="rgb(223,226,51)" fg:x="11105" fg:w="6"/><text x="98.4896%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (6 samples, 0.05%)</title><rect x="98.2396%" y="725" width="0.0531%" height="15" fill="rgb(206,147,9)" fg:x="11105" fg:w="6"/><text x="98.4896%" y="735.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::try_incarnate (12 samples, 0.11%)</title><rect x="98.2219%" y="805" width="0.1062%" height="15" fill="rgb(248,180,41)" fg:x="11103" fg:w="12"/><text x="98.4719%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.04%)</title><rect x="98.2926%" y="789" width="0.0354%" height="15" fill="rgb(209,47,50)" fg:x="11111" fg:w="4"/><text x="98.5426%" y="799.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (4 samples, 0.04%)</title><rect x="98.2926%" y="773" width="0.0354%" height="15" fill="rgb(243,65,31)" fg:x="11111" fg:w="4"/><text x="98.5426%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (4 samples, 0.04%)</title><rect x="98.2926%" y="757" width="0.0354%" height="15" fill="rgb(228,128,1)" fg:x="11111" fg:w="4"/><text x="98.5426%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.04%)</title><rect x="98.2926%" y="741" width="0.0354%" height="15" fill="rgb(231,192,16)" fg:x="11111" fg:w="4"/><text x="98.5426%" y="751.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_version_to_execute (61 samples, 0.54%)</title><rect x="97.8680%" y="821" width="0.5396%" height="15" fill="rgb(224,26,40)" fg:x="11063" fg:w="61"/><text x="98.1180%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.08%)</title><rect x="98.3280%" y="805" width="0.0796%" height="15" fill="rgb(214,192,17)" fg:x="11115" fg:w="9"/><text x="98.5780%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.08%)</title><rect x="98.3280%" y="789" width="0.0796%" height="15" fill="rgb(225,147,18)" fg:x="11115" fg:w="9"/><text x="98.5780%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.04%)</title><rect x="98.4165%" y="805" width="0.0354%" height="15" fill="rgb(205,35,11)" fg:x="11125" fg:w="4"/><text x="98.6665%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.04%)</title><rect x="98.4165%" y="789" width="0.0354%" height="15" fill="rgb(242,40,42)" fg:x="11125" fg:w="4"/><text x="98.6665%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="98.4519%" y="805" width="0.0265%" height="15" fill="rgb(250,170,13)" fg:x="11129" fg:w="3"/><text x="98.7019%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="98.4519%" y="789" width="0.0265%" height="15" fill="rgb(240,161,28)" fg:x="11129" fg:w="3"/><text x="98.7019%" y="799.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_version_to_validate (21 samples, 0.19%)</title><rect x="98.4076%" y="821" width="0.1858%" height="15" fill="rgb(245,179,12)" fg:x="11124" fg:w="21"/><text x="98.6576%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.11%)</title><rect x="98.4873%" y="805" width="0.1062%" height="15" fill="rgb(250,92,32)" fg:x="11133" fg:w="12"/><text x="98.7373%" y="815.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (12 samples, 0.11%)</title><rect x="98.4873%" y="789" width="0.1062%" height="15" fill="rgb(233,10,40)" fg:x="11133" fg:w="12"/><text x="98.7373%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.11%)</title><rect x="98.4873%" y="773" width="0.1062%" height="15" fill="rgb(217,98,1)" fg:x="11133" fg:w="12"/><text x="98.7373%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.11%)</title><rect x="98.4873%" y="757" width="0.1062%" height="15" fill="rgb(238,202,7)" fg:x="11133" fg:w="12"/><text x="98.7373%" y="767.50"></text></g><g><title>block_stm_revm::scheduler::Scheduler::next_task (125 samples, 1.11%)</title><rect x="97.6026%" y="837" width="1.1058%" height="15" fill="rgb(222,91,3)" fg:x="11033" fg:w="125"/><text x="97.8526%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.12%)</title><rect x="98.5934%" y="821" width="0.1150%" height="15" fill="rgb(211,170,49)" fg:x="11145" fg:w="13"/><text x="98.8434%" y="831.50"></text></g><g><title>std::panic::catch_unwind (543 samples, 4.80%)</title><rect x="93.9137%" y="949" width="4.8036%" height="15" fill="rgb(253,139,18)" fg:x="10616" fg:w="543"/><text x="94.1637%" y="959.50">std::p..</text></g><g><title>std::panicking::try (543 samples, 4.80%)</title><rect x="93.9137%" y="933" width="4.8036%" height="15" fill="rgb(222,4,43)" fg:x="10616" fg:w="543"/><text x="94.1637%" y="943.50">std::p..</text></g><g><title>std::panicking::try::do_call (543 samples, 4.80%)</title><rect x="93.9137%" y="917" width="4.8036%" height="15" fill="rgb(207,205,12)" fg:x="10616" fg:w="543"/><text x="94.1637%" y="927.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (543 samples, 4.80%)</title><rect x="93.9137%" y="901" width="4.8036%" height="15" fill="rgb(216,159,46)" fg:x="10616" fg:w="543"/><text x="94.1637%" y="911.50">&lt;core:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (543 samples, 4.80%)</title><rect x="93.9137%" y="885" width="4.8036%" height="15" fill="rgb(236,115,1)" fg:x="10616" fg:w="543"/><text x="94.1637%" y="895.50">std::t..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (543 samples, 4.80%)</title><rect x="93.9137%" y="869" width="4.8036%" height="15" fill="rgb(251,35,33)" fg:x="10616" fg:w="543"/><text x="94.1637%" y="879.50">std::s..</text></g><g><title>block_stm_revm::block_stm::BlockSTM::run::_{{closure}}::_{{closure}} (543 samples, 4.80%)</title><rect x="93.9137%" y="853" width="4.8036%" height="15" fill="rgb(248,62,51)" fg:x="10616" fg:w="543"/><text x="94.1637%" y="863.50">block_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (551 samples, 4.87%)</title><rect x="93.9137%" y="1013" width="4.8744%" height="15" fill="rgb(254,180,19)" fg:x="10616" fg:w="551"/><text x="94.1637%" y="1023.50">&lt;alloc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (551 samples, 4.87%)</title><rect x="93.9137%" y="997" width="4.8744%" height="15" fill="rgb(217,100,32)" fg:x="10616" fg:w="551"/><text x="94.1637%" y="1007.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (551 samples, 4.87%)</title><rect x="93.9137%" y="981" width="4.8744%" height="15" fill="rgb(224,71,22)" fg:x="10616" fg:w="551"/><text x="94.1637%" y="991.50">core::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (551 samples, 4.87%)</title><rect x="93.9137%" y="965" width="4.8744%" height="15" fill="rgb(251,185,33)" fg:x="10616" fg:w="551"/><text x="94.1637%" y="975.50">std::t..</text></g><g><title>std::sys::pal::unix::thread::guard::current (8 samples, 0.07%)</title><rect x="98.7173%" y="949" width="0.0708%" height="15" fill="rgb(209,75,48)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="959.50"></text></g><g><title>__pthread_getattr_np (8 samples, 0.07%)</title><rect x="98.7173%" y="933" width="0.0708%" height="15" fill="rgb(253,190,16)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="943.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.07%)</title><rect x="98.7173%" y="917" width="0.0708%" height="15" fill="rgb(226,140,1)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="927.50"></text></g><g><title>tcache_init (8 samples, 0.07%)</title><rect x="98.7173%" y="901" width="0.0708%" height="15" fill="rgb(206,75,30)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="911.50"></text></g><g><title>tcache_init (8 samples, 0.07%)</title><rect x="98.7173%" y="885" width="0.0708%" height="15" fill="rgb(231,208,37)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="895.50"></text></g><g><title>arena_get2 (8 samples, 0.07%)</title><rect x="98.7173%" y="869" width="0.0708%" height="15" fill="rgb(238,136,40)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="879.50"></text></g><g><title>arena_get2 (8 samples, 0.07%)</title><rect x="98.7173%" y="853" width="0.0708%" height="15" fill="rgb(247,137,17)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="863.50"></text></g><g><title>_int_new_arena (8 samples, 0.07%)</title><rect x="98.7173%" y="837" width="0.0708%" height="15" fill="rgb(240,60,40)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="847.50"></text></g><g><title>new_heap (8 samples, 0.07%)</title><rect x="98.7173%" y="821" width="0.0708%" height="15" fill="rgb(236,68,50)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="831.50"></text></g><g><title>alloc_new_heap (8 samples, 0.07%)</title><rect x="98.7173%" y="805" width="0.0708%" height="15" fill="rgb(230,42,12)" fg:x="11159" fg:w="8"/><text x="98.9673%" y="815.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.05%)</title><rect x="98.7350%" y="789" width="0.0531%" height="15" fill="rgb(219,16,16)" fg:x="11161" fg:w="6"/><text x="98.9850%" y="799.50"></text></g><g><title>exc_page_fault (6 samples, 0.05%)</title><rect x="98.7350%" y="773" width="0.0531%" height="15" fill="rgb(220,38,35)" fg:x="11161" fg:w="6"/><text x="98.9850%" y="783.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.05%)</title><rect x="98.7350%" y="757" width="0.0531%" height="15" fill="rgb(228,33,1)" fg:x="11161" fg:w="6"/><text x="98.9850%" y="767.50"></text></g><g><title>lock_mm_and_find_vma (5 samples, 0.04%)</title><rect x="98.7438%" y="741" width="0.0442%" height="15" fill="rgb(241,46,31)" fg:x="11162" fg:w="5"/><text x="98.9938%" y="751.50"></text></g><g><title>down_read_killable (5 samples, 0.04%)</title><rect x="98.7438%" y="725" width="0.0442%" height="15" fill="rgb(232,58,20)" fg:x="11162" fg:w="5"/><text x="98.9938%" y="735.50"></text></g><g><title>rwsem_down_read_slowpath (5 samples, 0.04%)</title><rect x="98.7438%" y="709" width="0.0442%" height="15" fill="rgb(206,228,53)" fg:x="11162" fg:w="5"/><text x="98.9938%" y="719.50"></text></g><g><title>schedule_preempt_disabled (5 samples, 0.04%)</title><rect x="98.7438%" y="693" width="0.0442%" height="15" fill="rgb(206,88,33)" fg:x="11162" fg:w="5"/><text x="98.9938%" y="703.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="98.7438%" y="677" width="0.0442%" height="15" fill="rgb(238,69,7)" fg:x="11162" fg:w="5"/><text x="98.9938%" y="687.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="98.7438%" y="661" width="0.0442%" height="15" fill="rgb(250,21,46)" fg:x="11162" fg:w="5"/><text x="98.9938%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.04%)</title><rect x="98.7438%" y="645" width="0.0442%" height="15" fill="rgb(215,212,21)" fg:x="11162" fg:w="5"/><text x="98.9938%" y="655.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.04%)</title><rect x="98.7527%" y="629" width="0.0354%" height="15" fill="rgb(211,35,12)" fg:x="11163" fg:w="4"/><text x="99.0027%" y="639.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.04%)</title><rect x="98.7527%" y="613" width="0.0354%" height="15" fill="rgb(231,184,16)" fg:x="11163" fg:w="4"/><text x="99.0027%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (6 samples, 0.05%)</title><rect x="98.7880%" y="1013" width="0.0531%" height="15" fill="rgb(242,140,15)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="1023.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="98.7880%" y="997" width="0.0531%" height="15" fill="rgb(220,37,14)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="1007.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (6 samples, 0.05%)</title><rect x="98.7880%" y="981" width="0.0531%" height="15" fill="rgb(223,146,22)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="991.50"></text></g><g><title>__GI_munmap (6 samples, 0.05%)</title><rect x="98.7880%" y="965" width="0.0531%" height="15" fill="rgb(216,132,15)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.05%)</title><rect x="98.7880%" y="949" width="0.0531%" height="15" fill="rgb(248,83,5)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="959.50"></text></g><g><title>do_syscall_64 (6 samples, 0.05%)</title><rect x="98.7880%" y="933" width="0.0531%" height="15" fill="rgb(231,206,48)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="943.50"></text></g><g><title>__x64_sys_munmap (6 samples, 0.05%)</title><rect x="98.7880%" y="917" width="0.0531%" height="15" fill="rgb(253,185,37)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="927.50"></text></g><g><title>__vm_munmap (6 samples, 0.05%)</title><rect x="98.7880%" y="901" width="0.0531%" height="15" fill="rgb(208,21,44)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="911.50"></text></g><g><title>down_write_killable (6 samples, 0.05%)</title><rect x="98.7880%" y="885" width="0.0531%" height="15" fill="rgb(236,125,4)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="895.50"></text></g><g><title>rwsem_down_write_slowpath (6 samples, 0.05%)</title><rect x="98.7880%" y="869" width="0.0531%" height="15" fill="rgb(226,134,25)" fg:x="11167" fg:w="6"/><text x="99.0380%" y="879.50"></text></g><g><title>schedule_preempt_disabled (5 samples, 0.04%)</title><rect x="98.7969%" y="853" width="0.0442%" height="15" fill="rgb(250,201,12)" fg:x="11168" fg:w="5"/><text x="99.0469%" y="863.50"></text></g><g><title>schedule (5 samples, 0.04%)</title><rect x="98.7969%" y="837" width="0.0442%" height="15" fill="rgb(225,92,18)" fg:x="11168" fg:w="5"/><text x="99.0469%" y="847.50"></text></g><g><title>__schedule (5 samples, 0.04%)</title><rect x="98.7969%" y="821" width="0.0442%" height="15" fill="rgb(227,35,22)" fg:x="11168" fg:w="5"/><text x="99.0469%" y="831.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.04%)</title><rect x="98.8057%" y="805" width="0.0354%" height="15" fill="rgb(214,180,52)" fg:x="11169" fg:w="4"/><text x="99.0557%" y="815.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.04%)</title><rect x="98.8057%" y="789" width="0.0354%" height="15" fill="rgb(233,55,38)" fg:x="11169" fg:w="4"/><text x="99.0557%" y="799.50"></text></g><g><title>do_mmap (3 samples, 0.03%)</title><rect x="98.8500%" y="837" width="0.0265%" height="15" fill="rgb(249,171,43)" fg:x="11174" fg:w="3"/><text x="99.1000%" y="847.50"></text></g><g><title>mmap_region (3 samples, 0.03%)</title><rect x="98.8500%" y="821" width="0.0265%" height="15" fill="rgb(239,87,2)" fg:x="11174" fg:w="3"/><text x="99.1000%" y="831.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.04%)</title><rect x="98.8500%" y="949" width="0.0354%" height="15" fill="rgb(248,141,5)" fg:x="11174" fg:w="4"/><text x="99.1000%" y="959.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.04%)</title><rect x="98.8500%" y="933" width="0.0354%" height="15" fill="rgb(238,33,42)" fg:x="11174" fg:w="4"/><text x="99.1000%" y="943.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="98.8500%" y="917" width="0.0354%" height="15" fill="rgb(231,57,19)" fg:x="11174" fg:w="4"/><text x="99.1000%" y="927.50"></text></g><g><title>do_syscall_64 (4 samples, 0.04%)</title><rect x="98.8500%" y="901" width="0.0354%" height="15" fill="rgb(214,78,53)" fg:x="11174" fg:w="4"/><text x="99.1000%" y="911.50"></text></g><g><title>__x64_sys_mmap (4 samples, 0.04%)</title><rect x="98.8500%" y="885" width="0.0354%" height="15" fill="rgb(206,132,29)" fg:x="11174" fg:w="4"/><text x="99.1000%" y="895.50"></text></g><g><title>ksys_mmap_pgoff (4 samples, 0.04%)</title><rect x="98.8500%" y="869" width="0.0354%" height="15" fill="rgb(248,174,31)" fg:x="11174" fg:w="4"/><text x="99.1000%" y="879.50"></text></g><g><title>vm_mmap_pgoff (4 samples, 0.04%)</title><rect x="98.8500%" y="853" width="0.0354%" height="15" fill="rgb(221,87,13)" fg:x="11174" fg:w="4"/><text x="99.1000%" y="863.50"></text></g><g><title>clone3 (576 samples, 5.10%)</title><rect x="93.7987%" y="1061" width="5.0955%" height="15" fill="rgb(223,197,17)" fg:x="10603" fg:w="576"/><text x="94.0487%" y="1071.50">clone3</text></g><g><title>start_thread (575 samples, 5.09%)</title><rect x="93.8075%" y="1045" width="5.0867%" height="15" fill="rgb(220,144,50)" fg:x="10604" fg:w="575"/><text x="94.0575%" y="1055.50">start_..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (563 samples, 4.98%)</title><rect x="93.9137%" y="1029" width="4.9805%" height="15" fill="rgb(244,201,11)" fg:x="10616" fg:w="563"/><text x="94.1637%" y="1039.50">std::s..</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (6 samples, 0.05%)</title><rect x="98.8411%" y="1013" width="0.0531%" height="15" fill="rgb(249,81,34)" fg:x="11173" fg:w="6"/><text x="99.0911%" y="1023.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (6 samples, 0.05%)</title><rect x="98.8411%" y="997" width="0.0531%" height="15" fill="rgb(205,161,12)" fg:x="11173" fg:w="6"/><text x="99.0911%" y="1007.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (5 samples, 0.04%)</title><rect x="98.8500%" y="981" width="0.0442%" height="15" fill="rgb(252,139,50)" fg:x="11174" fg:w="5"/><text x="99.1000%" y="991.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stackp (5 samples, 0.04%)</title><rect x="98.8500%" y="965" width="0.0442%" height="15" fill="rgb(205,169,14)" fg:x="11174" fg:w="5"/><text x="99.1000%" y="975.50"></text></g><g><title>_compound_head (3 samples, 0.03%)</title><rect x="98.9119%" y="853" width="0.0265%" height="15" fill="rgb(248,198,33)" fg:x="11181" fg:w="3"/><text x="99.1619%" y="863.50"></text></g><g><title>__mod_lruvec_page_state (5 samples, 0.04%)</title><rect x="99.0092%" y="821" width="0.0442%" height="15" fill="rgb(236,23,21)" fg:x="11192" fg:w="5"/><text x="99.2592%" y="831.50"></text></g><g><title>page_remove_rmap (12 samples, 0.11%)</title><rect x="98.9561%" y="837" width="0.1062%" height="15" fill="rgb(231,13,38)" fg:x="11186" fg:w="12"/><text x="99.2061%" y="847.50"></text></g><g><title>free_unref_page_list (11 samples, 0.10%)</title><rect x="99.0977%" y="773" width="0.0973%" height="15" fill="rgb(239,139,21)" fg:x="11202" fg:w="11"/><text x="99.3477%" y="783.50"></text></g><g><title>free_unref_page_commit (11 samples, 0.10%)</title><rect x="99.0977%" y="757" width="0.0973%" height="15" fill="rgb(222,164,45)" fg:x="11202" fg:w="11"/><text x="99.3477%" y="767.50"></text></g><g><title>free_pcppages_bulk (9 samples, 0.08%)</title><rect x="99.1154%" y="741" width="0.0796%" height="15" fill="rgb(230,52,27)" fg:x="11204" fg:w="9"/><text x="99.3654%" y="751.50"></text></g><g><title>__free_one_page (8 samples, 0.07%)</title><rect x="99.1242%" y="725" width="0.0708%" height="15" fill="rgb(227,143,42)" fg:x="11205" fg:w="8"/><text x="99.3742%" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (41 samples, 0.36%)</title><rect x="98.9030%" y="1061" width="0.3627%" height="15" fill="rgb(249,127,1)" fg:x="11180" fg:w="41"/><text x="99.1530%" y="1071.50"></text></g><g><title>do_syscall_64 (41 samples, 0.36%)</title><rect x="98.9030%" y="1045" width="0.3627%" height="15" fill="rgb(243,107,26)" fg:x="11180" fg:w="41"/><text x="99.1530%" y="1055.50"></text></g><g><title>__x64_sys_exit_group (40 samples, 0.35%)</title><rect x="98.9119%" y="1029" width="0.3539%" height="15" fill="rgb(225,7,45)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="1039.50"></text></g><g><title>do_group_exit (40 samples, 0.35%)</title><rect x="98.9119%" y="1013" width="0.3539%" height="15" fill="rgb(241,88,38)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="1023.50"></text></g><g><title>do_exit (40 samples, 0.35%)</title><rect x="98.9119%" y="997" width="0.3539%" height="15" fill="rgb(226,121,9)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="1007.50"></text></g><g><title>exit_mm (40 samples, 0.35%)</title><rect x="98.9119%" y="981" width="0.3539%" height="15" fill="rgb(253,60,29)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="991.50"></text></g><g><title>mmput (40 samples, 0.35%)</title><rect x="98.9119%" y="965" width="0.3539%" height="15" fill="rgb(244,181,39)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="975.50"></text></g><g><title>__mmput (40 samples, 0.35%)</title><rect x="98.9119%" y="949" width="0.3539%" height="15" fill="rgb(252,203,31)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="959.50"></text></g><g><title>exit_mmap (40 samples, 0.35%)</title><rect x="98.9119%" y="933" width="0.3539%" height="15" fill="rgb(224,120,8)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="943.50"></text></g><g><title>unmap_vmas (40 samples, 0.35%)</title><rect x="98.9119%" y="917" width="0.3539%" height="15" fill="rgb(205,171,54)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="927.50"></text></g><g><title>unmap_single_vma (40 samples, 0.35%)</title><rect x="98.9119%" y="901" width="0.3539%" height="15" fill="rgb(235,89,11)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="911.50"></text></g><g><title>unmap_page_range (40 samples, 0.35%)</title><rect x="98.9119%" y="885" width="0.3539%" height="15" fill="rgb(212,180,28)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="895.50"></text></g><g><title>zap_pmd_range.isra.0 (40 samples, 0.35%)</title><rect x="98.9119%" y="869" width="0.3539%" height="15" fill="rgb(247,84,49)" fg:x="11181" fg:w="40"/><text x="99.1619%" y="879.50"></text></g><g><title>zap_pte_range (37 samples, 0.33%)</title><rect x="98.9384%" y="853" width="0.3273%" height="15" fill="rgb(236,187,52)" fg:x="11184" fg:w="37"/><text x="99.1884%" y="863.50"></text></g><g><title>tlb_flush_mmu (23 samples, 0.20%)</title><rect x="99.0623%" y="837" width="0.2035%" height="15" fill="rgb(227,24,15)" fg:x="11198" fg:w="23"/><text x="99.3123%" y="847.50"></text></g><g><title>tlb_batch_pages_flush (23 samples, 0.20%)</title><rect x="99.0623%" y="821" width="0.2035%" height="15" fill="rgb(227,211,13)" fg:x="11198" fg:w="23"/><text x="99.3123%" y="831.50"></text></g><g><title>free_pages_and_swap_cache (23 samples, 0.20%)</title><rect x="99.0623%" y="805" width="0.2035%" height="15" fill="rgb(245,52,14)" fg:x="11198" fg:w="23"/><text x="99.3123%" y="815.50"></text></g><g><title>release_pages (23 samples, 0.20%)</title><rect x="99.0623%" y="789" width="0.2035%" height="15" fill="rgb(225,185,13)" fg:x="11198" fg:w="23"/><text x="99.3123%" y="799.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (8 samples, 0.07%)</title><rect x="99.1950%" y="773" width="0.0708%" height="15" fill="rgb(217,160,29)" fg:x="11213" fg:w="8"/><text x="99.4450%" y="783.50"></text></g><g><title>perf_ctx_enable (47 samples, 0.42%)</title><rect x="99.3542%" y="981" width="0.4158%" height="15" fill="rgb(216,115,53)" fg:x="11231" fg:w="47"/><text x="99.6042%" y="991.50"></text></g><g><title>perf_pmu_nop_void (5 samples, 0.04%)</title><rect x="99.7700%" y="981" width="0.0442%" height="15" fill="rgb(236,99,5)" fg:x="11278" fg:w="5"/><text x="100.0200%" y="991.50"></text></g><g><title>__perf_event_task_sched_in (65 samples, 0.58%)</title><rect x="99.3188%" y="997" width="0.5750%" height="15" fill="rgb(222,60,38)" fg:x="11227" fg:w="65"/><text x="99.5688%" y="1007.50"></text></g><g><title>x86_pmu_enable (9 samples, 0.08%)</title><rect x="99.8142%" y="981" width="0.0796%" height="15" fill="rgb(212,82,22)" fg:x="11283" fg:w="9"/><text x="100.0642%" y="991.50"></text></g><g><title>_raw_spin_unlock (4 samples, 0.04%)</title><rect x="99.9027%" y="997" width="0.0354%" height="15" fill="rgb(214,48,28)" fg:x="11293" fg:w="4"/><text x="100.1527%" y="1007.50"></text></g><g><title>ret_from_fork_asm (77 samples, 0.68%)</title><rect x="99.2657%" y="1061" width="0.6812%" height="15" fill="rgb(245,196,50)" fg:x="11221" fg:w="77"/><text x="99.5157%" y="1071.50"></text></g><g><title>ret_from_fork (77 samples, 0.68%)</title><rect x="99.2657%" y="1045" width="0.6812%" height="15" fill="rgb(225,159,46)" fg:x="11221" fg:w="77"/><text x="99.5157%" y="1055.50"></text></g><g><title>schedule_tail (77 samples, 0.68%)</title><rect x="99.2657%" y="1029" width="0.6812%" height="15" fill="rgb(207,195,48)" fg:x="11221" fg:w="77"/><text x="99.5157%" y="1039.50"></text></g><g><title>finish_task_switch.isra.0 (77 samples, 0.68%)</title><rect x="99.2657%" y="1013" width="0.6812%" height="15" fill="rgb(240,73,3)" fg:x="11221" fg:w="77"/><text x="99.5157%" y="1023.50"></text></g><g><title>block-stm-revm (11,299 samples, 99.96%)</title><rect x="0.0000%" y="1077" width="99.9558%" height="15" fill="rgb(245,57,23)" fg:x="0" fg:w="11299"/><text x="0.2500%" y="1087.50">block-stm-revm</text></g><g><title>all (11,304 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(240,75,18)" fg:x="0" fg:w="11304"/><text x="0.2500%" y="1103.50"></text></g><g><title>perf-exec (5 samples, 0.04%)</title><rect x="99.9558%" y="1077" width="0.0442%" height="15" fill="rgb(238,168,12)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="1087.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.04%)</title><rect x="99.9558%" y="1061" width="0.0442%" height="15" fill="rgb(226,20,40)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="1071.50"></text></g><g><title>do_syscall_64 (5 samples, 0.04%)</title><rect x="99.9558%" y="1045" width="0.0442%" height="15" fill="rgb(224,130,35)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="1055.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.04%)</title><rect x="99.9558%" y="1029" width="0.0442%" height="15" fill="rgb(225,63,41)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="1039.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.04%)</title><rect x="99.9558%" y="1013" width="0.0442%" height="15" fill="rgb(219,3,3)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="1023.50"></text></g><g><title>bprm_execve (5 samples, 0.04%)</title><rect x="99.9558%" y="997" width="0.0442%" height="15" fill="rgb(218,157,4)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="1007.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.04%)</title><rect x="99.9558%" y="981" width="0.0442%" height="15" fill="rgb(232,76,36)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="991.50"></text></g><g><title>exec_binprm (5 samples, 0.04%)</title><rect x="99.9558%" y="965" width="0.0442%" height="15" fill="rgb(247,36,0)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="975.50"></text></g><g><title>search_binary_handler (5 samples, 0.04%)</title><rect x="99.9558%" y="949" width="0.0442%" height="15" fill="rgb(205,2,34)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="959.50"></text></g><g><title>load_elf_binary (5 samples, 0.04%)</title><rect x="99.9558%" y="933" width="0.0442%" height="15" fill="rgb(239,136,13)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="943.50"></text></g><g><title>begin_new_exec (5 samples, 0.04%)</title><rect x="99.9558%" y="917" width="0.0442%" height="15" fill="rgb(253,122,12)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="927.50"></text></g><g><title>perf_event_exec (5 samples, 0.04%)</title><rect x="99.9558%" y="901" width="0.0442%" height="15" fill="rgb(222,174,7)" fg:x="11299" fg:w="5"/><text x="100.2058%" y="911.50"></text></g><g><title>perf_event_enable_on_exec (4 samples, 0.04%)</title><rect x="99.9646%" y="885" width="0.0354%" height="15" fill="rgb(208,191,42)" fg:x="11300" fg:w="4"/><text x="100.2146%" y="895.50"></text></g><g><title>ctx_resched (4 samples, 0.04%)</title><rect x="99.9646%" y="869" width="0.0354%" height="15" fill="rgb(237,212,15)" fg:x="11300" fg:w="4"/><text x="100.2146%" y="879.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.04%)</title><rect x="99.9646%" y="853" width="0.0354%" height="15" fill="rgb(215,65,20)" fg:x="11300" fg:w="4"/><text x="100.2146%" y="863.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.04%)</title><rect x="99.9646%" y="837" width="0.0354%" height="15" fill="rgb(232,103,11)" fg:x="11300" fg:w="4"/><text x="100.2146%" y="847.50"></text></g></svg></svg>